import {
  findWorkspaceDir,
  readPackageJSON,
  require_assert,
  require_browser,
  require_crypto,
  require_node_assert,
  require_node_module,
  require_node_stream,
  require_node_v8,
  require_promises,
  require_util,
  resolvePath
} from "./chunk-RSF2G7PE.js";
import "./chunk-PJNJXVT6.js";
import {
  require_node_fs,
  require_node_os,
  require_node_path,
  require_node_process,
  require_node_url,
  require_node_util
} from "./chunk-WZYW3N3C.js";
import {
  require_os
} from "./chunk-REQGU76V.js";
import {
  require_events
} from "./chunk-CPKK2GIL.js";
import {
  require_fs,
  require_path,
  require_stream
} from "./chunk-LGIGV77H.js";
import "./chunk-BVUV3LTT.js";
import "./chunk-EMW4M4FA.js";
import "./chunk-NBUJF4OI.js";
import "./chunk-3BXIR4RQ.js";
import {
  __commonJS,
  __privateAdd,
  __privateGet,
  __privateSet,
  __toESM
} from "./chunk-MJOZMRNF.js";

// browser-external:node:perf_hooks
var require_node_perf_hooks = __commonJS({
  "browser-external:node:perf_hooks"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:perf_hooks" has been externalized for browser compatibility. Cannot access "node:perf_hooks.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports2, module3) {
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value2 = this.map.get(key);
        if (value2 === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value2);
          return value2;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value2) {
        const deleted = this.delete(key);
        if (!deleted && value2 !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value2);
        }
        return this;
      }
    };
    module3.exports = LRUCache;
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports2, module3) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module3.exports = parseOptions;
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports2, module3) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module3.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports2, module3) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module3.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports2, module3) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports2 = module3.exports = {};
    var re = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var t2 = exports2.t = {};
    var R2 = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value2) => {
      for (const [token, max] of safeRegexReplacements) {
        value2 = value2.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value2;
    };
    var createToken = (name, value2, isGlobal) => {
      const safe = makeSafeRegex(value2);
      const index2 = R2++;
      debug(name, index2, value2);
      t2[name] = index2;
      src[index2] = value2;
      re[index2] = new RegExp(value2, isGlobal ? "g" : void 0);
      safeRe[index2] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports2, module3) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a2, b) => {
      const anum = numeric.test(a2);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a2 = +a2;
        b = +b;
      }
      return a2 === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a2, b) => compareIdentifiers(b, a2);
    module3.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports2, module3) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2 } = require_constants();
    var { safeRe: re, t: t2 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version, options) {
        options = parseOptions(options);
        if (version instanceof _SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m2 = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
        if (!m2) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m2[1];
        this.minor = +m2[2];
        this.patch = +m2[3];
        if (this.major > MAX_SAFE_INTEGER2 || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER2 || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER2 || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m2[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m2[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER2) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m2[5] ? m2[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i2 = 0;
        do {
          const a2 = this.prerelease[i2];
          const b = other.prerelease[i2];
          debug("prerelease compare", i2, a2, b);
          if (a2 === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a2 === void 0) {
            return -1;
          } else if (a2 === b) {
            continue;
          } else {
            return compareIdentifiers(a2, b);
          }
        } while (++i2);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i2 = 0;
        do {
          const a2 = this.build[i2];
          const b = other.build[i2];
          debug("build compare", i2, a2, b);
          if (a2 === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a2 === void 0) {
            return -1;
          } else if (a2 === b) {
            continue;
          } else {
            return compareIdentifiers(a2, b);
          }
        } while (++i2);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i2 = this.prerelease.length;
              while (--i2 >= 0) {
                if (typeof this.prerelease[i2] === "number") {
                  this.prerelease[i2]++;
                  i2 = -2;
                }
              }
              if (i2 === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module3.exports = SemVer;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports2, module3) {
    var SemVer = require_semver();
    var compare = (a2, b, loose) => new SemVer(a2, loose).compare(new SemVer(b, loose));
    module3.exports = compare;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports2, module3) {
    var compare = require_compare();
    var eq2 = (a2, b, loose) => compare(a2, b, loose) === 0;
    module3.exports = eq2;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports2, module3) {
    var compare = require_compare();
    var neq = (a2, b, loose) => compare(a2, b, loose) !== 0;
    module3.exports = neq;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports2, module3) {
    var compare = require_compare();
    var gt = (a2, b, loose) => compare(a2, b, loose) > 0;
    module3.exports = gt;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports2, module3) {
    var compare = require_compare();
    var gte2 = (a2, b, loose) => compare(a2, b, loose) >= 0;
    module3.exports = gte2;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports2, module3) {
    var compare = require_compare();
    var lt = (a2, b, loose) => compare(a2, b, loose) < 0;
    module3.exports = lt;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports2, module3) {
    var compare = require_compare();
    var lte = (a2, b, loose) => compare(a2, b, loose) <= 0;
    module3.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports2, module3) {
    var eq2 = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte2 = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a2, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a2 === "object") {
            a2 = a2.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a2 === b;
        case "!==":
          if (typeof a2 === "object") {
            a2 = a2.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a2 !== b;
        case "":
        case "=":
        case "==":
          return eq2(a2, b, loose);
        case "!=":
          return neq(a2, b, loose);
        case ">":
          return gt(a2, b, loose);
        case ">=":
          return gte2(a2, b, loose);
        case "<":
          return lt(a2, b, loose);
        case "<=":
          return lte(a2, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module3.exports = cmp;
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports2, module3) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
        const m2 = comp.match(r2);
        if (!m2) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m2[1] !== void 0 ? m2[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m2[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m2[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module3.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t: t2 } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports2, module3) {
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c2) => c2.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c2) => !isNullSet(c2[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c2 of this.set) {
              if (c2.length === 1 && isAny(c2[0])) {
                this.set = [c2];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t2.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t2.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t2.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module3.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c2) => c2.value === "<0.0.0-0";
    var isAny = (c2) => c2.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c2) => replaceTilde(c2, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r2 = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
      return comp.replace(r2, (_2, M2, m2, p2, pr) => {
        debug("tilde", comp, _2, M2, m2, p2, pr);
        let ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m2)) {
          ret = `>=${M2}.0.0 <${+M2 + 1}.0.0-0`;
        } else if (isX(p2)) {
          ret = `>=${M2}.${m2}.0 <${M2}.${+m2 + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${+m2 + 1}.0-0`;
        } else {
          ret = `>=${M2}.${m2}.${p2} <${M2}.${+m2 + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c2) => replaceCaret(c2, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r2 = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_2, M2, m2, p2, pr) => {
        debug("caret", comp, _2, M2, m2, p2, pr);
        let ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m2)) {
          ret = `>=${M2}.0.0${z} <${+M2 + 1}.0.0-0`;
        } else if (isX(p2)) {
          if (M2 === "0") {
            ret = `>=${M2}.${m2}.0${z} <${M2}.${+m2 + 1}.0-0`;
          } else {
            ret = `>=${M2}.${m2}.0${z} <${+M2 + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M2 === "0") {
            if (m2 === "0") {
              ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${m2}.${+p2 + 1}-0`;
            } else {
              ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m2}.${p2}-${pr} <${+M2 + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M2 === "0") {
            if (m2 === "0") {
              ret = `>=${M2}.${m2}.${p2}${z} <${M2}.${m2}.${+p2 + 1}-0`;
            } else {
              ret = `>=${M2}.${m2}.${p2}${z} <${M2}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m2}.${p2} <${+M2 + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c2) => replaceXRange(c2, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M2, m2, p2, pr) => {
        debug("xRange", comp, ret, gtlt, M2, m2, p2, pr);
        const xM = isX(M2);
        const xm = xM || isX(m2);
        const xp = xm || isX(p2);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m2 = 0;
          }
          p2 = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M2 = +M2 + 1;
              m2 = 0;
              p2 = 0;
            } else {
              m2 = +m2 + 1;
              p2 = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M2 = +M2 + 1;
            } else {
              m2 = +m2 + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M2}.${m2}.${p2}${pr}`;
        } else if (xm) {
          ret = `>=${M2}.0.0${pr} <${+M2 + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M2}.${m2}.0${pr} <${M2}.${+m2 + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t2.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options) => {
      for (let i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === Comparator.ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            const allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports2, module3) {
    var Range = require_range();
    var satisfies2 = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module3.exports = satisfies2;
  }
});

// browser-external:node:crypto
var require_node_crypto = __commonJS({
  "browser-external:node:crypto"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:crypto" has been externalized for browser compatibility. Cannot access "node:crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:tty
var require_node_tty = __commonJS({
  "browser-external:node:tty"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:tty" has been externalized for browser compatibility. Cannot access "node:tty.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:vm
var require_node_vm = __commonJS({
  "browser-external:node:vm"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:vm" has been externalized for browser compatibility. Cannot access "node:vm.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/jiti/dist/jiti.cjs
var require_jiti = __commonJS({
  "node_modules/jiti/dist/jiti.cjs"(exports2, module3) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module4) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module4.exports = webpackEmptyAsyncContext;
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module4 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId](module4, module4.exports, __webpack_require__), module4.exports;
      }
      __webpack_require__.n = (module4) => {
        var getter = module4 && module4.__esModule ? () => module4.default : () => module4;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports3, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports3, key) && Object.defineProperty(exports3, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        var _a7, _b5, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
        __webpack_require__.d(__webpack_exports__, { default: () => createJiti2 });
        const external_node_os_namespaceObject = require_node_os();
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･]");
        function isInAstralSet(code, set) {
          for (var pos = 65536, i3 = 0; i3 < set.length; i3 += 2) {
            if ((pos += set[i3]) > code) return false;
            if ((pos += set[i3 + 1]) >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : false !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
        }
        var TokenType = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
        function kw(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
        }
        var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i3 = from; i3 < end; i3++) {
            var next = code.charCodeAt(i3);
            if (isNewLine(next)) return i3 < end - 1 && 13 === next && 10 === code.charCodeAt(i3 + 1) ? i3 + 2 : i3 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray2 = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        }, regexpCache = /* @__PURE__ */ Object.create(null);
        function wordsRegexp(words) {
          return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
        }
        function codePointToString(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
          this.line = line, this.column = col;
        };
        Position.prototype.offset = function(n2) {
          return new Position(this.line, this.column + n2);
        };
        var SourceLocation = function(p2, start, end) {
          this.start = start, this.end = end, null !== p2.sourceFile && (this.source = p2.sourceFile);
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset);
            if (nextBreak < 0) return new Position(line, offset - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray2(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray2(options.onComment) && (options.onComment = /* @__PURE__ */ function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        function functionFlags(async, generator) {
          return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
        }
        var Parser = function(options, input, startPos) {
          this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors.inFunction.get = function() {
          return (2 & this.currentVarScope().flags) > 0;
        }, prototypeAccessors.inGenerator.get = function() {
          return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.inAsync.get = function() {
          return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.canAwait.get = function() {
          for (var i3 = this.scopeStack.length - 1; i3 >= 0; i3--) {
            var scope = this.scopeStack[i3];
            if (scope.inClassFieldInit || 256 & scope.flags) return false;
            if (2 & scope.flags) return (4 & scope.flags) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors.allowNewDotTarget.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (258 & flags) > 0 || inClassFieldInit;
        }, prototypeAccessors.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser.extend = function() {
          for (var plugins = [], len = arguments.length; len--; ) plugins[len] = arguments[len];
          for (var cls = this, i3 = 0; i3 < plugins.length; i3++) cls = plugins[i3](cls);
          return cls;
        }, Parser.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp$9 = Parser.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
        pp$9.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5) return false;
          for (; ; ) {
            skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match) return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$9.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$9.isContextual = function(name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc;
        }, pp$9.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$9.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$9.canInsertSemicolon = function() {
          return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$9.insertSemicolon = function() {
          if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$9.semicolon = function() {
          this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$9.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$9.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$9.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$9.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$9.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$8 = Parser.prototype;
        pp$8.parseTopLevel = function(node) {
          var exports3 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$1.eof; ) {
            var stmt = this.parseStatement(null, true, exports3);
            node.body.push(stmt);
          }
          if (this.inModule) for (var i3 = 0, list2 = Object.keys(this.undefinedExports); i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$8.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh) return true;
          if (context) return false;
          if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
          if (isIdentifierStart(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); ) ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) return true;
          }
          return false;
        }, pp$8.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$8.parseStatement = function(context, topLevel, exports3) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
              return this.parseDebuggerStatement(node);
            case types$1._do:
              return this.parseDoStatement(node);
            case types$1._for:
              return this.parseForStatement(node);
            case types$1._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$1._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$1._if:
              return this.parseIfStatement(node);
            case types$1._return:
              return this.parseReturnStatement(node);
            case types$1._switch:
              return this.parseSwitchStatement(node);
            case types$1._throw:
              return this.parseThrowStatement(node);
            case types$1._try:
              return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$1._while:
              return this.parseWhileStatement(node);
            case types$1._with:
              return this.parseWithStatement(node);
            case types$1.braceL:
              return this.parseBlock(true, node);
            case types$1.semi:
              return this.parseEmptyStatement(node);
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports3);
            default:
              if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$1.name && "Identifier" === expr.type && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$8.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i3 = 0; i3 < this.labels.length; ++i3) {
            var lab = this.labels[i3];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
              if (node.label && isBreak) break;
            }
          }
          return i3 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$8.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$8.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$8.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors(), initPos = this.start, init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
          return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1._in && this.unexpected(awaitAt), node.await = true) : isForOf && this.options.ecmaVersion >= 8 && (init.start !== initPos || containsEsc || "Identifier" !== init.type || "async" !== init.name ? this.options.ecmaVersion >= 9 && (node.await = false) : this.unexpected()), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        }, pp$8.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$8.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$8.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$1.braceR; ) if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$8.parseThrowStatement = function(node) {
          return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$1 = [];
        pp$8.parseCatchClauseParam = function() {
          var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
          return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
        }, pp$8.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
            var clause = this.startNode();
            this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
          return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$8.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$8.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$8.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i3 = this.labels.length - 1; i3 >= 0; i3--) {
            var label$1 = this.labels[i3];
            if (label$1.statementStart !== node.start) break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$8.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$8.parseFor = function(node, init) {
          return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$8.parseForIn = function(node, init) {
          var isForIn = this.type === types$1._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma)) break;
          }
          return node;
        }, pp$8.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$8.parseFunctionParams = function(node) {
          this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$8.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$1.braceL); this.type !== types$1.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$8.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$1.semi)) return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || "method" !== kind || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else this.parseClassField(node);
          return node;
        }, pp$8.isClassElementNameStart = function() {
          return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
        }, pp$8.parseClassElementName = function(element) {
          this.type === types$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value2.params.length && this.raiseRecoverable(value2.start, "getter should have no params"), "set" === method.kind && 1 !== value2.params.length && this.raiseRecoverable(value2.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value2.params[0].type && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$8.parseClassField = function(field) {
          if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$8.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$8.parseClassId = function(node, isStatement) {
          this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$8.parseClassSuper = function(node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
        }, pp$8.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$8.exitClassBody = function() {
          var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
          if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i3 = 0; i3 < used.length; ++i3) {
            var id = used[i3];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$8.parseExportAllDeclaration = function(node, exports3) {
          return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports3, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
        }, pp$8.parseExport = function(node, exports3) {
          if (this.next(), this.eat(types$1.star)) return this.parseExportAllDeclaration(node, exports3);
          if (this.eat(types$1._default)) return this.checkExport(exports3, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
          if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports3, node.declaration.declarations) : this.checkExport(exports3, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports3), this.eatContextual("from")) this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
            else {
              for (var i3 = 0, list2 = node.specifiers; i3 < list2.length; i3 += 1) {
                var spec = list2[i3];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$8.parseExportDeclaration = function(node) {
          return this.parseStatement(null);
        }, pp$8.parseExportDefaultDeclaration = function() {
          var isAsync;
          if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
          }
          if (this.type === types$1._class) {
            var cNode = this.startNode();
            return this.parseClass(cNode, "nullableID");
          }
          var declaration = this.parseMaybeAssign();
          return this.semicolon(), declaration;
        }, pp$8.checkExport = function(exports3, name, pos) {
          exports3 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn(exports3, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports3[name] = true);
        }, pp$8.checkPatternExport = function(exports3, pat) {
          var type = pat.type;
          if ("Identifier" === type) this.checkExport(exports3, pat, pat.start);
          else if ("ObjectPattern" === type) for (var i3 = 0, list2 = pat.properties; i3 < list2.length; i3 += 1) {
            var prop = list2[i3];
            this.checkPatternExport(exports3, prop);
          }
          else if ("ArrayPattern" === type) for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports3, elt);
          }
          else "Property" === type ? this.checkPatternExport(exports3, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports3, pat.left) : "RestElement" === type && this.checkPatternExport(exports3, pat.argument);
        }, pp$8.checkVariableExport = function(exports3, decls) {
          if (exports3) for (var i3 = 0, list2 = decls; i3 < list2.length; i3 += 1) {
            var decl = list2[i3];
            this.checkPatternExport(exports3, decl.id);
          }
        }, pp$8.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$8.parseExportSpecifier = function(exports3) {
          var node = this.startNode();
          return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports3, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
        }, pp$8.parseExportSpecifiers = function(exports3) {
          var nodes = [], first = true;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseExportSpecifier(exports3));
          }
          return nodes;
        }, pp$8.parseImport = function(node) {
          return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$8.parseImportSpecifier = function() {
          var node = this.startNode();
          return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
        }, pp$8.parseImportDefaultSpecifier = function() {
          var node = this.startNode();
          return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
        }, pp$8.parseImportNamespaceSpecifier = function() {
          var node = this.startNode();
          return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
        }, pp$8.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma))) return nodes;
          if (this.type === types$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseImportSpecifier());
          }
          return nodes;
        }, pp$8.parseWithClause = function() {
          var nodes = [];
          if (!this.eat(types$1._with)) return nodes;
          this.expect(types$1.braceL);
          for (var attributeKeys = {}, first = true; !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            var attr = this.parseImportAttribute(), keyName = "Identifier" === attr.key.type ? attr.key.name : attr.key.value;
            hasOwn(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = true, nodes.push(attr);
          }
          return nodes;
        }, pp$8.parseImportAttribute = function() {
          var node = this.startNode();
          return node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved), this.expect(types$1.colon), this.type !== types$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
        }, pp$8.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$8.adaptDirectivePrologue = function(statements) {
          for (var i3 = 0; i3 < statements.length && this.isDirectiveCandidate(statements[i3]); ++i3) statements[i3].directive = statements[i3].expression.raw.slice(1, -1);
        }, pp$8.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$7 = Parser.prototype;
        pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
            case "Identifier":
              this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i3 = 0, list2 = node.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
          else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$7.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i3 = 0; i3 < end; i3++) {
            var elt = exprList[i3];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$7.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$7.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$7.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6) switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
          return this.parseIdent();
        }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
          for (var elts = [], first = true; !this.eat(close); ) if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma) elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close)) break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
          return elts;
        }, pp$7.parseAssignableListItem = function(allowModifiers) {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          return this.parseBindingListItem(elem), elem;
        }, pp$7.parseBindingListItem = function(param) {
          return param;
        }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i3 = 0, list2 = expr.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext = function(token, isExpr, preserveSpace, override, generator) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
        }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p2) {
          return p2.tryReadTemplateToken();
        }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
        pp$6.initialContext = function() {
          return [types.b_stat];
        }, pp$6.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$6.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$6.inGeneratorContext = function() {
          for (var i3 = this.context.length - 1; i3 >= 1; i3--) {
            var context = this.context[i3];
            if ("function" === context.token) return context.generator;
          }
          return false;
        }, pp$6.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$6.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else this.exprAllowed = true;
        }, types$1.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
        }, types$1.dollarBraceL.updateContext = function() {
          this.context.push(types.b_tmpl), this.exprAllowed = true;
        }, types$1.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
          this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
        }, types$1.incDec.updateContext = function() {
        }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
        }, types$1.colon.updateContext = function() {
          "function" === this.curContext().token && this.context.pop(), this.exprAllowed = true;
        }, types$1.backQuote.updateContext = function() {
          this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
        }, types$1.star.updateContext = function(prevType) {
          if (prevType === types$1._function) {
            var index2 = this.context.length - 1;
            this.context[index2] === types.f_expr ? this.context[index2] = types.f_expr_gen : this.context[index2] = types.f_gen;
          }
          this.exprAllowed = true;
        }, types$1.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$5 = Parser.prototype;
        function isLocalVariableAccess(node) {
          return "Identifier" === node.type || "ParenthesizedExpression" === node.type && isLocalVariableAccess(node.expression);
        }
        function isPrivateFieldAccess(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression) || "ParenthesizedExpression" === node.type && isPrivateFieldAccess(node.expression);
        }
        pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$1.comma); ) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$1._in) && prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
            coalesce && (prec = types$1.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$1.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$1.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
          return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$5.shouldParseAsyncArrow = function() {
          return !this.canInsertSemicolon() && this.eat(types$1.arrow);
        }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
        }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$1.bracketL);
          if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$1.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
          this.type === types$1.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$1._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$1._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$1.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1._function)) return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$1.regexp:
              var value2 = this.value;
              return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value);
            case types$1._null:
            case types$1._true:
            case types$1._false:
              return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$1.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$1.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$1.braceL:
              return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$1._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$1._class:
              return this.parseClass(this.startNode(), false);
            case types$1._new:
              return this.parseNew();
            case types$1.backQuote:
              return this.parseTemplate();
            case types$1._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
            default:
              return this.parseExprAtomDefault();
          }
        }, pp$5.parseExprAtomDefault = function() {
          this.unexpected();
        }, pp$5.parseExprImport = function(forNew) {
          var node = this.startNode();
          if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1.parenL && !forNew) return this.parseDynamicImport(node);
          if (this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
          }
          this.unexpected();
        }, pp$5.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16) this.eat(types$1.parenR) ? node.options = null : (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1.parenR) || (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) || this.unexpected())));
          else if (!this.eat(types$1.parenR)) {
            var errorPos = this.start;
            this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$5.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$5.parseLiteral = function(value2) {
          var node = this.startNode();
          return node.value = value2, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$5.parseParenExpression = function() {
          this.expect(types$1.parenL);
          var val = this.parseExpression();
          return this.expect(types$1.parenR), val;
        }, pp$5.shouldParseArrow = function(exprList) {
          return !this.canInsertSemicolon();
        }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1.parenR; ) {
              if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$1.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$5.parseParenItem = function(item) {
          return item;
        }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty = [];
        pp$5.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode();
          if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc;
          return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
        }, pp$5.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged, elem = this.startNode();
          return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value.replace(/\r\n?/g, "\n"), cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$5.parseTemplate = function(ref2) {
          void 0 === ref2 && (ref2 = {});
          var isTagged = ref2.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; ) this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$5.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$5.parseGetterSetter = function(prop) {
          prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
          var paramCount = "get" === prop.kind ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
          } else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
        }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          (isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
        }, pp$5.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL)) return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$5.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$5.isSimpleParamList = function(params) {
          for (var i3 = 0, list2 = params; i3 < list2.length; i3 += 1) {
            if ("Identifier" !== list2[i3].type) return false;
          }
          return true;
        }, pp$5.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i3 = 0, list2 = node.params; i3 < list2.length; i3 += 1) {
            var param = list2[i3];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
            var elt = void 0;
            allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$5.checkUnreserved = function(ref2) {
          var start = ref2.start, end = ref2.end, name = ref2.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$5.parseIdent = function(liberal) {
          var node = this.parseIdentNode();
          return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$5.parseIdentNode = function() {
          var node = this.startNode();
          return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
        }, pp$5.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
        }, pp$5.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$5.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
          if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
        };
        var pp$3 = Parser.prototype, Scope = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$3.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        }, pp$3.exitScope = function() {
          this.scopeStack.pop();
        }, pp$3.treatFunctionsAsVarInScope = function(scope) {
          return 2 & scope.flags || !this.inModule && 1 & scope.flags;
        }, pp$3.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else for (var i3 = this.scopeStack.length - 1; i3 >= 0; --i3) {
            var scope$3 = this.scopeStack[i3];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
          }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$3.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$3.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$3.currentVarScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags) return scope;
          }
        }, pp$3.currentThisScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags && !(16 & scope.flags)) return scope;
          }
        };
        var Node = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$2 = Parser.prototype;
        function finishNodeAt(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$2.startNode = function() {
          return new Node(this, this.start, this.startLoc);
        }, pp$2.startNodeAt = function(pos, loc) {
          return new Node(this, pos, loc);
        }, pp$2.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$2.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        }, pp$2.copyNode = function(node) {
          var newNode = new Node(this, node.start, this.startLoc);
          for (var prop in node) newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz" }, data = {};
        function buildUnicodeData(ecmaVersion) {
          var d2 = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
          d2.nonBinary.Script_Extensions = d2.nonBinary.Script, d2.nonBinary.gc = d2.nonBinary.General_Category, d2.nonBinary.sc = d2.nonBinary.Script, d2.nonBinary.scx = d2.nonBinary.Script_Extensions;
        }
        for (var i2 = 0, list = [9, 10, 11, 12, 13, 14]; i2 < list.length; i2 += 1) {
          buildUnicodeData(list[i2]);
        }
        var pp$1 = Parser.prototype, BranchID = function(parent, base) {
          this.parent = parent, this.base = base || this;
        };
        BranchID.prototype.separatedFrom = function(alt) {
          for (var self2 = this; self2; self2 = self2.parent) for (var other = alt; other; other = other.parent) if (self2.base === other.base && self2 !== other) return true;
          return false;
        }, BranchID.prototype.sibling = function() {
          return new BranchID(this.parent, this.base);
        };
        var RegExpValidationState = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = /* @__PURE__ */ Object.create(null), this.backReferenceNames = [], this.branchID = null;
        };
        function isRegularExpressionModifier(ch) {
          return 105 === ch || 109 === ch || 115 === ch;
        }
        function isSyntaxCharacter(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        RegExpValidationState.prototype.reset = function(start, pattern, flags) {
          var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
        }, RegExpValidationState.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState.prototype.at = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s2 = this.source, l3 = s2.length;
          if (i3 >= l3) return -1;
          var c2 = s2.charCodeAt(i3);
          if (!forceU && !this.switchU || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l3) return c2;
          var next = s2.charCodeAt(i3 + 1);
          return next >= 56320 && next <= 57343 ? (c2 << 10) + next - 56613888 : c2;
        }, RegExpValidationState.prototype.nextIndex = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s2 = this.source, l3 = s2.length;
          if (i3 >= l3) return l3;
          var next, c2 = s2.charCodeAt(i3);
          return !forceU && !this.switchU || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l3 || (next = s2.charCodeAt(i3 + 1)) < 56320 || next > 57343 ? i3 + 1 : i3 + 2;
        }, RegExpValidationState.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
          void 0 === forceU && (forceU = false);
          for (var pos = this.pos, i3 = 0, list2 = chs; i3 < list2.length; i3 += 1) {
            var ch = list2[i3], current = this.at(pos, forceU);
            if (-1 === current || current !== ch) return false;
            pos = this.nextIndex(pos, forceU);
          }
          return this.pos = pos, true;
        }, pp$1.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, u2 = false, v2 = false, i3 = 0; i3 < flags.length; i3++) {
            var flag = flags.charAt(i3);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i3 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u2 = true), "v" === flag && (v2 = true);
          }
          this.options.ecmaVersion >= 15 && u2 && v2 && this.raise(state.start, "Invalid regular expression flag");
        }, pp$1.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
            for (var _3 in obj) return true;
            return false;
          }(state.groupNames) && (state.switchN = true, this.regexp_pattern(state));
        }, pp$1.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = /* @__PURE__ */ Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i3 = 0, list2 = state.backReferenceNames; i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            state.groupNames[name] || state.raise("Invalid named capture referenced");
          }
        }, pp$1.regexp_disjunction = function(state) {
          var trackDisjunction = this.options.ecmaVersion >= 16;
          for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state); state.eat(124); ) trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
          trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$1.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); ) ;
        }, pp$1.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$1.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36)) return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$1.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63)) {
              if (this.options.ecmaVersion >= 16) {
                var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
                if (addModifiers || hasHyphen) {
                  for (var i3 = 0; i3 < addModifiers.length; i3++) {
                    var modifier = addModifiers.charAt(i3);
                    addModifiers.indexOf(modifier, i3 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
                  }
                  if (hasHyphen) {
                    var removeModifiers = this.regexp_eatModifiers(state);
                    addModifiers || removeModifiers || 58 !== state.current() || state.raise("Invalid regular expression modifiers");
                    for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {
                      var modifier$1 = removeModifiers.charAt(i$1);
                      (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
                    }
                  }
                }
              }
              if (state.eat(58)) {
                if (this.regexp_disjunction(state), state.eat(41)) return true;
                state.raise("Unterminated group");
              }
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$1.regexp_eatModifiers = function(state) {
          for (var modifiers = "", ch = 0; -1 !== (ch = state.current()) && isRegularExpressionModifier(ch); ) modifiers += codePointToString(ch), state.advance();
          return modifiers;
        }, pp$1.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$1.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch); ) state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$1.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            this.regexp_eatGroupName(state) || state.raise("Invalid group");
            var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
            if (known) if (trackDisjunction) for (var i3 = 0, list2 = known; i3 < list2.length; i3 += 1) {
              list2[i3].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
            }
            else state.raise("Duplicate capture group name");
            trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = true;
          }
        }, pp$1.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); ) state.lastStringValue += codePointToString(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$1.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n2 = state.lastIntValue;
            if (state.switchU) return n2 > state.maxBackReference && (state.maxBackReference = n2), true;
            if (n2 <= state.numCapturingParens) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$1.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$1.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$1.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$1.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111)) return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatIdentityEscape = function(state) {
          if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$1.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (/* @__PURE__ */ function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch)) return state.lastIntValue = -1, state.advance(), 1;
          var negate = false;
          if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
            var result;
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
            state.raise("Invalid property name");
          }
          return 0;
        }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value2 = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          }
          return 0;
        }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
          hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
        }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
        }, pp$1.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$1.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), true;
          }
          return false;
        }, pp$1.regexp_classContents = function(state) {
          return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
        }, pp$1.regexp_nonEmptyClassRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$1.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98)) return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45)) return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$1.regexp_classSetExpression = function(state) {
          var subResult, result = 1;
          if (this.regexp_eatClassSetRange(state)) ;
          else if (subResult = this.regexp_eatClassSetOperand(state)) {
            2 === subResult && (result = 2);
            for (var start = state.pos; state.eatChars([38, 38]); ) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
            for (; state.eatChars([45, 45]); ) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
          } else state.raise("Invalid character in character class");
          for (; ; ) if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
            2 === subResult && (result = 2);
          }
        }, pp$1.regexp_eatClassSetRange = function(state) {
          var start = state.pos;
          if (this.regexp_eatClassSetCharacter(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
              var right = state.lastIntValue;
              return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), true;
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatClassSetOperand = function(state) {
          return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
        }, pp$1.regexp_eatNestedClass = function(state) {
          var start = state.pos;
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
            state.pos = start;
          }
          if (state.eat(92)) {
            var result$1 = this.regexp_eatCharacterClassEscape(state);
            if (result$1) return result$1;
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_eatClassStringDisjunction = function(state) {
          var start = state.pos;
          if (state.eatChars([92, 113])) {
            if (state.eat(123)) {
              var result = this.regexp_classStringDisjunctionContents(state);
              if (state.eat(125)) return result;
            } else state.raise("Invalid escape");
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_classStringDisjunctionContents = function(state) {
          for (var result = this.regexp_classString(state); state.eat(124); ) 2 === this.regexp_classString(state) && (result = 2);
          return result;
        }, pp$1.regexp_classString = function(state) {
          for (var count = 0; this.regexp_eatClassSetCharacter(state); ) count++;
          return 1 === count ? 1 : 2;
        }, pp$1.regexp_eatClassSetCharacter = function(state) {
          var start = state.pos;
          if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
          var ch = state.current();
          return !(ch < 0 || ch === state.lookahead() && function(ch2) {
            return 33 === ch2 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || 46 === ch2 || ch2 >= 58 && ch2 <= 64 || 94 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch)) && (!function(ch2) {
            return 40 === ch2 || 41 === ch2 || 45 === ch2 || 47 === ch2 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
          }(ch) && (state.advance(), state.lastIntValue = ch, true));
        }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
          var ch = state.current();
          return !!function(ch2) {
            return 33 === ch2 || 35 === ch2 || 37 === ch2 || 38 === ch2 || 44 === ch2 || 45 === ch2 || ch2 >= 58 && ch2 <= 62 || 64 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit(ch = state.current()); ) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit(ch = state.current()); ) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$1.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i3 = 0; i3 < length; ++i3) {
            var ch = state.current();
            if (!isHexDigit(ch)) return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          }
          return true;
        };
        var Token = function(p2) {
          this.type = p2.type, this.value = p2.value, this.start = p2.start, this.end = p2.end, p2.options.locations && (this.loc = new SourceLocation(p2, p2.startLoc, p2.endLoc)), p2.options.ranges && (this.range = [p2.start, p2.end]);
        }, pp = Parser.prototype;
        function stringToBigInt(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp.getToken = function() {
          return this.next(), new Token(this);
        }, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$1.eof, value: token };
          } };
        }), pp.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp.readToken = function(code) {
          return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320) return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch); ) ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp.skipSpace = function() {
          loop: for (; this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
                ++this.pos;
            }
          }
        }, pp.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57) return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
        }, pp.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
        }, pp.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1.star : types$1.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(124 === code ? types$1.logicalOR : types$1.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(124 === code ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
        }, pp.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
        }, pp.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
        }, pp.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(61 === code ? types$1.eq : types$1.prefix, 1);
        }, pp.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57) return this.finishOp(types$1.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
              }
              return this.finishOp(types$1.coalesce, 2);
            }
          }
          return this.finishOp(types$1.question, 1);
        }, pp.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || 92 === code)) return this.finishToken(types$1.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$1.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$1.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$1.semi);
            case 44:
              return ++this.pos, this.finishToken(types$1.comma);
            case 91:
              return ++this.pos, this.finishToken(types$1.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$1.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$1.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$1.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$1.colon);
            case 96:
              if (this.options.ecmaVersion < 6) break;
              return ++this.pos, this.finishToken(types$1.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next) return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next) return this.readRadixNumber(8);
                if (98 === next || 66 === next) return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$1.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = false;
            else {
              if ("[" === ch) inClass = true;
              else if ("]" === ch && inClass) inClass = false;
              else if ("/" === ch && !inClass) break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value2 = null;
          try {
            value2 = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
        }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i3 = 0, e = null == len ? 1 / 0 : len; i3 < e; ++i3, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i3 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix) break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
        }, pp.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$1.num, val);
        }, pp.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else code = this.readHexChar(4);
          return code;
        }, pp.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
          this.raise(position, message);
        }, pp.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
            if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else ++this.pos;
          }
        }, pp.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if ("{" !== this.input[this.pos + 1]) break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              "\n" === this.input[this.pos + 1] && ++this.pos;
            case "\n":
            case "\u2028":
            case "\u2029":
              ++this.curLine, this.lineStart = this.pos + 1;
          }
          this.raise(this.start, "Unterminated template");
        }, pp.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
          }
        }, pp.readHexChar = function(len) {
          var codePos = this.pos, n2 = this.readInt(16, len);
          return null === n2 && this.invalidStringToken(codePos, "Bad character escape sequence"), n2;
        }, pp.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch) break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp.readWord = function() {
          var word = this.readWord1(), type = types$1.name;
          return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
        };
        Parser.acorn = { Parser, version: "8.14.0", defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
        const external_node_module_namespaceObject = require_node_module(), external_node_fs_namespaceObject = require_node_fs();
        Math.floor, String.fromCharCode;
        const TRAILING_SLASH_RE = /\/$|\/\?|\/#/, JOIN_LEADING_SLASH_RE = /^\.?\//;
        function hasTrailingSlash(input = "", respectQueryAndFragment) {
          return respectQueryAndFragment ? TRAILING_SLASH_RE.test(input) : input.endsWith("/");
        }
        function withTrailingSlash2(input = "", respectQueryAndFragment) {
          if (!respectQueryAndFragment) return input.endsWith("/") ? input : input + "/";
          if (hasTrailingSlash(input, true)) return input || "/";
          let path2 = input, fragment = "";
          const fragmentIndex = input.indexOf("#");
          if (fragmentIndex >= 0 && (path2 = input.slice(0, fragmentIndex), fragment = input.slice(fragmentIndex), !path2)) return fragment;
          const [s0, ...s2] = path2.split("?");
          return s0 + "/" + (s2.length > 0 ? `?${s2.join("?")}` : "") + fragment;
        }
        function isNonEmptyURL(url) {
          return url && "/" !== url;
        }
        function dist_joinURL(base, ...input) {
          let url = base || "";
          for (const segment of input.filter((url2) => isNonEmptyURL(url2))) if (url) {
            const _segment = segment.replace(JOIN_LEADING_SLASH_RE, "");
            url = withTrailingSlash2(url) + _segment;
          } else url = segment;
          return url;
        }
        Symbol.for("ufo:protocolRelative");
        Object.defineProperty;
        const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
        function normalizeWindowsPath(input = "") {
          return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r2) => r2.toUpperCase()) : input;
        }
        const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, pathe_ff20891b_normalize = function(path2) {
          if (0 === path2.length) return ".";
          const isUNCPath = (path2 = normalizeWindowsPath(path2)).match(_UNC_REGEX), isPathAbsolute = isAbsolute2(path2), trailingSeparator = "/" === path2[path2.length - 1];
          return 0 === (path2 = normalizeString(path2, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path2 += "/"), _DRIVE_LETTER_RE.test(path2) && (path2 += "/"), isUNCPath ? isPathAbsolute ? `//${path2}` : `//./${path2}` : isPathAbsolute && !isAbsolute2(path2) ? `/${path2}` : path2);
        }, join4 = function(...arguments_) {
          if (0 === arguments_.length) return ".";
          let joined;
          for (const argument of arguments_) argument && argument.length > 0 && (void 0 === joined ? joined = argument : joined += `/${argument}`);
          return void 0 === joined ? "." : pathe_ff20891b_normalize(joined.replace(/\/\/+/g, "/"));
        };
        const resolve7 = function(...arguments_) {
          let resolvedPath = "", resolvedAbsolute = false;
          for (let index2 = (arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument))).length - 1; index2 >= -1 && !resolvedAbsolute; index2--) {
            const path2 = index2 >= 0 ? arguments_[index2] : "undefined" != typeof process && "function" == typeof process.cwd ? process.cwd().replace(/\\/g, "/") : "/";
            path2 && 0 !== path2.length && (resolvedPath = `${path2}/${resolvedPath}`, resolvedAbsolute = isAbsolute2(path2));
          }
          return resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute), resolvedAbsolute && !isAbsolute2(resolvedPath) ? `/${resolvedPath}` : resolvedPath.length > 0 ? resolvedPath : ".";
        };
        function normalizeString(path2, allowAboveRoot) {
          let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
          for (let index2 = 0; index2 <= path2.length; ++index2) {
            if (index2 < path2.length) char = path2[index2];
            else {
              if ("/" === char) break;
              char = "/";
            }
            if ("/" === char) {
              if (lastSlash === index2 - 1 || 1 === dots) ;
              else if (2 === dots) {
                if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
                  if (res.length > 2) {
                    const lastSlashIndex = res.lastIndexOf("/");
                    -1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index2, dots = 0;
                    continue;
                  }
                  if (res.length > 0) {
                    res = "", lastSegmentLength = 0, lastSlash = index2, dots = 0;
                    continue;
                  }
                }
                allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
              } else res.length > 0 ? res += `/${path2.slice(lastSlash + 1, index2)}` : res = path2.slice(lastSlash + 1, index2), lastSegmentLength = index2 - lastSlash - 1;
              lastSlash = index2, dots = 0;
            } else "." === char && -1 !== dots ? ++dots : dots = -1;
          }
          return res;
        }
        const isAbsolute2 = function(p2) {
          return _IS_ABSOLUTE_RE.test(p2);
        }, _EXTNAME_RE = /.(\.[^./]+)$/, extname2 = function(p2) {
          const match = _EXTNAME_RE.exec(normalizeWindowsPath(p2));
          return match && match[1] || "";
        }, pathe_ff20891b_dirname = function(p2) {
          const segments = normalizeWindowsPath(p2).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute2(p2) ? "/" : ".");
        }, basename4 = function(p2, extension) {
          const lastSegment = normalizeWindowsPath(p2).split("/").pop();
          return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
        }, external_node_url_namespaceObject = require_node_url(), external_node_assert_namespaceObject = require_node_assert(), external_node_process_namespaceObject = require_node_process(), external_node_path_namespaceObject = require_node_path(), external_node_v8_namespaceObject = require_node_v8(), external_node_util_namespaceObject = require_node_util(), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
        function normalizeSlash(path2) {
          return path2.replace(/\\/g, "/");
        }
        const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, constructor) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...parameters) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, parameters2, self2) {
                const message2 = messages.get(key2);
                if (external_node_assert_namespaceObject(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return external_node_assert_namespaceObject(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, parameters2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return external_node_assert_namespaceObject(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), 0 === parameters2.length ? message2 : (parameters2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, parameters2));
              }(key, parameters, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(constructor, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return false;
          } catch {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types2 = [], instances = [], other = [];
          for (const value2 of expected) external_node_assert_namespaceObject("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (external_node_assert_namespaceObject("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types2.indexOf("object");
            -1 !== pos && (types2.slice(pos, 1), instances.push("Object"));
          }
          return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
            let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path2, base, message) => `Invalid package config ${path2}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = void 0) => {
          const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_node_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path2, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path2}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path2) => `Unknown file extension "${extension}" for ${path2}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError);
        const captureLargerStackTrace = function(wrappedFunction) {
          const hidden = "__node_internal_" + wrappedFunction.name;
          return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const hasOwnProperty$12 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = /* @__PURE__ */ new Map();
        function read2(jsonPath, { base, specifier }) {
          const existing = cache.get(jsonPath);
          if (existing) return existing;
          let string;
          try {
            string = external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(jsonPath), "utf8");
          } catch (error) {
            const exception = error;
            if ("ENOENT" !== exception.code) throw exception;
          }
          const result = { exists: false, pjsonPath: jsonPath, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          if (void 0 !== string) {
            let parsed;
            try {
              parsed = JSON.parse(string);
            } catch (error_) {
              const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), cause.message);
              throw error.cause = cause, error;
            }
            result.exists = true, hasOwnProperty$12.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$12.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$12.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$12.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$12.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
          }
          return cache.set(jsonPath, result), result;
        }
        function getPackageScopeConfig(resolved) {
          let packageJSONUrl = new URL("package.json", resolved);
          for (; ; ) {
            if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig = read2((0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), { specifier: resolved });
            if (packageConfig.exists) return packageConfig;
            const lastPackageJSONUrl = packageJSONUrl;
            if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
          }
          return { pjsonPath: (0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
        }
        function getPackageType(url) {
          return getPackageScopeConfig(url).type;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url, _context, ignoreErrors) {
          const value2 = function(url2) {
            const pathname = url2.pathname;
            let index2 = pathname.length;
            for (; index2--; ) {
              const code = pathname.codePointAt(index2);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index2 - 1) ? "" : pathname.slice(index2);
            }
            return "";
          }(url);
          if (".js" === value2) {
            const packageType = getPackageType(url);
            return "none" !== packageType ? packageType : "commonjs";
          }
          if ("" === value2) {
            const packageType = getPackageType(url);
            return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
          }
          const format = extensionFormatMap[value2];
          if (format) return format;
          if (ignoreErrors) return;
          const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url);
          throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal2, base, isTarget) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal2 ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const format = function(url2, context) {
            const protocol = url2.protocol;
            return dist_hasOwnProperty.call(protocolHandlers, protocol) && protocolHandlers[protocol](url2, context, true) || null;
          }(url, { parentURL: base.href });
          if ("module" !== format) return;
          const urlPath = (0, external_node_url_namespaceObject.fileURLToPath)(url.href), packagePath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
          main ? external_node_path_namespaceObject.resolve(packagePath, main) !== urlPath && external_node_process_namespaceObject.emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path2) {
          try {
            return (0, external_node_fs_namespaceObject.statSync)(path2);
          } catch {
          }
        }
        function fileExists(url) {
          const stats = (0, external_node_fs_namespaceObject.statSync)(url, { throwIfNoEntry: false }), isFile2 = stats ? stats.isFile() : void 0;
          return null != isFile2 && isFile2;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i4 = -1;
            for (; ++i4 < tries2.length && (guess = new external_node_url_namespaceObject.URL(tries2[i4], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i3 = -1;
          for (; ++i3 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i3], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal2, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal2, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal2, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          if (!target.startsWith("./")) {
            if (internal2 && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new external_node_url_namespaceObject.URL(target), isURL = true;
              } catch {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal2, base, true);
            }
          }
          const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal2, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal3, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal3 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal2, base);
          }
          return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal2, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i3 = -1;
            for (; ++i3 < targetList.length; ) {
              const targetItem = targetList[i3];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys2 = Object.getOwnPropertyNames(target);
            let i3 = -1;
            for (; ++i3 < keys2.length; ) {
              if (isArrayIndex(keys2[i3])) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i3 = -1; ++i3 < keys2.length; ) {
              const key = keys2[i3];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal2, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports3 = packageConfig.exports;
          if (function(exports4, packageJsonUrl2, base2) {
            if ("string" == typeof exports4 || Array.isArray(exports4)) return true;
            if ("object" != typeof exports4 || null === exports4) return false;
            const keys3 = Object.getOwnPropertyNames(exports4);
            let isConditionalSugar = false, i4 = 0, keyIndex = -1;
            for (; ++keyIndex < keys3.length; ) {
              const key = keys3[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i4++) isConditionalSugar = currentIsConditionalSugar;
              else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own.call(exports3, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys2 = Object.getOwnPropertyNames(exports3);
          let i3 = -1;
          for (; ++i3 < keys2.length; ) {
            const key = keys2[i3], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a3, b) {
          const aPatternIndex = a3.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a3.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a3.length > b.length ? -1 : b.length > a3.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys2 = Object.getOwnPropertyNames(imports);
              let i3 = -1;
              for (; ++i3 < keys2.length; ) {
                const key = keys2[i3], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl2)), (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (external_node_module_namespaceObject.builtinModules.includes(specifier)) return new external_node_url_namespaceObject.URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
          do {
            const stat = tryStatSync(packageJsonPath.slice(0, -13));
            if (!stat || !stat.isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = read2(packageJsonPath, { base, specifier });
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base), false);
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1]) return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2])) return true;
              }
              return false;
            }(specifier2));
          }(specifier)) try {
            resolved = new external_node_url_namespaceObject.URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
          else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
          else try {
            resolved = new external_node_url_namespaceObject.URL(specifier);
          } catch (error_) {
            if (isRemote && !external_node_module_namespaceObject.builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
          return external_node_assert_namespaceObject(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSeparatorRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            let filePath;
            try {
              filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved2);
            } catch (error) {
              const cause = error;
              throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
            }
            const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats && stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats || !stats.isFile()) {
              const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2), true);
              throw error.url = String(resolved2), error;
            }
            if (!preserveSymlinks2) {
              const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash: hash2 } = resolved2;
              (resolved2 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved2.hash = hash2;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
        function fileURLToPath4(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
        }
        function pathToFileURL2(id) {
          return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath4(id)).toString();
        }
        const DEFAULT_CONDITIONS_SET = /* @__PURE__ */ new Set(["node", "import"]), DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
        function _tryModuleResolve(id, url, conditions) {
          try {
            return moduleResolve(id, url, conditions);
          } catch (error) {
            if (!NOT_FOUND_ERRORS.has(error == null ? void 0 : error.code)) throw error;
          }
        }
        function _resolve(id, options = {}) {
          if ("string" != typeof id) {
            if (!(id instanceof URL)) throw new TypeError("input must be a `string` or `URL`");
            id = fileURLToPath4(id);
          }
          if (/(node|data|http|https):/.test(id)) return id;
          if (BUILTIN_MODULES.has(id)) return "node:" + id;
          if (id.startsWith("file://") && (id = fileURLToPath4(id)), isAbsolute2(id)) try {
            if ((0, external_node_fs_namespaceObject.statSync)(id).isFile()) return pathToFileURL2(id);
          } catch (error) {
            if ("ENOENT" !== (error == null ? void 0 : error.code)) throw error;
          }
          const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((url) => new URL(function(id2) {
            return "string" != typeof id2 && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash(id2));
          }(url.toString())));
          0 === _urls.length && _urls.push(new URL(pathToFileURL2(process.cwd())));
          const urls = [..._urls];
          for (const url of _urls) "file:" === url.protocol && urls.push(new URL("./", url), new URL(dist_joinURL(url.pathname, "_index.js"), url), new URL("node_modules", url));
          let resolved;
          for (const url of urls) {
            if (resolved = _tryModuleResolve(id, url, conditionsSet), resolved) break;
            for (const prefix of ["", "/index"]) {
              for (const extension of options.extensions || DEFAULT_EXTENSIONS) if (resolved = _tryModuleResolve(dist_joinURL(id, prefix) + extension, url, conditionsSet), resolved) break;
              if (resolved) break;
            }
            if (resolved) break;
          }
          if (!resolved) {
            const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
            throw error.code = "ERR_MODULE_NOT_FOUND", error;
          }
          return pathToFileURL2(resolved);
        }
        function resolveSync(id, options) {
          return _resolve(id, options);
        }
        function resolvePathSync2(id, options) {
          return fileURLToPath4(resolveSync(id, options));
        }
        const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m, COMMENT_RE = /\/\*.+?\*\/|\/\/.*(?=[nr])/g;
        function hasESMSyntax(code, opts = {}) {
          return opts.stripComments && (code = code.replace(COMMENT_RE, "")), ESM_RE.test(code);
        }
        function escapeStringRegexp(string) {
          if ("string" != typeof string) throw new TypeError("Expected a string");
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        const pathSeparators = /* @__PURE__ */ new Set(["/", "\\", void 0]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
        function normalizeAliases(_aliases) {
          if (_aliases[normalizedAliasSymbol]) return _aliases;
          const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a3], [b]) => function(a4, b2) {
            return b2.split("/").length - a4.split("/").length;
          }(a3, b)));
          for (const key in aliases) for (const alias in aliases) alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.has(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
          return Object.defineProperty(aliases, normalizedAliasSymbol, { value: true, enumerable: false }), aliases;
        }
        const FILENAME_RE = /(^|[/\\])([^/\\]+?)(?=(\.[^.]+)?$)/;
        function utils_hasTrailingSlash(path2 = "/") {
          const lastChar = path2[path2.length - 1];
          return "/" === lastChar || "\\" === lastChar;
        }
        const package_namespaceObject = { rE: "2.4.2" }, external_node_crypto_namespaceObject = require_node_crypto(), dist_r = /* @__PURE__ */ Object.create(null), dist_i = (e) => {
          var _a8, _b6;
          return ((_a8 = globalThis.process) == null ? void 0 : _a8.env) || ((_b6 = globalThis.Deno) == null ? void 0 : _b6.env.toObject()) || globalThis.__env__ || (e ? dist_r : globalThis);
        }, dist_s = new Proxy(dist_r, { get: (e, o) => dist_i()[o] ?? dist_r[o], has: (e, o) => o in dist_i() || o in dist_r, set: (e, o, E) => (dist_i(true)[o] = E, true), deleteProperty(e, o) {
          if (!o) return false;
          return delete dist_i(true)[o], true;
        }, ownKeys() {
          const e = dist_i(true);
          return Object.keys(e);
        } }), dist_t = typeof process < "u" && process.env && "development" || "", B2 = [["APPVEYOR"], ["AWS_AMPLIFY", "AWS_APP_ID", { ci: true }], ["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"], ["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"], ["APPCIRCLE", "AC_APPCIRCLE"], ["BAMBOO", "bamboo_planKey"], ["BITBUCKET", "BITBUCKET_COMMIT"], ["BITRISE", "BITRISE_IO"], ["BUDDY", "BUDDY_WORKSPACE_ID"], ["BUILDKITE"], ["CIRCLE", "CIRCLECI"], ["CIRRUS", "CIRRUS_CI"], ["CLOUDFLARE_PAGES", "CF_PAGES", { ci: true }], ["CODEBUILD", "CODEBUILD_BUILD_ARN"], ["CODEFRESH", "CF_BUILD_ID"], ["DRONE"], ["DRONE", "DRONE_BUILD_EVENT"], ["DSARI"], ["GITHUB_ACTIONS"], ["GITLAB", "GITLAB_CI"], ["GITLAB", "CI_MERGE_REQUEST_ID"], ["GOCD", "GO_PIPELINE_LABEL"], ["LAYERCI"], ["HUDSON", "HUDSON_URL"], ["JENKINS", "JENKINS_URL"], ["MAGNUM"], ["NETLIFY"], ["NETLIFY", "NETLIFY_LOCAL", { ci: false }], ["NEVERCODE"], ["RENDER"], ["SAIL", "SAILCI"], ["SEMAPHORE"], ["SCREWDRIVER"], ["SHIPPABLE"], ["SOLANO", "TDDIUM"], ["STRIDER"], ["TEAMCITY", "TEAMCITY_VERSION"], ["TRAVIS"], ["VERCEL", "NOW_BUILDER"], ["VERCEL", "VERCEL", { ci: false }], ["VERCEL", "VERCEL_ENV", { ci: false }], ["APPCENTER", "APPCENTER_BUILD_ID"], ["CODESANDBOX", "CODESANDBOX_SSE", { ci: false }], ["STACKBLITZ"], ["STORMKIT"], ["CLEAVR"], ["ZEABUR"], ["CODESPHERE", "CODESPHERE_APP_ID", { ci: true }], ["RAILWAY", "RAILWAY_PROJECT_ID"], ["RAILWAY", "RAILWAY_SERVICE_ID"], ["DENO-DEPLOY", "DENO_DEPLOYMENT_ID"], ["FIREBASE_APP_HOSTING", "FIREBASE_APP_HOSTING", { ci: true }]];
        const l2 = function() {
          var _a8, _b6, _c2, _d2, _e2, _f2;
          if ((_a8 = globalThis.process) == null ? void 0 : _a8.env) for (const e of B2) {
            const o = e[1] || e[0];
            if ((_b6 = globalThis.process) == null ? void 0 : _b6.env[o]) return { name: e[0].toLowerCase(), ...e[2] };
          }
          return "/bin/jsh" === ((_d2 = (_c2 = globalThis.process) == null ? void 0 : _c2.env) == null ? void 0 : _d2.SHELL) && ((_f2 = (_e2 = globalThis.process) == null ? void 0 : _e2.versions) == null ? void 0 : _f2.webcontainer) ? { name: "stackblitz", ci: false } : { name: "", ci: false };
        }();
        l2.name;
        function dist_n(e) {
          return !!e && "false" !== e;
        }
        const I2 = ((_a7 = globalThis.process) == null ? void 0 : _a7.platform) || "", T2 = dist_n(dist_s.CI) || false !== l2.ci, R2 = dist_n(((_b5 = globalThis.process) == null ? void 0 : _b5.stdout) && ((_c = globalThis.process) == null ? void 0 : _c.stdout.isTTY)), A2 = (dist_n(dist_s.DEBUG), "test" === dist_t || dist_n(dist_s.TEST)), _2 = (dist_n(dist_s.MINIMAL), /^win/i.test(I2)), C2 = (/^linux/i.test(I2), /^darwin/i.test(I2), !dist_n(dist_s.NO_COLOR) && (dist_n(dist_s.FORCE_COLOR) || (R2 || _2) && dist_s.TERM), (((_e = (_d = globalThis.process) == null ? void 0 : _d.versions) == null ? void 0 : _e.node) || "").replace(/^v/, "") || null), y2 = (Number(C2 == null ? void 0 : C2.split(".")[0]), globalThis.process || /* @__PURE__ */ Object.create(null)), dist_c = { versions: {} }, L2 = (new Proxy(y2, { get: (e, o) => "env" === o ? dist_s : o in e ? e[o] : o in dist_c ? dist_c[o] : void 0 }), "node" === ((_g = (_f = globalThis.process) == null ? void 0 : _f.release) == null ? void 0 : _g.name)), a2 = !!globalThis.Bun || !!((_i = (_h = globalThis.process) == null ? void 0 : _h.versions) == null ? void 0 : _i.bun), D2 = !!globalThis.Deno, O2 = !!globalThis.fastly, F2 = [[!!globalThis.Netlify, "netlify"], [!!globalThis.EdgeRuntime, "edge-light"], ["Cloudflare-Workers" === ((_j = globalThis.navigator) == null ? void 0 : _j.userAgent), "workerd"], [O2, "fastly"], [D2, "deno"], [a2, "bun"], [L2, "node"]];
        !function() {
          const e = F2.find((o) => o[0]);
          if (e) e[1];
        }();
        const external_node_tty_namespaceObject = require_node_tty(), hasColors = ((_m = (_l = (_k = external_node_tty_namespaceObject == null ? void 0 : external_node_tty_namespaceObject.WriteStream) == null ? void 0 : _k.prototype) == null ? void 0 : _l.hasColors) == null ? void 0 : _m.call(_l)) ?? false, base_format = (open, close) => {
          if (!hasColors) return (input) => input;
          const openCode = `\x1B[${open}m`, closeCode = `\x1B[${close}m`;
          return (input) => {
            const string = input + "";
            let index2 = string.indexOf(closeCode);
            if (-1 === index2) return openCode + string + closeCode;
            let result = openCode, lastIndex = 0;
            for (; -1 !== index2; ) result += string.slice(lastIndex, index2) + openCode, lastIndex = index2 + closeCode.length, index2 = string.indexOf(closeCode, lastIndex);
            return result += string.slice(lastIndex) + closeCode, result;
          };
        }, red = (base_format(0, 0), base_format(1, 22), base_format(2, 22), base_format(3, 23), base_format(4, 24), base_format(53, 55), base_format(7, 27), base_format(8, 28), base_format(9, 29), base_format(30, 39), base_format(31, 39)), green = base_format(32, 39), yellow = base_format(33, 39), blue = base_format(34, 39), cyan = (base_format(35, 39), base_format(36, 39)), gray = (base_format(37, 39), base_format(90, 39));
        base_format(40, 49), base_format(41, 49), base_format(42, 49), base_format(43, 49), base_format(44, 49), base_format(45, 49), base_format(46, 49), base_format(47, 49), base_format(100, 49), base_format(91, 39), base_format(92, 39), base_format(93, 39), base_format(94, 39), base_format(95, 39), base_format(96, 39), base_format(97, 39), base_format(101, 49), base_format(102, 49), base_format(103, 49), base_format(104, 49), base_format(105, 49), base_format(106, 49), base_format(107, 49);
        function isDir(filename) {
          if ("string" != typeof filename || filename.startsWith("file://")) return false;
          try {
            return (0, external_node_fs_namespaceObject.lstatSync)(filename).isDirectory();
          } catch {
            return false;
          }
        }
        function md5(content, len = 8) {
          return (0, external_node_crypto_namespaceObject.createHash)("md5").update(content).digest("hex").slice(0, len);
        }
        const debugMap = { true: green("true"), false: yellow("false"), "[esm]": blue("[esm]"), "[cjs]": green("[cjs]"), "[import]": blue("[import]"), "[require]": green("[require]"), "[native]": cyan("[native]"), "[transpile]": yellow("[transpile]"), "[fallback]": red("[fallback]"), "[unknown]": red("[unknown]"), "[hit]": green("[hit]"), "[miss]": yellow("[miss]"), "[json]": green("[json]"), "[data]": green("[data]") };
        function debug(ctx, ...args) {
          if (!ctx.opts.debug) return;
          const cwd = process.cwd();
          console.log(gray(["[jiti]", ...args.map((arg) => arg in debugMap ? debugMap[arg] : "string" != typeof arg ? JSON.stringify(arg) : arg.replace(cwd, "."))].join(" ")));
        }
        function jitiInteropDefault(ctx, mod) {
          return ctx.opts.interopDefault ? function(mod2) {
            const modType = typeof mod2;
            if (null === mod2 || "object" !== modType && "function" !== modType) return mod2;
            const def = mod2.default, defType = typeof def;
            if (null == def) return mod2;
            const defIsObj = "object" === defType || "function" === defType;
            return new Proxy(mod2, { get(target, prop, receiver) {
              if ("__esModule" === prop) return true;
              if ("default" === prop) return def;
              if (Reflect.has(target, prop)) return Reflect.get(target, prop, receiver);
              if (defIsObj) {
                let fallback = Reflect.get(def, prop, receiver);
                return "function" == typeof fallback && (fallback = fallback.bind(def)), fallback;
              }
            }, apply: (target, thisArg, args) => "function" == typeof target ? Reflect.apply(target, thisArg, args) : "function" === defType ? Reflect.apply(def, thisArg, args) : void 0 });
          }(mod) : mod;
        }
        function _booleanEnv(name, defaultValue) {
          const val = _jsonEnv(name, defaultValue);
          return Boolean(val);
        }
        function _jsonEnv(name, defaultValue) {
          const envValue = process.env[name];
          if (!(name in process.env)) return defaultValue;
          try {
            return JSON.parse(envValue);
          } catch {
            return defaultValue;
          }
        }
        const JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
        function jitiResolve(ctx, id, options) {
          var _a8;
          let resolved, lastError;
          if (ctx.isNativeRe.test(id)) return id;
          ctx.alias && (id = function(path2, aliases) {
            const _path = normalizeWindowsPath(path2);
            aliases = normalizeAliases(aliases);
            for (const [alias, to] of Object.entries(aliases)) {
              if (!_path.startsWith(alias)) continue;
              const _alias = utils_hasTrailingSlash(alias) ? alias.slice(0, -1) : alias;
              if (utils_hasTrailingSlash(_path[_alias.length])) return join4(to, _path.slice(alias.length));
            }
            return _path;
          }(id, ctx.alias));
          let parentURL = (options == null ? void 0 : options.parentURL) || ctx.url;
          isDir(parentURL) && (parentURL = join4(parentURL, "_index.js"));
          const conditionSets = ((options == null ? void 0 : options.async) ? [options == null ? void 0 : options.conditions, ["node", "import"], ["node", "require"]] : [options == null ? void 0 : options.conditions, ["node", "require"], ["node", "import"]]).filter(Boolean);
          for (const conditions of conditionSets) {
            try {
              resolved = resolvePathSync2(id, { url: parentURL, conditions, extensions: ctx.opts.extensions });
            } catch (error) {
              lastError = error;
            }
            if (resolved) return resolved;
          }
          try {
            return ctx.nativeRequire.resolve(id, { paths: options.paths });
          } catch (error) {
            lastError = error;
          }
          for (const ext of ctx.additionalExts) {
            if (resolved = tryNativeRequireResolve(ctx, id + ext, parentURL, options) || tryNativeRequireResolve(ctx, id + "/index" + ext, parentURL, options), resolved) return resolved;
            if ((TS_EXT_RE.test(ctx.filename) || TS_EXT_RE.test(((_a8 = ctx.parentModule) == null ? void 0 : _a8.filename) || "") || JS_EXT_RE.test(id)) && (resolved = tryNativeRequireResolve(ctx, id.replace(JS_EXT_RE, ".$1t$2"), parentURL, options), resolved)) return resolved;
          }
          if (!(options == null ? void 0 : options.try)) throw lastError;
        }
        function tryNativeRequireResolve(ctx, id, parentURL, options) {
          try {
            return ctx.nativeRequire.resolve(id, { ...options, paths: [pathe_ff20891b_dirname(fileURLToPath4(parentURL)), ...(options == null ? void 0 : options.paths) || []] });
          } catch {
          }
        }
        const external_node_perf_hooks_namespaceObject = require_node_perf_hooks(), external_node_vm_namespaceObject = require_node_vm();
        var external_node_vm_default = __webpack_require__.n(external_node_vm_namespaceObject);
        function jitiRequire(ctx, id, opts) {
          var _a8;
          const cache2 = ctx.parentCache || {};
          if (id.startsWith("node:")) id = id.slice(5);
          else if (id.startsWith("file:")) id = (0, external_node_url_namespaceObject.fileURLToPath)(id);
          else if (id.startsWith("data:")) {
            if (!opts.async) throw new Error("`data:` URLs are only supported in ESM context. Use `import` or `jiti.import` instead.");
            return debug(ctx, "[native]", "[data]", "[import]", id), nativeImportOrRequire(ctx, id, true);
          }
          if (external_node_module_namespaceObject.builtinModules.includes(id) || ".pnp.js" === id) return nativeImportOrRequire(ctx, id, opts.async);
          if (ctx.opts.tryNative && !ctx.opts.transformOptions) try {
            if (!(id = jitiResolve(ctx, id, opts)) && opts.try) return;
            if (debug(ctx, "[try-native]", opts.async && ctx.nativeImport ? "[import]" : "[require]", id), opts.async && ctx.nativeImport) return ctx.nativeImport(id).then((m2) => (false === ctx.opts.moduleCache && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, m2)));
            {
              const _mod = ctx.nativeRequire(id);
              return false === ctx.opts.moduleCache && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, _mod);
            }
          } catch (error) {
            debug(ctx, `[try-native] Using fallback for ${id} because of an error:`, error);
          }
          const filename = jitiResolve(ctx, id, opts);
          if (!filename && opts.try) return;
          const ext = extname2(filename);
          if (".json" === ext) {
            debug(ctx, "[json]", filename);
            const jsonModule = ctx.nativeRequire(filename);
            return jsonModule && !("default" in jsonModule) && Object.defineProperty(jsonModule, "default", { value: jsonModule, enumerable: false }), jsonModule;
          }
          if (ext && !ctx.opts.extensions.includes(ext)) return debug(ctx, "[native]", "[unknown]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
          if (ctx.isNativeRe.test(filename)) return debug(ctx, "[native]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
          if (cache2[filename]) return jitiInteropDefault(ctx, (_a8 = cache2[filename]) == null ? void 0 : _a8.exports);
          if (ctx.opts.moduleCache) {
            const cacheEntry = ctx.nativeRequire.cache[filename];
            if (cacheEntry == null ? void 0 : cacheEntry.loaded) return jitiInteropDefault(ctx, cacheEntry.exports);
          }
          const source = (0, external_node_fs_namespaceObject.readFileSync)(filename, "utf8");
          return eval_evalModule(ctx, source, { id, filename, ext, cache: cache2, async: opts.async });
        }
        function nativeImportOrRequire(ctx, id, async) {
          return async && ctx.nativeImport ? ctx.nativeImport(function(id2) {
            return _2 && isAbsolute2(id2) ? pathToFileURL2(id2) : id2;
          }(id)).then((m2) => jitiInteropDefault(ctx, m2)) : jitiInteropDefault(ctx, ctx.nativeRequire(id));
        }
        const CACHE_VERSION = "9";
        function getCache(ctx, topts, get) {
          if (!ctx.opts.fsCache || !topts.filename) return get();
          const sourceHash = ` /* v${CACHE_VERSION}-${md5(topts.source, 16)} */
`;
          let cacheName = `${basename4(pathe_ff20891b_dirname(topts.filename))}-${function(path2) {
            var _a8;
            return (_a8 = path2.match(FILENAME_RE)) == null ? void 0 : _a8[2];
          }(topts.filename)}` + (ctx.opts.sourceMaps ? "+map" : "") + (topts.interopDefault ? ".i" : "") + `.${md5(topts.filename)}` + (topts.async ? ".mjs" : ".cjs");
          topts.jsx && topts.filename.endsWith("x") && (cacheName += "x");
          const cacheDir = ctx.opts.fsCache, cacheFilePath = join4(cacheDir, cacheName);
          if ((0, external_node_fs_namespaceObject.existsSync)(cacheFilePath)) {
            const cacheSource = (0, external_node_fs_namespaceObject.readFileSync)(cacheFilePath, "utf8");
            if (cacheSource.endsWith(sourceHash)) return debug(ctx, "[cache]", "[hit]", topts.filename, "~>", cacheFilePath), cacheSource;
          }
          debug(ctx, "[cache]", "[miss]", topts.filename);
          const result = get();
          return result.includes("__JITI_ERROR__") || ((0, external_node_fs_namespaceObject.writeFileSync)(cacheFilePath, result + sourceHash, "utf8"), debug(ctx, "[cache]", "[store]", topts.filename, "~>", cacheFilePath)), result;
        }
        function prepareCacheDir(ctx) {
          if (true === ctx.opts.fsCache && (ctx.opts.fsCache = function(ctx2) {
            const nmDir = ctx2.filename && resolve7(ctx2.filename, "../node_modules");
            if (nmDir && (0, external_node_fs_namespaceObject.existsSync)(nmDir)) return join4(nmDir, ".cache/jiti");
            let _tmpDir = (0, external_node_os_namespaceObject.tmpdir)();
            if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
              const _env = process.env.TMPDIR;
              delete process.env.TMPDIR, _tmpDir = (0, external_node_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
            }
            return join4(_tmpDir, "jiti");
          }(ctx)), ctx.opts.fsCache) try {
            if ((0, external_node_fs_namespaceObject.mkdirSync)(ctx.opts.fsCache, { recursive: true }), !function(filename) {
              try {
                return (0, external_node_fs_namespaceObject.accessSync)(filename, external_node_fs_namespaceObject.constants.W_OK), true;
              } catch {
                return false;
              }
            }(ctx.opts.fsCache)) throw new Error("directory is not writable!");
          } catch (error) {
            debug(ctx, "Error creating cache directory at ", ctx.opts.fsCache, error), ctx.opts.fsCache = false;
          }
        }
        function transform2(ctx, topts) {
          let code = getCache(ctx, topts, () => {
            var _a8;
            const res = ctx.opts.transform({ ...ctx.opts.transformOptions, babel: { ...ctx.opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}, ...(_a8 = ctx.opts.transformOptions) == null ? void 0 : _a8.babel }, interopDefault: ctx.opts.interopDefault, ...topts });
            return res.error && ctx.opts.debug && debug(ctx, res.error), res.code;
          });
          return code.startsWith("#!") && (code = "// " + code), code;
        }
        function eval_evalModule(ctx, source, evalOptions = {}) {
          var _a8;
          const id = evalOptions.id || (evalOptions.filename ? basename4(evalOptions.filename) : `_jitiEval.${evalOptions.ext || (evalOptions.async ? "mjs" : "js")}`), filename = evalOptions.filename || jitiResolve(ctx, id, { async: evalOptions.async }), ext = evalOptions.ext || extname2(filename), cache2 = evalOptions.cache || ctx.parentCache || {}, isTypescript = /\.[cm]?tsx?$/.test(ext), isESM = ".mjs" === ext || ".js" === ext && "module" === ((_a8 = function(path2) {
            for (; path2 && "." !== path2 && "/" !== path2; ) {
              path2 = join4(path2, "..");
              try {
                const pkg = (0, external_node_fs_namespaceObject.readFileSync)(join4(path2, "package.json"), "utf8");
                try {
                  return JSON.parse(pkg);
                } catch {
                }
                break;
              } catch {
              }
            }
          }(filename)) == null ? void 0 : _a8.type), isCommonJS = ".cjs" === ext, needsTranspile = evalOptions.forceTranspile ?? (!isCommonJS && !(isESM && evalOptions.async) && (isTypescript || isESM || ctx.isTransformRe.test(filename) || hasESMSyntax(source))), start = external_node_perf_hooks_namespaceObject.performance.now();
          if (needsTranspile) {
            source = transform2(ctx, { filename, source, ts: isTypescript, async: evalOptions.async ?? false, jsx: ctx.opts.jsx });
            const time = Math.round(1e3 * (external_node_perf_hooks_namespaceObject.performance.now() - start)) / 1e3;
            debug(ctx, "[transpile]", evalOptions.async ? "[esm]" : "[cjs]", filename, `(${time}ms)`);
          } else {
            if (debug(ctx, "[native]", evalOptions.async ? "[import]" : "[require]", filename), evalOptions.async) return Promise.resolve(nativeImportOrRequire(ctx, filename, evalOptions.async)).catch((error) => (debug(ctx, "Native import error:", error), debug(ctx, "[fallback]", filename), eval_evalModule(ctx, source, { ...evalOptions, forceTranspile: true })));
            try {
              return nativeImportOrRequire(ctx, filename, evalOptions.async);
            } catch (error) {
              debug(ctx, "Native require error:", error), debug(ctx, "[fallback]", filename), source = transform2(ctx, { filename, source, ts: isTypescript, async: evalOptions.async ?? false, jsx: ctx.opts.jsx });
            }
          }
          const mod = new external_node_module_namespaceObject.Module(filename);
          mod.filename = filename, ctx.parentModule && (mod.parent = ctx.parentModule, Array.isArray(ctx.parentModule.children) && !ctx.parentModule.children.includes(mod) && ctx.parentModule.children.push(mod));
          const _jiti = createJiti2(filename, ctx.opts, { parentModule: mod, parentCache: cache2, nativeImport: ctx.nativeImport, onError: ctx.onError, createRequire: ctx.createRequire }, true);
          let compiled;
          mod.require = _jiti, mod.path = pathe_ff20891b_dirname(filename), mod.paths = external_node_module_namespaceObject.Module._nodeModulePaths(mod.path), cache2[filename] = mod, ctx.opts.moduleCache && (ctx.nativeRequire.cache[filename] = mod);
          const wrapped = function(source2, opts) {
            return `(${(opts == null ? void 0 : opts.async) ? "async " : ""}function (exports, require, module, __filename, __dirname, jitiImport, jitiESMResolve) { ${source2}
});`;
          }(source, { async: evalOptions.async });
          try {
            compiled = external_node_vm_default().runInThisContext(wrapped, { filename, lineOffset: 0, displayErrors: false });
          } catch (error) {
            "SyntaxError" === error.name && evalOptions.async && ctx.nativeImport ? (debug(ctx, "[esm]", "[import]", "[fallback]", filename), compiled = function(code, nativeImport) {
              const uri = `data:text/javascript;base64,${Buffer.from(`export default ${code}`).toString("base64")}`;
              return (...args) => nativeImport(uri).then((mod2) => mod2.default(...args));
            }(wrapped, ctx.nativeImport)) : (ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error));
          }
          let evalResult;
          try {
            evalResult = compiled(mod.exports, mod.require, mod, mod.filename, pathe_ff20891b_dirname(mod.filename), _jiti.import, _jiti.esmResolve);
          } catch (error) {
            ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error);
          }
          function next() {
            if (mod.exports && mod.exports.__JITI_ERROR__) {
              const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
              Error.captureStackTrace(err, jitiRequire), ctx.onError(err);
            }
            mod.loaded = true;
            return jitiInteropDefault(ctx, mod.exports);
          }
          return evalOptions.async ? Promise.resolve(evalResult).then(next) : next();
        }
        const isWindows = "win32" === (0, external_node_os_namespaceObject.platform)();
        function createJiti2(filename, userOptions = {}, parentContext, isNested = false) {
          const opts = isNested ? userOptions : function(userOptions2) {
            const jitiDefaults = { fsCache: _booleanEnv("JITI_FS_CACHE", _booleanEnv("JITI_CACHE", true)), moduleCache: _booleanEnv("JITI_MODULE_CACHE", _booleanEnv("JITI_REQUIRE_CACHE", true)), debug: _booleanEnv("JITI_DEBUG", false), sourceMaps: _booleanEnv("JITI_SOURCE_MAPS", false), interopDefault: _booleanEnv("JITI_INTEROP_DEFAULT", true), extensions: _jsonEnv("JITI_EXTENSIONS", [".js", ".mjs", ".cjs", ".ts", ".tsx", ".mts", ".cts", ".mtsx", ".ctsx"]), alias: _jsonEnv("JITI_ALIAS", {}), nativeModules: _jsonEnv("JITI_NATIVE_MODULES", []), transformModules: _jsonEnv("JITI_TRANSFORM_MODULES", []), tryNative: _jsonEnv("JITI_TRY_NATIVE", "Bun" in globalThis), jsx: _booleanEnv("JITI_JSX", false) };
            jitiDefaults.jsx && jitiDefaults.extensions.push(".jsx", ".tsx");
            const deprecatOverrides = {};
            return void 0 !== userOptions2.cache && (deprecatOverrides.fsCache = userOptions2.cache), void 0 !== userOptions2.requireCache && (deprecatOverrides.moduleCache = userOptions2.requireCache), { ...jitiDefaults, ...deprecatOverrides, ...userOptions2 };
          }(userOptions), alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : void 0, nativeModules = ["typescript", "jiti", ...opts.nativeModules || []], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m2) => escapeStringRegexp(m2)).join("|")})/`), transformModules = [...opts.transformModules || []], isTransformRe = new RegExp(`node_modules/(${transformModules.map((m2) => escapeStringRegexp(m2)).join("|")})/`);
          filename || (filename = process.cwd()), !isNested && isDir(filename) && (filename = join4(filename, "_index.js"));
          const url = pathToFileURL2(filename), additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), nativeRequire = parentContext.createRequire(isWindows ? filename.replace(/\//g, "\\") : filename), ctx = { filename, url, opts, alias, nativeModules, transformModules, isNativeRe, isTransformRe, additionalExts, nativeRequire, onError: parentContext.onError, parentModule: parentContext.parentModule, parentCache: parentContext.parentCache, nativeImport: parentContext.nativeImport, createRequire: parentContext.createRequire };
          isNested || debug(ctx, "[init]", ...[["version:", package_namespaceObject.rE], ["module-cache:", opts.moduleCache], ["fs-cache:", opts.fsCache], ["interop-defaults:", opts.interopDefault]].flat()), isNested || prepareCacheDir(ctx);
          const jiti = Object.assign(function(id) {
            return jitiRequire(ctx, id, { async: false });
          }, { cache: opts.moduleCache ? nativeRequire.cache : /* @__PURE__ */ Object.create(null), extensions: nativeRequire.extensions, main: nativeRequire.main, options: opts, resolve: Object.assign(function(path2) {
            return jitiResolve(ctx, path2, { async: false });
          }, { paths: nativeRequire.resolve.paths }), transform: (opts2) => transform2(ctx, opts2), evalModule: (source, options) => eval_evalModule(ctx, source, options), async import(id, opts2) {
            const mod = await jitiRequire(ctx, id, { ...opts2, async: true });
            return (opts2 == null ? void 0 : opts2.default) ? (mod == null ? void 0 : mod.default) ?? mod : mod;
          }, esmResolve(id, opts2) {
            "string" == typeof opts2 && (opts2 = { parentURL: opts2 });
            const resolved = jitiResolve(ctx, id, { parentURL: url, ...opts2, async: true });
            return !resolved || "string" != typeof resolved || resolved.startsWith("file://") ? resolved : pathToFileURL2(resolved);
          } });
          return jiti;
        }
      })(), module3.exports = __webpack_exports__.default;
    })();
  }
});

// browser-external:module
var require_module = __commonJS({
  "browser-external:module"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "module" has been externalized for browser compatibility. Cannot access "module.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:tty
var require_tty = __commonJS({
  "browser-external:tty"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "tty" has been externalized for browser compatibility. Cannot access "tty.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:v8
var require_v8 = __commonJS({
  "browser-external:v8"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "v8" has been externalized for browser compatibility. Cannot access "v8.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/jiti/dist/babel.cjs
var require_babel = __commonJS({
  "node_modules/jiti/dist/babel.cjs"(exports2, module3) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js": function(module4, __unused_webpack_exports, __webpack_require__2) {
        module4.exports = function(traceMapping, genMapping) {
          "use strict";
          const SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null, false), EMPTY_SOURCES = [];
          function SegmentObject(source, line, column, name, content, ignore) {
            return { source, line, column, name, content, ignore };
          }
          function Source(map, sources, source, content, ignore) {
            return { map, sources, source, content, ignore };
          }
          function MapSource(map, sources) {
            return Source(map, sources, "", null, false);
          }
          function OriginalSource(source, content, ignore) {
            return Source(null, EMPTY_SOURCES, source, content, ignore);
          }
          function traceMappings(tree) {
            const gen = new genMapping.GenMapping({ file: tree.map.file }), { sources: rootSources, map } = tree, rootNames = map.names, rootMappings = traceMapping.decodedMappings(map);
            for (let i2 = 0; i2 < rootMappings.length; i2++) {
              const segments = rootMappings[i2];
              for (let j = 0; j < segments.length; j++) {
                const segment = segments[j], genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                if (1 !== segment.length && (traced = originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced)) continue;
                const { column, line, name, content, source, ignore } = traced;
                genMapping.maybeAddSegment(gen, i2, genCol, source, line, column, name), source && null != content && genMapping.setSourceContent(gen, source, content), ignore && genMapping.setIgnore(gen, source, true);
              }
            }
            return gen;
          }
          function originalPositionFor(source, line, column, name) {
            if (!source.map) return SegmentObject(source.source, line, column, name, source.content, source.ignore);
            const segment = traceMapping.traceSegment(source.map, line, column);
            return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
          }
          function asArray(value2) {
            return Array.isArray(value2) ? value2 : [value2];
          }
          function buildSourceMapTree(input, loader) {
            const maps = asArray(input).map((m2) => new traceMapping.TraceMap(m2, "")), map = maps.pop();
            for (let i2 = 0; i2 < maps.length; i2++) if (maps[i2].sources.length > 1) throw new Error(`Transformation map ${i2} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
            let tree = build2(map, loader, "", 0);
            for (let i2 = maps.length - 1; i2 >= 0; i2--) tree = MapSource(maps[i2], [tree]);
            return tree;
          }
          function build2(map, loader, importer, importerDepth) {
            const { resolvedSources, sourcesContent, ignoreList } = map, depth = importerDepth + 1;
            return MapSource(map, resolvedSources.map((sourceFile, i2) => {
              const ctx = { importer, depth, source: sourceFile || "", content: void 0, ignore: void 0 }, sourceMap = loader(ctx.source, ctx), { source, content, ignore } = ctx;
              return sourceMap ? build2(new traceMapping.TraceMap(sourceMap, source), loader, source, depth) : OriginalSource(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i2] : null, void 0 !== ignore ? ignore : !!ignoreList && ignoreList.includes(i2));
            }));
          }
          class SourceMap {
            constructor(map, options) {
              const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
              this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.ignoreList = out.ignoreList, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
            }
            toString() {
              return JSON.stringify(this);
            }
          }
          function remapping(input, loader, options) {
            const opts = "object" == typeof options ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
            return new SourceMap(traceMappings(tree), opts);
          }
          return remapping;
        }(__webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"));
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive": (module4) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive", module4.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive": (module4) => {
        function webpackEmptyContext(req) {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        }
        webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive", module4.exports = webpackEmptyContext;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
        } }));
        exports3.A = _default;
      }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports3, __webpack_require__2) {
        !function(exports4, setArray, sourcemapCodec, traceMapping) {
          "use strict";
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
          class GenMapping {
            constructor({ file, sourceRoot } = {}) {
              this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot, this._ignoreList = new setArray.SetArray();
            }
          }
          function cast(map) {
            return map;
          }
          function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
            return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
          }
          function addMapping(map, mapping) {
            return addMappingInternal(false, map, mapping);
          }
          const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping);
          function setSourceContent(map, source, content) {
            const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
            sourcesContent[setArray.put(sources, source)] = content;
          }
          function setIgnore(map, source, ignore = true) {
            const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map), index2 = setArray.put(sources, source);
            index2 === sourcesContent.length && (sourcesContent[index2] = null), ignore ? setArray.put(ignoreList, index2) : setArray.remove(ignoreList, index2);
          }
          function toDecodedMap(map) {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
            return removeEmptyFinalLines(mappings), { version: 3, file: map.file || void 0, names: names.array, sourceRoot: map.sourceRoot || void 0, sources: sources.array, sourcesContent, mappings, ignoreList: ignoreList.array };
          }
          function toEncodedMap(map) {
            const decoded = toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          }
          function fromMap(input) {
            const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            return putAll(cast(gen)._names, map.names), putAll(cast(gen)._sources, map.sources), cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null), cast(gen)._mappings = traceMapping.decodedMappings(map), map.ignoreList && putAll(cast(gen)._ignoreList, map.ignoreList), gen;
          }
          function allMappings(map) {
            const out = [], { _mappings: mappings, _sources: sources, _names: names } = cast(map);
            for (let i2 = 0; i2 < mappings.length; i2++) {
              const line = mappings[i2];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generated = { line: i2 + 1, column: seg[COLUMN] };
                let source, original, name;
                1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
              }
            }
            return out;
          }
          function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map), line = getLine(mappings, genLine), index2 = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index2)) return;
              return insert(line, index2, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex)) return insert(line, index2, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          }
          function getLine(mappings, index2) {
            for (let i2 = mappings.length; i2 <= index2; i2++) mappings[i2] = [];
            return mappings[index2];
          }
          function getColumnIndex(line, genColumn) {
            let index2 = line.length;
            for (let i2 = index2 - 1; i2 >= 0 && !(genColumn >= line[i2][COLUMN]); index2 = i2--) ;
            return index2;
          }
          function insert(array, index2, value2) {
            for (let i2 = array.length; i2 > index2; i2--) array[i2] = array[i2 - 1];
            array[index2] = value2;
          }
          function removeEmptyFinalLines(mappings) {
            const { length } = mappings;
            let len = length;
            for (let i2 = len - 1; i2 >= 0 && !(mappings[i2].length > 0); len = i2, i2--) ;
            len < length && (mappings.length = len);
          }
          function putAll(setarr, array) {
            for (let i2 = 0; i2 < array.length; i2++) setArray.put(setarr, array[i2]);
          }
          function skipSourceless(line, index2) {
            return 0 === index2 || 1 === line[index2 - 1].length;
          }
          function skipSource(line, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
            if (0 === index2) return false;
            const prev = line[index2 - 1];
            return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
          }
          function addMappingInternal(skipable, map, mapping) {
            const { generated, source, original, name, content } = mapping;
            return source ? addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content) : addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
          }
          exports4.GenMapping = GenMapping, exports4.addMapping = addMapping, exports4.addSegment = addSegment, exports4.allMappings = allMappings, exports4.fromMap = fromMap, exports4.maybeAddMapping = maybeAddMapping, exports4.maybeAddSegment = maybeAddSegment, exports4.setIgnore = setIgnore, exports4.setSourceContent = setSourceContent, exports4.toDecodedMap = toDecodedMap, exports4.toEncodedMap = toEncodedMap, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
      }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module4) {
        module4.exports = function() {
          "use strict";
          const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
          function isAbsoluteUrl(input) {
            return schemeRegex.test(input);
          }
          function isSchemeRelativeUrl(input) {
            return input.startsWith("//");
          }
          function isAbsolutePath(input) {
            return input.startsWith("/");
          }
          function isFileUrl(input) {
            return input.startsWith("file:");
          }
          function isRelative2(input) {
            return /^[.?#]/.test(input);
          }
          function parseAbsoluteUrl(input) {
            const match = urlRegex.exec(input);
            return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
          }
          function parseFileUrl(input) {
            const match = fileRegex.exec(input), path2 = match[2];
            return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path2) ? path2 : "/" + path2, match[3] || "", match[4] || "");
          }
          function makeUrl(scheme, user, host, port, path2, query, hash2) {
            return { scheme, user, host, port, path: path2, query, hash: hash2, type: 7 };
          }
          function parseUrl(input) {
            if (isSchemeRelativeUrl(input)) {
              const url2 = parseAbsoluteUrl("http:" + input);
              return url2.scheme = "", url2.type = 6, url2;
            }
            if (isAbsolutePath(input)) {
              const url2 = parseAbsoluteUrl("http://foo.com" + input);
              return url2.scheme = "", url2.host = "", url2.type = 5, url2;
            }
            if (isFileUrl(input)) return parseFileUrl(input);
            if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
            const url = parseAbsoluteUrl("http://foo.com/" + input);
            return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1, url;
          }
          function stripPathFilename(path2) {
            if (path2.endsWith("/..")) return path2;
            const index2 = path2.lastIndexOf("/");
            return path2.slice(0, index2 + 1);
          }
          function mergePaths(url, base) {
            normalizePath(base, base.type), "/" === url.path ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path;
          }
          function normalizePath(url, type) {
            const rel = type <= 4, pieces = url.path.split("/");
            let pointer = 1, positive = 0, addTrailingSlash = false;
            for (let i2 = 1; i2 < pieces.length; i2++) {
              const piece = pieces[i2];
              piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
            }
            let path2 = "";
            for (let i2 = 1; i2 < pointer; i2++) path2 += "/" + pieces[i2];
            (!path2 || addTrailingSlash && !path2.endsWith("/..")) && (path2 += "/"), url.path = path2;
          }
          function resolve7(input, base) {
            if (!input && !base) return "";
            const url = parseUrl(input);
            let inputType = url.type;
            if (base && 7 !== inputType) {
              const baseUrl = parseUrl(base), baseType = baseUrl.type;
              switch (inputType) {
                case 1:
                  url.hash = baseUrl.hash;
                case 2:
                  url.query = baseUrl.query;
                case 3:
                case 4:
                  mergePaths(url, baseUrl);
                case 5:
                  url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
                case 6:
                  url.scheme = baseUrl.scheme;
              }
              baseType > inputType && (inputType = baseType);
            }
            normalizePath(url, inputType);
            const queryHash = url.query + url.hash;
            switch (inputType) {
              case 2:
              case 3:
                return queryHash;
              case 4: {
                const path2 = url.path.slice(1);
                return path2 ? isRelative2(base || input) && !isRelative2(path2) ? "./" + path2 + queryHash : path2 + queryHash : queryHash || ".";
              }
              case 5:
                return url.path + queryHash;
              default:
                return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
            }
          }
          return resolve7;
        }();
      }, "./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports3) {
        !function(exports4) {
          "use strict";
          class SetArray {
            constructor() {
              this._indexes = { __proto__: null }, this.array = [];
            }
          }
          function cast(set) {
            return set;
          }
          function get(setarr, key) {
            return cast(setarr)._indexes[key];
          }
          function put(setarr, key) {
            const index2 = get(setarr, key);
            if (void 0 !== index2) return index2;
            const { array, _indexes: indexes } = cast(setarr), length = array.push(key);
            return indexes[key] = length - 1;
          }
          function pop(setarr) {
            const { array, _indexes: indexes } = cast(setarr);
            0 !== array.length && (indexes[array.pop()] = void 0);
          }
          function remove(setarr, key) {
            const index2 = get(setarr, key);
            if (void 0 === index2) return;
            const { array, _indexes: indexes } = cast(setarr);
            for (let i2 = index2 + 1; i2 < array.length; i2++) {
              const k = array[i2];
              array[i2 - 1] = k, indexes[k]--;
            }
            indexes[key] = void 0, array.pop();
          }
          exports4.SetArray = SetArray, exports4.get = get, exports4.pop = pop, exports4.put = put, exports4.remove = remove, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3);
      }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports3) {
        !function(exports4) {
          "use strict";
          const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
          for (let i2 = 0; i2 < chars.length; i2++) {
            const c2 = chars.charCodeAt(i2);
            intToChar[i2] = c2, charToInt[c2] = i2;
          }
          function decodeInteger(reader, relative3) {
            let value2 = 0, shift = 0, integer = 0;
            do {
              const c2 = reader.next();
              integer = charToInt[c2], value2 |= (31 & integer) << shift, shift += 5;
            } while (32 & integer);
            const shouldNegate = 1 & value2;
            return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), relative3 + value2;
          }
          function encodeInteger(builder, num, relative3) {
            let delta = num - relative3;
            delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
            do {
              let clamped = 31 & delta;
              delta >>>= 5, delta > 0 && (clamped |= 32), builder.write(intToChar[clamped]);
            } while (delta > 0);
            return num;
          }
          function hasMoreVlq(reader, max) {
            return !(reader.pos >= max) && reader.peek() !== comma;
          }
          const bufLength = 16384, td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
            let out = "";
            for (let i2 = 0; i2 < buf.length; i2++) out += String.fromCharCode(buf[i2]);
            return out;
          } };
          class StringWriter {
            constructor() {
              this.pos = 0, this.out = "", this.buffer = new Uint8Array(bufLength);
            }
            write(v2) {
              const { buffer } = this;
              buffer[this.pos++] = v2, this.pos === bufLength && (this.out += td.decode(buffer), this.pos = 0);
            }
            flush() {
              const { buffer, out, pos } = this;
              return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
            }
          }
          class StringReader {
            constructor(buffer) {
              this.pos = 0, this.buffer = buffer;
            }
            next() {
              return this.buffer.charCodeAt(this.pos++);
            }
            peek() {
              return this.buffer.charCodeAt(this.pos);
            }
            indexOf(char) {
              const { buffer, pos } = this, idx = buffer.indexOf(char, pos);
              return -1 === idx ? buffer.length : idx;
            }
          }
          const EMPTY2 = [];
          function decodeOriginalScopes(input) {
            const { length } = input, reader = new StringReader(input), scopes = [], stack = [];
            let line = 0;
            for (; reader.pos < length; reader.pos++) {
              line = decodeInteger(reader, line);
              const column = decodeInteger(reader, 0);
              if (!hasMoreVlq(reader, length)) {
                const last = stack.pop();
                last[2] = line, last[3] = column;
                continue;
              }
              const kind = decodeInteger(reader, 0), scope = 1 & decodeInteger(reader, 0) ? [line, column, 0, 0, kind, decodeInteger(reader, 0)] : [line, column, 0, 0, kind];
              let vars = EMPTY2;
              if (hasMoreVlq(reader, length)) {
                vars = [];
                do {
                  const varsIndex = decodeInteger(reader, 0);
                  vars.push(varsIndex);
                } while (hasMoreVlq(reader, length));
              }
              scope.vars = vars, scopes.push(scope), stack.push(scope);
            }
            return scopes;
          }
          function encodeOriginalScopes(scopes) {
            const writer = new StringWriter();
            for (let i2 = 0; i2 < scopes.length; ) i2 = _encodeOriginalScopes(scopes, i2, writer, [0]);
            return writer.flush();
          }
          function _encodeOriginalScopes(scopes, index2, writer, state) {
            const scope = scopes[index2], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope;
            index2 > 0 && writer.write(comma), state[0] = encodeInteger(writer, startLine, state[0]), encodeInteger(writer, startColumn, 0), encodeInteger(writer, kind, 0), encodeInteger(writer, 6 === scope.length ? 1 : 0, 0), 6 === scope.length && encodeInteger(writer, scope[5], 0);
            for (const v2 of vars) encodeInteger(writer, v2, 0);
            for (index2++; index2 < scopes.length; ) {
              const next = scopes[index2], { 0: l2, 1: c2 } = next;
              if (l2 > endLine || l2 === endLine && c2 >= endColumn) break;
              index2 = _encodeOriginalScopes(scopes, index2, writer, state);
            }
            return writer.write(comma), state[0] = encodeInteger(writer, endLine, state[0]), encodeInteger(writer, endColumn, 0), index2;
          }
          function decodeGeneratedRanges(input) {
            const { length } = input, reader = new StringReader(input), ranges = [], stack = [];
            let genLine = 0, definitionSourcesIndex = 0, definitionScopeIndex = 0, callsiteSourcesIndex = 0, callsiteLine = 0, callsiteColumn = 0, bindingLine = 0, bindingColumn = 0;
            do {
              const semi = reader.indexOf(";");
              let genColumn = 0;
              for (; reader.pos < semi; reader.pos++) {
                if (genColumn = decodeInteger(reader, genColumn), !hasMoreVlq(reader, semi)) {
                  const last = stack.pop();
                  last[2] = genLine, last[3] = genColumn;
                  continue;
                }
                const fields = decodeInteger(reader, 0), hasCallsite = 2 & fields, hasScope = 4 & fields;
                let range, callsite = null, bindings = EMPTY2;
                if (1 & fields) {
                  const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
                  definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0), definitionSourcesIndex = defSourcesIndex, range = [genLine, genColumn, 0, 0, defSourcesIndex, definitionScopeIndex];
                } else range = [genLine, genColumn, 0, 0];
                if (range.isScope = !!hasScope, hasCallsite) {
                  const prevCsi = callsiteSourcesIndex, prevLine = callsiteLine;
                  callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
                  const sameSource = prevCsi === callsiteSourcesIndex;
                  callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0), callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0), callsite = [callsiteSourcesIndex, callsiteLine, callsiteColumn];
                }
                if (range.callsite = callsite, hasMoreVlq(reader, semi)) {
                  bindings = [];
                  do {
                    bindingLine = genLine, bindingColumn = genColumn;
                    const expressionsCount = decodeInteger(reader, 0);
                    let expressionRanges;
                    if (expressionsCount < -1) {
                      expressionRanges = [[decodeInteger(reader, 0)]];
                      for (let i2 = -1; i2 > expressionsCount; i2--) {
                        const prevBl = bindingLine;
                        bindingLine = decodeInteger(reader, bindingLine), bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                        const expression = decodeInteger(reader, 0);
                        expressionRanges.push([expression, bindingLine, bindingColumn]);
                      }
                    } else expressionRanges = [[expressionsCount]];
                    bindings.push(expressionRanges);
                  } while (hasMoreVlq(reader, semi));
                }
                range.bindings = bindings, ranges.push(range), stack.push(range);
              }
              genLine++, reader.pos = semi + 1;
            } while (reader.pos < length);
            return ranges;
          }
          function encodeGeneratedRanges(ranges) {
            if (0 === ranges.length) return "";
            const writer = new StringWriter();
            for (let i2 = 0; i2 < ranges.length; ) i2 = _encodeGeneratedRanges(ranges, i2, writer, [0, 0, 0, 0, 0, 0, 0]);
            return writer.flush();
          }
          function _encodeGeneratedRanges(ranges, index2, writer, state) {
            const range = ranges[index2], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope, callsite, bindings } = range;
            if (state[0] < startLine ? (catchupLine(writer, state[0], startLine), state[0] = startLine, state[1] = 0) : index2 > 0 && writer.write(comma), state[1] = encodeInteger(writer, range[1], state[1]), encodeInteger(writer, (6 === range.length ? 1 : 0) | (callsite ? 2 : 0) | (isScope ? 4 : 0), 0), 6 === range.length) {
              const { 4: sourcesIndex, 5: scopesIndex } = range;
              sourcesIndex !== state[2] && (state[3] = 0), state[2] = encodeInteger(writer, sourcesIndex, state[2]), state[3] = encodeInteger(writer, scopesIndex, state[3]);
            }
            if (callsite) {
              const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
              sourcesIndex !== state[4] ? (state[5] = 0, state[6] = 0) : callLine !== state[5] && (state[6] = 0), state[4] = encodeInteger(writer, sourcesIndex, state[4]), state[5] = encodeInteger(writer, callLine, state[5]), state[6] = encodeInteger(writer, callColumn, state[6]);
            }
            if (bindings) for (const binding of bindings) {
              binding.length > 1 && encodeInteger(writer, -binding.length, 0), encodeInteger(writer, binding[0][0], 0);
              let bindingStartLine = startLine, bindingStartColumn = startColumn;
              for (let i2 = 1; i2 < binding.length; i2++) {
                const expRange = binding[i2];
                bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine), bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn), encodeInteger(writer, expRange[0], 0);
              }
            }
            for (index2++; index2 < ranges.length; ) {
              const next = ranges[index2], { 0: l2, 1: c2 } = next;
              if (l2 > endLine || l2 === endLine && c2 >= endColumn) break;
              index2 = _encodeGeneratedRanges(ranges, index2, writer, state);
            }
            return state[0] < endLine ? (catchupLine(writer, state[0], endLine), state[0] = endLine, state[1] = 0) : writer.write(comma), state[1] = encodeInteger(writer, endColumn, state[1]), index2;
          }
          function catchupLine(writer, lastLine, line) {
            do {
              writer.write(semicolon);
            } while (++lastLine < line);
          }
          function decode(mappings) {
            const { length } = mappings, reader = new StringReader(mappings), decoded = [];
            let genColumn = 0, sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
            do {
              const semi = reader.indexOf(";"), line = [];
              let sorted = true, lastCol = 0;
              for (genColumn = 0; reader.pos < semi; ) {
                let seg;
                genColumn = decodeInteger(reader, genColumn), genColumn < lastCol && (sorted = false), lastCol = genColumn, hasMoreVlq(reader, semi) ? (sourcesIndex = decodeInteger(reader, sourcesIndex), sourceLine = decodeInteger(reader, sourceLine), sourceColumn = decodeInteger(reader, sourceColumn), hasMoreVlq(reader, semi) ? (namesIndex = decodeInteger(reader, namesIndex), seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]) : seg = [genColumn, sourcesIndex, sourceLine, sourceColumn]) : seg = [genColumn], line.push(seg), reader.pos++;
              }
              sorted || sort(line), decoded.push(line), reader.pos = semi + 1;
            } while (reader.pos <= length);
            return decoded;
          }
          function sort(line) {
            line.sort(sortComparator);
          }
          function sortComparator(a2, b) {
            return a2[0] - b[0];
          }
          function encode(decoded) {
            const writer = new StringWriter();
            let sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              if (i2 > 0 && writer.write(semicolon), 0 === line.length) continue;
              let genColumn = 0;
              for (let j = 0; j < line.length; j++) {
                const segment = line[j];
                j > 0 && writer.write(comma), genColumn = encodeInteger(writer, segment[0], genColumn), 1 !== segment.length && (sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex), sourceLine = encodeInteger(writer, segment[2], sourceLine), sourceColumn = encodeInteger(writer, segment[3], sourceColumn), 4 !== segment.length && (namesIndex = encodeInteger(writer, segment[4], namesIndex)));
              }
            }
            return writer.flush();
          }
          exports4.decode = decode, exports4.decodeGeneratedRanges = decodeGeneratedRanges, exports4.decodeOriginalScopes = decodeOriginalScopes, exports4.encode = encode, exports4.encodeGeneratedRanges = encodeGeneratedRanges, exports4.encodeOriginalScopes = encodeOriginalScopes, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3);
      }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports3, __webpack_require__2) {
        !function(exports4, sourcemapCodec, resolveUri) {
          "use strict";
          function resolve7(input, base) {
            return base && !base.endsWith("/") && (base += "/"), resolveUri(input, base);
          }
          function stripFilename(path2) {
            if (!path2) return "";
            const index2 = path2.lastIndexOf("/");
            return path2.slice(0, index2 + 1);
          }
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
          function maybeSort(mappings, owned) {
            const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
            if (unsortedIndex === mappings.length) return mappings;
            owned || (mappings = mappings.slice());
            for (let i2 = unsortedIndex; i2 < mappings.length; i2 = nextUnsortedSegmentLine(mappings, i2 + 1)) mappings[i2] = sortSegments(mappings[i2], owned);
            return mappings;
          }
          function nextUnsortedSegmentLine(mappings, start) {
            for (let i2 = start; i2 < mappings.length; i2++) if (!isSorted(mappings[i2])) return i2;
            return mappings.length;
          }
          function isSorted(line) {
            for (let j = 1; j < line.length; j++) if (line[j][COLUMN] < line[j - 1][COLUMN]) return false;
            return true;
          }
          function sortSegments(line, owned) {
            return owned || (line = line.slice()), line.sort(sortComparator);
          }
          function sortComparator(a2, b) {
            return a2[COLUMN] - b[COLUMN];
          }
          let found = false;
          function binarySearch(haystack, needle, low, high) {
            for (; low <= high; ) {
              const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
              if (0 === cmp) return found = true, mid;
              cmp < 0 ? low = mid + 1 : high = mid - 1;
            }
            return found = false, low - 1;
          }
          function upperBound(haystack, needle, index2) {
            for (let i2 = index2 + 1; i2 < haystack.length && haystack[i2][COLUMN] === needle; index2 = i2++) ;
            return index2;
          }
          function lowerBound(haystack, needle, index2) {
            for (let i2 = index2 - 1; i2 >= 0 && haystack[i2][COLUMN] === needle; index2 = i2--) ;
            return index2;
          }
          function memoizedState() {
            return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
          }
          function memoizedBinarySearch(haystack, needle, state, key) {
            const { lastKey, lastNeedle, lastIndex } = state;
            let low = 0, high = haystack.length - 1;
            if (key === lastKey) {
              if (needle === lastNeedle) return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
              needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
            }
            return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
          }
          function buildBySources(decoded, memos) {
            const sources = memos.map(buildNullArray);
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                if (1 === seg.length) continue;
                const sourceIndex2 = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex2], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex2];
                let index2 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                memo.lastIndex = ++index2, insert(originalLine, index2, [sourceColumn, i2, seg[COLUMN]]);
              }
            }
            return sources;
          }
          function insert(array, index2, value2) {
            for (let i2 = array.length; i2 > index2; i2--) array[i2] = array[i2 - 1];
            array[index2] = value2;
          }
          function buildNullArray() {
            return { __proto__: null };
          }
          const AnyMap = function(map, mapUrl) {
            const parsed = parse3(map);
            if (!("sections" in parsed)) return new TraceMap(parsed, mapUrl);
            const mappings = [], sources = [], sourcesContent = [], names = [], ignoreList = [];
            return recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, 1 / 0, 1 / 0), presortedDecodedMap({ version: 3, file: parsed.file, names, sources, sourcesContent, mappings, ignoreList });
          };
          function parse3(map) {
            return "string" == typeof map ? JSON.parse(map) : map;
          }
          function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
            const { sections } = input;
            for (let i2 = 0; i2 < sections.length; i2++) {
              const { map, offset } = sections[i2];
              let sl = stopLine, sc = stopColumn;
              if (i2 + 1 < sections.length) {
                const nextOffset = sections[i2 + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
              }
              addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
            }
          }
          function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
            const parsed = parse3(input);
            if ("sections" in parsed) return recurse(...arguments);
            const map = new TraceMap(parsed, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = decodedMappings(map), { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
            if (append(sources, resolvedSources), append(names, map.names), contents) append(sourcesContent, contents);
            else for (let i2 = 0; i2 < resolvedSources.length; i2++) sourcesContent.push(null);
            if (ignores) for (let i2 = 0; i2 < ignores.length; i2++) ignoreList.push(ignores[i2] + sourcesOffset);
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const lineI = lineOffset + i2;
              if (lineI > stopLine) return;
              const out = getLine(mappings, lineI), cOffset = 0 === i2 ? columnOffset : 0, line = decoded[i2];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], column = cOffset + seg[COLUMN];
                if (lineI === stopLine && column >= stopColumn) return;
                if (1 === seg.length) {
                  out.push([column]);
                  continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
                out.push(4 === seg.length ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
              }
            }
          }
          function append(arr, other) {
            for (let i2 = 0; i2 < other.length; i2++) arr.push(other[i2]);
          }
          function getLine(arr, index2) {
            for (let i2 = arr.length; i2 <= index2; i2++) arr[i2] = [];
            return arr[index2];
          }
          const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
          class TraceMap {
            constructor(map, mapUrl) {
              const isString2 = "string" == typeof map;
              if (!isString2 && map._decodedMemo) return map;
              const parsed = isString2 ? JSON.parse(map) : map, { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
              this.version = version, this.file = file, this.names = names || [], this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent, this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
              const from = resolve7(sourceRoot || "", stripFilename(mapUrl));
              this.resolvedSources = sources.map((s2) => resolve7(s2 || "", from));
              const { mappings } = parsed;
              "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString2)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
            }
          }
          function cast(map) {
            return map;
          }
          function encodedMappings(map) {
            var _a7, _b5;
            return null !== (_a7 = (_b5 = cast(map))._encoded) && void 0 !== _a7 ? _a7 : _b5._encoded = sourcemapCodec.encode(cast(map)._decoded);
          }
          function decodedMappings(map) {
            var _a7;
            return (_a7 = cast(map))._decoded || (_a7._decoded = sourcemapCodec.decode(cast(map)._encoded));
          }
          function traceSegment(map, line, column) {
            const decoded = decodedMappings(map);
            if (line >= decoded.length) return null;
            const segments = decoded[line], index2 = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
            return -1 === index2 ? null : segments[index2];
          }
          function originalPositionFor(map, needle) {
            let { line, column, bias } = needle;
            if (line--, line < 0) throw new Error(LINE_GTR_ZERO);
            if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
            const decoded = decodedMappings(map);
            if (line >= decoded.length) return OMapping(null, null, null, null);
            const segments = decoded[line], index2 = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
            if (-1 === index2) return OMapping(null, null, null, null);
            const segment = segments[index2];
            if (1 === segment.length) return OMapping(null, null, null, null);
            const { names, resolvedSources } = map;
            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
          }
          function generatedPositionFor(map, needle) {
            const { source, line, column, bias } = needle;
            return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
          }
          function allGeneratedPositionsFor(map, needle) {
            const { source, line, column, bias } = needle;
            return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
          }
          function eachMapping(map, cb) {
            const decoded = decodedMappings(map), { names, resolvedSources } = map;
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generatedLine = i2 + 1, generatedColumn = seg[0];
                let source = null, originalLine = null, originalColumn = null, name = null;
                1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
              }
            }
          }
          function sourceIndex(map, source) {
            const { sources, resolvedSources } = map;
            let index2 = sources.indexOf(source);
            return -1 === index2 && (index2 = resolvedSources.indexOf(source)), index2;
          }
          function sourceContentFor(map, source) {
            const { sourcesContent } = map;
            if (null == sourcesContent) return null;
            const index2 = sourceIndex(map, source);
            return -1 === index2 ? null : sourcesContent[index2];
          }
          function isIgnored(map, source) {
            const { ignoreList } = map;
            if (null == ignoreList) return false;
            const index2 = sourceIndex(map, source);
            return -1 !== index2 && ignoreList.includes(index2);
          }
          function presortedDecodedMap(map, mapUrl) {
            const tracer = new TraceMap(clone(map, []), mapUrl);
            return cast(tracer)._decoded = map.mappings, tracer;
          }
          function decodedMap(map) {
            return clone(map, decodedMappings(map));
          }
          function encodedMap(map) {
            return clone(map, encodedMappings(map));
          }
          function clone(map, mappings) {
            return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings, ignoreList: map.ignoreList || map.x_google_ignoreList };
          }
          function OMapping(source, line, column, name) {
            return { source, line, column, name };
          }
          function GMapping(line, column) {
            return { line, column };
          }
          function traceSegmentInternal(segments, memo, line, column, bias) {
            let index2 = memoizedBinarySearch(segments, column, memo, line);
            return found ? index2 = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index2) : bias === LEAST_UPPER_BOUND && index2++, -1 === index2 || index2 === segments.length ? -1 : index2;
          }
          function sliceGeneratedPositions(segments, memo, line, column, bias) {
            let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
            if (found || bias !== LEAST_UPPER_BOUND || min++, -1 === min || min === segments.length) return [];
            const matchedColumn = found ? column : segments[min][COLUMN];
            found || (min = lowerBound(segments, matchedColumn, min));
            const max = upperBound(segments, matchedColumn, min), result = [];
            for (; min <= max; min++) {
              const segment = segments[min];
              result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
            }
            return result;
          }
          function generatedPosition(map, source, line, column, bias, all) {
            var _a7;
            if (--line < 0) throw new Error(LINE_GTR_ZERO);
            if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
            const { sources, resolvedSources } = map;
            let sourceIndex2 = sources.indexOf(source);
            if (-1 === sourceIndex2 && (sourceIndex2 = resolvedSources.indexOf(source)), -1 === sourceIndex2) return all ? [] : GMapping(null, null);
            const segments = ((_a7 = cast(map))._bySources || (_a7._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState))))[sourceIndex2][line];
            if (null == segments) return all ? [] : GMapping(null, null);
            const memo = cast(map)._bySourceMemos[sourceIndex2];
            if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
            const index2 = traceSegmentInternal(segments, memo, line, column, bias);
            if (-1 === index2) return GMapping(null, null);
            const segment = segments[index2];
            return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
          }
          exports4.AnyMap = AnyMap, exports4.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports4.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports4.TraceMap = TraceMap, exports4.allGeneratedPositionsFor = allGeneratedPositionsFor, exports4.decodedMap = decodedMap, exports4.decodedMappings = decodedMappings, exports4.eachMapping = eachMapping, exports4.encodedMap = encodedMap, exports4.encodedMappings = encodedMappings, exports4.generatedPositionFor = generatedPositionFor, exports4.isIgnored = isIgnored, exports4.originalPositionFor = originalPositionFor, exports4.presortedDecodedMap = presortedDecodedMap, exports4.sourceContentFor = sourceContentFor, exports4.traceSegment = traceSegment;
        }(exports3, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
      }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module4, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _path = __webpack_require__2("path");
        function isInType(path2) {
          switch (path2.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            default:
              return false;
          }
        }
        module4.exports = function(_ref) {
          var types = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
            return function(className) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier(className), types.Identifier("undefined"), types.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types.logicalExpression("||", resultantDecorator, types.Identifier(className)), assignment = types.assignmentExpression("=", types.Identifier(className), resultantDecoratorWithFallback);
              return types.expressionStatement(assignment);
            };
          }, decoratorExpressionForMethod = function(decorator, param) {
            return function(className, functionName) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier("".concat(className, ".prototype")), types.StringLiteral(functionName), types.NumericLiteral(param.key)]);
              return types.expressionStatement(resultantDecorator);
            };
          };
          return { visitor: { Program: function(path2, state) {
            var extension = (0, _path.extname)(state.file.opts.filename);
            ".ts" !== extension && ".tsx" !== extension || function() {
              var decorators = /* @__PURE__ */ Object.create(null);
              path2.node.body.filter(function(it) {
                var type = it.type, declaration = it.declaration;
                switch (type) {
                  case "ClassDeclaration":
                    return true;
                  case "ExportNamedDeclaration":
                  case "ExportDefaultDeclaration":
                    return declaration && "ClassDeclaration" === declaration.type;
                  default:
                    return false;
                }
              }).map(function(it) {
                return "ClassDeclaration" === it.type ? it : it.declaration;
              }).forEach(function(clazz) {
                clazz.body.body.forEach(function(body) {
                  (body.params || []).forEach(function(param) {
                    (param.decorators || []).forEach(function(decorator) {
                      decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                    });
                  });
                });
              });
              var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
              try {
                for (var _step, _iterator = path2.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var stmt = _step.value;
                  if ("ImportDeclaration" === stmt.node.type) {
                    if (0 === stmt.node.specifiers.length) continue;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = void 0;
                    try {
                      for (var _step2, _loop = function() {
                        var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                        binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                          return prev || isInType(next);
                        }, false) && Object.keys(decorators).forEach(function(k) {
                          var decorator = decorators[k];
                          (decorator.expression.arguments || []).forEach(function(arg) {
                            arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                          });
                        }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                      }, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) _loop();
                    } catch (err) {
                      _didIteratorError2 = true, _iteratorError2 = err;
                    } finally {
                      try {
                        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
                      } finally {
                        if (_didIteratorError2) throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true, _iteratorError = err;
              } finally {
                try {
                  _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
                } finally {
                  if (_didIteratorError) throw _iteratorError;
                }
              }
            }();
          }, Function: function(path2) {
            var functionName = "";
            path2.node.id ? functionName = path2.node.id.name : path2.node.key && (functionName = path2.node.key.name), (path2.get("params") || []).slice().forEach(function(param) {
              var decorators = param.node.decorators || [], transformable = decorators.length;
              if (decorators.slice().forEach(function(decorator) {
                if ("ClassMethod" === path2.type) {
                  var classIdentifier, parentNode = path2.parentPath.parentPath, classDeclaration = path2.findParent(function(p2) {
                    return "ClassDeclaration" === p2.type;
                  });
                  if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path3) {
                    var assignment = path3.findParent(function(p2) {
                      return "AssignmentExpression" === p2.node.type;
                    });
                    return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
                  }(path2)), "constructor" === functionName) {
                    var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                    parentNode.insertAfter(expression);
                  } else {
                    var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                    parentNode.insertAfter(_expression);
                  }
                } else {
                  var className = path2.findParent(function(p2) {
                    return "VariableDeclarator" === p2.node.type;
                  }).node.id.name;
                  if (functionName === className) {
                    var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                    if ("body" === path2.parentKey) path2.insertAfter(_expression2);
                    else path2.findParent(function(p2) {
                      return "body" === p2.parentKey;
                    }).insertAfter(_expression2);
                  } else {
                    var classParent = path2.findParent(function(p2) {
                      return "CallExpression" === p2.node.type;
                    }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                    classParent.insertAfter(_expression3);
                  }
                }
              }), transformable) {
                var replacement = function(path3) {
                  switch (path3.node.type) {
                    case "ObjectPattern":
                      return types.ObjectPattern(path3.node.properties);
                    case "AssignmentPattern":
                      return types.AssignmentPattern(path3.node.left, path3.node.right);
                    case "TSParameterProperty":
                      return types.Identifier(path3.node.parameter.name);
                    default:
                      return types.Identifier(path3.node.name);
                  }
                }(param);
                param.replaceWith(replacement);
              }
            });
          } } };
        };
      }, "./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        var decodeBase64;
        function Converter(sm, opts) {
          (opts = opts || {}).hasComment && (sm = function(sm2) {
            return sm2.split(",").pop();
          }(sm)), "base64" === opts.encoding ? sm = decodeBase64(sm) : "uri" === opts.encoding && (sm = decodeURIComponent(sm)), (opts.isJSON || opts.encoding) && (sm = JSON.parse(sm)), this.sourcemap = sm;
        }
        function makeConverter(sm) {
          return new Converter(sm, { isJSON: true });
        }
        Object.defineProperty(exports3, "commentRegex", { get: function() {
          return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/gm;
        } }), Object.defineProperty(exports3, "mapFileCommentRegex", { get: function() {
          return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/gm;
        } }), decodeBase64 = "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? function(base64) {
          return Buffer.from(base64, "base64").toString();
        } : function(base64) {
          if ("number" == typeof value) throw new TypeError("The value to decode must not be of type number.");
          return new Buffer(base64, "base64").toString();
        } : function(base64) {
          return decodeURIComponent(escape(atob(base64)));
        }, Converter.prototype.toJSON = function(space) {
          return JSON.stringify(this.sourcemap, null, space);
        }, "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return Buffer.from(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          if ("number" == typeof json) throw new TypeError("The json to encode must not be of type number.");
          return new Buffer(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return btoa(unescape(encodeURIComponent(json)));
        }, Converter.prototype.toURI = function() {
          var json = this.toJSON();
          return encodeURIComponent(json);
        }, Converter.prototype.toComment = function(options) {
          var encoding, content, data;
          return null != options && "uri" === options.encoding ? (encoding = "", content = this.toURI()) : (encoding = ";base64", content = this.toBase64()), data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content, null != options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        }, Converter.prototype.toObject = function() {
          return JSON.parse(this.toJSON());
        }, Converter.prototype.addProperty = function(key, value2) {
          if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
          return this.setProperty(key, value2);
        }, Converter.prototype.setProperty = function(key, value2) {
          return this.sourcemap[key] = value2, this;
        }, Converter.prototype.getProperty = function(key) {
          return this.sourcemap[key];
        }, exports3.fromObject = function(obj) {
          return new Converter(obj);
        }, exports3.fromJSON = function(json) {
          return new Converter(json, { isJSON: true });
        }, exports3.fromURI = function(uri) {
          return new Converter(uri, { encoding: "uri" });
        }, exports3.fromBase64 = function(base64) {
          return new Converter(base64, { encoding: "base64" });
        }, exports3.fromComment = function(comment) {
          var m2;
          return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { encoding: (m2 = exports3.commentRegex.exec(comment)) && m2[4] || "uri", hasComment: true });
        }, exports3.fromMapFileComment = function(comment, read2) {
          if ("string" == typeof read2) throw new Error("String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var sm = function(sm2, read3) {
            var r2 = exports3.mapFileCommentRegex.exec(sm2), filename = r2[1] || r2[2];
            try {
              return null != (sm2 = read3(filename)) && "function" == typeof sm2.catch ? sm2.catch(throwError2) : sm2;
            } catch (e) {
              throwError2(e);
            }
            function throwError2(e) {
              throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e.stack);
            }
          }(comment, read2);
          return null != sm && "function" == typeof sm.then ? sm.then(makeConverter) : makeConverter(sm);
        }, exports3.fromSource = function(content) {
          var m2 = content.match(exports3.commentRegex);
          return m2 ? exports3.fromComment(m2.pop()) : null;
        }, exports3.fromMapFileSource = function(content, read2) {
          if ("string" == typeof read2) throw new Error("String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var m2 = content.match(exports3.mapFileCommentRegex);
          return m2 ? exports3.fromMapFileComment(m2.pop(), read2) : null;
        }, exports3.removeComments = function(src) {
          return src.replace(exports3.commentRegex, "");
        }, exports3.removeMapFileComments = function(src) {
          return src.replace(exports3.mapFileCommentRegex, "");
        }, exports3.generateMapFileComment = function(file, options) {
          var data = "sourceMappingURL=" + file;
          return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js": (module4, exports3, __webpack_require__2) => {
        exports3.formatArgs = function(args) {
          if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module4.exports.humanize(this.diff), !this.useColors) return;
          const c2 = "color: " + this.color;
          args.splice(1, 0, c2, "color: inherit");
          let index2 = 0, lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            "%%" !== match && (index2++, "%c" === match && (lastC = index2));
          }), args.splice(lastC, 0, c2);
        }, exports3.save = function(namespaces) {
          try {
            namespaces ? exports3.storage.setItem("debug", namespaces) : exports3.storage.removeItem("debug");
          } catch (error) {
          }
        }, exports3.load = function() {
          let r2;
          try {
            r2 = exports3.storage.getItem("debug");
          } catch (error) {
          }
          !r2 && "undefined" != typeof process && "env" in process && (r2 = process.env.DEBUG);
          return r2;
        }, exports3.useColors = function() {
          if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return true;
          if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
          let m2;
          return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }, exports3.storage = function() {
          try {
            return localStorage;
          } catch (error) {
          }
        }(), exports3.destroy = /* @__PURE__ */ (() => {
          let warned = false;
          return () => {
            warned || (warned = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
          };
        })(), exports3.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports3.log = console.debug || console.log || (() => {
        }), module4.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports3);
        const { formatters } = module4.exports;
        formatters.j = function(v2) {
          try {
            return JSON.stringify(v2);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js": (module4, __unused_webpack_exports, __webpack_require__2) => {
        module4.exports = function(env) {
          function createDebug(namespace) {
            let prevTime, namespacesCache, enabledCache, enableOverride = null;
            function debug(...args) {
              if (!debug.enabled) return;
              const self2 = debug, curr = Number(/* @__PURE__ */ new Date()), ms = curr - (prevTime || curr);
              self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
              let index2 = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                if ("%%" === match) return "%";
                index2++;
                const formatter = createDebug.formatters[format];
                if ("function" == typeof formatter) {
                  const val = args[index2];
                  match = formatter.call(self2, val), args.splice(index2, 1), index2--;
                }
                return match;
              }), createDebug.formatArgs.call(self2, args);
              (self2.log || createDebug.log).apply(self2, args);
            }
            return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v2) => {
              enableOverride = v2;
            } }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
          }
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
            return newDebug.log = this.log, newDebug;
          }
          function matchesTemplate(search, template3) {
            let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
            for (; searchIndex < search.length; ) if (templateIndex < template3.length && (template3[templateIndex] === search[searchIndex] || "*" === template3[templateIndex])) "*" === template3[templateIndex] ? (starIndex = templateIndex, matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++);
            else {
              if (-1 === starIndex) return false;
              templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
            }
            for (; templateIndex < template3.length && "*" === template3[templateIndex]; ) templateIndex++;
            return templateIndex === template3.length;
          }
          return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
            if (val instanceof Error) return val.stack || val.message;
            return val;
          }, createDebug.disable = function() {
            const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
            return createDebug.enable(""), namespaces;
          }, createDebug.enable = function(namespaces) {
            createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
            const split = ("string" == typeof namespaces ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
            for (const ns of split) "-" === ns[0] ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
          }, createDebug.enabled = function(name) {
            for (const skip of createDebug.skips) if (matchesTemplate(name, skip)) return false;
            for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return true;
            return false;
          }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"), createDebug.destroy = function() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }, Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
            let hash2 = 0;
            for (let i2 = 0; i2 < namespace.length; i2++) hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i2), hash2 |= 0;
            return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
          }, createDebug.enable(createDebug.load()), createDebug;
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js": (module4, __unused_webpack_exports, __webpack_require__2) => {
        "undefined" == typeof process || "renderer" === process.type || true === process.browser || process.__nwjs ? module4.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js") : module4.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js");
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js": (module4, exports3, __webpack_require__2) => {
        const tty = __webpack_require__2("tty"), util = __webpack_require__2("util");
        exports3.init = function(debug) {
          debug.inspectOpts = {};
          const keys2 = Object.keys(exports3.inspectOpts);
          for (let i2 = 0; i2 < keys2.length; i2++) debug.inspectOpts[keys2[i2]] = exports3.inspectOpts[keys2[i2]];
        }, exports3.log = function(...args) {
          return process.stderr.write(util.formatWithOptions(exports3.inspectOpts, ...args) + "\n");
        }, exports3.formatArgs = function(args) {
          const { namespace: name, useColors } = this;
          if (useColors) {
            const c2 = this.color, colorCode = "\x1B[3" + (c2 < 8 ? c2 : "8;5;" + c2), prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module4.exports.humanize(this.diff) + "\x1B[0m");
          } else args[0] = function() {
            if (exports3.inspectOpts.hideDate) return "";
            return (/* @__PURE__ */ new Date()).toISOString() + " ";
          }() + name + " " + args[0];
        }, exports3.save = function(namespaces) {
          namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
        }, exports3.load = function() {
          return process.env.DEBUG;
        }, exports3.useColors = function() {
          return "colors" in exports3.inspectOpts ? Boolean(exports3.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }, exports3.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports3.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
          supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports3.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
        } catch (error) {
        }
        exports3.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_2, k) => k.toUpperCase());
          let val = process.env[key];
          return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
        }, {}), module4.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports3);
        const { formatters } = module4.exports;
        formatters.o = function(v2) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v2, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        }, formatters.O = function(v2) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v2, this.inspectOpts);
        };
      }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module4) => {
        "use strict";
        const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
        function assertTypeof(type, name, value2, allowUndefined) {
          if (typeof value2 === type || allowUndefined && void 0 === value2) return;
          let msg;
          throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError(msg, "GENSYNC_OPTIONS_ERROR");
        }
        function makeError(msg, code) {
          return Object.assign(new Error(msg), { code });
        }
        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              return sync.call(this, args);
            }
            let result;
            try {
              async.call(this, args, (value2) => {
                result || (result = { value: value2 }, resume());
              }, (err) => {
                result || (result = { err }, resume());
              });
            } catch (err) {
              result = { err }, resume();
            }
            if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err")) throw result.err;
            return result.value;
          });
        }
        function evaluateSync(gen) {
          let value2;
          for (; !({ value: value2 } = gen.next()).done; ) assertStart(value2, gen);
          return value2;
        }
        function evaluateAsync(gen, resolve7, reject) {
          !function step() {
            try {
              let value2;
              for (; !({ value: value2 } = gen.next()).done; ) {
                assertStart(value2, gen);
                let sync = true, didSyncResume = false;
                const out = gen.next(() => {
                  sync ? didSyncResume = true : step();
                });
                if (sync = false, assertSuspend(out, gen), !didSyncResume) return;
              }
              return resolve7(value2);
            } catch (err) {
              return reject(err);
            }
          }();
        }
        function assertStart(value2, gen) {
          value2 !== GENSYNC_START && throwError2(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value2)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, "GENSYNC_EXPECTED_START"));
        }
        function assertSuspend({ value: value2, done }, gen) {
          (done || value2 !== GENSYNC_SUSPEND) && throwError2(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value2)}. If you get this, it is probably a gensync bug.`, "GENSYNC_EXPECTED_SUSPEND"));
        }
        function throwError2(gen, err) {
          throw gen.throw && gen.throw(err), err;
        }
        function setFunctionMetadata(name, arity, fn) {
          if ("string" == typeof name) {
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
          }
          if ("number" == typeof arity) {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
          }
          return fn;
        }
        module4.exports = Object.assign(function(optsOrFn) {
          let genFn = optsOrFn;
          return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
            if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback) throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", "GENSYNC_OPTIONS_ERROR");
            if ("string" != typeof name) {
              let fnName;
              errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
            }
            "number" != typeof arity && (arity = sync.length);
            return buildOperation({ name, arity, sync: function(args) {
              return sync.apply(this, args);
            }, async: function(args, resolve7, reject) {
              async ? async.apply(this, args).then(resolve7, reject) : errback ? errback.call(this, ...args, (err, value2) => {
                null == err ? resolve7(value2) : reject(err);
              }) : resolve7(sync.apply(this, args));
            } });
          }(optsOrFn) : function(genFn2) {
            return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
              return genFn2.apply(this, args);
            });
          }(optsOrFn), Object.assign(genFn, /* @__PURE__ */ function(genFn2) {
            const fns = { sync: function(...args) {
              return evaluateSync(genFn2.apply(this, args));
            }, async: function(...args) {
              return new Promise((resolve7, reject) => {
                evaluateAsync(genFn2.apply(this, args), resolve7, reject);
              });
            }, errback: function(...args) {
              const cb = args.pop();
              if ("function" != typeof cb) throw makeError("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
              let gen;
              try {
                gen = genFn2.apply(this, args);
              } catch (err) {
                return void cb(err);
              }
              evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
            } };
            return fns;
          }(genFn));
        }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
          return Array.from(args[0]).map((item) => evaluateSync(item));
        }, async: function(args, resolve7, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) return void Promise.resolve().then(() => resolve7([]));
          let count = 0;
          const results = items.map(() => {
          });
          items.forEach((item, i2) => {
            evaluateAsync(item, (val) => {
              results[i2] = val, count += 1, count === results.length && resolve7(results);
            }, reject);
          });
        } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          return evaluateSync(items[0]);
        }, async: function(args, resolve7, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          for (const item of items) evaluateAsync(item, resolve7, reject);
        } }) });
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module4, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        module4.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
      }, "./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module4) => {
        "use strict";
        module4.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
          return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
        };
      }, "./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js": (module4) => {
        "use strict";
        const object = {}, hasOwnProperty3 = object.hasOwnProperty, forOwn = (object2, callback) => {
          for (const key in object2) hasOwnProperty3.call(object2, key) && callback(key, object2[key]);
        }, fourHexEscape = (hex) => "\\u" + ("0000" + hex).slice(-4), hexadecimal = (code, lowercase) => {
          let hexadecimal2 = code.toString(16);
          return lowercase ? hexadecimal2 : hexadecimal2.toUpperCase();
        }, toString2 = object.toString, isArray2 = Array.isArray, isBigInt = (value2) => "bigint" == typeof value2, singleEscapes = { "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" }, regexSingleEscape = /[\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g, escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g, jsesc = (argument, options) => {
          const increaseIndentation = () => {
            oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
          }, defaults3 = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "	", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
          var destination, source;
          json && (defaults3.quotes = "double", defaults3.wrap = true), destination = defaults3, "single" != (options = (source = options) ? (forOwn(source, (key, value2) => {
            destination[key] = value2;
          }), destination) : destination).quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
          const quote = "double" == options.quotes ? '"' : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
          let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
          const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
          let result, isEmpty = true;
          const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
          if (json && argument && /* @__PURE__ */ ((value2) => "function" == typeof value2)(argument.toJSON) && (argument = argument.toJSON()), !((value2) => "string" == typeof value2 || "[object String]" == toString2.call(value2))(argument)) {
            if (((value2) => "[object Map]" == toString2.call(value2))(argument)) return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
            if (((value2) => "[object Set]" == toString2.call(value2))(argument)) return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
            if (((value2) => "function" == typeof Buffer && Buffer.isBuffer(value2))(argument)) return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
            if (isArray2(argument)) return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
              const length = array.length;
              let index2 = -1;
              for (; ++index2 < length; ) callback(array[index2]);
            })(argument, (value2) => {
              isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value2, options));
            }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
            if (((value2) => "number" == typeof value2 || "[object Number]" == toString2.call(value2))(argument) || isBigInt(argument)) {
              if (json) return JSON.stringify(Number(argument));
              let result2;
              if (useDecNumbers) result2 = String(argument);
              else if (useHexNumbers) {
                let hexadecimal2 = argument.toString(16);
                lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result2 = "0x" + hexadecimal2;
              } else useBinNumbers ? result2 = "0b" + argument.toString(2) : useOctNumbers && (result2 = "0o" + argument.toString(8));
              return isBigInt(argument) ? result2 + "n" : result2;
            }
            return isBigInt(argument) ? json ? JSON.stringify(Number(argument)) : argument + "n" : ((value2) => "[object Object]" == toString2.call(value2))(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value2) => {
              isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value2, options));
            }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
          }
          const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
          return result = argument.replace(regex, (char, pair, lone, quoteChar, index2, string) => {
            if (pair) {
              if (options.minimal) return pair;
              const first = pair.charCodeAt(0), second = pair.charCodeAt(1);
              if (options.es6) {
                return "\\u{" + hexadecimal(1024 * (first - 55296) + second - 56320 + 65536, lowercaseHex) + "}";
              }
              return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
            }
            if (lone) return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
            if ("\0" == char && !json && !regexDigit.test(string.charAt(index2 + 1))) return "\\0";
            if (quoteChar) return quoteChar == quote || options.escapeEverything ? "\\" + quoteChar : quoteChar;
            if (regexSingleEscape.test(char)) return singleEscapes[char];
            if (options.minimal && !regexWhitespace.test(char)) return char;
            const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
            return json || hex.length > 2 ? fourHexEscape(hex) : "\\x" + ("00" + hex).slice(-2);
          }), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext && (result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--")), options.wrap && (result = quote + result + quote), result;
        };
        jsesc.version = "3.0.2", module4.exports = jsesc;
      }, "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module4) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module4.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js": (module4) => {
        var s2 = 1e3, m2 = 60 * s2, h = 60 * m2, d2 = 24 * h, w2 = 7 * d2, y2 = 365.25 * d2;
        function plural(ms, msAbs, n2, name) {
          var isPlural = msAbs >= 1.5 * n2;
          return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
        }
        module4.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if ("string" === type && val.length > 0) return function(str) {
            if ((str = String(str)).length > 100) return;
            var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
            if (!match) return;
            var n2 = parseFloat(match[1]);
            switch ((match[2] || "ms").toLowerCase()) {
              case "years":
              case "year":
              case "yrs":
              case "yr":
              case "y":
                return n2 * y2;
              case "weeks":
              case "week":
              case "w":
                return n2 * w2;
              case "days":
              case "day":
              case "d":
                return n2 * d2;
              case "hours":
              case "hour":
              case "hrs":
              case "hr":
              case "h":
                return n2 * h;
              case "minutes":
              case "minute":
              case "mins":
              case "min":
              case "m":
                return n2 * m2;
              case "seconds":
              case "second":
              case "secs":
              case "sec":
              case "s":
                return n2 * s2;
              case "milliseconds":
              case "millisecond":
              case "msecs":
              case "msec":
              case "ms":
                return n2;
              default:
                return;
            }
          }(val);
          if ("number" === type && isFinite(val)) return options.long ? function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d2) return plural(ms, msAbs, d2, "day");
            if (msAbs >= h) return plural(ms, msAbs, h, "hour");
            if (msAbs >= m2) return plural(ms, msAbs, m2, "minute");
            if (msAbs >= s2) return plural(ms, msAbs, s2, "second");
            return ms + " ms";
          }(val) : function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d2) return Math.round(ms / d2) + "d";
            if (msAbs >= h) return Math.round(ms / h) + "h";
            if (msAbs >= m2) return Math.round(ms / m2) + "m";
            if (msAbs >= s2) return Math.round(ms / s2) + "s";
            return ms + "ms";
          }(val);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
      }, "./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js": (module4, exports3) => {
        var debug;
        exports3 = module4.exports = SemVer, debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
          var args = Array.prototype.slice.call(arguments, 0);
          args.unshift("SEMVER"), console.log.apply(console, args);
        } : function() {
        }, exports3.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_LENGTH = 256, MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6, re = exports3.re = [], safeRe = exports3.safeRe = [], src = exports3.src = [], t2 = exports3.tokens = {}, R2 = 0;
        function tok(n2) {
          t2[n2] = R2++;
        }
        var safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]];
        function makeSafeRe(value2) {
          for (var i3 = 0; i3 < safeRegexReplacements.length; i3++) {
            var token = safeRegexReplacements[i3][0], max = safeRegexReplacements[i3][1];
            value2 = value2.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
          }
          return value2;
        }
        tok("NUMERICIDENTIFIER"), src[t2.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t2.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t2.MAINVERSION] = "(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t2.MAINVERSIONLOOSE] = "(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t2.PRERELEASEIDENTIFIER] = "(?:" + src[t2.NUMERICIDENTIFIER] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t2.NUMERICIDENTIFIERLOOSE] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t2.PRERELEASE] = "(?:-(" + src[t2.PRERELEASEIDENTIFIER] + "(?:\\." + src[t2.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t2.PRERELEASELOOSE] = "(?:-?(" + src[t2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t2.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t2.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), src[t2.BUILD] = "(?:\\+(" + src[t2.BUILDIDENTIFIER] + "(?:\\." + src[t2.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t2.FULLPLAIN] = "v?" + src[t2.MAINVERSION] + src[t2.PRERELEASE] + "?" + src[t2.BUILD] + "?", src[t2.FULL] = "^" + src[t2.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t2.LOOSEPLAIN] = "[v=\\s]*" + src[t2.MAINVERSIONLOOSE] + src[t2.PRERELEASELOOSE] + "?" + src[t2.BUILD] + "?", tok("LOOSE"), src[t2.LOOSE] = "^" + src[t2.LOOSEPLAIN] + "$", tok("GTLT"), src[t2.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t2.XRANGEIDENTIFIERLOOSE] = src[t2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t2.XRANGEIDENTIFIER] = src[t2.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t2.XRANGEPLAIN] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:" + src[t2.PRERELEASE] + ")?" + src[t2.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t2.PRERELEASELOOSE] + ")?" + src[t2.BUILD] + "?)?)?", tok("XRANGE"), src[t2.XRANGE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t2.XRANGELOOSE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t2.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t2.COERCERTL] = new RegExp(src[t2.COERCE], "g"), safeRe[t2.COERCERTL] = new RegExp(makeSafeRe(src[t2.COERCE]), "g"), tok("LONETILDE"), src[t2.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t2.TILDETRIM] = "(\\s*)" + src[t2.LONETILDE] + "\\s+", re[t2.TILDETRIM] = new RegExp(src[t2.TILDETRIM], "g"), safeRe[t2.TILDETRIM] = new RegExp(makeSafeRe(src[t2.TILDETRIM]), "g");
        tok("TILDE"), src[t2.TILDE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t2.TILDELOOSE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t2.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t2.CARETTRIM] = "(\\s*)" + src[t2.LONECARET] + "\\s+", re[t2.CARETTRIM] = new RegExp(src[t2.CARETTRIM], "g"), safeRe[t2.CARETTRIM] = new RegExp(makeSafeRe(src[t2.CARETTRIM]), "g");
        tok("CARET"), src[t2.CARET] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t2.CARETLOOSE] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t2.COMPARATORLOOSE] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t2.COMPARATOR] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t2.COMPARATORTRIM] = "(\\s*)" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + "|" + src[t2.XRANGEPLAIN] + ")", re[t2.COMPARATORTRIM] = new RegExp(src[t2.COMPARATORTRIM], "g"), safeRe[t2.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t2.COMPARATORTRIM]), "g");
        tok("HYPHENRANGE"), src[t2.HYPHENRANGE] = "^\\s*(" + src[t2.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t2.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t2.HYPHENRANGELOOSE] = "^\\s*(" + src[t2.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t2.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t2.STAR] = "(<|>)?=?\\s*\\*";
        for (var i2 = 0; i2 < R2; i2++) debug(i2, src[i2]), re[i2] || (re[i2] = new RegExp(src[i2]), safeRe[i2] = new RegExp(makeSafeRe(src[i2])));
        function parse3(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) return version;
          if ("string" != typeof version) return null;
          if (version.length > MAX_LENGTH) return null;
          if (!(options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL]).test(version)) return null;
          try {
            return new SemVer(version, options);
          } catch (er) {
            return null;
          }
        }
        function SemVer(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) {
            if (version.loose === options.loose) return version;
            version = version.version;
          } else if ("string" != typeof version) throw new TypeError("Invalid Version: " + version);
          if (version.length > MAX_LENGTH) throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
          if (!(this instanceof SemVer)) return new SemVer(version, options);
          debug("SemVer", version, options), this.options = options, this.loose = !!options.loose;
          var m2 = version.trim().match(options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL]);
          if (!m2) throw new TypeError("Invalid Version: " + version);
          if (this.raw = version, this.major = +m2[1], this.minor = +m2[2], this.patch = +m2[3], this.major > MAX_SAFE_INTEGER2 || this.major < 0) throw new TypeError("Invalid major version");
          if (this.minor > MAX_SAFE_INTEGER2 || this.minor < 0) throw new TypeError("Invalid minor version");
          if (this.patch > MAX_SAFE_INTEGER2 || this.patch < 0) throw new TypeError("Invalid patch version");
          m2[4] ? this.prerelease = m2[4].split(".").map(function(id) {
            if (/^[0-9]+$/.test(id)) {
              var num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER2) return num;
            }
            return id;
          }) : this.prerelease = [], this.build = m2[5] ? m2[5].split(".") : [], this.format();
        }
        exports3.parse = parse3, exports3.valid = function(version, options) {
          var v2 = parse3(version, options);
          return v2 ? v2.version : null;
        }, exports3.clean = function(version, options) {
          var s2 = parse3(version.trim().replace(/^[=v]+/, ""), options);
          return s2 ? s2.version : null;
        }, exports3.SemVer = SemVer, SemVer.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, SemVer.prototype.toString = function() {
          return this.version;
        }, SemVer.prototype.compare = function(other) {
          return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
        }, SemVer.prototype.compareMain = function(other) {
          return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }, SemVer.prototype.comparePre = function(other) {
          if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
          if (!this.prerelease.length && other.prerelease.length) return 1;
          if (!this.prerelease.length && !other.prerelease.length) return 0;
          var i3 = 0;
          do {
            var a2 = this.prerelease[i3], b = other.prerelease[i3];
            if (debug("prerelease compare", i3, a2, b), void 0 === a2 && void 0 === b) return 0;
            if (void 0 === b) return 1;
            if (void 0 === a2) return -1;
            if (a2 !== b) return compareIdentifiers(a2, b);
          } while (++i3);
        }, SemVer.prototype.compareBuild = function(other) {
          other instanceof SemVer || (other = new SemVer(other, this.options));
          var i3 = 0;
          do {
            var a2 = this.build[i3], b = other.build[i3];
            if (debug("prerelease compare", i3, a2, b), void 0 === a2 && void 0 === b) return 0;
            if (void 0 === b) return 1;
            if (void 0 === a2) return -1;
            if (a2 !== b) return compareIdentifiers(a2, b);
          } while (++i3);
        }, SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "prerelease":
              0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "major":
              0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              0 === this.prerelease.length && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (0 === this.prerelease.length) this.prerelease = [0];
              else {
                for (var i3 = this.prerelease.length; --i3 >= 0; ) "number" == typeof this.prerelease[i3] && (this.prerelease[i3]++, i3 = -2);
                -1 === i3 && this.prerelease.push(0);
              }
              identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          return this.format(), this.raw = this.version, this;
        }, exports3.inc = function(version, release, loose, identifier) {
          "string" == typeof loose && (identifier = loose, loose = void 0);
          try {
            return new SemVer(version, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }, exports3.diff = function(version1, version2) {
          if (eq2(version1, version2)) return null;
          var v1 = parse3(version1), v2 = parse3(version2), prefix = "";
          if (v1.prerelease.length || v2.prerelease.length) {
            prefix = "pre";
            var defaultResult = "prerelease";
          }
          for (var key in v1) if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key]) return prefix + key;
          return defaultResult;
        }, exports3.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a2, b) {
          var anum = numeric.test(a2), bnum = numeric.test(b);
          return anum && bnum && (a2 = +a2, b = +b), a2 === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b ? -1 : 1;
        }
        function compare(a2, b, loose) {
          return new SemVer(a2, loose).compare(new SemVer(b, loose));
        }
        function gt(a2, b, loose) {
          return compare(a2, b, loose) > 0;
        }
        function lt(a2, b, loose) {
          return compare(a2, b, loose) < 0;
        }
        function eq2(a2, b, loose) {
          return 0 === compare(a2, b, loose);
        }
        function neq(a2, b, loose) {
          return 0 !== compare(a2, b, loose);
        }
        function gte2(a2, b, loose) {
          return compare(a2, b, loose) >= 0;
        }
        function lte(a2, b, loose) {
          return compare(a2, b, loose) <= 0;
        }
        function cmp(a2, op, b, loose) {
          switch (op) {
            case "===":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b && (b = b.version), a2 === b;
            case "!==":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b && (b = b.version), a2 !== b;
            case "":
            case "=":
            case "==":
              return eq2(a2, b, loose);
            case "!=":
              return neq(a2, b, loose);
            case ">":
              return gt(a2, b, loose);
            case ">=":
              return gte2(a2, b, loose);
            case "<":
              return lt(a2, b, loose);
            case "<=":
              return lte(a2, b, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        function Comparator(comp, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            comp = comp.value;
          }
          if (!(this instanceof Comparator)) return new Comparator(comp, options);
          comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
        }
        exports3.rcompareIdentifiers = function(a2, b) {
          return compareIdentifiers(b, a2);
        }, exports3.major = function(a2, loose) {
          return new SemVer(a2, loose).major;
        }, exports3.minor = function(a2, loose) {
          return new SemVer(a2, loose).minor;
        }, exports3.patch = function(a2, loose) {
          return new SemVer(a2, loose).patch;
        }, exports3.compare = compare, exports3.compareLoose = function(a2, b) {
          return compare(a2, b, true);
        }, exports3.compareBuild = function(a2, b, loose) {
          var versionA = new SemVer(a2, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }, exports3.rcompare = function(a2, b, loose) {
          return compare(b, a2, loose);
        }, exports3.sort = function(list, loose) {
          return list.sort(function(a2, b) {
            return exports3.compareBuild(a2, b, loose);
          });
        }, exports3.rsort = function(list, loose) {
          return list.sort(function(a2, b) {
            return exports3.compareBuild(b, a2, loose);
          });
        }, exports3.gt = gt, exports3.lt = lt, exports3.eq = eq2, exports3.neq = neq, exports3.gte = gte2, exports3.lte = lte, exports3.cmp = cmp, exports3.Comparator = Comparator;
        var ANY = {};
        function Range(range, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
          if (range instanceof Comparator) return new Range(range.value, options);
          if (!(this instanceof Range)) return new Range(range, options);
          if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c2) {
            return c2.length;
          }), !this.set.length) throw new TypeError("Invalid SemVer Range: " + this.raw);
          this.format();
        }
        function isSatisfiable(comparators, options) {
          for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; ) result = remainingComparators.every(function(otherComparator) {
            return testComparator.intersects(otherComparator, options);
          }), testComparator = remainingComparators.pop();
          return result;
        }
        function isX(id) {
          return !id || "x" === id.toLowerCase() || "*" === id;
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
        }
        function testSet(set, version, options) {
          for (var i3 = 0; i3 < set.length; i3++) if (!set[i3].test(version)) return false;
          if (version.prerelease.length && !options.includePrerelease) {
            for (i3 = 0; i3 < set.length; i3++) if (debug(set[i3].semver), set[i3].semver !== ANY && set[i3].semver.prerelease.length > 0) {
              var allowed = set[i3].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
            return false;
          }
          return true;
        }
        function satisfies2(version, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version);
        }
        function outside(version, range, hilo, options) {
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte2, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies2(version, range, options)) return false;
          for (var i3 = 0; i3 < range.set.length; ++i3) {
            var comparators = range.set[i3], high = null, low = null;
            if (comparators.forEach(function(comparator) {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp) return false;
            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
            if (low.operator === ecomp && ltfn(version, low.semver)) return false;
          }
          return true;
        }
        Comparator.prototype.parse = function(comp) {
          var r2 = this.options.loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR], m2 = comp.match(r2);
          if (!m2) throw new TypeError("Invalid comparator: " + comp);
          this.operator = void 0 !== m2[1] ? m2[1] : "", "=" === this.operator && (this.operator = ""), m2[2] ? this.semver = new SemVer(m2[2], this.options.loose) : this.semver = ANY;
        }, Comparator.prototype.toString = function() {
          return this.value;
        }, Comparator.prototype.test = function(version) {
          if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return true;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          return cmp(version, this.operator, this.semver, this.options);
        }, Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
          var rangeTmp;
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator) return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies2(this.value, rangeTmp, options));
          if ("" === comp.operator) return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies2(comp.semver, rangeTmp, options));
          var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }, exports3.Range = Range, Range.prototype.format = function() {
          return this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim(), this.range;
        }, Range.prototype.toString = function() {
          return this.range;
        }, Range.prototype.parseRange = function(range) {
          var loose = this.options.loose, hr = loose ? safeRe[t2.HYPHENRANGELOOSE] : safeRe[t2.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(safeRe[t2.COMPARATORTRIM], "$1$2$3"), debug("comparator trim", range, safeRe[t2.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t2.TILDETRIM], "$1~")).replace(safeRe[t2.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var compRe = loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR], set = range.split(" ").map(function(comp) {
            return function(comp2, options) {
              return debug("comp", comp2, options), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    debug("caret", comp5, options3);
                    var r2 = options3.loose ? safeRe[t2.CARETLOOSE] : safeRe[t2.CARET];
                    return comp5.replace(r2, function(_2, M2, m2, p2, pr) {
                      var ret;
                      return debug("caret", comp5, _2, M2, m2, p2, pr), isX(M2) ? ret = "" : isX(m2) ? ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0" : isX(p2) ? ret = "0" === M2 ? ">=" + M2 + "." + m2 + ".0 <" + M2 + "." + (+m2 + 1) + ".0" : ">=" + M2 + "." + m2 + ".0 <" + (+M2 + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), ret = "0" === M2 ? "0" === m2 ? ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + m2 + "." + (+p2 + 1) : ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + (+m2 + 1) + ".0" : ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + (+M2 + 1) + ".0.0") : (debug("no pr"), ret = "0" === M2 ? "0" === m2 ? ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + m2 + "." + (+p2 + 1) : ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + (+m2 + 1) + ".0" : ">=" + M2 + "." + m2 + "." + p2 + " <" + (+M2 + 1) + ".0.0"), debug("caret return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("caret", comp2), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    var r2 = options3.loose ? safeRe[t2.TILDELOOSE] : safeRe[t2.TILDE];
                    return comp5.replace(r2, function(_2, M2, m2, p2, pr) {
                      var ret;
                      return debug("tilde", comp5, _2, M2, m2, p2, pr), isX(M2) ? ret = "" : isX(m2) ? ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0" : isX(p2) ? ret = ">=" + M2 + "." + m2 + ".0 <" + M2 + "." + (+m2 + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), ret = ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + (+m2 + 1) + ".0") : ret = ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + (+m2 + 1) + ".0", debug("tilde return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("tildes", comp2), comp2 = function(comp3, options2) {
                return debug("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    comp5 = comp5.trim();
                    var r2 = options3.loose ? safeRe[t2.XRANGELOOSE] : safeRe[t2.XRANGE];
                    return comp5.replace(r2, function(ret, gtlt, M2, m2, p2, pr) {
                      debug("xRange", comp5, ret, gtlt, M2, m2, p2, pr);
                      var xM = isX(M2), xm = xM || isX(m2), xp = xm || isX(p2), anyX = xp;
                      return "=" === gtlt && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m2 = 0), p2 = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M2 = +M2 + 1, m2 = 0, p2 = 0) : (m2 = +m2 + 1, p2 = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M2 = +M2 + 1 : m2 = +m2 + 1), ret = gtlt + M2 + "." + m2 + "." + p2 + pr) : xm ? ret = ">=" + M2 + ".0.0" + pr + " <" + (+M2 + 1) + ".0.0" + pr : xp && (ret = ">=" + M2 + "." + m2 + ".0" + pr + " <" + M2 + "." + (+m2 + 1) + ".0" + pr), debug("xRange return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("xrange", comp2), comp2 = function(comp3, options2) {
                return debug("replaceStars", comp3, options2), comp3.trim().replace(safeRe[t2.STAR], "");
              }(comp2, options), debug("stars", comp2), comp2;
            }(comp, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (set = set.filter(function(comp) {
            return !!comp.match(compRe);
          })), set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
        }, Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range)) throw new TypeError("a Range is required");
          return this.set.some(function(thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }, exports3.toComparators = function(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c2) {
              return c2.value;
            }).join(" ").trim().split(" ");
          });
        }, Range.prototype.test = function(version) {
          if (!version) return false;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          for (var i3 = 0; i3 < this.set.length; i3++) if (testSet(this.set[i3], version, this.options)) return true;
          return false;
        }, exports3.satisfies = satisfies2, exports3.maxSatisfying = function(versions, range, options) {
          var max = null, maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v2) {
            rangeObj.test(v2) && (max && -1 !== maxSV.compare(v2) || (maxSV = new SemVer(max = v2, options)));
          }), max;
        }, exports3.minSatisfying = function(versions, range, options) {
          var min = null, minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v2) {
            rangeObj.test(v2) && (min && 1 !== minSV.compare(v2) || (minSV = new SemVer(min = v2, options)));
          }), min;
        }, exports3.minVersion = function(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver)) return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
          minver = null;
          for (var i3 = 0; i3 < range.set.length; ++i3) {
            range.set[i3].forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  minver && !gt(minver, compver) || (minver = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver)) return minver;
          return null;
        }, exports3.validRange = function(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }, exports3.ltr = function(version, range, options) {
          return outside(version, range, "<", options);
        }, exports3.gtr = function(version, range, options) {
          return outside(version, range, ">", options);
        }, exports3.outside = outside, exports3.prerelease = function(version, options) {
          var parsed = parse3(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }, exports3.intersects = function(r1, r2, options) {
          return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
        }, exports3.coerce = function(version, options) {
          if (version instanceof SemVer) return version;
          "number" == typeof version && (version = String(version));
          if ("string" != typeof version) return null;
          var match = null;
          if ((options = options || {}).rtl) {
            for (var next; (next = safeRe[t2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), safeRe[t2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            safeRe[t2.COERCERTL].lastIndex = -1;
          } else match = version.match(safeRe[t2.COERCE]);
          if (null === match) return null;
          return parse3(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
        };
      }, "./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module4, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const os = __webpack_require__2("os"), tty = __webpack_require__2("tty"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env } = process;
        let forceColor;
        function translateLevel(level) {
          return 0 !== level && { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (0 === forceColor) return 0;
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
          if (hasFlag("color=256")) return 2;
          if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
          const min = forceColor || 0;
          if ("dumb" === env.TERM) return min;
          if ("win32" === process.platform) {
            const osRelease = os.release().split(".");
            return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
          }
          if ("CI" in env) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || "codeship" === env.CI_NAME ? 1 : min;
          if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          if ("truecolor" === env.COLORTERM) return 3;
          if ("TERM_PROGRAM" in env) {
            const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
        }
        hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env && (forceColor = "true" === env.FORCE_COLOR ? 1 : "false" === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)), module4.exports = { supportsColor: function(stream) {
          return translateLevel(supportsColor(stream, stream && stream.isTTY));
        }, stdout: translateLevel(supportsColor(true, tty.isatty(1))), stderr: translateLevel(supportsColor(true, tty.isatty(2))) };
      }, assert: (module4) => {
        "use strict";
        module4.exports = require_assert();
      }, fs: (module4) => {
        "use strict";
        module4.exports = require_fs();
      }, module: (module4) => {
        "use strict";
        module4.exports = require_module();
      }, os: (module4) => {
        "use strict";
        module4.exports = require_os();
      }, path: (module4) => {
        "use strict";
        module4.exports = require_path();
      }, process: (module4) => {
        "use strict";
        module4.exports = require_browser();
      }, tty: (module4) => {
        "use strict";
        module4.exports = require_tty();
      }, url: (module4) => {
        "use strict";
        module4.exports = require_url();
      }, util: (module4) => {
        "use strict";
        module4.exports = require_util();
      }, v8: (module4) => {
        "use strict";
        module4.exports = require_v8();
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertSimpleType = assertSimpleType, exports3.makeStrongCache = makeStrongCache, exports3.makeStrongCacheSync = function(handler) {
          return synchronize(makeStrongCache(handler));
        }, exports3.makeWeakCache = makeWeakCache, exports3.makeWeakCacheSync = function(handler) {
          return synchronize(makeWeakCache(handler));
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js");
        const synchronize = (gen) => _gensync()(gen).sync;
        function* genTrue() {
          return true;
        }
        function makeWeakCache(handler) {
          return makeCachedFunction(WeakMap, handler);
        }
        function makeStrongCache(handler) {
          return makeCachedFunction(Map, handler);
        }
        function makeCachedFunction(CallCache, handler) {
          const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
          return function* (arg, data) {
            const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data2) {
              const cached2 = yield* getCachedValue(callCache2, arg2, data2);
              if (cached2.valid) return cached2;
              if (asyncContext2) {
                const cached3 = yield* getCachedValue(futureCache2, arg2, data2);
                if (cached3.valid) {
                  return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
                }
              }
              return { valid: false, value: null };
            }(asyncContext, callCache, futureCache, arg, data);
            if (cached.valid) return cached.value;
            const cache = new CacheConfigurator(data), handlerResult = handler(arg, cache);
            let finishLock, value2;
            return value2 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
              finishLock = function(config, futureCache2, arg2) {
                const finishLock2 = new Lock();
                return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
              }(cache, futureCache, arg);
            }) : handlerResult, updateFunctionCache(callCache, cache, arg, value2), finishLock && (futureCache.delete(arg), finishLock.release(value2)), value2;
          };
        }
        function* getCachedValue(cache, arg, data) {
          const cachedValue = cache.get(arg);
          if (cachedValue) {
            for (const { value: value2, valid } of cachedValue) if (yield* valid(data)) return { valid: true, value: value2 };
          }
          return { valid: false, value: null };
        }
        function updateFunctionCache(cache, config, arg, value2) {
          config.configured() || config.forever();
          let cachedValue = cache.get(arg);
          switch (config.deactivate(), config.mode()) {
            case "forever":
              cachedValue = [{ value: value2, valid: genTrue }], cache.set(arg, cachedValue);
              break;
            case "invalidate":
              cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue);
              break;
            case "valid":
              cachedValue ? cachedValue.push({ value: value2, valid: config.validator() }) : (cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue));
          }
        }
        class CacheConfigurator {
          constructor(data) {
            this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = void 0, this._data = data;
          }
          simple() {
            return function(cache) {
              function cacheFn(val) {
                if ("boolean" != typeof val) return cache.using(() => assertSimpleType(val()));
                val ? cache.forever() : cache.never();
              }
              return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
            }(this);
          }
          mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
          }
          forever() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never) throw new Error("Caching has already been configured with .never()");
            this._forever = true, this._configured = true;
          }
          never() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever) throw new Error("Caching has already been configured with .forever()");
            this._never = true, this._configured = true;
          }
          using(handler) {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever) throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
            return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
          }
          invalidate(handler) {
            return this._invalidate = true, this.using(handler);
          }
          validator() {
            const pairs = this._pairs;
            return function* (data) {
              for (const [key, fn] of pairs) if (key !== (yield* fn(data))) return false;
              return true;
            };
          }
          deactivate() {
            this._active = false;
          }
          configured() {
            return this._configured;
          }
        }
        function assertSimpleType(value2) {
          if ((0, _async.isThenable)(value2)) throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
          if (null != value2 && "string" != typeof value2 && "boolean" != typeof value2 && "number" != typeof value2) throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
          return value2;
        }
        class Lock {
          constructor() {
            this.released = false, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve7) => {
              this._resolve = resolve7;
            });
          }
          release(value2) {
            this.released = true, this._resolve(value2);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildPresetChain = function* (arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o) => normalizeOptions3(o)), files: /* @__PURE__ */ new Set() } : null;
        }, exports3.buildPresetChainWalker = void 0, exports3.buildRootChain = function* (opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, void 0, programmaticLogger);
          if (!programmaticChain) return null;
          const programmaticReport = yield* programmaticLogger.output();
          let configFile;
          "string" == typeof opts.configFile ? configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : false !== opts.configFile && (configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller));
          let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
          if (configFile) {
            const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
            if (!result) return null;
            configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
          }
          let ignoreFile, babelrcFile, isIgnored = false;
          const fileChain = emptyChain();
          if ((true === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
            const pkgData = yield* (0, _index.findPackageData)(context.filename);
            if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
              if ("boolean" == typeof babelrcRoots2) return babelrcRoots2;
              const absoluteRoot = context2.root;
              if (void 0 === babelrcRoots2) return pkgData2.directories.includes(absoluteRoot);
              let babelrcPatterns = babelrcRoots2;
              Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
              if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory2, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot) return pkgData2.directories.includes(absoluteRoot);
              return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
            }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
              if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
                const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
                result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
              }
              babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
            }
          }
          context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join("\n\n") + "\n-----End Babel configs-----");
          const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
          return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o) => normalizeOptions3(o)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || void 0, babelrc: babelrcFile || void 0, config: configFile || void 0, files: chain.files };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
        const debug = _debug()("babel:config:config-chain");
        const buildPresetChainWalker = exports3.buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index2) => loadPresetOverridesDescriptors(preset)(index2), overridesEnv: (preset, index2, envName) => loadPresetOverridesEnvDescriptors(preset)(index2)(envName), createLogger: () => () => {
        } }), loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2, envName))));
        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index2) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index2), overridesEnv: (input, index2, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index2, envName), createLogger: (input, context, baseLogger) => function(_2, context2, baseLogger2) {
          var _context$caller;
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context2.caller) ? void 0 : _context$caller.name });
        }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index2) => loadFileOverridesDescriptors(file)(index2), overridesEnv: (file, index2, envName) => loadFileOverridesEnvDescriptors(file)(index2)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
        }(file.filepath, context, baseLogger) });
        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
          return null == chain || chain.files.add(input.filepath), chain;
        }
        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index2))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index2, envName))));
        function buildRootDescriptors({ dirname: dirname3, options }, alias, descriptors) {
          return descriptors(dirname3, options, alias);
        }
        function buildEnvDescriptors({ dirname: dirname3, options }, alias, descriptors, envName) {
          var _options$env;
          const opts = null == (_options$env = options.env) ? void 0 : _options$env[envName];
          return opts ? descriptors(dirname3, opts, `${alias}.env["${envName}"]`) : null;
        }
        function buildOverrideDescriptors({ dirname: dirname3, options }, alias, descriptors, index2) {
          var _options$overrides;
          const opts = null == (_options$overrides = options.overrides) ? void 0 : _options$overrides[index2];
          if (!opts) throw new Error("Assertion failure - missing override");
          return descriptors(dirname3, opts, `${alias}.overrides[${index2}]`);
        }
        function buildOverrideEnvDescriptors({ dirname: dirname3, options }, alias, descriptors, index2, envName) {
          var _options$overrides2, _override$env;
          const override = null == (_options$overrides2 = options.overrides) ? void 0 : _options$overrides2[index2];
          if (!override) throw new Error("Assertion failure - missing override");
          const opts = null == (_override$env = override.env) ? void 0 : _override$env[envName];
          return opts ? descriptors(dirname3, opts, `${alias}.overrides[${index2}].env["${envName}"]`) : null;
        }
        function makeChainWalker({ root: root2, env, overrides, overridesEnv, createLogger }) {
          return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
            const { dirname: dirname3 } = input, flattenedConfigs = [], rootOpts = root2(input);
            if (configIsApplicable(rootOpts, dirname3, context, input.filepath)) {
              flattenedConfigs.push({ config: rootOpts, envName: void 0, index: void 0 });
              const envOpts = env(input, context.envName);
              envOpts && configIsApplicable(envOpts, dirname3, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: void 0 }), (rootOpts.options.overrides || []).forEach((_2, index2) => {
                const overrideOps = overrides(input, index2);
                if (configIsApplicable(overrideOps, dirname3, context, input.filepath)) {
                  flattenedConfigs.push({ config: overrideOps, index: index2, envName: void 0 });
                  const overrideEnvOpts = overridesEnv(input, index2, context.envName);
                  overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname3, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index: index2, envName: context.envName });
                }
              });
            }
            if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname3))) return null;
            const chain = emptyChain(), logger2 = createLogger(input, context, baseLogger);
            for (const { config, index: index2, envName } of flattenedConfigs) {
              if (!(yield* mergeExtendsChain(chain, config.options, dirname3, context, files, baseLogger))) return null;
              logger2(config, index2, envName), yield* mergeChainOpts(chain, config);
            }
            return chain;
          };
        }
        function* mergeExtendsChain(chain, opts, dirname3, context, files, baseLogger) {
          if (void 0 === opts.extends) return true;
          const file = yield* (0, _index.loadConfig)(opts.extends, dirname3, context.envName, context.caller);
          if (files.has(file)) throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join("\n"));
          files.add(file);
          const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
          return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
        }
        function mergeChain(target, source) {
          target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
          for (const file of source.files) target.files.add(file);
          return target;
        }
        function* mergeChainOpts(target, { options, plugins, presets }) {
          return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
        }
        function emptyChain() {
          return { options: [], presets: [], plugins: [], files: /* @__PURE__ */ new Set() };
        }
        function normalizeOptions3(opts) {
          const options = Object.assign({}, opts);
          return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
        }
        function dedupDescriptors(items) {
          const map = /* @__PURE__ */ new Map(), descriptors = [];
          for (const item of items) if ("function" == typeof item.value) {
            const fnKey = item.value;
            let nameMap = map.get(fnKey);
            nameMap || (nameMap = /* @__PURE__ */ new Map(), map.set(fnKey, nameMap));
            let desc = nameMap.get(item.name);
            desc ? desc.value = item : (desc = { value: item }, descriptors.push(desc), item.ownPass || nameMap.set(item.name, desc));
          } else descriptors.push({ value: item });
          return descriptors.reduce((acc, desc) => (acc.push(desc.value), acc), []);
        }
        function configIsApplicable({ options }, dirname3, context, configName) {
          return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname3, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname3, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname3, configName));
        }
        function configFieldIsApplicable(context, test, dirname3, configName) {
          return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname3, configName);
        }
        function ignoreListReplacer(_key, value2) {
          return value2 instanceof RegExp ? String(value2) : value2;
        }
        function shouldIgnore(context, ignore, only, dirname3) {
          if (ignore && matchesPatterns(context, ignore, dirname3)) {
            var _context$filename;
            const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname3}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          if (only && !matchesPatterns(context, only, dirname3)) {
            var _context$filename2;
            const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname3}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          return false;
        }
        function matchesPatterns(context, patterns, dirname3, configName) {
          return patterns.some((pattern) => matchPattern(pattern, dirname3, context.filename, context, configName));
        }
        function matchPattern(pattern, dirname3, pathToTest, context, configName) {
          if ("function" == typeof pattern) return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname: dirname3, envName: context.envName, caller: context.caller });
          if ("string" != typeof pathToTest) throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
          return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname3)), pattern.test(pathToTest);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createCachedDescriptors = function(dirname3, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname3), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname3)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname3)(alias)(!!passPerPreset) : () => handlerOf([]) };
        }, exports3.createDescriptor = createDescriptor, exports3.createUncachedDescriptors = function(dirname3, options, alias) {
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname3), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname3, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname3, alias, !!options.passPerPreset)) };
        };
        var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
        function* handlerOf(value2) {
          return value2;
        }
        function optionsWithResolvedBrowserslistConfigFile(options, dirname3) {
          return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname3)), options;
        }
        const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname3 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
            return (yield* createPresetDescriptors(items, dirname3, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
          }));
        }), PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname3 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCache)(function* (alias) {
            return (yield* createPluginDescriptors(items, dirname3, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
          });
        }), DEFAULT_OPTIONS = {};
        function loadCachedDescriptor(cache, desc) {
          const { value: value2, options = DEFAULT_OPTIONS } = desc;
          if (false === options) return desc;
          let cacheByOptions = cache.get(value2);
          cacheByOptions || (cacheByOptions = /* @__PURE__ */ new WeakMap(), cache.set(value2, cacheByOptions));
          let possibilities = cacheByOptions.get(options);
          if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), !possibilities.includes(desc)) {
            const matches = possibilities.filter((possibility) => {
              return b = desc, (a2 = possibility).name === b.name && a2.value === b.value && a2.options === b.options && a2.dirname === b.dirname && a2.alias === b.alias && a2.ownPass === b.ownPass && (null == (_a$file = a2.file) ? void 0 : _a$file.request) === (null == (_b$file = b.file) ? void 0 : _b$file.request) && (null == (_a$file2 = a2.file) ? void 0 : _a$file2.resolved) === (null == (_b$file2 = b.file) ? void 0 : _b$file2.resolved);
              var a2, b, _a$file, _b$file, _a$file2, _b$file2;
            });
            if (matches.length > 0) return matches[0];
            possibilities.push(desc);
          }
          return desc;
        }
        function* createPresetDescriptors(items, dirname3, alias, passPerPreset) {
          return yield* createDescriptors("preset", items, dirname3, alias, passPerPreset);
        }
        function* createPluginDescriptors(items, dirname3, alias) {
          return yield* createDescriptors("plugin", items, dirname3, alias);
        }
        function* createDescriptors(type, items, dirname3, alias, ownPass) {
          const descriptors = yield* _gensync().all(items.map((item, index2) => createDescriptor(item, dirname3, { type, alias: `${alias}$${index2}`, ownPass: !!ownPass })));
          return function(items2) {
            const map = /* @__PURE__ */ new Map();
            for (const item of items2) {
              if ("function" != typeof item.value) continue;
              let nameMap = map.get(item.value);
              if (nameMap || (nameMap = /* @__PURE__ */ new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
                const conflicts = items2.filter((i2) => i2.value === item.value);
                throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
              }
              nameMap.add(item.name);
            }
          }(descriptors), descriptors;
        }
        function* createDescriptor(pair, dirname3, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);
          if (desc) return desc;
          let name, options, file, value2 = pair;
          Array.isArray(value2) && (3 === value2.length ? [value2, options, name] = value2 : [value2, options] = value2);
          let filepath = null;
          if ("string" == typeof value2) {
            if ("string" != typeof type) throw new Error("To resolve a string-based item, the type of item must be given");
            const resolver = "plugin" === type ? _index.loadPlugin : _index.loadPreset, request = value2;
            ({ filepath, value: value2 } = yield* resolver(value2, dirname3)), file = { request, resolved: filepath };
          }
          if (!value2) throw new Error(`Unexpected falsy value: ${String(value2)}`);
          if ("object" == typeof value2 && value2.__esModule) {
            if (!value2.default) throw new Error("Must export a default export when using ES6 modules.");
            value2 = value2.default;
          }
          if ("object" != typeof value2 && "function" != typeof value2) throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
          if (null !== filepath && "object" == typeof value2 && value2) throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
          return { name, alias: filepath || alias, value: value2, options, dirname: dirname3, ownPass, file };
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _json() {
          const data = __webpack_require__2("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
          return _json = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ROOT_CONFIG_FILENAMES = void 0, exports3.findConfigUpwards = function(rootDir) {
          let dirname3 = rootDir;
          for (; ; ) {
            for (const filename of ROOT_CONFIG_FILENAMES) if (_fs().existsSync(_path().join(dirname3, filename))) return dirname3;
            const nextDir = _path().dirname(dirname3);
            if (dirname3 === nextDir) break;
            dirname3 = nextDir;
          }
          return null;
        }, exports3.findRelativeConfig = function* (packageData, envName, caller) {
          let config = null, ignore = null;
          const dirname3 = _path().dirname(packageData.filepath);
          for (const loc of packageData.directories) {
            var _packageData$pkg;
            if (!config) config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
            if (!ignore) {
              const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
              ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug("Found ignore %o from %o.", ignore.filepath, dirname3);
            }
          }
          return { config, ignore };
        }, exports3.findRootConfig = function(dirname3, envName, caller) {
          return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname3, envName, caller);
        }, exports3.loadConfig = function* (name, dirname3, envName, caller) {
          const filepath = (v2 = process.versions.node, w2 = "8.9", v2 = v2.split("."), w2 = w2.split("."), +v2[0] > +w2[0] || v2[0] == w2[0] && +v2[1] >= +w2[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b] }, M2 = __webpack_require__2("module")) => {
            let f2 = M2._findPath(r2, M2._nodeModulePaths(b).concat(b));
            if (f2) return f2;
            throw f2 = new Error(`Cannot resolve module '${r2}'`), f2.code = "MODULE_NOT_FOUND", f2;
          })(name, { paths: [dirname3] }), conf = yield* readConfig(filepath, envName, caller);
          var v2, w2;
          if (!conf) throw new _configError.default("Config file contains no configuration data", filepath);
          return debug("Loaded config %o from %o.", name, dirname3), conf;
        }, exports3.resolveShowConfigPath = function* (dirname3) {
          const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
          if (null != targetPath) {
            const absolutePath = _path().resolve(dirname3, targetPath);
            if (!(yield* fs4.stat(absolutePath)).isFile()) throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
            return absolutePath;
          }
          return null;
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
        const debug = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = exports3.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"], RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], BABELIGNORE_FILENAME = ".babelignore", runConfig = (0, _caching.makeWeakCache)(function* (options, cache) {
          return yield* [], { options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), cacheNeedsConfiguration: !cache.configured() };
        });
        function* readConfigCode(filepath, data) {
          if (!_fs().existsSync(filepath)) return null;
          let options = yield* (0, _moduleTypes.default)(filepath, (yield* (0, _async.isAsync)()) ? "auto" : "require", "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously or when using the Node.js `--experimental-require-module` flag.", "You appear to be using a configuration file that contains top-level await, which is only supported when running Babel asynchronously."), cacheNeedsConfiguration = false;
          if ("function" == typeof options && ({ options, cacheNeedsConfiguration } = yield* runConfig(options, data)), !options || "object" != typeof options || Array.isArray(options)) throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
          if ("function" == typeof options.then) throw null == options.catch || options.catch(() => {
          }), new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
          return cacheNeedsConfiguration && function(filepath2) {
            throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
          }(filepath), function(options2, filepath2) {
            let configFilesByFilepath = cfboaf.get(options2);
            configFilesByFilepath || cfboaf.set(options2, configFilesByFilepath = /* @__PURE__ */ new Map());
            let configFile = configFilesByFilepath.get(filepath2);
            configFile || (configFile = { filepath: filepath2, dirname: _path().dirname(filepath2), options: options2 }, configFilesByFilepath.set(filepath2, configFile));
            return configFile;
          }(options, filepath);
        }
        const cfboaf = /* @__PURE__ */ new WeakMap();
        const packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
          const babel = file.options.babel;
          if (void 0 === babel) return null;
          if ("object" != typeof babel || Array.isArray(babel) || null === babel) throw new _configError.default(".babel property must be an object", file.filepath);
          return { filepath: file.filepath, dirname: file.dirname, options: babel };
        }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = _json().parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
          }
          if (!options) throw new _configError.default("No config detected", filepath);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
        }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
          const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#.*$/, "").trim()).filter(Boolean);
          for (const pattern of ignorePatterns) if ("!" === pattern[0]) throw new _configError.default("Negation of file paths is not supported.", filepath);
          return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
        });
        function* loadOneConfig(names, dirname3, envName, caller, previousConfig = null) {
          const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname3, filename), envName, caller)))).reduce((previousConfig2, config2) => {
            if (config2 && previousConfig2) throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname3}`);
            return config2 || previousConfig2;
          }, previousConfig);
          return config && debug("Found configuration %o from %o.", config.filepath, dirname3), config;
        }
        function readConfig(filepath, envName, caller) {
          switch (_path().extname(filepath)) {
            case ".js":
            case ".cjs":
            case ".mjs":
            case ".cts":
              return readConfigCode(filepath, { envName, caller });
            default:
              return readConfigJSON5(filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs": (module4, __unused_webpack_exports, __webpack_require__2) => {
        module4.exports = function(filepath) {
          return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
          return _configuration.ROOT_CONFIG_FILENAMES;
        } }), Object.defineProperty(exports3, "findConfigUpwards", { enumerable: true, get: function() {
          return _configuration.findConfigUpwards;
        } }), Object.defineProperty(exports3, "findPackageData", { enumerable: true, get: function() {
          return _package.findPackageData;
        } }), Object.defineProperty(exports3, "findRelativeConfig", { enumerable: true, get: function() {
          return _configuration.findRelativeConfig;
        } }), Object.defineProperty(exports3, "findRootConfig", { enumerable: true, get: function() {
          return _configuration.findRootConfig;
        } }), Object.defineProperty(exports3, "loadConfig", { enumerable: true, get: function() {
          return _configuration.loadConfig;
        } }), Object.defineProperty(exports3, "loadPlugin", { enumerable: true, get: function() {
          return _plugins.loadPlugin;
        } }), Object.defineProperty(exports3, "loadPreset", { enumerable: true, get: function() {
          return _plugins.loadPreset;
        } }), Object.defineProperty(exports3, "resolvePlugin", { enumerable: true, get: function() {
          return _plugins.resolvePlugin;
        } }), Object.defineProperty(exports3, "resolvePreset", { enumerable: true, get: function() {
          return _plugins.resolvePreset;
        } }), Object.defineProperty(exports3, "resolveShowConfigPath", { enumerable: true, get: function() {
          return _configuration.resolveShowConfigPath;
        } });
        var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (filepath, loader, esmError, tlaError) {
          var _async2;
          let async, ext = _path().extname(filepath);
          SUPPORTED_EXTENSIONS2.has(ext) || (ext = ".js");
          switch (`${loader} ${ext}`) {
            case "require .cjs":
            case "auto .cjs":
              return loadCjsDefault(filepath, arguments[2]);
            case "require .cts":
            case "auto .cts":
              return function(filepath2) {
                const ext2 = ".cts", hasTsSupport = !!(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
                let handler;
                if (!hasTsSupport) {
                  const opts = { babelrc: false, configFile: false, sourceType: "unambiguous", sourceMaps: "inline", sourceFileName: _path().basename(filepath2), presets: [[getTSPreset(filepath2), Object.assign({ onlyRemoveTypeImports: true, optimizeConstEnums: true }, { allowDeclareFields: true })]] };
                  handler = function(m2, filename) {
                    if (handler && filename.endsWith(ext2)) try {
                      return m2._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename);
                    } catch (error) {
                      if (!hasTsSupport) {
                        const packageJson = __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json");
                        _semver().lt(packageJson.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-typescript`.");
                      }
                      throw error;
                    }
                    return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m2, filename);
                  }, __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] = handler;
                }
                try {
                  return loadCjsDefault(filepath2);
                } finally {
                  hasTsSupport || (__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] === handler && delete __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2], handler = void 0);
                }
              }(filepath);
            case "auto .js":
            case "require .js":
            case "require .mjs":
              try {
                return loadCjsDefault(filepath, arguments[2]);
              } catch (e) {
                var _async;
                if ("ERR_REQUIRE_ASYNC_MODULE" === e.code || "ERR_REQUIRE_CYCLE_MODULE" === e.code && asyncModules.has(filepath)) {
                  if (asyncModules.add(filepath), !(null != (_async = async) ? _async : async = yield* (0, _async3.isAsync)())) throw new _configError.default(tlaError, filepath);
                } else if ("ERR_REQUIRE_ESM" !== e.code && ".mjs" !== ext) throw e;
              }
            case "auto .mjs":
              if (null != (_async2 = async) ? _async2 : async = yield* (0, _async3.isAsync)()) return (yield* (0, _async3.waitFor)(loadMjsFromPath(filepath))).default;
              throw new _configError.default(esmError, filepath);
            default:
              throw new Error("Internal Babel error: unreachable code.");
          }
        }, exports3.supportsESM = void 0;
        var _async3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js");
        function asyncGeneratorStep(n3, t2, e, r2, o, a2, c2) {
          try {
            var i2 = n3[a2](c2), u2 = i2.value;
          } catch (n4) {
            return void e(n4);
          }
          i2.done ? t2(u2) : Promise.resolve(u2).then(r2, o);
        }
        const debug = _debug()("babel:config:loading:files:module-types");
        try {
          var import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        exports3.supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
        const LOADING_CJS_FILES = /* @__PURE__ */ new Set();
        function loadCjsDefault(filepath) {
          if (LOADING_CJS_FILES.has(filepath)) return debug("Auto-ignoring usage of config %o.", filepath), {};
          let module4;
          try {
            LOADING_CJS_FILES.add(filepath), module4 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
          } finally {
            LOADING_CJS_FILES.delete(filepath);
          }
          return null == module4 || !module4.__esModule && "Module" !== module4[Symbol.toStringTag] ? module4 : module4.default || (arguments[1] ? module4 : void 0);
        }
        const loadMjsFromPath = (0, _rewriteStackTrace.endHiddenCallStack)((n2 = function* (filepath) {
          const url = (0, _url().pathToFileURL)(filepath).toString() + "?import";
          if (!import_) throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
          return yield import_(url);
        }, _loadMjsFromPath = function() {
          var t2 = this, e = arguments;
          return new Promise(function(r2, o) {
            var a2 = n2.apply(t2, e);
            function _next(n3) {
              asyncGeneratorStep(a2, r2, o, _next, _throw, "next", n3);
            }
            function _throw(n3) {
              asyncGeneratorStep(a2, r2, o, _next, _throw, "throw", n3);
            }
            _next(void 0);
          });
        }, function(_x) {
          return _loadMjsFromPath.apply(this, arguments);
        }));
        var n2, _loadMjsFromPath;
        const SUPPORTED_EXTENSIONS2 = /* @__PURE__ */ new Set([".js", ".mjs", ".cjs", ".cts"]), asyncModules = /* @__PURE__ */ new Set();
        function getTSPreset(filepath) {
          try {
            return __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js");
          } catch (error) {
            if ("MODULE_NOT_FOUND" !== error.code) throw error;
            let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
            throw process.versions.pnp && (message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new _configError.default(message, filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.findPackageData = function* (filepath) {
          let pkg = null;
          const directories = [];
          let isPackage = true, dirname3 = _path().dirname(filepath);
          for (; !pkg && "node_modules" !== _path().basename(dirname3); ) {
            directories.push(dirname3), pkg = yield* readConfigPackage(_path().join(dirname3, PACKAGE_FILENAME));
            const nextLoc = _path().dirname(dirname3);
            if (dirname3 === nextLoc) {
              isPackage = false;
              break;
            }
            dirname3 = nextLoc;
          }
          return { filepath, directories, pkg, isPackage };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = JSON.parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
          }
          if (!options) throw new Error(`${filepath}: No config detected`);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return { filepath, dirname: _path().dirname(filepath), options };
        });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.loadPlugin = function* (name, dirname3) {
          const { filepath, loader } = resolvePlugin(name, dirname3, yield* (0, _async.isAsync)()), value2 = yield* requireModule("plugin", loader, filepath);
          return debug("Loaded plugin %o from %o.", name, dirname3), { filepath, value: value2 };
        }, exports3.loadPreset = function* (name, dirname3) {
          const { filepath, loader } = resolvePreset(name, dirname3, yield* (0, _async.isAsync)()), value2 = yield* requireModule("preset", loader, filepath);
          return debug("Loaded preset %o from %o.", name, dirname3), { filepath, value: value2 };
        }, exports3.resolvePreset = exports3.resolvePlugin = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js");
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        const debug = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/, resolvePlugin = exports3.resolvePlugin = resolveStandardizedName.bind(null, "plugin"), resolvePreset = exports3.resolvePreset = resolveStandardizedName.bind(null, "preset");
        function standardizeName(type, name) {
          if (_path().isAbsolute(name)) return name;
          const isPreset = "preset" === type;
          return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
        }
        function* resolveAlternativesHelper(type, name) {
          const standardizedName = standardizeName(type, name), { error, value: value2 } = yield standardizedName;
          if (!error) return value2;
          if ("MODULE_NOT_FOUND" !== error.code) throw error;
          standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
          const oppositeType = "preset" === type ? "plugin" : "preset";
          if ((yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), "plugin" === type) {
            const transformName = standardizedName.replace("-proposal-", "-transform-");
            transformName === standardizedName || (yield transformName).error || (error.message += `
- Did you mean "${transformName}"?`);
          }
          throw error.message += "\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n", error;
        }
        function tryRequireResolve(id, dirname3) {
          try {
            return dirname3 ? { error: null, value: (v2 = process.versions.node, w2 = "8.9", v2 = v2.split("."), w2 = w2.split("."), +v2[0] > +w2[0] || v2[0] == w2[0] && +v2[1] >= +w2[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b] }, M2 = __webpack_require__2("module")) => {
              let f2 = M2._findPath(r2, M2._nodeModulePaths(b).concat(b));
              if (f2) return f2;
              throw f2 = new Error(`Cannot resolve module '${r2}'`), f2.code = "MODULE_NOT_FOUND", f2;
            })(id, { paths: [dirname3] }) } : { error: null, value: __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve(id) };
          } catch (error) {
            return { error, value: null };
          }
          var v2, w2;
        }
        function tryImportMetaResolve(id, options) {
          try {
            return { error: null, value: (0, _importMetaResolve.resolve)(id, options) };
          } catch (error) {
            return { error, value: null };
          }
        }
        function resolveStandardizedNameForRequire(type, name, dirname3) {
          const it = resolveAlternativesHelper(type, name);
          let res = it.next();
          for (; !res.done; ) res = it.next(tryRequireResolve(res.value, dirname3));
          return { loader: "require", filepath: res.value };
        }
        function resolveStandardizedName(type, name, dirname3, allowAsync) {
          if (!_moduleTypes.supportsESM || !allowAsync) return resolveStandardizedNameForRequire(type, name, dirname3);
          try {
            const resolved = function(type2, name2, dirname4) {
              const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname4, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type2, name2);
              let res = it.next();
              for (; !res.done; ) res = it.next(tryImportMetaResolve(res.value, parentUrl));
              return { loader: "auto", filepath: (0, _url().fileURLToPath)(res.value) };
            }(type, name, dirname3);
            if (!(0, _fs().existsSync)(resolved.filepath)) throw Object.assign(new Error(`Could not resolve "${name}" in file ${dirname3}.`), { type: "MODULE_NOT_FOUND" });
            return resolved;
          } catch (e) {
            try {
              return resolveStandardizedNameForRequire(type, name, dirname3);
            } catch (e2) {
              if ("MODULE_NOT_FOUND" === e.type) throw e;
              if ("MODULE_NOT_FOUND" === e2.type) throw e2;
              throw e;
            }
          }
        }
        var LOADING_MODULES = /* @__PURE__ */ new Set();
        function* requireModule(type, loader, name) {
          if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
          try {
            return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, loader, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously or when using the Node.js \`--experimental-require-module\` flag.`, `You appear to be using a ${type} that contains top-level await, which is only supported when running Babel asynchronously.`, true);
          } catch (err) {
            throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
          } finally {
            LOADING_MODULES.delete(name);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.makeStaticFileCache = function(fn) {
          return (0, _caching.makeStrongCache)(function* (filepath, cache) {
            const cached = cache.invalidate(() => function(filepath2) {
              if (!_fs2().existsSync(filepath2)) return null;
              try {
                return +_fs2().statSync(filepath2).mtime;
              } catch (e) {
                if ("ENOENT" !== e.code && "ENOTDIR" !== e.code) throw e;
              }
              return null;
            }(filepath));
            return null === cached ? null : fn(filepath, yield* fs4.readFile(filepath, "utf8"));
          });
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
        function _fs2() {
          const data = __webpack_require__2("fs");
          return _fs2 = function() {
            return data;
          }, data;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        exports3.default = _gensync()(function* (inputOpts) {
          var _opts$assumptions;
          const result = yield* (0, _partial.default)(inputOpts);
          if (!result) return null;
          const { options, context: context2, fileHandling } = result;
          if ("ignored" === fileHandling) return null;
          const optionDefaults = {}, { plugins, presets } = options;
          if (!plugins || !presets) throw new Error("Assertion failure - plugins and presets exist");
          const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);
            if (!desc) throw new Error("Assertion failure - must be config item");
            return desc;
          }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            const presets2 = [];
            for (let i2 = 0; i2 < rawPresets.length; i2++) {
              const descriptor = rawPresets[i2];
              if (false !== descriptor.options) {
                try {
                  var preset = yield* loadPresetDescriptor(descriptor, presetContext);
                } catch (e) {
                  throw "BABEL_UNKNOWN_OPTION" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i2, "preset", e), e;
                }
                externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
              }
            }
            if (presets2.length > 0) {
              pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p2) => p2 !== pluginDescriptorsPass));
              for (const { preset: preset2, pass } of presets2) {
                if (!preset2) return true;
                pass.push(...preset2.plugins);
                if (yield* recursePresetDescriptors(preset2.presets, pass)) return true;
                preset2.options.forEach((opts2) => {
                  (0, _util.mergeOptions)(optionDefaults, opts2);
                });
              }
            }
          })(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored) return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
          return yield* enhanceError(context2, function* () {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);
              for (let i2 = 0; i2 < descs.length; i2++) {
                const descriptor = descs[i2];
                if (false !== descriptor.options) {
                  try {
                    var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                  } catch (e) {
                    throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i2, "plugin", e), e;
                  }
                  pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
                }
              }
            }
          })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        });
        function enhanceError(context2, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e) {
              var _context$filename;
              if (!/^\[BABEL\]/.test(e.message)) e.message = `[BABEL] ${null != (_context$filename = context2.filename) ? _context$filename : "unknown file"}: ${e.message}`;
              throw e;
            }
          };
        }
        const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname3, alias }, cache) {
          if (false === options) throw new Error("Assertion failure");
          options = options || {};
          const externalDependencies = [];
          let item = value2;
          if ("function" == typeof value2) {
            const factory2 = (0, _async.maybeAsync)(value2, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            try {
              item = yield* factory2(api, options, dirname3);
            } catch (e) {
              throw alias && (e.message += ` (While processing: ${JSON.stringify(alias)})`), e;
            }
          }
          if (!item || "object" != typeof item) throw new Error("Plugin/Preset did not return an object.");
          if ((0, _async.isThenable)(item)) throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
          if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
            let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
            throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
          }
          return { value: item, options, dirname: dirname3, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname3, alias, externalDependencies }, cache) {
          const pluginObj = (0, _plugins.validatePluginObject)(value2), plugin = Object.assign({}, pluginObj);
          if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
            const inheritsDescriptor = { name: void 0, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname: dirname3 }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => cache.invalidate((data) => run(inheritsDescriptor, data)));
            plugin.pre = chainMaybeAsync(inherits.pre, plugin.pre), plugin.post = chainMaybeAsync(inherits.post, plugin.post), plugin.manipulateOptions = chainMaybeAsync(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
          }
          return new _plugin.default(plugin, options, alias, externalDependencies);
        });
        function* loadPluginDescriptor(descriptor, context2) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options) throw new Error("Passed options to an existing Plugin instance will not work.");
            return descriptor.value;
          }
          return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
        }
        const needsFilename = (val) => val && "function" != typeof val, validateIfOptionNeedsFilename = (options, descriptor) => {
          if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
            const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
            throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
          }
        }, validatePreset = (preset, context2, descriptor) => {
          if (!context2.filename) {
            var _options$overrides;
            const { options } = preset;
            validateIfOptionNeedsFilename(options, descriptor), null == (_options$overrides = options.overrides) || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
          }
        }, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value2, dirname: dirname3, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value2), alias, dirname: dirname3, externalDependencies }));
        function* loadPresetDescriptor(descriptor, context2) {
          const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
          return validatePreset(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
        }
        function chainMaybeAsync(a2, b) {
          return a2 ? b ? function(...args) {
            const res = a2.apply(this, args);
            return res && "function" == typeof res.then ? res.then(() => b.apply(this, args)) : b.apply(this, args);
          } : a2 : b;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.makeConfigAPI = makeConfigAPI, exports3.makePluginAPI = function(cache, externalDependencies) {
          return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
        }, exports3.makePresetAPI = makePresetAPI;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js");
        function makeConfigAPI(cache) {
          return { version: _index.version, cache: cache.simple(), env: (value2) => cache.using((data) => void 0 === value2 ? data.envName : "function" == typeof value2 ? (0, _caching.assertSimpleType)(value2(data.envName)) : (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
            if ("string" != typeof entry) throw new Error("Unexpected non-string value");
            return entry === data.envName;
          })), async: () => false, caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))), assertVersion };
        }
        function makePresetAPI(cache, externalDependencies) {
          return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))), addExternalDependency: (ref) => {
            externalDependencies.push(ref);
          } });
        }
        function assertVersion(range) {
          if ("number" == typeof range) {
            if (!Number.isInteger(range)) throw new Error("Expected string or integer value.");
            range = `^${range}.0.0-0`;
          }
          if ("string" != typeof range) throw new Error("Expected string or integer value.");
          if ("*" === range || _semver().satisfies(_index.version, range)) return;
          const limit = Error.stackTraceLimit;
          "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
          const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _index.version, range });
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.finalize = function(deepArr) {
          return Object.freeze(deepArr);
        }, exports3.flattenToSet = function(arr) {
          const result = /* @__PURE__ */ new Set(), stack = [arr];
          for (; stack.length > 0; ) for (const el of stack.pop()) Array.isArray(el) ? stack.push(el) : result.add(el);
          return result;
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.getEnv = function(defaultValue = "development") {
          return process.env.BABEL_ENV || "development";
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createConfigItem = function(target, options, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
          else {
            if ("function" != typeof options) return createConfigItemSync(target, options);
            (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
          }
        }, exports3.createConfigItemAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
        }, exports3.createConfigItemSync = createConfigItemSync, Object.defineProperty(exports3, "default", { enumerable: true, get: function() {
          return _full.default;
        } }), exports3.loadOptions = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadOptionsSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
          }
        }, exports3.loadOptionsAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
        }, exports3.loadOptionsSync = loadOptionsSync, exports3.loadPartialConfig = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadPartialConfigSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
          }
        }, exports3.loadPartialConfigAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
        }, exports3.loadPartialConfigSync = loadPartialConfigSync;
        var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
        function loadPartialConfigSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
        }
        const loadOptionsRunner = _gensync()(function* (opts) {
          var _config$options;
          const config = yield* (0, _full.default)(opts);
          return null != (_config$options = null == config ? void 0 : config.options) ? _config$options : null;
        });
        function loadOptionsSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
        }
        const createConfigItemRunner = _gensync()(_item.createConfigItem);
        function createConfigItemSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createConfigItem = function* (value2, { dirname: dirname3 = ".", type } = {}) {
          return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname3), { type, alias: "programmatic item" }));
        }, exports3.createItemFromDescriptor = createItemFromDescriptor, exports3.getItemDescriptor = function(item) {
          if (null != item && item[CONFIG_ITEM_BRAND]) return item._descriptor;
          return;
        };
        var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }
        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = true, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : void 0, Object.freeze(this);
          }
        }
        Object.freeze(ConfigItem.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = loadPrivatePartialConfig, exports3.loadPartialConfig = function* (opts) {
          let showIgnoredFiles = false;
          if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts), opts = function(r2, e) {
              if (null == r2) return {};
              var t2 = {};
              for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
                if (e.includes(n2)) continue;
                t2[n2] = r2[n2];
              }
              return t2;
            }(_opts, _excluded);
          }
          const result = yield* loadPrivatePartialConfig(opts);
          if (!result) return null;
          const { options, babelrc, ignore, config, fileHandling, files } = result;
          if ("ignored" === fileHandling && !showIgnoredFiles) return null;
          return (options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default) throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
          }), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config ? config.filepath : void 0, fileHandling, files);
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
        const _excluded = ["showIgnoredFiles"];
        function* loadPrivatePartialConfig(inputOpts) {
          if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts))) throw new Error("Babel options must be an object, null, or undefined");
          const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
            switch (rootMode2) {
              case "root":
                return rootDir2;
              case "upward-optional": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                return null === upwardRootDir ? rootDir2 : upwardRootDir;
              }
              case "upward": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                if (null !== upwardRootDir) return upwardRootDir;
                throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
              }
              default:
                throw new Error("Assertion failure - unknown rootMode value.");
            }
          }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _index.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
          if (!configChain) return null;
          const merged = { assumptions: {} };
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(merged, opts);
          });
          return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: "string" == typeof context.filename ? context.filename : void 0, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
        }
        class PartialConfig {
          constructor(options, babelrc, ignore, config, fileHandling, files) {
            this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
          }
          hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
          }
        }
        Object.freeze(PartialConfig.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pattern, dirname3) {
          const parts = _path().resolve(dirname3, pattern).split(_path().sep);
          return new RegExp(["^", ...parts.map((part, i2) => {
            const last = i2 === parts.length - 1;
            return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep) : escapeRegExp(part) + (last ? endSep : sep);
          })].join(""));
        };
        const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
        function escapeRegExp(string) {
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        exports3.default = class {
          constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
            this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ConfigPrinter = exports3.ChainFormatter = void 0;
        const ChainFormatter = exports3.ChainFormatter = { Programmatic: 0, Config: 1 }, Formatter = { title(type, callerName, filepath) {
          let title = "";
          return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
        }, loc(index2, envName) {
          let loc = "";
          return null != index2 && (loc += `.overrides[${index2}]`), null != envName && (loc += `.env["${envName}"]`), loc;
        }, *optionsAndDescriptors(opt) {
          const content = Object.assign({}, opt.options);
          delete content.overrides, delete content.env;
          const pluginDescriptors = [...yield* opt.plugins()];
          pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d2) => descriptorToConfig(d2)));
          const presetDescriptors = [...yield* opt.presets()];
          return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d2) => descriptorToConfig(d2))), JSON.stringify(content, void 0, 2);
        } };
        function descriptorToConfig(d2) {
          var _d$file;
          let name = null == (_d$file = d2.file) ? void 0 : _d$file.request;
          return null == name && ("object" == typeof d2.value ? name = d2.value : "function" == typeof d2.value && (name = `[Function: ${d2.value.toString().slice(0, 50)} ... ]`)), null == name && (name = "[Unknown]"), void 0 === d2.options ? name : null == d2.name ? [name, d2.options] : [name, d2.options, d2.name];
        }
        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }
          configure(enabled, type, { callerName, filepath }) {
            return enabled ? (content, index2, envName) => {
              this._stack.push({ type, callerName, filepath, content, index: index2, envName });
            } : () => {
            };
          }
          static *format(config) {
            let title = Formatter.title(config.type, config.callerName, config.filepath);
            const loc = Formatter.loc(config.index, config.envName);
            loc && (title += ` ${loc}`);
            return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
          }
          *output() {
            if (0 === this._stack.length) return "";
            return (yield* _gensync().all(this._stack.map((s2) => ConfigPrinter.format(s2)))).join("\n\n");
          }
        }
        exports3.ConfigPrinter = ConfigPrinter;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.mjs");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
          return _path().resolve(configFileDir, browserslistConfigFile);
        }, exports3.resolveTargets = function(options, root2) {
          const optTargets = options.targets;
          let targets;
          "string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
          const { browserslistConfigFile } = options;
          let configFile, ignoreBrowserslistConfig = false;
          "string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = false === browserslistConfigFile;
          return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root2, browserslistEnv: options.browserslistEnv });
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function mergeDefaultFields(target, source) {
          for (const k of Object.keys(source)) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          }
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isIterableIterator = function(value2) {
          return !!value2 && "function" == typeof value2.next && "function" == typeof value2[Symbol.iterator];
        }, exports3.mergeOptions = function(target, source) {
          for (const k of Object.keys(source)) if ("parserOpts" !== k && "generatorOpts" !== k && "assumptions" !== k || !source[k]) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          } else {
            const parserOpts = source[k];
            mergeDefaultFields(target[k] || (target[k] = {}), parserOpts);
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.mjs");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.access = access, exports3.assertArray = assertArray, exports3.assertAssumptions = function(loc, value2) {
          if (void 0 === value2) return;
          if ("object" != typeof value2 || null === value2) throw new Error(`${msg(loc)} must be an object or undefined.`);
          let root2 = loc;
          do {
            root2 = root2.parent;
          } while ("root" !== root2.type);
          const inPreset = "preset" === root2.source;
          for (const name of Object.keys(value2)) {
            const subLoc = access(loc, name);
            if (!_options.assumptionsNames.has(name)) throw new Error(`${msg(subLoc)} is not a supported assumption.`);
            if ("boolean" != typeof value2[name]) throw new Error(`${msg(subLoc)} must be a boolean.`);
            if (inPreset && false === value2[name]) throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
          }
          return value2;
        }, exports3.assertBabelrcSearch = function(loc, value2) {
          if (void 0 === value2 || "boolean" == typeof value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i2) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i2))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports3.assertBoolean = assertBoolean, exports3.assertCallerMetadata = function(loc, value2) {
          const obj = assertObject(loc, value2);
          if (obj) {
            if ("string" != typeof obj.name) throw new Error(`${msg(loc)} set but does not contain "name" property string`);
            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop), value3 = obj[prop];
              if (null != value3 && "boolean" != typeof value3 && "string" != typeof value3 && "number" != typeof value3) throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
            }
          }
          return value2;
        }, exports3.assertCompact = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "auto" !== value2) throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
          return value2;
        }, exports3.assertConfigApplicableTest = function(loc, value2) {
          if (void 0 === value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i2) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i2))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
          return value2;
        }, exports3.assertConfigFileSearch = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports3.assertFunction = function(loc, value2) {
          if (void 0 !== value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a function, or undefined`);
          return value2;
        }, exports3.assertIgnoreList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          return null == arr || arr.forEach((item, i2) => function(loc2, value3) {
            if ("string" != typeof value3 && "function" != typeof value3 && !(value3 instanceof RegExp)) throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
            return value3;
          }(access(loc, i2), item)), arr;
        }, exports3.assertInputSourceMap = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && ("object" != typeof value2 || !value2)) throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
          return value2;
        }, exports3.assertObject = assertObject, exports3.assertPluginList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          arr && arr.forEach((item, i2) => function(loc2, value3) {
            if (Array.isArray(value3)) {
              if (0 === value3.length) throw new Error(`${msg(loc2)} must include an object`);
              if (value3.length > 3) throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
              if (assertPluginTarget(access(loc2, 0), value3[0]), value3.length > 1) {
                const opts = value3[1];
                if (void 0 !== opts && false !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts)) throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
              }
              if (3 === value3.length) {
                const name = value3[2];
                if (void 0 !== name && "string" != typeof name) throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
              }
            } else assertPluginTarget(loc2, value3);
            return value3;
          }(access(loc, i2), item));
          return arr;
        }, exports3.assertRootMode = function(loc, value2) {
          if (void 0 !== value2 && "root" !== value2 && "upward" !== value2 && "upward-optional" !== value2) throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
          return value2;
        }, exports3.assertSourceMaps = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "inline" !== value2 && "both" !== value2) throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
          return value2;
        }, exports3.assertSourceType = function(loc, value2) {
          if (void 0 !== value2 && "module" !== value2 && "script" !== value2 && "unambiguous" !== value2) throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
          return value2;
        }, exports3.assertString = function(loc, value2) {
          if (void 0 !== value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string, or undefined`);
          return value2;
        }, exports3.assertTargets = function(loc, value2) {
          if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) return value2;
          if ("object" != typeof value2 || !value2 || Array.isArray(value2)) throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
          const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
          assertBrowsersList(browsersLoc, value2.browsers), assertBoolean(esmodulesLoc, value2.esmodules);
          for (const key of Object.keys(value2)) {
            const val = value2[key], subLoc = access(loc, key);
            if ("esmodules" === key) assertBoolean(subLoc, val);
            else if ("browsers" === key) assertBrowsersList(subLoc, val);
            else {
              if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
                const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
              }
              assertBrowserVersion(subLoc, val);
            }
          }
          return value2;
        }, exports3.msg = msg;
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js");
        function msg(loc) {
          switch (loc.type) {
            case "root":
              return "";
            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;
            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;
            case "option":
              return `${msg(loc.parent)}.${loc.name}`;
            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }
        function access(loc, name) {
          return { type: "access", name, parent: loc };
        }
        function assertBoolean(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2) throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          return value2;
        }
        function assertObject(loc, value2) {
          if (void 0 !== value2 && ("object" != typeof value2 || Array.isArray(value2) || !value2)) throw new Error(`${msg(loc)} must be an object, or undefined`);
          return value2;
        }
        function assertArray(loc, value2) {
          if (null != value2 && !Array.isArray(value2)) throw new Error(`${msg(loc)} must be an array, or undefined`);
          return value2;
        }
        function checkValidTest(value2) {
          return "string" == typeof value2 || "function" == typeof value2 || value2 instanceof RegExp;
        }
        function assertPluginTarget(loc, value2) {
          if (("object" != typeof value2 || !value2) && "string" != typeof value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a string, object, function`);
          return value2;
        }
        function assertBrowsersList(loc, value2) {
          if (void 0 !== value2 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
        }
        function assertBrowserVersion(loc, value2) {
          if (("number" != typeof value2 || Math.round(value2) !== value2) && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string or an integer number`);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assumptionsNames = void 0, exports3.checkNoUnwrappedItemOptionPairs = function(items, index2, type, e) {
          if (0 === index2) return;
          const lastItem = items[index2 - 1], thisItem = items[index2];
          lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
        }, exports3.validate = function(type, opts, filename) {
          try {
            return validateNested({ type: "root", source: type }, opts);
          } catch (error) {
            const configError = new _configError.default(error.message, filename);
            throw error.code && (configError.code = error.code), configError;
          }
        };
        var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
          const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj) for (const envName of Object.keys(obj)) {
            const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
            if (!env) continue;
            validateNested({ type: "env", name: envName, parent }, env);
          }
          return obj;
        }, overrides: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
          if ("overrides" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
          const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value2);
          if (arr) for (const [index2, item] of arr.entries()) {
            const objLoc = (0, _optionAssertions.access)(loc, index2), env = (0, _optionAssertions.assertObject)(objLoc, item);
            if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
            validateNested({ type: "overrides", index: index2, parent }, env);
          }
          return arr;
        }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
        Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
        exports3.assumptionsNames = /* @__PURE__ */ new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
        function getSource(loc) {
          return "root" === loc.type ? loc.source : getSource(loc.parent);
        }
        function validateNested(loc, opts) {
          const type = getSource(loc);
          return function(opts2) {
            if (hasOwnProperty.call(opts2, "sourceMap") && hasOwnProperty.call(opts2, "sourceMaps")) throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
          }(opts), Object.keys(opts).forEach((key) => {
            const optLoc = { type: "option", name: key, parent: loc };
            if ("preset" === type && NONPRESET_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
            if ("arguments" !== type && ROOT_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
            if ("arguments" !== type && "configfile" !== type && BABELRC_VALIDATORS[key]) {
              if ("babelrcfile" === type || "extendsfile" === type) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
          }), opts;
        }
        function throwUnknownError(loc) {
          const key = loc.name;
          if (_removed.default[key]) {
            const { message, version = 5 } = _removed.default[key];
            throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
          }
          {
            const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.validatePluginObject = function(obj) {
          const rootPath = { type: "root", source: "plugin" };
          return Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];
            if (!validator) {
              const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
              throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
            }
            validator({ type: "option", name: key, parent: rootPath }, obj[key]);
          }), obj;
        };
        var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js");
        const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value2) {
          const obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj && (Object.keys(obj).forEach((prop) => {
            "_exploded" !== prop && "_verified" !== prop && function(key, value3) {
              if (value3 && "object" == typeof value3) Object.keys(value3).forEach((handler) => {
                if ("enter" !== handler && "exit" !== handler) throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
              else if ("function" != typeof value3) throw new Error(`.visitor["${key}"] must be a function`);
            }(prop, obj[prop]);
          }), obj.enter || obj.exit)) throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
          return obj;
        }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        class ConfigError extends Error {
          constructor(message, filename) {
            super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
          }
        }
        exports3.default = ConfigError;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports3) => {
        "use strict";
        var _Object$getOwnPropert;
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.beginHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return setupPrepareStackTrace(), fn(...args);
          }, "name", { value: STOP_HIDING }) : fn;
        }, exports3.endHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return fn(...args);
          }, "name", { value: START_HIDING }) : fn;
        }, exports3.expectedError = function(error) {
          if (!SUPPORTED) return;
          return expectedErrors.add(error), error;
        }, exports3.injectVirtualStackFrame = function(error, filename) {
          if (!SUPPORTED) return;
          let frames = virtualFrames.get(error);
          frames || virtualFrames.set(error, frames = []);
          return frames.push(/* @__PURE__ */ function(filename2) {
            return /* @__PURE__ */ Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
            }, getColumnNumber: () => {
            }, getFunctionName: () => {
            }, getMethodName: () => {
            }, getTypeName: () => {
            }, toString: () => filename2 });
          }(filename)), error;
        };
        const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace && true === (null == (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) ? void 0 : _Object$getOwnPropert.writable), START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = /* @__PURE__ */ new WeakSet(), virtualFrames = /* @__PURE__ */ new WeakMap();
        function setupPrepareStackTrace() {
          setupPrepareStackTrace = () => {
          };
          const { prepareStackTrace = defaultPrepareStackTrace } = Error;
          Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
            let newTrace = [];
            let status = expectedErrors.has(err) ? "hiding" : "unknown";
            for (let i2 = 0; i2 < trace.length; i2++) {
              const name = trace[i2].getFunctionName();
              if (name === START_HIDING) status = "hiding";
              else if (name === STOP_HIDING) {
                if ("hiding" === status) status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
                else if ("unknown" === status) {
                  newTrace = trace;
                  break;
                }
              } else "hiding" !== status && newTrace.push(trace[i2]);
            }
            return prepareStackTrace(err, newTrace);
          };
        }
        function defaultPrepareStackTrace(err, trace) {
          return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        function asyncGeneratorStep(n2, t2, e, r2, o, a2, c2) {
          try {
            var i2 = n2[a2](c2), u2 = i2.value;
          } catch (n3) {
            return void e(n3);
          }
          i2.done ? t2(u2) : Promise.resolve(u2).then(r2, o);
        }
        function _asyncToGenerator(n2) {
          return function() {
            var t2 = this, e = arguments;
            return new Promise(function(r2, o) {
              var a2 = n2.apply(t2, e);
              function _next(n3) {
                asyncGeneratorStep(a2, r2, o, _next, _throw, "next", n3);
              }
              function _throw(n3) {
                asyncGeneratorStep(a2, r2, o, _next, _throw, "throw", n3);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.forwardAsync = function(action, cb) {
          const g = _gensync()(action);
          return withKind((kind) => {
            const adapted = g[kind];
            return cb(adapted);
          });
        }, exports3.isAsync = void 0, exports3.isThenable = isThenable, exports3.maybeAsync = function(fn, message) {
          return _gensync()({ sync(...args) {
            const result = fn.apply(this, args);
            if (isThenable(result)) throw new Error(message);
            return result;
          }, async(...args) {
            return Promise.resolve(fn.apply(this, args));
          } });
        }, exports3.waitFor = exports3.onFirstPause = void 0;
        const runGenerator = _gensync()(function* (item) {
          return yield* item;
        });
        exports3.isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
        const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
          return cb("async");
        }), function(_x) {
          return _ref.apply(this, arguments);
        }) });
        var _ref;
        exports3.onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
          return runGenerator.sync(item);
        }, errback: function(item, firstPause, cb) {
          let completed = false;
          runGenerator.errback(item, (err, value2) => {
            completed = true, cb(err, value2);
          }), completed || firstPause();
        } }), exports3.waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
          return x;
        }), function(_x2) {
          return _ref2.apply(this, arguments);
        }) });
        var _ref2;
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.stat = exports3.readFile = void 0;
        exports3.readFile = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile }), exports3.stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.once = function(fn) {
          let result, resultP, promiseReferenced = false;
          return function* () {
            if (!result) {
              if (resultP) return promiseReferenced = true, yield* (0, _async.waitFor)(resultP);
              if (yield* (0, _async.isAsync)()) {
                let resolve7, reject;
                resultP = new Promise((res, rej) => {
                  resolve7 = res, reject = rej;
                });
                try {
                  result = { ok: true, value: yield* fn() }, resultP = null, promiseReferenced && resolve7(result.value);
                } catch (error) {
                  result = { ok: false, value: error }, resultP = null, promiseReferenced && reject(error);
                }
              } else try {
                result = { ok: true, value: yield* fn() };
              } catch (error) {
                result = { ok: false, value: error };
              }
            }
            if (result.ok) return result.value;
            throw result.value;
          };
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports3, "File", { enumerable: true, get: function() {
          return _file.default;
        } }), Object.defineProperty(exports3, "buildExternalHelpers", { enumerable: true, get: function() {
          return _buildExternalHelpers.default;
        } }), Object.defineProperty(exports3, "createConfigItem", { enumerable: true, get: function() {
          return _index2.createConfigItem;
        } }), Object.defineProperty(exports3, "createConfigItemAsync", { enumerable: true, get: function() {
          return _index2.createConfigItemAsync;
        } }), Object.defineProperty(exports3, "createConfigItemSync", { enumerable: true, get: function() {
          return _index2.createConfigItemSync;
        } }), Object.defineProperty(exports3, "getEnv", { enumerable: true, get: function() {
          return _environment.getEnv;
        } }), Object.defineProperty(exports3, "loadOptions", { enumerable: true, get: function() {
          return _index2.loadOptions;
        } }), Object.defineProperty(exports3, "loadOptionsAsync", { enumerable: true, get: function() {
          return _index2.loadOptionsAsync;
        } }), Object.defineProperty(exports3, "loadOptionsSync", { enumerable: true, get: function() {
          return _index2.loadOptionsSync;
        } }), Object.defineProperty(exports3, "loadPartialConfig", { enumerable: true, get: function() {
          return _index2.loadPartialConfig;
        } }), Object.defineProperty(exports3, "loadPartialConfigAsync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigAsync;
        } }), Object.defineProperty(exports3, "loadPartialConfigSync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigSync;
        } }), Object.defineProperty(exports3, "parse", { enumerable: true, get: function() {
          return _parse.parse;
        } }), Object.defineProperty(exports3, "parseAsync", { enumerable: true, get: function() {
          return _parse.parseAsync;
        } }), Object.defineProperty(exports3, "parseSync", { enumerable: true, get: function() {
          return _parse.parseSync;
        } }), exports3.resolvePreset = exports3.resolvePlugin = void 0, Object.defineProperty(exports3, "template", { enumerable: true, get: function() {
          return _template().default;
        } }), Object.defineProperty(exports3, "tokTypes", { enumerable: true, get: function() {
          return _parser().tokTypes;
        } }), Object.defineProperty(exports3, "transform", { enumerable: true, get: function() {
          return _transform.transform;
        } }), Object.defineProperty(exports3, "transformAsync", { enumerable: true, get: function() {
          return _transform.transformAsync;
        } }), Object.defineProperty(exports3, "transformFile", { enumerable: true, get: function() {
          return _transformFile.transformFile;
        } }), Object.defineProperty(exports3, "transformFileAsync", { enumerable: true, get: function() {
          return _transformFile.transformFileAsync;
        } }), Object.defineProperty(exports3, "transformFileSync", { enumerable: true, get: function() {
          return _transformFile.transformFileSync;
        } }), Object.defineProperty(exports3, "transformFromAst", { enumerable: true, get: function() {
          return _transformAst.transformFromAst;
        } }), Object.defineProperty(exports3, "transformFromAstAsync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstAsync;
        } }), Object.defineProperty(exports3, "transformFromAstSync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstSync;
        } }), Object.defineProperty(exports3, "transformSync", { enumerable: true, get: function() {
          return _transform.transformSync;
        } }), Object.defineProperty(exports3, "traverse", { enumerable: true, get: function() {
          return _traverse().default;
        } }), exports3.version = exports3.types = void 0;
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js"), resolvers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js");
        function _types() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _types = function() {
            return data;
          }, data;
        }
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "types", { enumerable: true, get: function() {
          return _types();
        } });
        var _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports3.version = "7.26.0";
        exports3.resolvePlugin = (name, dirname3) => resolvers.resolvePlugin(name, dirname3, false).filepath;
        exports3.resolvePreset = (name, dirname3) => resolvers.resolvePreset(name, dirname3, false).filepath;
        exports3.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
        exports3.OptionManager = class {
          init(opts) {
            return (0, _index2.loadOptionsSync)(opts);
          }
        }, exports3.Plugin = function(alias) {
          throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.parse = void 0, exports3.parseAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
        }, exports3.parseSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const parseRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.default)(config.passes, (0, _normalizeOpts.default)(config), code);
        });
        exports3.parse = function(code, opts, callback) {
          if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.mjs");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
          try {
            const results = [];
            for (const plugins of pluginPasses) for (const plugin of plugins) {
              const { parserOverride } = plugin;
              if (parserOverride) {
                const ast = parserOverride(code, parserOpts, _parser().parse);
                void 0 !== ast && results.push(ast);
              }
            }
            if (0 === results.length) return (0, _parser().parse)(code, parserOpts);
            if (1 === results.length) {
              if (yield* [], "function" == typeof results[0].then) throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
              return results[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
          } catch (err) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc, missingPlugin } = err;
            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
              err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
            }
            throw err;
          }
        };
        var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(missingPluginName, loc, codeFrame, filename) {
          let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];
          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
              if (transformPlugin) {
                helpMessage += `

Add ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
            }
          }
          return helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${filename === "unknown" ? "<name of the input file>" : filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`, helpMessage;
        };
        const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } } };
        Object.assign(pluginNameMap, { asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-transform-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-transform-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-transform-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, importAttributes: { syntax: { name: "@babel/plugin-syntax-import-attributes", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-transform-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-transform-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-transform-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-transform-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-transform-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-transform-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-transform-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-transform-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } } });
        const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(allowlist, outputType = "global") {
          let tree;
          const build2 = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
          if (!build2) throw new Error(`Unsupported output type ${outputType}`);
          tree = build2(allowlist);
          return (0, _generator().default)(tree).code;
        };
        const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
        function buildGlobal(allowlist) {
          const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
        }
        function buildModule(allowlist) {
          const body = [], refs = buildHelpers(body, null, allowlist);
          return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
        }
        function buildUmd(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({ FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") })]);
        }
        function buildVar(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
          const tree = program(body);
          return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
        }
        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
          return helpers().list.forEach(function(name) {
            if (allowlist && !allowlist.includes(name)) return;
            const ref = refs[name] = getHelperReference(name), { nodes } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
              mapExportBindingAssignments((node) => assignmentExpression("=", ref, node)), ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier(exportName))));
            } : null);
            body.push(...nodes);
          }), refs;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformFromAst = void 0, exports3.transformFromAstAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
        }, exports3.transformFromAstSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
          const config = yield* (0, _index.default)(opts);
          if (null === config) return null;
          if (!ast) throw new Error("No AST given");
          return yield* (0, _index2.run)(config, code, ast);
        });
        exports3.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformFile = function(...args) {
          transformFileRunner.errback(...args);
        }, exports3.transformFileAsync = function(...args) {
          return transformFileRunner.async(...args);
        }, exports3.transformFileSync = function(...args) {
          return transformFileRunner.sync(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
        const transformFileRunner = _gensync()(function* (filename, opts) {
          const options = Object.assign({}, opts, { filename }), config = yield* (0, _index.default)(options);
          if (null === config) return null;
          const code = yield* fs4.readFile(filename, "utf8");
          return yield* (0, _index2.run)(config, code);
        });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transform = void 0, exports3.transformAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
        }, exports3.transformSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.run)(config, code);
        });
        exports3.transform = function(code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function() {
          LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
          return LOADED_PLUGIN;
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js");
        let LOADED_PLUGIN;
        const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
          node.body = performHoisting(node.body);
        } }, SwitchCase: { exit({ node }) {
          node.consequent = performHoisting(node.consequent);
        } } } };
        function performHoisting(body) {
          let max = Math.pow(2, 30) - 1, hasChange = false;
          for (let i2 = 0; i2 < body.length; i2++) {
            const p2 = priority(body[i2]);
            if (p2 > max) {
              hasChange = true;
              break;
            }
            max = p2;
          }
          return hasChange ? function(body2) {
            const buckets = /* @__PURE__ */ Object.create(null);
            for (let i2 = 0; i2 < body2.length; i2++) {
              const n2 = body2[i2], p2 = priority(n2);
              (buckets[p2] || (buckets[p2] = [])).push(n2);
            }
            const keys2 = Object.keys(buckets).map((k) => +k).sort((a2, b) => b - a2);
            let index2 = 0;
            for (const key of keys2) {
              const bucket = buckets[key];
              for (const n2 of bucket) body2[index2++] = n2;
            }
            return body2;
          }(body.slice()) : body;
        }
        function priority(bodyNode) {
          const priority2 = null == bodyNode ? void 0 : bodyNode._blockHoist;
          return null == priority2 ? 1 : true === priority2 ? 2 : priority2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs": (__unused_webpack_module, exports3, __webpack_require__2) => {
        exports3.getModuleName = () => __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js").getModuleName;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.mjs");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var babel7 = function(e, r2) {
          if (!r2 && e && e.__esModule) return e;
          if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
          var t2 = _getRequireWildcardCache(r2);
          if (t2 && t2.has(e)) return t2.get(e);
          var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var u2 in e) if ("default" !== u2 && {}.hasOwnProperty.call(e, u2)) {
            var i2 = a2 ? Object.getOwnPropertyDescriptor(e, u2) : null;
            i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e[u2];
          }
          return n2.default = e, t2 && t2.set(e, n2), n2;
        }(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs"), true);
        function _getRequireWildcardCache(e) {
          if ("function" != typeof WeakMap) return null;
          var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(e2) {
            return e2 ? t2 : r2;
          })(e);
        }
        const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path2, state) {
          const loc = path2.node.loc;
          loc && (state.loc = loc, path2.stop());
        } };
        class File {
          constructor(options, { code, ast, inputMap }) {
            this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
          }
          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }
          set shebang(value2) {
            value2 ? this.path.get("interpreter").replaceWith(interpreterDirective(value2)) : this.path.get("interpreter").remove();
          }
          set(key, val) {
            if ("helpersNamespace" === key) throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          has(key) {
            return this._map.has(key);
          }
          availableHelper(name, versionRange) {
            let minVersion;
            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if ("BABEL_HELPER_UNKNOWN" !== err.code) throw err;
              return false;
            }
            return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
          }
          addHelper(name) {
            const declar = this.declarations[name];
            if (declar) return cloneNode(declar);
            const generator = this.get("helperGenerator");
            if (generator) {
              const res = generator(name);
              if (res) return res;
            }
            helpers().minVersion(name);
            const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
            for (const dep of helpers().getDependencies(name)) dependencies[dep] = this.addHelper(dep);
            const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid.name, Object.keys(this.scope.getAllBindings()));
            globals.forEach((name2) => {
              this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
            }), nodes.forEach((node) => {
              node._compact = true;
            });
            const added = this.path.unshiftContainer("body", nodes);
            for (const path2 of added) path2.isVariableDeclaration() && this.scope.registerDeclaration(path2);
            return uid;
          }
          buildCodeFrameError(node, msg, _Error = SyntaxError) {
            let loc = null == node ? void 0 : node.loc;
            if (!loc && node) {
              const state = { loc: null };
              (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
              let txt = "This is an error on an internal node. Probably an internal error.";
              loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
            }
            if (loc) {
              const { highlightCode = true } = this.opts;
              msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : void 0 }, { highlightCode });
            }
            return new _Error(msg);
          }
        }
        exports3.default = File, File.prototype.addImport = function() {
          throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
        }, File.prototype.addTemplateObject = function() {
          throw new Error("This function has been moved into the template literal transform itself.");
        }, File.prototype.getModuleName = function() {
          return babel7.getModuleName()(this.opts, this.opts);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
          generatorOpts.inputSourceMap = null == inputMap ? void 0 : inputMap.toObject();
          const results = [];
          for (const plugins of pluginPasses) for (const plugin of plugins) {
            const { generatorOverride } = plugin;
            if (generatorOverride) {
              const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
              void 0 !== result2 && results.push(result2);
            }
          }
          let result;
          if (0 === results.length) result = (0, _generator().default)(ast, generatorOpts, code);
          else {
            if (1 !== results.length) throw new Error("More than one plugin attempted to override codegen.");
            if (result = results[0], "function" == typeof result.then) throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          }
          let { code: outputCode, decodedMap: outputMap = result.map } = result;
          result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
          "inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
          "inline" === opts.sourceMaps && (outputMap = null);
          return { outputCode, outputMap };
        };
        var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _remapping() {
          const data = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js");
          return _remapping = function() {
            return data;
          }, data;
        }
        function rootless(map) {
          return Object.assign({}, map, { sourceRoot: null });
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(inputMap, map, sourceFileName) {
          const source = sourceFileName.replace(/\\/g, "/");
          let found = false;
          const result = _remapping()(rootless(map), (s2, ctx) => s2 !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
          "string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
          return Object.assign({}, result);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.run = function* (config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
          try {
            yield* function* (file2, pluginPasses) {
              const async = yield* (0, _async.isAsync)();
              for (const pluginPairs of pluginPasses) {
                const passPairs = [], passes = [], visitors = [];
                for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                  const pass = new _pluginPass.default(file2, plugin.key, plugin.options, async);
                  passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
                }
                for (const [plugin, pass] of passPairs) if (plugin.pre) {
                  const fn = (0, _async.maybeAsync)(plugin.pre, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
                const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
                (0, _traverse().default)(file2.ast, visitor, file2.scope);
                for (const [plugin, pass] of passPairs) if (plugin.post) {
                  const fn = (0, _async.maybeAsync)(plugin.post, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
              }
            }(file, config.passes);
          } catch (e) {
            var _opts$filename;
            throw e.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_TRANSFORM_ERROR"), e;
          }
          let outputCode, outputMap;
          try {
            false !== opts.code && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
          } catch (e) {
            var _opts$filename2;
            throw e.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_GENERATE_ERROR"), e;
          }
          return { metadata: file.metadata, options: opts, ast: true === opts.ast ? file.ast : null, code: void 0 === outputCode ? null : outputCode, map: void 0 === outputMap ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
        };
        var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (pluginPasses, options, code, ast) {
          if (code = `${code || ""}`, ast) {
            if ("Program" === ast.type) ast = file(ast, [], []);
            else if ("File" !== ast.type) throw new Error("AST root must be a Program or File node");
            options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
          } else ast = yield* (0, _index.default)(pluginPasses, options, code);
          let inputMap = null;
          if (false !== options.inputSourceMap) {
            if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
              if (lastComment) try {
                inputMap = _convertSourceMap().fromComment("//" + lastComment);
              } catch (err) {
                debug("discarding unknown inline input sourcemap");
              }
            }
            if (!inputMap) {
              const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
              if ("string" == typeof options.filename && lastComment) try {
                const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
                inputMap = _convertSourceMap().fromJSON(inputMapContent);
              } catch (err) {
                debug("discarding unknown file input sourcemap", err);
              }
              else lastComment && debug("discarding un-loadable file input sourcemap");
            }
          }
          return new _file.default(options, { code, ast, inputMap });
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
        const { file, traverseFast } = _t(), debug = _debug()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
        function extractCommentsFromList(regex, comments, lastComment) {
          return comments && (comments = comments.filter(({ value: value2 }) => !regex.test(value2) || (lastComment = value2, false))), [comments, lastComment];
        }
        function extractComments(regex, ast) {
          let lastComment = null;
          return traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
          }), lastComment;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(config) {
          const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
          for (const plugins of config.passes) for (const plugin of plugins) plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
          return options;
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        class PluginPass {
          constructor(file, key, options, isAsync) {
            this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.isAsync = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename, this.isAsync = isAsync;
          }
          set(key, val) {
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }
          addHelper(name) {
            return this.file.addHelper(name);
          }
          buildCodeFrameError(node, msg, _Error) {
            return this.file.buildCodeFrameError(node, msg, _Error);
          }
        }
        exports3.default = PluginPass, PluginPass.prototype.getModuleName = function() {
          return this.file.getModuleName();
        }, PluginPass.prototype.addImport = function() {
          this.file.addImport();
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function deepClone(value2, cache) {
          if (null !== value2) {
            if (cache.has(value2)) return cache.get(value2);
            let cloned;
            if (Array.isArray(value2)) {
              cloned = new Array(value2.length), cache.set(value2, cloned);
              for (let i2 = 0; i2 < value2.length; i2++) cloned[i2] = "object" != typeof value2[i2] ? value2[i2] : deepClone(value2[i2], cache);
            } else {
              cloned = {}, cache.set(value2, cloned);
              const keys2 = Object.keys(value2);
              for (let i2 = 0; i2 < keys2.length; i2++) {
                const key = keys2[i2];
                cloned[key] = "object" != typeof value2[key] ? value2[key] : deepClone(value2[key], cache);
              }
            }
            return cloned;
          }
          return value2;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(value2) {
          return "object" != typeof value2 ? value2 : deepClone(value2, /* @__PURE__ */ new Map());
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _assert() {
          const data = __webpack_require__2("assert");
          return _assert = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = function(e, r2) {
            if (!r2 && e && e.__esModule) return e;
            if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
            var t2 = _getRequireWildcardCache(r2);
            if (t2 && t2.has(e)) return t2.get(e);
            var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var u2 in e) if ("default" !== u2 && {}.hasOwnProperty.call(e, u2)) {
              var i2 = a2 ? Object.getOwnPropertyDescriptor(e, u2) : null;
              i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e[u2];
            }
            return n2.default = e, t2 && t2.set(e, n2), n2;
          }(__webpack_require__2("fs"), true);
          return _fs = function() {
            return data;
          }, data;
        }
        function _process() {
          const data = __webpack_require__2("process");
          return _process = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _module() {
          const data = __webpack_require__2("module");
          return _module = function() {
            return data;
          }, data;
        }
        function _v() {
          const data = __webpack_require__2("v8");
          return _v = function() {
            return data;
          }, data;
        }
        function _util() {
          const data = __webpack_require__2("util");
          return _util = function() {
            return data;
          }, data;
        }
        function _getRequireWildcardCache(e) {
          if ("function" != typeof WeakMap) return null;
          var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(e2) {
            return e2 ? t2 : r2;
          })(e);
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.moduleResolve = moduleResolve, exports3.resolve = function(specifier, parent) {
          if (!parent) throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
          try {
            return function(specifier2, context = {}) {
              const { parentURL } = context;
              let parsedParentURL, parsed, protocol;
              if (_assert()(void 0 !== parentURL, "expected `parentURL` to be defined"), function(parentURL2) {
                if (void 0 === parentURL2) return;
                if ("string" != typeof parentURL2 && (self2 = parentURL2, !Boolean(self2 && "object" == typeof self2 && "href" in self2 && "string" == typeof self2.href && "protocol" in self2 && "string" == typeof self2.protocol && self2.href && self2.protocol))) throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL2);
                var self2;
              }(parentURL), parentURL) try {
                parsedParentURL = new (_url()).URL(parentURL);
              } catch (_unused4) {
              }
              try {
                if (parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier2) ? new (_url()).URL(specifier2, parsedParentURL) : new (_url()).URL(specifier2), protocol = parsed.protocol, "data:" === protocol) return { url: parsed.href, format: null };
              } catch (_unused5) {
              }
              const maybeReturn = function(specifier3, parsed2, parsedParentURL2) {
                if (parsedParentURL2) {
                  const parentProtocol = parsedParentURL2.protocol;
                  if ("http:" === parentProtocol || "https:" === parentProtocol) {
                    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier3)) {
                      const parsedProtocol = null == parsed2 ? void 0 : parsed2.protocol;
                      if (parsedProtocol && "https:" !== parsedProtocol && "http:" !== parsedProtocol) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                      return { url: (null == parsed2 ? void 0 : parsed2.href) || "" };
                    }
                    if (_module().builtinModules.includes(specifier3)) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                    throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "only relative and absolute specifiers are supported.");
                  }
                }
              }(specifier2, parsed, parsedParentURL);
              if (maybeReturn) return maybeReturn;
              void 0 === protocol && parsed && (protocol = parsed.protocol);
              if ("node:" === protocol) return { url: specifier2 };
              if (parsed && "node:" === parsed.protocol) return { url: specifier2 };
              const conditions = function(conditions2) {
                if (void 0 !== conditions2 && conditions2 !== DEFAULT_CONDITIONS) {
                  if (!Array.isArray(conditions2)) throw new ERR_INVALID_ARG_VALUE("conditions", conditions2, "expected an array");
                  return new Set(conditions2);
                }
                return DEFAULT_CONDITIONS_SET;
              }(context.conditions), url = moduleResolve(specifier2, new (_url()).URL(parentURL), conditions, false);
              return { url: url.href, format: defaultGetFormatWithoutErrors(url, { parentURL }) };
            }(specifier, { parentURL: parent }).url;
          } catch (error) {
            const exception = error;
            if (("ERR_UNSUPPORTED_DIR_IMPORT" === exception.code || "ERR_MODULE_NOT_FOUND" === exception.code) && "string" == typeof exception.url) return exception.url;
            throw error;
          }
        };
        const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, constructor) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...parameters) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, parameters2, self2) {
                const message2 = messages.get(key2);
                if (_assert()(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return _assert()(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, parameters2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return _assert()(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), 0 === parameters2.length ? message2 : (parameters2.unshift(message2), Reflect.apply(_util().format, null, parameters2));
              }(key, parameters, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(constructor, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (_v().startupSnapshot.isBuildingSnapshot()) return false;
          } catch (_unused) {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          _assert()("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types = [], instances = [], other = [];
          for (const value2 of expected) _assert()("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (_assert()("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types.indexOf("object");
            -1 !== pos && (types.slice(pos, 1), instances.push("Object"));
          }
          return types.length > 0 && (message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(types, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, _util().inspect)(value2, { depth: -1 })}`;
            let inspected = (0, _util().inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path2, base, message) => `Invalid package config ${path2}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = void 0) => {
          const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (_assert()(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path2, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path2}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path2) => `Unknown file extension "${extension}" for ${path2}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, _util().inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError);
        const captureLargerStackTrace = function(wrappedFunction) {
          const hidden = "__node_internal_" + wrappedFunction.name;
          return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const hasOwnProperty$12 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = /* @__PURE__ */ new Map();
        function read2(jsonPath, { base, specifier }) {
          const existing = cache.get(jsonPath);
          if (existing) return existing;
          let string;
          try {
            string = _fs().default.readFileSync(_path().toNamespacedPath(jsonPath), "utf8");
          } catch (error) {
            const exception = error;
            if ("ENOENT" !== exception.code) throw exception;
          }
          const result = { exists: false, pjsonPath: jsonPath, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          if (void 0 !== string) {
            let parsed;
            try {
              parsed = JSON.parse(string);
            } catch (error_) {
              const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), cause.message);
              throw error.cause = cause, error;
            }
            result.exists = true, hasOwnProperty$12.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$12.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$12.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$12.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$12.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
          }
          return cache.set(jsonPath, result), result;
        }
        function getPackageScopeConfig(resolved) {
          let packageJSONUrl = new URL("package.json", resolved);
          for (; ; ) {
            if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig = read2((0, _url().fileURLToPath)(packageJSONUrl), { specifier: resolved });
            if (packageConfig.exists) return packageConfig;
            const lastPackageJSONUrl = packageJSONUrl;
            if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
          }
          return { pjsonPath: (0, _url().fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
        }
        function getPackageType(url) {
          return getPackageScopeConfig(url).type;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, hasOwnProperty3 = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url, _context, ignoreErrors) {
          const value2 = function(url2) {
            const pathname = url2.pathname;
            let index2 = pathname.length;
            for (; index2--; ) {
              const code = pathname.codePointAt(index2);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index2 - 1) ? "" : pathname.slice(index2);
            }
            return "";
          }(url);
          if (".js" === value2) {
            const packageType = getPackageType(url);
            return "none" !== packageType ? packageType : "commonjs";
          }
          if ("" === value2) {
            const packageType = getPackageType(url);
            return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
          }
          const format = extensionFormatMap[value2];
          if (format) return format;
          if (ignoreErrors) return;
          const filepath = (0, _url().fileURLToPath)(url);
          throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        function defaultGetFormatWithoutErrors(url, context) {
          const protocol = url.protocol;
          return hasOwnProperty3.call(protocolHandlers, protocol) && protocolHandlers[protocol](url, context, true) || null;
        }
        const { ERR_INVALID_ARG_VALUE } = codes, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal2, base, isTarget) {
          if (_process().noDeprecation) return;
          const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          _process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal2 ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          if (_process().noDeprecation) return;
          if ("module" !== defaultGetFormatWithoutErrors(url, { parentURL: base.href })) return;
          const urlPath = (0, _url().fileURLToPath)(url.href), packagePath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
          main ? _path().resolve(packagePath, main) !== urlPath && _process().emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path2) {
          try {
            return (0, _fs().statSync)(path2);
          } catch (_unused2) {
          }
        }
        function fileExists(url) {
          const stats = (0, _fs().statSync)(url, { throwIfNoEntry: false }), isFile2 = stats ? stats.isFile() : void 0;
          return null != isFile2 && isFile2;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new (_url()).URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i3 = -1;
            for (; ++i3 < tries2.length && (guess = new (_url()).URL(tries2[i3], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i2 = -1;
          for (; ++i2 < tries.length && (guess = new (_url()).URL(tries[i2], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal2, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal2, base && (0, _url().fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal2, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          if (!target.startsWith("./")) {
            if (internal2 && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new (_url()).URL(target), isURL = true;
              } catch (_unused3) {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal2, base, true);
            }
          }
          const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal2, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal2, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal3, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal3 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, _url().fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal2, base);
          }
          return pattern ? new (_url()).URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new (_url()).URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal2, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i2 = -1;
            for (; ++i2 < targetList.length; ) {
              const targetItem = targetList[i2];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys2 = Object.getOwnPropertyNames(target);
            let i2 = -1;
            for (; ++i2 < keys2.length; ) {
              if (isArrayIndex(keys2[i2])) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i2 = -1; ++i2 < keys2.length; ) {
              const key = keys2[i2];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal2, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal2, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          if (_process().noDeprecation) return;
          const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports4 = packageConfig.exports;
          if (function(exports5, packageJsonUrl2, base2) {
            if ("string" == typeof exports5 || Array.isArray(exports5)) return true;
            if ("object" != typeof exports5 || null === exports5) return false;
            const keys3 = Object.getOwnPropertyNames(exports5);
            let isConditionalSugar = false, i3 = 0, keyIndex = -1;
            for (; ++keyIndex < keys3.length; ) {
              const key = keys3[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i3++) isConditionalSugar = currentIsConditionalSugar;
              else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports4, packageJsonUrl, base) && (exports4 = { ".": exports4 }), own.call(exports4, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports4[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys2 = Object.getOwnPropertyNames(exports4);
          let i2 = -1;
          for (; ++i2 < keys2.length; ) {
            const key = keys2[i2], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports4[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a2, b) {
          const aPatternIndex = a2.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a2.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a2.length > b.length ? -1 : b.length > a2.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys2 = Object.getOwnPropertyNames(imports);
              let i2 = -1;
              for (; ++i2 < keys2.length; ) {
                const key = keys2[i2], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (_module().builtinModules.includes(specifier)) return new (_url()).URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
          do {
            const stat = tryStatSync(packageJsonPath.slice(0, -13));
            if (!stat || !stat.isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = read2(packageJsonPath, { base, specifier });
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base), false);
        }
        function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
          return "" !== specifier && ("/" === specifier[0] || function(specifier2) {
            if ("." === specifier2[0]) {
              if (1 === specifier2.length || "/" === specifier2[1]) return true;
              if ("." === specifier2[1] && (2 === specifier2.length || "/" === specifier2[2])) return true;
            }
            return false;
          }(specifier));
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
          let resolved;
          if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) try {
            resolved = new (_url()).URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
          else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
          else try {
            resolved = new (_url()).URL(specifier);
          } catch (error_) {
            if (isRemote && !_module().builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
          return _assert()(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSeparatorRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
            let filePath;
            try {
              filePath = (0, _url().fileURLToPath)(resolved2);
            } catch (error) {
              const cause = error;
              throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
            }
            const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats && stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats || !stats.isFile()) {
              const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), true);
              throw error.url = String(resolved2), error;
            }
            if (!preserveSymlinks2) {
              const real = (0, _fs().realpathSync)(filePath), { search, hash: hash2 } = resolved2;
              (resolved2 = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""))).search = search, resolved2.hash = hash2;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          constructor(map, indentChar) {
            this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = true, this._indentChar = "", this._fastIndentations = [], this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: void 0, identifierNamePos: void 0, line: void 0, column: void 0, filename: void 0 }, this._map = map, this._indentChar = indentChar;
            for (let i2 = 0; i2 < 64; i2++) this._fastIndentations.push(indentChar.repeat(i2));
            this._allocQueue();
          }
          _allocQueue() {
            const queue = this._queue;
            for (let i2 = 0; i2 < 16; i2++) queue.push({ char: 0, repeat: 1, line: void 0, column: void 0, identifierName: void 0, identifierNamePos: void 0, filename: "" });
          }
          _pushQueue(char, repeat, line, column, filename) {
            const cursor = this._queueCursor;
            cursor === this._queue.length && this._allocQueue();
            const item = this._queue[cursor];
            item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
          }
          _popQueue() {
            if (0 === this._queueCursor) throw new Error("Cannot pop from empty queue");
            return this._queue[--this._queueCursor];
          }
          get() {
            this._flush();
            const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: null == map ? void 0 : map.getDecoded(), get __mergedMap() {
              return this.map;
            }, get map() {
              const resultMap = map ? map.get() : null;
              return result.map = resultMap, resultMap;
            }, set map(value2) {
              Object.defineProperty(result, "map", { value: value2, writable: true });
            }, get rawMappings() {
              const mappings = null == map ? void 0 : map.getRawMappings();
              return result.rawMappings = mappings, mappings;
            }, set rawMappings(value2) {
              Object.defineProperty(result, "rawMappings", { value: value2, writable: true });
            } };
            return result;
          }
          append(str, maybeNewline) {
            this._flush(), this._append(str, this._sourcePosition, maybeNewline);
          }
          appendChar(char) {
            this._flush(), this._appendChar(char, 1, this._sourcePosition);
          }
          queue(char) {
            if (10 === char) for (; 0 !== this._queueCursor; ) {
              const char2 = this._queue[this._queueCursor - 1].char;
              if (32 !== char2 && 9 !== char2) break;
              this._queueCursor--;
            }
            const sourcePosition = this._sourcePosition;
            this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
          }
          queueIndentation(repeat) {
            0 !== repeat && this._pushQueue(-1, repeat, void 0, void 0, void 0);
          }
          _flush() {
            const queueCursor = this._queueCursor, queue = this._queue;
            for (let i2 = 0; i2 < queueCursor; i2++) {
              const item = queue[i2];
              this._appendChar(item.char, item.repeat, item);
            }
            this._queueCursor = 0;
          }
          _appendChar(char, repeat, sourcePos) {
            if (this._last = char, -1 === char) {
              const fastIndentation = this._fastIndentations[repeat];
              this._str += void 0 !== fastIndentation ? fastIndentation : repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
            } else this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
            10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
          }
          _append(str, sourcePos, maybeNewline) {
            const len = str.length, position = this._position;
            if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map) return void (position.column += len);
            const { column, identifierName, identifierNamePos, filename } = sourcePos;
            let line = sourcePos.line;
            null == identifierName && null == identifierNamePos || !this._canMarkIdName || (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
            let i2 = str.indexOf("\n"), last = 0;
            for (0 !== i2 && this._mark(line, column, identifierName, identifierNamePos, filename); -1 !== i2; ) position.line++, position.column = 0, last = i2 + 1, last < len && void 0 !== line && this._mark(++line, 0, null, null, filename), i2 = str.indexOf("\n", last);
            position.column += len - last;
          }
          _mark(line, column, identifierName, identifierNamePos, filename) {
            var _this$_map;
            null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
          }
          removeTrailingNewline() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          removeLastSemicolon() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          getLastChar() {
            const queueCursor = this._queueCursor;
            return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
          }
          getNewlineCount() {
            const queueCursor = this._queueCursor;
            let count = 0;
            if (0 === queueCursor) return 10 === this._last ? 1 : 0;
            for (let i2 = queueCursor - 1; i2 >= 0 && 10 === this._queue[i2].char; i2--) count++;
            return count === queueCursor && 10 === this._last ? count + 1 : count;
          }
          endsWithCharAndNewline() {
            const queue = this._queue, queueCursor = this._queueCursor;
            if (0 !== queueCursor) {
              if (10 !== queue[queueCursor - 1].char) return;
              return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
            }
          }
          hasContent() {
            return 0 !== this._queueCursor || !!this._last;
          }
          exactSource(loc, cb) {
            if (!this._map) return void cb();
            this.source("start", loc);
            const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
            identifierName && (this._canMarkIdName = false, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = true, sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0), this.source("end", loc);
          }
          source(prop, loc) {
            this._map && this._normalizePosition(prop, loc, 0);
          }
          sourceWithOffset(prop, loc, columnOffset) {
            this._map && this._normalizePosition(prop, loc, columnOffset);
          }
          _normalizePosition(prop, loc, columnOffset) {
            const pos = loc[prop], target = this._sourcePosition;
            pos && (target.line = pos.line, target.column = Math.max(pos.column + columnOffset, 0), target.filename = loc.filename);
          }
          getCurrentColumn() {
            const queue = this._queue, queueCursor = this._queueCursor;
            let lastIndex = -1, len = 0;
            for (let i2 = 0; i2 < queueCursor; i2++) {
              const item = queue[i2];
              10 === item.char && (lastIndex = len), len += item.repeat;
            }
            return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
          }
          getCurrentLine() {
            let count = 0;
            const queue = this._queue;
            for (let i2 = 0; i2 < this._queueCursor; i2++) 10 === queue[i2].char && count++;
            return this._position.line + count;
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.BlockStatement = function(node) {
          var _node$directives2;
          this.tokenChar(123);
          const exit = this.enterDelimited(), directivesLen = null == (_node$directives2 = node.directives) ? void 0 : _node$directives2.length;
          if (directivesLen) {
            var _node$directives$trai2;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, true, newline), null != (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai2.length || this.newline(newline);
          }
          this.printSequence(node.body, true), exit(), this.rightBrace(node);
        }, exports3.Directive = function(node) {
          this.print(node.value), this.semicolon();
        }, exports3.DirectiveLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.token(raw);
          const { value: value2 } = node;
          if (unescapedDoubleQuoteRE.test(value2)) {
            if (unescapedSingleQuoteRE.test(value2)) throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
            this.token(`'${value2}'`);
          } else this.token(`"${value2}"`);
        }, exports3.File = function(node) {
          node.program && this.print(node.program.interpreter);
          this.print(node.program);
        }, exports3.InterpreterDirective = function(node) {
          this.token(`#!${node.value}`), this.newline(1, true);
        }, exports3.Placeholder = function(node) {
          this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
        }, exports3.Program = function(node) {
          var _node$directives;
          this.noIndentInnerCommentsHere(), this.printInnerComments();
          const directivesLen = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
          if (directivesLen) {
            var _node$directives$trai;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, void 0, newline), null != (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai.length || this.newline(newline);
          }
          this.printSequence(node.body);
        };
        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ClassAccessorProperty = function(node) {
          var _node$key$loc2;
          this.printJoin(node.decorators);
          const endLine = null == (_node$key$loc2 = node.key.loc) || null == (_node$key$loc2 = _node$key$loc2.end) ? void 0 : _node$key$loc2.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this.word("accessor", true), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports3.ClassBody = function(node) {
          if (this.tokenChar(123), 0 === node.body.length) this.tokenChar(125);
          else {
            this.newline();
            const separator = function(printer, node2) {
              if (!printer.tokenMap || null == node2.start || null == node2.end) return null;
              const indexes = printer.tokenMap.getIndexes(node2);
              if (!indexes) return null;
              let k = 1, occurrenceCount = 0, nextLocIndex = 0;
              const advanceNextLocIndex = () => {
                for (; nextLocIndex < node2.body.length && null == node2.body[nextLocIndex].start; ) nextLocIndex++;
              };
              return advanceNextLocIndex(), (i2) => {
                nextLocIndex <= i2 && (nextLocIndex = i2 + 1, advanceNextLocIndex());
                const end = nextLocIndex === node2.body.length ? node2.end : node2.body[nextLocIndex].start;
                let tok;
                for (; k < indexes.length && printer.tokenMap.matchesOriginal(tok = printer._tokens[indexes[k]], ";") && tok.start < end; ) printer.token(";", void 0, occurrenceCount++), k++;
              };
            }(this, node);
            null == separator || separator(-1);
            const exit = this.enterDelimited();
            this.printJoin(node.body, true, true, separator, true), exit(), this.endsWith(10) || this.newline(), this.rightBrace(node);
          }
        }, exports3.ClassExpression = exports3.ClassDeclaration = function(node, parent) {
          (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators);
          node.declare && (this.word("declare"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          this.word("class"), node.id && (this.space(), this.print(node.id));
          this.print(node.typeParameters), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass), this.print(node.superTypeParameters));
          node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
          this.space(), this.print(node.body);
        }, exports3.ClassMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body);
        }, exports3.ClassPrivateMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body);
        }, exports3.ClassPrivateProperty = function(node) {
          this.printJoin(node.decorators), node.static && (this.word("static"), this.space());
          this.print(node.key), this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports3.ClassProperty = function(node) {
          if (this.printJoin(node.decorators), !node.static && !this.format.preserveFormat) {
            var _node$key$loc;
            const endLine = null == (_node$key$loc = node.key.loc) || null == (_node$key$loc = _node$key$loc.end) ? void 0 : _node$key$loc.line;
            endLine && this.catchUp(endLine);
          }
          this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports3.StaticBlock = function(node) {
          this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, true), this.rightBrace(node));
        }, exports3._classMethodHead = function(node) {
          if (this.printJoin(node.decorators), !this.format.preserveFormat) {
            var _node$key$loc3;
            const endLine = null == (_node$key$loc3 = node.key.loc) || null == (_node$key$loc3 = _node$key$loc3.end) ? void 0 : _node$key$loc3.line;
            endLine && this.catchUp(endLine);
          }
          this.tsPrintClassMemberModifiers(node), this._methodHead(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.LogicalExpression = exports3.BinaryExpression = exports3.AssignmentExpression = function(node) {
          this.print(node.left), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : (this.token(node.operator), this._endsWithDiv = "/" === node.operator);
          this.space(), this.print(node.right);
        }, exports3.AssignmentPattern = function(node) {
          this.print(node.left), ("Identifier" === node.left.type || isPattern(node.left)) && (node.left.optional && this.tokenChar(63), this.print(node.left.typeAnnotation));
          this.space(), this.tokenChar(61), this.space(), this.print(node.right);
        }, exports3.AwaitExpression = function(node) {
          this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument));
        }, exports3.BindExpression = function(node) {
          this.print(node.object), this.token("::"), this.print(node.callee);
        }, exports3.CallExpression = function(node) {
          this.print(node.callee), this.print(node.typeArguments), this.print(node.typeParameters), this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
        }, exports3.ConditionalExpression = function(node) {
          this.print(node.test), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate);
        }, exports3.Decorator = function(node) {
          this.tokenChar(64), this.print(node.expression), this.newline();
        }, exports3.DoExpression = function(node) {
          node.async && (this.word("async", true), this.space());
          this.word("do"), this.space(), this.print(node.body);
        }, exports3.EmptyStatement = function() {
          this.semicolon(true);
        }, exports3.ExpressionStatement = function(node) {
          this.tokenContext |= _index.TokenContext.expressionStatement, this.print(node.expression), this.semicolon();
        }, exports3.Import = function() {
          this.word("import");
        }, exports3.MemberExpression = function(node) {
          if (this.print(node.object), !node.computed && isMemberExpression(node.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          if (computed) {
            const exit = this.enterDelimited();
            this.tokenChar(91), this.print(node.property), this.tokenChar(93), exit();
          } else this.tokenChar(46), this.print(node.property);
        }, exports3.MetaProperty = function(node) {
          this.print(node.meta), this.tokenChar(46), this.print(node.property);
        }, exports3.ModuleExpression = function(node) {
          this.word("module", true), this.space(), this.tokenChar(123), this.indent();
          const { body } = node;
          (body.body.length || body.directives.length) && this.newline();
          this.print(body), this.dedent(), this.rightBrace(node);
        }, exports3.NewExpression = function(node, parent) {
          if (this.word("new"), this.space(), this.print(node.callee), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent)) return;
          this.print(node.typeArguments), this.print(node.typeParameters), node.optional && this.token("?.");
          if (0 === node.arguments.length && this.tokenMap && !this.tokenMap.endMatches(node, ")")) return;
          this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
        }, exports3.OptionalCallExpression = function(node) {
          this.print(node.callee), this.print(node.typeParameters), node.optional && this.token("?.");
          this.print(node.typeArguments), this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments), exit(), this.rightParens(node);
        }, exports3.OptionalMemberExpression = function(node) {
          let { computed } = node;
          const { optional, property } = node;
          if (this.print(node.object), !computed && isMemberExpression(property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          isLiteral(property) && "number" == typeof property.value && (computed = true);
          optional && this.token("?.");
          computed ? (this.tokenChar(91), this.print(property), this.tokenChar(93)) : (optional || this.tokenChar(46), this.print(property));
        }, exports3.ParenthesizedExpression = function(node) {
          this.tokenChar(40);
          const exit = this.enterDelimited();
          this.print(node.expression), exit(), this.rightParens(node);
        }, exports3.PrivateName = function(node) {
          this.tokenChar(35), this.print(node.id);
        }, exports3.SequenceExpression = function(node) {
          this.printList(node.expressions);
        }, exports3.Super = function() {
          this.word("super");
        }, exports3.ThisExpression = function() {
          this.word("this");
        }, exports3.UnaryExpression = function(node) {
          const { operator } = node;
          "void" === operator || "delete" === operator || "typeof" === operator || "throw" === operator ? (this.word(operator), this.space()) : this.token(operator);
          this.print(node.argument);
        }, exports3.UpdateExpression = function(node) {
          node.prefix ? (this.token(node.operator), this.print(node.argument)) : (this.print(node.argument, true), this.token(node.operator));
        }, exports3.V8IntrinsicIdentifier = function(node) {
          this.tokenChar(37), this.word(node.name);
        }, exports3.YieldExpression = function(node) {
          this.word("yield", true), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument))) : node.argument && (this.space(), this.printTerminatorless(node.argument));
        }, exports3._shouldPrintDecoratorsBeforeExport = function(node) {
          if ("boolean" == typeof this.format.decoratorsBeforeExport) return this.format.decoratorsBeforeExport;
          return "number" == typeof node.start && node.start === node.declaration.start;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isCallExpression, isLiteral, isMemberExpression, isNewExpression, isPattern } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.AnyTypeAnnotation = function() {
          this.word("any");
        }, exports3.ArrayTypeAnnotation = function(node) {
          this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
        }, exports3.BooleanLiteralTypeAnnotation = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports3.BooleanTypeAnnotation = function() {
          this.word("boolean");
        }, exports3.DeclareClass = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("class"), this.space(), this._interfaceish(node);
        }, exports3.DeclareExportAllDeclaration = function(node) {
          this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
        }, exports3.DeclareExportDeclaration = function(node) {
          this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
          FlowExportDeclaration.call(this, node);
        }, exports3.DeclareFunction = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("function"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation.typeAnnotation), node.predicate && (this.space(), this.print(node.predicate));
          this.semicolon();
        }, exports3.DeclareInterface = function(node) {
          this.word("declare"), this.space(), this.InterfaceDeclaration(node);
        }, exports3.DeclareModule = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id), this.space(), this.print(node.body);
        }, exports3.DeclareModuleExports = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation);
        }, exports3.DeclareOpaqueType = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.OpaqueType(node);
        }, exports3.DeclareTypeAlias = function(node) {
          this.word("declare"), this.space(), this.TypeAlias(node);
        }, exports3.DeclareVariable = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("var"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation), this.semicolon();
        }, exports3.DeclaredPredicate = function(node) {
          this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value), this.tokenChar(41);
        }, exports3.EmptyTypeAnnotation = function() {
          this.word("empty");
        }, exports3.EnumBooleanBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
        }, exports3.EnumBooleanMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumDeclaration = function(node) {
          const { id, body } = node;
          this.word("enum"), this.space(), this.print(id), this.print(body);
        }, exports3.EnumDefaultedMember = function(node) {
          const { id } = node;
          this.print(id), this.tokenChar(44);
        }, exports3.EnumNumberBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType), enumBody(this, node);
        }, exports3.EnumNumberMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumStringBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType), enumBody(this, node);
        }, exports3.EnumStringMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumSymbolBody = function(node) {
          enumExplicitType(this, "symbol", true), enumBody(this, node);
        }, exports3.ExistsTypeAnnotation = function() {
          this.tokenChar(42);
        }, exports3.FunctionTypeAnnotation = function(node, parent) {
          this.print(node.typeParameters), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
          this.printList(node.params), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest));
          this.tokenChar(41);
          const type = null == parent ? void 0 : parent.type;
          null != type && ("ObjectTypeCallProperty" === type || "ObjectTypeInternalSlot" === type || "DeclareFunction" === type || "ObjectTypeProperty" === type && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
          this.space(), this.print(node.returnType);
        }, exports3.FunctionTypeParam = function(node) {
          this.print(node.name), node.optional && this.tokenChar(63);
          node.name && (this.tokenChar(58), this.space());
          this.print(node.typeAnnotation);
        }, exports3.IndexedAccessType = function(node) {
          this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports3.InferredPredicate = function() {
          this.tokenChar(37), this.word("checks");
        }, exports3.InterfaceDeclaration = function(node) {
          this.word("interface"), this.space(), this._interfaceish(node);
        }, exports3.GenericTypeAnnotation = exports3.ClassImplements = exports3.InterfaceExtends = function(node) {
          this.print(node.id), this.print(node.typeParameters, true);
        }, exports3.InterfaceTypeAnnotation = function(node) {
          var _node$extends2;
          this.word("interface"), null != (_node$extends2 = node.extends) && _node$extends2.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
          this.space(), this.print(node.body);
        }, exports3.IntersectionTypeAnnotation = function(node) {
          this.printJoin(node.types, void 0, void 0, andSeparator);
        }, exports3.MixedTypeAnnotation = function() {
          this.word("mixed");
        }, exports3.NullLiteralTypeAnnotation = function() {
          this.word("null");
        }, exports3.NullableTypeAnnotation = function(node) {
          this.tokenChar(63), this.print(node.typeAnnotation);
        }, Object.defineProperty(exports3, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.NumericLiteral;
        } }), exports3.NumberTypeAnnotation = function() {
          this.word("number");
        }, exports3.ObjectTypeAnnotation = function(node) {
          node.exact ? this.token("{|") : this.tokenChar(123);
          const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
          props.length && (this.newline(), this.space(), this.printJoin(props, true, true, void 0, void 0, function(leading) {
            if (leading && !props[0]) return 1;
          }, () => {
            (1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
          }), this.space());
          node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
          node.exact ? this.token("|}") : this.tokenChar(125);
        }, exports3.ObjectTypeCallProperty = function(node) {
          node.static && (this.word("static"), this.space());
          this.print(node.value);
        }, exports3.ObjectTypeIndexer = function(node) {
          node.static && (this.word("static"), this.space());
          this._variance(node), this.tokenChar(91), node.id && (this.print(node.id), this.tokenChar(58), this.space());
          this.print(node.key), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports3.ObjectTypeInternalSlot = function(node) {
          node.static && (this.word("static"), this.space());
          this.tokenChar(91), this.tokenChar(91), this.print(node.id), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value);
        }, exports3.ObjectTypeProperty = function(node) {
          node.proto && (this.word("proto"), this.space());
          node.static && (this.word("static"), this.space());
          "get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
          this._variance(node), this.print(node.key), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value);
        }, exports3.ObjectTypeSpreadProperty = function(node) {
          this.token("..."), this.print(node.argument);
        }, exports3.OpaqueType = function(node) {
          this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype));
          node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype));
          this.semicolon();
        }, exports3.OptionalIndexedAccessType = function(node) {
          this.print(node.objectType), node.optional && this.token("?.");
          this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports3.QualifiedTypeIdentifier = function(node) {
          this.print(node.qualification), this.tokenChar(46), this.print(node.id);
        }, Object.defineProperty(exports3, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.StringLiteral;
        } }), exports3.StringTypeAnnotation = function() {
          this.word("string");
        }, exports3.SymbolTypeAnnotation = function() {
          this.word("symbol");
        }, exports3.ThisTypeAnnotation = function() {
          this.word("this");
        }, exports3.TupleTypeAnnotation = function(node) {
          this.tokenChar(91), this.printList(node.types), this.tokenChar(93);
        }, exports3.TypeAlias = function(node) {
          this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(node.right), this.semicolon();
        }, exports3.TypeAnnotation = function(node, parent) {
          this.tokenChar(58), this.space(), "ArrowFunctionExpression" === parent.type ? this.tokenContext |= _index.TokenContext.arrowFlowReturnType : node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation);
        }, exports3.TypeCastExpression = function(node) {
          this.tokenChar(40), this.print(node.expression), this.print(node.typeAnnotation), this.tokenChar(41);
        }, exports3.TypeParameter = function(node) {
          this._variance(node), this.word(node.name), node.bound && this.print(node.bound);
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
        }, exports3.TypeParameterDeclaration = exports3.TypeParameterInstantiation = function(node) {
          this.tokenChar(60), this.printList(node.params), this.tokenChar(62);
        }, exports3.TypeofTypeAnnotation = function(node) {
          this.word("typeof"), this.space(), this.print(node.argument);
        }, exports3.UnionTypeAnnotation = function(node) {
          this.printJoin(node.types, void 0, void 0, orSeparator);
        }, exports3.Variance = function(node) {
          "plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
        }, exports3.VoidTypeAnnotation = function() {
          this.word("void");
        }, exports3._interfaceish = function(node) {
          var _node$extends;
          this.print(node.id), this.print(node.typeParameters), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
          if ("DeclareClass" === node.type) {
            var _node$mixins, _node$implements;
            null != (_node$mixins = node.mixins) && _node$mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins)), null != (_node$implements = node.implements) && _node$implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
          }
          this.space(), this.print(node.body);
        }, exports3._variance = function(node) {
          var _node$variance;
          const kind = null == (_node$variance = node.variance) ? void 0 : _node$variance.kind;
          null != kind && ("plus" === kind ? this.tokenChar(43) : "minus" === kind && this.tokenChar(45));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
        const { isDeclareExportDeclaration, isStatement } = _t;
        function enumExplicitType(context, name, hasExplicitType) {
          hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
        }
        function enumBody(context, node) {
          const { members } = node;
          context.token("{"), context.indent(), context.newline();
          for (const member of members) context.print(member), context.newline();
          node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
        }
        function enumInitializedMember(context, node) {
          context.print(node.id), context.space(), context.token("="), context.space(), context.print(node.init), context.token(",");
        }
        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar), isStatement(declar) || this.semicolon();
          } else this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source)), this.semicolon();
        }
        function andSeparator(occurrenceCount) {
          this.space(), this.token("&", false, occurrenceCount), this.space();
        }
        function orSeparator(occurrenceCount) {
          this.space(), this.token("|", false, occurrenceCount), this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js");
        Object.keys(_templateLiterals).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _templateLiterals[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _templateLiterals[key];
          } }));
        });
        var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js");
        Object.keys(_expressions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _expressions[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _expressions[key];
          } }));
        });
        var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js");
        Object.keys(_statements).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _statements[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _statements[key];
          } }));
        });
        var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js");
        Object.keys(_classes).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _classes[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _classes[key];
          } }));
        });
        var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js");
        Object.keys(_methods).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _methods[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _methods[key];
          } }));
        });
        var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js");
        Object.keys(_modules).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _modules[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _modules[key];
          } }));
        });
        var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
        Object.keys(_types).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _types[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _types[key];
          } }));
        });
        var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js");
        Object.keys(_flow).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _flow[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _flow[key];
          } }));
        });
        var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js");
        Object.keys(_base).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _base[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _base[key];
          } }));
        });
        var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js");
        Object.keys(_jsx).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _jsx[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _jsx[key];
          } }));
        });
        var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js");
        Object.keys(_typescript).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _typescript[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _typescript[key];
          } }));
        });
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function spaceSeparator() {
          this.space();
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.JSXAttribute = function(node) {
          this.print(node.name), node.value && (this.tokenChar(61), this.print(node.value));
        }, exports3.JSXClosingElement = function(node) {
          this.tokenChar(60), this.tokenChar(47), this.print(node.name), this.tokenChar(62);
        }, exports3.JSXClosingFragment = function() {
          this.token("</"), this.tokenChar(62);
        }, exports3.JSXElement = function(node) {
          const open = node.openingElement;
          if (this.print(open), open.selfClosing) return;
          this.indent();
          for (const child of node.children) this.print(child);
          this.dedent(), this.print(node.closingElement);
        }, exports3.JSXEmptyExpression = function() {
          this.printInnerComments();
        }, exports3.JSXExpressionContainer = function(node) {
          this.tokenChar(123), this.print(node.expression), this.rightBrace(node);
        }, exports3.JSXFragment = function(node) {
          this.print(node.openingFragment), this.indent();
          for (const child of node.children) this.print(child);
          this.dedent(), this.print(node.closingFragment);
        }, exports3.JSXIdentifier = function(node) {
          this.word(node.name);
        }, exports3.JSXMemberExpression = function(node) {
          this.print(node.object), this.tokenChar(46), this.print(node.property);
        }, exports3.JSXNamespacedName = function(node) {
          this.print(node.namespace), this.tokenChar(58), this.print(node.name);
        }, exports3.JSXOpeningElement = function(node) {
          this.tokenChar(60), this.print(node.name), this.print(node.typeParameters), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, void 0, void 0, spaceSeparator));
          node.selfClosing && (this.space(), this.tokenChar(47));
          this.tokenChar(62);
        }, exports3.JSXOpeningFragment = function() {
          this.tokenChar(60), this.tokenChar(62);
        }, exports3.JSXSpreadAttribute = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.argument), this.rightBrace(node);
        }, exports3.JSXSpreadChild = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.expression), this.rightBrace(node);
        }, exports3.JSXText = function(node) {
          const raw = this.getPossibleRaw(node);
          void 0 !== raw ? this.token(raw, true) : this.token(node.value, true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArrowFunctionExpression = function(node, parent) {
          node.async && (this.word("async", true), this.space());
          this._shouldPrintArrowParamsParens(node) ? this._params(node, void 0, parent) : this.print(node.params[0], true);
          this._predicate(node, true), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= _index.TokenContext.arrowBody, this.print(node.body);
        }, exports3.FunctionDeclaration = exports3.FunctionExpression = function(node, parent) {
          this._functionHead(node, parent), this.space(), this.print(node.body);
        }, exports3._functionHead = function(node, parent) {
          node.async && (this.word("async"), this.format.preserveFormat || (this._endsWithInnerRaw = false), this.space());
          this.word("function"), node.generator && (this.format.preserveFormat || (this._endsWithInnerRaw = false), this.tokenChar(42));
          this.space(), node.id && this.print(node.id);
          this._params(node, node.id, parent), "TSDeclareFunction" !== node.type && this._predicate(node);
        }, exports3._methodHead = function(node) {
          const kind = node.kind, key = node.key;
          "get" !== kind && "set" !== kind || (this.word(kind), this.space());
          node.async && (this.word("async", true), this.space());
          "method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
          node.computed ? (this.tokenChar(91), this.print(key), this.tokenChar(93)) : this.print(key);
          node.optional && this.tokenChar(63);
          this._params(node, node.computed && "StringLiteral" !== node.key.type ? void 0 : node.key, void 0);
        }, exports3._param = function(parameter) {
          this.printJoin(parameter.decorators), this.print(parameter), parameter.optional && this.tokenChar(63);
          this.print(parameter.typeAnnotation);
        }, exports3._parameters = function(parameters, endToken) {
          const exit = this.enterDelimited(), trailingComma = this.shouldPrintTrailingComma(endToken), paramLength = parameters.length;
          for (let i2 = 0; i2 < paramLength; i2++) this._param(parameters[i2]), (trailingComma || i2 < paramLength - 1) && (this.token(",", null, i2), this.space());
          this.token(endToken), exit();
        }, exports3._params = function(node, idNode, parentNode) {
          this.print(node.typeParameters);
          const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
          nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
          this.tokenChar(40), this._parameters(node.params, ")");
          const noLineTerminator = "ArrowFunctionExpression" === node.type;
          this.print(node.returnType, noLineTerminator), this._noLineTerminator = noLineTerminator;
        }, exports3._predicate = function(node, noLineTerminatorAfter) {
          node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, noLineTerminatorAfter));
        }, exports3._shouldPrintArrowParamsParens = function(node) {
          var _firstParam$leadingCo, _firstParam$trailingC;
          if (1 !== node.params.length) return true;
          if (node.typeParameters || node.returnType || node.predicate) return true;
          const firstParam = node.params[0];
          if (!isIdentifier(firstParam) || firstParam.typeAnnotation || firstParam.optional || null != (_firstParam$leadingCo = firstParam.leadingComments) && _firstParam$leadingCo.length || null != (_firstParam$trailingC = firstParam.trailingComments) && _firstParam$trailingC.length) return true;
          if (this.tokenMap) {
            if (null == node.loc) return true;
            if (null !== this.tokenMap.findMatching(node, "(")) return true;
            const arrowToken = this.tokenMap.findMatching(node, "=>");
            return null == (null == arrowToken ? void 0 : arrowToken.loc) || arrowToken.loc.start.line !== node.loc.start.line;
          }
          return !!this.format.retainLines;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isIdentifier } = _t;
        function _getFuncIdName(idNode, parent) {
          let nameInfo, id = idNode;
          if (!id && parent) {
            const parentType = parent.type;
            "VariableDeclarator" === parentType ? id = parent.id : "AssignmentExpression" === parentType || "AssignmentPattern" === parentType ? id = parent.left : "ObjectProperty" === parentType || "ClassProperty" === parentType ? parent.computed && "StringLiteral" !== parent.key.type || (id = parent.key) : "ClassPrivateProperty" !== parentType && "ClassAccessorProperty" !== parentType || (id = parent.key);
          }
          if (id) {
            var _id$loc, _id$loc2;
            if ("Identifier" === id.type) nameInfo = { pos: null == (_id$loc = id.loc) ? void 0 : _id$loc.start, name: (null == (_id$loc2 = id.loc) ? void 0 : _id$loc2.identifierName) || id.name };
            else if ("PrivateName" === id.type) {
              var _id$loc3;
              nameInfo = { pos: null == (_id$loc3 = id.loc) ? void 0 : _id$loc3.start, name: "#" + id.id.name };
            } else if ("StringLiteral" === id.type) {
              var _id$loc4;
              nameInfo = { pos: null == (_id$loc4 = id.loc) ? void 0 : _id$loc4.start, name: id.value };
            }
            return nameInfo;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ExportAllDeclaration = function(node) {
          var _node$attributes, _node$assertions;
          this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
          this.tokenChar(42), this.space(), this.word("from"), this.space(), null != (_node$attributes = node.attributes) && _node$attributes.length || null != (_node$assertions = node.assertions) && _node$assertions.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, false)) : this.print(node.source);
          this.semicolon();
        }, exports3.ExportDefaultDeclaration = function(node) {
          maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |= _index.TokenContext.exportDefault;
          const declar = node.declaration;
          this.print(declar), isStatement(declar) || this.semicolon();
        }, exports3.ExportDefaultSpecifier = function(node) {
          this.print(node.exported);
        }, exports3.ExportNamedDeclaration = function(node) {
          if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
            const declar = node.declaration;
            this.print(declar), isStatement(declar) || this.semicolon();
          } else {
            "type" === node.exportKind && (this.word("type"), this.space());
            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;
            for (; ; ) {
              const first = specifiers[0];
              if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first)) break;
              hasSpecial = true, this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
            }
            let hasBrace = false;
            var _node$attributes2, _node$assertions2;
            if ((specifiers.length || !specifiers.length && !hasSpecial) && (hasBrace = true, this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space()), this.tokenChar(125)), node.source) this.space(), this.word("from"), this.space(), null != (_node$attributes2 = node.attributes) && _node$attributes2.length || null != (_node$assertions2 = node.assertions) && _node$assertions2.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
            this.semicolon();
          }
        }, exports3.ExportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported);
        }, exports3.ExportSpecifier = function(node) {
          "type" === node.exportKind && (this.word("type"), this.space());
          this.print(node.local), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported));
        }, exports3.ImportAttribute = function(node) {
          this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports3.ImportDeclaration = function(node) {
          var _node$attributes3, _node$assertions3;
          this.word("import"), this.space();
          const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
          isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module ? (this.noIndentInnerCommentsHere(), this.word("module"), this.space()) : node.phase && (this.noIndentInnerCommentsHere(), this.word(node.phase), this.space());
          const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
          for (; hasSpecifiers; ) {
            const first = specifiers[0];
            if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first)) break;
            this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
          }
          let hasBrace = false;
          specifiers.length ? (hasBrace = true, this.tokenChar(123), this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (hasBrace = true, this.tokenChar(123), this.tokenChar(125));
          (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
          null != (_node$attributes3 = node.attributes) && _node$attributes3.length || null != (_node$assertions3 = node.assertions) && _node$assertions3.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
          this.semicolon();
        }, exports3.ImportDefaultSpecifier = function(node) {
          this.print(node.local);
        }, exports3.ImportExpression = function(node) {
          this.word("import"), node.phase && (this.tokenChar(46), this.word(node.phase));
          this.tokenChar(40), this.print(node.source), null != node.options && (this.tokenChar(44), this.space(), this.print(node.options));
          this.tokenChar(41);
        }, exports3.ImportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local);
        }, exports3.ImportSpecifier = function(node) {
          "type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
          this.print(node.imported), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local));
        }, exports3._printAttributes = function(node, hasPreviousBrace) {
          const { importAttributesKeyword } = this.format, { attributes, assertions } = node;
          !attributes || importAttributesKeyword || warningShown || (warningShown = true, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
          const useAssertKeyword = "assert" === importAttributesKeyword || !importAttributesKeyword && assertions;
          if (this.word(useAssertKeyword ? "assert" : "with"), this.space(), !useAssertKeyword && "with" !== importAttributesKeyword) return void this.printList(attributes || assertions);
          const occurrenceCount = hasPreviousBrace ? 1 : 0;
          this.token("{", null, occurrenceCount), this.space(), this.printList(attributes || assertions, this.shouldPrintTrailingComma("}")), this.space(), this.token("}", null, occurrenceCount);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
        let warningShown = false;
        function maybePrintDecoratorsBeforeExport(printer, node) {
          isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.BreakStatement = function(node) {
          this.word("break"), printStatementAfterKeyword(this, node.label);
        }, exports3.CatchClause = function(node) {
          this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param), this.print(node.param.typeAnnotation), this.tokenChar(41), this.space());
          this.print(node.body);
        }, exports3.ContinueStatement = function(node) {
          this.word("continue"), printStatementAfterKeyword(this, node.label);
        }, exports3.DebuggerStatement = function() {
          this.word("debugger"), this.semicolon();
        }, exports3.DoWhileStatement = function(node) {
          this.word("do"), this.space(), this.print(node.body), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.semicolon();
        }, exports3.ForOfStatement = exports3.ForInStatement = void 0, exports3.ForStatement = function(node) {
          this.word("for"), this.space(), this.tokenChar(40);
          {
            const exit = this.enterForStatementInit();
            this.tokenContext |= _index.TokenContext.forHead, this.print(node.init), exit();
          }
          this.tokenChar(59), node.test && (this.space(), this.print(node.test));
          this.token(";", false, 1), node.update && (this.space(), this.print(node.update));
          this.tokenChar(41), this.printBlock(node);
        }, exports3.IfStatement = function(node) {
          this.word("if"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.space();
          const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
          needsBlock && (this.tokenChar(123), this.newline(), this.indent());
          this.printAndIndentOnComments(node.consequent), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
          node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate));
        }, exports3.LabeledStatement = function(node) {
          this.print(node.label), this.tokenChar(58), this.space(), this.print(node.body);
        }, exports3.ReturnStatement = function(node) {
          this.word("return"), printStatementAfterKeyword(this, node.argument);
        }, exports3.SwitchCase = function(node) {
          node.test ? (this.word("case"), this.space(), this.print(node.test), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
          node.consequent.length && (this.newline(), this.printSequence(node.consequent, true));
        }, exports3.SwitchStatement = function(node) {
          this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, true, void 0, function(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
          }), this.rightBrace(node);
        }, exports3.ThrowStatement = function(node) {
          this.word("throw"), printStatementAfterKeyword(this, node.argument);
        }, exports3.TryStatement = function(node) {
          this.word("try"), this.space(), this.print(node.block), this.space(), node.handlers ? this.print(node.handlers[0]) : this.print(node.handler);
          node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer));
        }, exports3.VariableDeclaration = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          const { kind } = node;
          "await using" === kind ? (this.word("await"), this.space(), this.word("using", true)) : this.word(kind, "using" === kind);
          this.space();
          let hasInits = false;
          if (!isFor(parent)) for (const declar of node.declarations) declar.init && (hasInits = true);
          if (this.printList(node.declarations, void 0, void 0, node.declarations.length > 1, hasInits ? function(occurrenceCount) {
            this.token(",", false, occurrenceCount), this.newline();
          } : void 0), isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node) return;
            } else if (parent.left === node) return;
          }
          this.semicolon();
        }, exports3.VariableDeclarator = function(node) {
          this.print(node.id), node.definite && this.tokenChar(33);
          this.print(node.id.typeAnnotation), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init));
        }, exports3.WhileStatement = function(node) {
          this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.printBlock(node);
        }, exports3.WithStatement = function(node) {
          this.word("with"), this.space(), this.tokenChar(40), this.print(node.object), this.tokenChar(41), this.printBlock(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isFor, isForStatement, isIfStatement, isStatement } = _t;
        function getLastStatement(statement) {
          const { body } = statement;
          return false === isStatement(body) ? statement : getLastStatement(body);
        }
        function ForXStatement(node) {
          this.word("for"), this.space();
          const isForOf = "ForOfStatement" === node.type;
          isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
          {
            const exit = isForOf ? null : this.enterForStatementInit();
            this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead, this.print(node.left), null == exit || exit();
          }
          this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right), this.tokenChar(41), this.printBlock(node);
        }
        exports3.ForInStatement = ForXStatement, exports3.ForOfStatement = ForXStatement;
        function printStatementAfterKeyword(printer, node) {
          node && (printer.space(), printer.printTerminatorless(node)), printer.semicolon();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TaggedTemplateExpression = function(node) {
          this.print(node.tag), this.print(node.typeParameters), this.print(node.quasi);
        }, exports3.TemplateElement = function() {
          throw new Error("TemplateElement printing is handled in TemplateLiteral");
        }, exports3.TemplateLiteral = function(node) {
          const quasis = node.quasis;
          let partRaw = "`";
          for (let i2 = 0; i2 < quasis.length; i2++) if (partRaw += quasis[i2].value.raw, i2 + 1 < quasis.length && (this.token(partRaw + "${", true), this.print(node.expressions[i2]), partRaw = "}", this.tokenMap)) {
            const token = this.tokenMap.findMatching(node, "}", i2);
            token && this._catchUpTo(token.loc.start);
          }
          this.token(partRaw + "`", true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArgumentPlaceholder = function() {
          this.tokenChar(63);
        }, exports3.ArrayPattern = exports3.ArrayExpression = function(node) {
          const elems = node.elements, len = elems.length;
          this.tokenChar(91);
          const exit = this.enterDelimited();
          for (let i2 = 0; i2 < elems.length; i2++) {
            const elem = elems[i2];
            elem ? (i2 > 0 && this.space(), this.print(elem), (i2 < len - 1 || this.shouldPrintTrailingComma("]")) && this.token(",", false, i2)) : this.token(",", false, i2);
          }
          exit(), this.tokenChar(93);
        }, exports3.BigIntLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.word(raw);
          this.word(node.value + "n");
        }, exports3.BooleanLiteral = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports3.DecimalLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.word(raw);
          this.word(node.value + "m");
        }, exports3.Identifier = function(node) {
          var _node$loc;
          this.sourceIdentifierName((null == (_node$loc = node.loc) ? void 0 : _node$loc.identifierName) || node.name), this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);
        }, exports3.NullLiteral = function() {
          this.word("null");
        }, exports3.NumericLiteral = function(node) {
          const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value2 = node.value, str = value2 + "";
          opts.numbers ? this.number(_jsesc(value2, opts), value2) : null == raw ? this.number(str, value2) : this.format.minified ? this.number(raw.length < str.length ? raw : str, value2) : this.number(raw, value2);
        }, exports3.ObjectPattern = exports3.ObjectExpression = function(node) {
          const props = node.properties;
          if (this.tokenChar(123), props.length) {
            const exit = this.enterDelimited();
            this.space(), this.printList(props, this.shouldPrintTrailingComma("}"), true, true), this.space(), exit();
          }
          this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
        }, exports3.ObjectMethod = function(node) {
          this.printJoin(node.decorators), this._methodHead(node), this.space(), this.print(node.body);
        }, exports3.ObjectProperty = function(node) {
          if (this.printJoin(node.decorators), node.computed) this.tokenChar(91), this.print(node.key), this.tokenChar(93);
          else {
            if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) return void this.print(node.value);
            if (this.print(node.key), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) return;
          }
          this.tokenChar(58), this.space(), this.print(node.value);
        }, exports3.PipelineBareFunction = function(node) {
          this.print(node.callee);
        }, exports3.PipelinePrimaryTopicReference = function() {
          this.tokenChar(35);
        }, exports3.PipelineTopicExpression = function(node) {
          this.print(node.expression);
        }, exports3.RecordExpression = function(node) {
          const props = node.properties;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "{|", endToken = "|}";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
            startToken = "#{", endToken = "}";
          }
          this.token(startToken), props.length && (this.space(), this.printList(props, this.shouldPrintTrailingComma(endToken), true, true), this.space());
          this.token(endToken);
        }, exports3.RegExpLiteral = function(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }, exports3.SpreadElement = exports3.RestElement = function(node) {
          this.token("..."), this.print(node.argument);
        }, exports3.StringLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.token(raw);
          const val = _jsesc(node.value, this.format.jsescOption);
          this.token(val);
        }, exports3.TopicReference = function() {
          const { topicToken } = this.format;
          if (!validTopicTokenSet.has(topicToken)) {
            const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v2) => JSON.stringify(v2));
            throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
          }
          this.token(topicToken);
        }, exports3.TupleExpression = function(node) {
          const elems = node.elements, len = elems.length;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "[|", endToken = "|]";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
            startToken = "#[", endToken = "]";
          }
          this.token(startToken);
          for (let i2 = 0; i2 < elems.length; i2++) {
            const elem = elems[i2];
            elem && (i2 > 0 && this.space(), this.print(elem), (i2 < len - 1 || this.shouldPrintTrailingComma(endToken)) && this.token(",", false, i2));
          }
          this.token(endToken);
        }, exports3._getRawIdentifier = function(node) {
          if (node === lastRawIdentNode) return lastRawIdentResult;
          lastRawIdentNode = node;
          const { name } = node, token = this.tokenMap.find(node, (tok) => tok.value === name);
          if (token) return lastRawIdentResult = this._originalCode.slice(token.start, token.end), lastRawIdentResult;
          return lastRawIdentResult = node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js");
        const { isAssignmentPattern, isIdentifier } = _t;
        let lastRawIdentNode = null, lastRawIdentResult = "";
        const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function maybePrintTrailingCommaOrSemicolon(printer, node) {
          printer.tokenMap && node.start && node.end ? printer.tokenMap.endMatches(node, ",") ? printer.token(",") : printer.tokenMap.endMatches(node, ";") && printer.semicolon() : printer.semicolon();
        }
        function tsPrintUnionOrIntersectionType(printer, node, sep) {
          var _printer$tokenMap;
          let hasLeadingToken = 0;
          null != (_printer$tokenMap = printer.tokenMap) && _printer$tokenMap.startMatches(node, sep) && (hasLeadingToken = 1, printer.token(sep)), printer.printJoin(node.types, void 0, void 0, function(i2) {
            this.space(), this.token(sep, null, i2 + hasLeadingToken), this.space();
          });
        }
        function tokenIfPlusMinus(self2, tok) {
          true !== tok && self2.token(tok);
        }
        function printBraced(printer, node, cb) {
          printer.token("{");
          const exit = printer.enterDelimited();
          cb(), exit(), printer.rightBrace(node);
        }
        function printModifiersList(printer, node, modifiers) {
          var _printer$tokenMap2;
          const modifiersSet = /* @__PURE__ */ new Set();
          for (const modifier of modifiers) modifier && modifiersSet.add(modifier);
          null == (_printer$tokenMap2 = printer.tokenMap) || _printer$tokenMap2.find(node, (tok) => {
            if (modifiersSet.has(tok.value)) return printer.token(tok.value), printer.space(), modifiersSet.delete(tok.value), 0 === modifiersSet.size;
          });
          for (const modifier of modifiersSet) printer.word(modifier), printer.space();
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TSAnyKeyword = function() {
          this.word("any");
        }, exports3.TSArrayType = function(node) {
          this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
        }, exports3.TSSatisfiesExpression = exports3.TSAsExpression = function(node) {
          const { type, expression, typeAnnotation } = node;
          this.print(expression, true), this.space(), this.word("TSAsExpression" === type ? "as" : "satisfies"), this.space(), this.print(typeAnnotation);
        }, exports3.TSBigIntKeyword = function() {
          this.word("bigint");
        }, exports3.TSBooleanKeyword = function() {
          this.word("boolean");
        }, exports3.TSCallSignatureDeclaration = function(node) {
          this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports3.TSInterfaceHeritage = exports3.TSExpressionWithTypeArguments = exports3.TSClassImplements = function(node) {
          this.print(node.expression), this.print(node.typeParameters);
        }, exports3.TSConditionalType = function(node) {
          this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
        }, exports3.TSConstructSignatureDeclaration = function(node) {
          this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports3.TSConstructorType = function(node) {
          node.abstract && (this.word("abstract"), this.space());
          this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
        }, exports3.TSDeclareFunction = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          this._functionHead(node, parent), this.semicolon();
        }, exports3.TSDeclareMethod = function(node) {
          this._classMethodHead(node), this.semicolon();
        }, exports3.TSEnumDeclaration = function(node) {
          const { declare, const: isConst, id, members } = node;
          declare && (this.word("declare"), this.space());
          isConst && (this.word("const"), this.space());
          this.word("enum"), this.space(), this.print(id), this.space(), printBraced(this, node, () => {
            var _this$shouldPrintTrai;
            return this.printList(members, null == (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) || _this$shouldPrintTrai, true, true);
          });
        }, exports3.TSEnumMember = function(node) {
          const { id, initializer } = node;
          this.print(id), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer));
        }, exports3.TSExportAssignment = function(node) {
          this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression), this.semicolon();
        }, exports3.TSExternalModuleReference = function(node) {
          this.token("require("), this.print(node.expression), this.tokenChar(41);
        }, exports3.TSFunctionType = function(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }, exports3.TSImportEqualsDeclaration = function(node) {
          const { isExport, id, moduleReference } = node;
          isExport && (this.word("export"), this.space());
          this.word("import"), this.space(), this.print(id), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference), this.semicolon();
        }, exports3.TSImportType = function(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import"), this.tokenChar(40), this.print(argument), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier));
          typeParameters && this.print(typeParameters);
        }, exports3.TSIndexSignature = function(node) {
          const { readonly, static: isStatic } = node;
          isStatic && (this.word("static"), this.space());
          readonly && (this.word("readonly"), this.space());
          this.tokenChar(91), this._parameters(node.parameters, "]"), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports3.TSIndexedAccessType = function(node) {
          this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports3.TSInferType = function(node) {
          this.word("infer"), this.print(node.typeParameter);
        }, exports3.TSInstantiationExpression = function(node) {
          this.print(node.expression), this.print(node.typeParameters);
        }, exports3.TSInterfaceBody = function(node) {
          printBraced(this, node, () => this.printJoin(node.body, true, true));
        }, exports3.TSInterfaceDeclaration = function(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;
          declare && (this.word("declare"), this.space());
          this.word("interface"), this.space(), this.print(id), this.print(typeParameters), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz));
          this.space(), this.print(body);
        }, exports3.TSIntersectionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "&");
        }, exports3.TSIntrinsicKeyword = function() {
          this.word("intrinsic");
        }, exports3.TSLiteralType = function(node) {
          this.print(node.literal);
        }, exports3.TSMappedType = function(node) {
          const { nameType, optional, readonly, typeAnnotation } = node;
          this.tokenChar(123);
          const exit = this.enterDelimited();
          this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
          this.tokenChar(91), this.word(node.typeParameter.name), this.space(), this.word("in"), this.space(), this.print(node.typeParameter.constraint), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType));
          this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
          typeAnnotation && (this.tokenChar(58), this.space(), this.print(typeAnnotation));
          this.space(), exit(), this.tokenChar(125);
        }, exports3.TSMethodSignature = function(node) {
          const { kind } = node;
          "set" !== kind && "get" !== kind || (this.word(kind), this.space());
          this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports3.TSModuleBlock = function(node) {
          printBraced(this, node, () => this.printSequence(node.body, true));
        }, exports3.TSModuleDeclaration = function(node) {
          const { declare, id, kind } = node;
          declare && (this.word("declare"), this.space());
          {
            if (node.global || (this.word(null != kind ? kind : "Identifier" === id.type ? "namespace" : "module"), this.space()), this.print(id), !node.body) return void this.semicolon();
            let body = node.body;
            for (; "TSModuleDeclaration" === body.type; ) this.tokenChar(46), this.print(body.id), body = body.body;
            this.space(), this.print(body);
          }
        }, exports3.TSNamedTupleMember = function(node) {
          this.print(node.label), node.optional && this.tokenChar(63);
          this.tokenChar(58), this.space(), this.print(node.elementType);
        }, exports3.TSNamespaceExportDeclaration = function(node) {
          this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id), this.semicolon();
        }, exports3.TSNeverKeyword = function() {
          this.word("never");
        }, exports3.TSNonNullExpression = function(node) {
          this.print(node.expression), this.tokenChar(33);
        }, exports3.TSNullKeyword = function() {
          this.word("null");
        }, exports3.TSNumberKeyword = function() {
          this.word("number");
        }, exports3.TSObjectKeyword = function() {
          this.word("object");
        }, exports3.TSOptionalType = function(node) {
          this.print(node.typeAnnotation), this.tokenChar(63);
        }, exports3.TSParameterProperty = function(node) {
          node.accessibility && (this.word(node.accessibility), this.space());
          node.readonly && (this.word("readonly"), this.space());
          this._param(node.parameter);
        }, exports3.TSParenthesizedType = function(node) {
          this.tokenChar(40), this.print(node.typeAnnotation), this.tokenChar(41);
        }, exports3.TSPropertySignature = function(node) {
          const { readonly } = node;
          readonly && (this.word("readonly"), this.space());
          this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports3.TSQualifiedName = function(node) {
          this.print(node.left), this.tokenChar(46), this.print(node.right);
        }, exports3.TSRestType = function(node) {
          this.token("..."), this.print(node.typeAnnotation);
        }, exports3.TSStringKeyword = function() {
          this.word("string");
        }, exports3.TSSymbolKeyword = function() {
          this.word("symbol");
        }, exports3.TSThisType = function() {
          this.word("this");
        }, exports3.TSTupleType = function(node) {
          this.tokenChar(91), this.printList(node.elementTypes, this.shouldPrintTrailingComma("]")), this.tokenChar(93);
        }, exports3.TSTypeAliasDeclaration = function(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;
          declare && (this.word("declare"), this.space());
          this.word("type"), this.space(), this.print(id), this.print(typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation), this.semicolon();
        }, exports3.TSTypeAnnotation = function(node, parent) {
          this.token("TSFunctionType" !== parent.type && "TSConstructorType" !== parent.type || parent.typeAnnotation !== node ? ":" : "=>"), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation);
        }, exports3.TSTypeAssertion = function(node) {
          const { typeAnnotation, expression } = node;
          this.tokenChar(60), this.print(typeAnnotation), this.tokenChar(62), this.space(), this.print(expression);
        }, exports3.TSTypeLiteral = function(node) {
          printBraced(this, node, () => this.printJoin(node.members, true, true));
        }, exports3.TSTypeOperator = function(node) {
          this.word(node.operator), this.space(), this.print(node.typeAnnotation);
        }, exports3.TSTypeParameter = function(node) {
          node.in && (this.word("in"), this.space());
          node.out && (this.word("out"), this.space());
          this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint));
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
        }, exports3.TSTypeParameterDeclaration = exports3.TSTypeParameterInstantiation = function(node, parent) {
          this.tokenChar(60);
          let printTrailingSeparator = "ArrowFunctionExpression" === parent.type && 1 === node.params.length;
          this.tokenMap && null != node.start && null != node.end && (printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, (t2) => this.tokenMap.matchesOriginal(t2, ","))), printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">")));
          this.printList(node.params, printTrailingSeparator), this.tokenChar(62);
        }, exports3.TSTypePredicate = function(node) {
          node.asserts && (this.word("asserts"), this.space());
          this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
        }, exports3.TSTypeQuery = function(node) {
          this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters);
        }, exports3.TSTypeReference = function(node) {
          this.print(node.typeName, !!node.typeParameters), this.print(node.typeParameters);
        }, exports3.TSUndefinedKeyword = function() {
          this.word("undefined");
        }, exports3.TSUnionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "|");
        }, exports3.TSUnknownKeyword = function() {
          this.word("unknown");
        }, exports3.TSVoidKeyword = function() {
          this.word("void");
        }, exports3.tsPrintClassMemberModifiers = function(node) {
          const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
          printModifiersList(this, node, [isField && node.declare && "declare", node.accessibility]), node.static && (this.word("static"), this.space());
          printModifiersList(this, node, [node.override && "override", node.abstract && "abstract", isField && node.readonly && "readonly"]);
        }, exports3.tsPrintFunctionOrConstructorType = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")"), this.space();
          const returnType = node.typeAnnotation;
          this.print(returnType);
        }, exports3.tsPrintPropertyOrMethodName = function(node) {
          node.computed && this.tokenChar(91);
          this.print(node.key), node.computed && this.tokenChar(93);
          node.optional && this.tokenChar(63);
        }, exports3.tsPrintSignatureDeclarationBase = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")");
          const returnType = node.typeAnnotation;
          this.print(returnType);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(ast, opts = {}, code) {
          const format = normalizeOptions3(code, opts, ast), map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
          return new _printer.default(format, map, ast.tokens, "string" == typeof code ? code : null).generate(ast);
        };
        var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js");
        function normalizeOptions3(code, opts, ast) {
          if (opts.experimental_preserveFormat) {
            if ("string" != typeof code) throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
            if (!opts.retainLines) throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
            if (opts.compact && "auto" !== opts.compact) throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
            if (opts.minified) throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
            if (opts.jsescOption) throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
            if (!Array.isArray(ast.tokens)) throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
          }
          const format = { auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, shouldPrintComment: opts.shouldPrintComment, preserveFormat: opts.experimental_preserveFormat, retainLines: opts.retainLines, retainFunctionParens: opts.retainFunctionParens, comments: null == opts.comments || opts.comments, compact: opts.compact, minified: opts.minified, concise: opts.concise, indent: { adjustMultilineComment: true, style: "  " }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts.jsescOption), topicToken: opts.topicToken, importAttributesKeyword: opts.importAttributesKeyword };
          var _opts$recordAndTupleS;
          format.decoratorsBeforeExport = opts.decoratorsBeforeExport, format.jsescOption.json = opts.jsonCompatibleStrings, format.recordAndTupleSyntaxType = null != (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) ? _opts$recordAndTupleS : "hash", format.minified ? (format.compact = true, format.shouldPrintComment = format.shouldPrintComment || (() => format.comments)) : format.shouldPrintComment = format.shouldPrintComment || ((value2) => format.comments || value2.includes("@license") || value2.includes("@preserve")), "auto" === format.compact && (format.compact = "string" == typeof code && code.length > 5e5, format.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`)), (format.compact || format.preserveFormat) && (format.indent.adjustMultilineComment = false);
          const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format;
          return auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format.auxiliaryCommentBefore = void 0), auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format.auxiliaryCommentAfter = void 0), format;
        }
        exports3.CodeGenerator = class {
          constructor(ast, opts = {}, code) {
            this._ast = void 0, this._format = void 0, this._map = void 0, this._ast = ast, this._format = normalizeOptions3(code, opts, ast), this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
          }
          generate() {
            return new _printer.default(this._format, this._map).generate(this._ast);
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TokenContext = void 0, exports3.isLastChild = function(parent, child) {
          const visitorKeys = VISITOR_KEYS[parent.type];
          for (let i2 = visitorKeys.length - 1; i2 >= 0; i2--) {
            const val = parent[visitorKeys[i2]];
            if (val === child) return true;
            if (Array.isArray(val)) {
              let j = val.length - 1;
              for (; j >= 0 && null === val[j]; ) j--;
              return j >= 0 && val[j] === child;
            }
            if (val) return false;
          }
          return false;
        }, exports3.needsParens = function(node, parent, tokenContext, inForInit, getRawIdentifier) {
          var _expandedParens$get;
          if (!parent) return false;
          if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node)) return true;
          if (isDecorator(parent)) return !(isDecoratorMemberExpression(node) || isCallExpression(node) && isDecoratorMemberExpression(node.callee) || isParenthesizedExpression(node));
          return null == (_expandedParens$get = expandedParens.get(node.type)) ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);
        }, exports3.needsWhitespace = needsWhitespace, exports3.needsWhitespaceAfter = function(node, parent) {
          return needsWhitespace(node, parent, 2);
        }, exports3.needsWhitespaceBefore = function(node, parent) {
          return needsWhitespace(node, parent, 1);
        };
        var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, VISITOR_KEYS, isCallExpression, isDecorator, isExpressionStatement, isMemberExpression, isNewExpression, isParenthesizedExpression } = _t;
        exports3.TokenContext = { expressionStatement: 1, arrowBody: 2, exportDefault: 4, forHead: 8, forInHead: 16, forOfHead: 32, arrowFlowReturnType: 64 };
        function expandAliases(obj) {
          const map = /* @__PURE__ */ new Map();
          function add(type, func) {
            const fn = map.get(type);
            map.set(type, fn ? function(node, parent, stack, inForInit, getRawIdentifier) {
              var _fn;
              return null != (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);
            } : func);
          }
          for (const type of Object.keys(obj)) {
            const aliases = FLIPPED_ALIAS_KEYS[type];
            if (aliases) for (const alias of aliases) add(alias, obj[type]);
            else add(type, obj[type]);
          }
          return map;
        }
        const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        function isOrHasCallExpression(node) {
          return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
        }
        function needsWhitespace(node, parent, type) {
          var _expandedWhitespaceNo;
          if (!node) return false;
          isExpressionStatement(node) && (node = node.expression);
          const flag = null == (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) ? void 0 : _expandedWhitespaceNo(node, parent);
          return "number" == typeof flag && !!(flag & type);
        }
        function isDecoratorMemberExpression(node) {
          switch (node.type) {
            case "Identifier":
              return true;
            case "MemberExpression":
              return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
            default:
              return false;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.AssignmentExpression = function(node, parent, tokenContext) {
          return !(!needsParenBeforeExpressionBrace(tokenContext) || !isObjectPattern(node.left)) || ConditionalExpression(node, parent);
        }, exports3.Binary = Binary, exports3.BinaryExpression = function(node, parent, tokenContext, inForStatementInit) {
          return "in" === node.operator && inForStatementInit;
        }, exports3.ClassExpression = function(node, parent, tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
        }, exports3.ArrowFunctionExpression = exports3.ConditionalExpression = ConditionalExpression, exports3.DoExpression = function(node, parent, tokenContext) {
          return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
        }, exports3.FunctionExpression = function(node, parent, tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
        }, exports3.FunctionTypeAnnotation = function(node, parent, tokenContext) {
          const parentType = parent.type;
          return "UnionTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "ArrayTypeAnnotation" === parentType || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
        }, exports3.Identifier = function(node, parent, tokenContext, _inForInit, getRawIdentifier) {
          var _node$extra;
          const parentType = parent.type;
          if (null != (_node$extra = node.extra) && _node$extra.parenthesized && "AssignmentExpression" === parentType && parent.left === node) {
            const rightType = parent.right.type;
            if (("FunctionExpression" === rightType || "ClassExpression" === rightType) && null == parent.right.id) return true;
          }
          if (getRawIdentifier && getRawIdentifier(node) !== node.name) return false;
          if ("let" === node.name) {
            return !!((isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false })) && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) || Boolean(tokenContext & _index.TokenContext.forOfHead);
          }
          return "async" === node.name && isForOfStatement(parent, { left: node, await: false });
        }, exports3.LogicalExpression = function(node, parent) {
          const parentType = parent.type;
          if (isTSTypeExpression(parentType)) return true;
          if ("LogicalExpression" !== parentType) return false;
          switch (node.operator) {
            case "||":
              return "??" === parent.operator || "&&" === parent.operator;
            case "&&":
              return "??" === parent.operator;
            case "??":
              return "??" !== parent.operator;
          }
        }, exports3.NullableTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent);
        }, exports3.ObjectExpression = function(node, parent, tokenContext) {
          return needsParenBeforeExpressionBrace(tokenContext);
        }, exports3.OptionalIndexedAccessType = function(node, parent) {
          return isIndexedAccessType(parent) && parent.objectType === node;
        }, exports3.OptionalCallExpression = exports3.OptionalMemberExpression = function(node, parent) {
          return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
        }, exports3.SequenceExpression = function(node, parent) {
          const parentType = parent.type;
          if ("SequenceExpression" === parentType || "ParenthesizedExpression" === parentType || "MemberExpression" === parentType && parent.property === node || "OptionalMemberExpression" === parentType && parent.property === node || "TemplateLiteral" === parentType) return false;
          if ("ClassDeclaration" === parentType) return true;
          if ("ForOfStatement" === parentType) return parent.right === node;
          if ("ExportDefaultDeclaration" === parentType) return true;
          return !isStatement(parent);
        }, exports3.TSSatisfiesExpression = exports3.TSAsExpression = function(node, parent) {
          if (("AssignmentExpression" === parent.type || "AssignmentPattern" === parent.type) && parent.left === node) return true;
          if ("BinaryExpression" === parent.type && ("|" === parent.operator || "&" === parent.operator) && node === parent.left) return true;
          return Binary(node, parent);
        }, exports3.TSInferType = function(node, parent) {
          const parentType = parent.type;
          return "TSArrayType" === parentType || "TSOptionalType" === parentType;
        }, exports3.TSInstantiationExpression = function(node, parent) {
          const parentType = parent.type;
          return ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType || "TSInstantiationExpression" === parentType) && !!parent.typeParameters;
        }, exports3.UnaryLike = exports3.TSTypeAssertion = UnaryLike, exports3.TSIntersectionType = exports3.TSUnionType = function(node, parent) {
          const parentType = parent.type;
          return "TSArrayType" === parentType || "TSOptionalType" === parentType || "TSIntersectionType" === parentType || "TSRestType" === parentType;
        }, exports3.IntersectionTypeAnnotation = exports3.UnionTypeAnnotation = function(node, parent) {
          const parentType = parent.type;
          return "ArrayTypeAnnotation" === parentType || "NullableTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "UnionTypeAnnotation" === parentType;
        }, exports3.UpdateExpression = function(node, parent) {
          return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
        }, exports3.AwaitExpression = exports3.YieldExpression = function(node, parent) {
          const parentType = parent.type;
          return "BinaryExpression" === parentType || "LogicalExpression" === parentType || "UnaryExpression" === parentType || "SpreadElement" === parentType || hasPostfixPart(node, parent) || "AwaitExpression" === parentType && isYieldExpression(node) || "ConditionalExpression" === parentType && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isArrayTypeAnnotation, isBinaryExpression, isCallExpression, isForOfStatement, isIndexedAccessType, isMemberExpression, isObjectPattern, isOptionalMemberExpression, isYieldExpression, isStatement } = _t, PRECEDENCE = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
        function getBinaryPrecedence(node, nodeType) {
          return "BinaryExpression" === nodeType || "LogicalExpression" === nodeType ? PRECEDENCE.get(node.operator) : "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType ? PRECEDENCE.get("in") : void 0;
        }
        function isTSTypeExpression(nodeType) {
          return "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType;
        }
        const isClassExtendsClause = (node, parent) => {
          const parentType = parent.type;
          return ("ClassDeclaration" === parentType || "ClassExpression" === parentType) && parent.superClass === node;
        }, hasPostfixPart = (node, parent) => {
          const parentType = parent.type;
          return ("MemberExpression" === parentType || "OptionalMemberExpression" === parentType) && parent.object === node || ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType) && parent.callee === node || "TaggedTemplateExpression" === parentType && parent.tag === node || "TSNonNullExpression" === parentType;
        };
        function needsParenBeforeExpressionBrace(tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
        }
        function Binary(node, parent) {
          const parentType = parent.type;
          if ("BinaryExpression" === node.type && "**" === node.operator && "BinaryExpression" === parentType && "**" === parent.operator) return parent.left === node;
          if (isClassExtendsClause(node, parent)) return true;
          if (hasPostfixPart(node, parent) || "UnaryExpression" === parentType || "SpreadElement" === parentType || "AwaitExpression" === parentType) return true;
          const parentPos = getBinaryPrecedence(parent, parentType);
          if (null != parentPos) {
            const nodePos = getBinaryPrecedence(node, node.type);
            if (parentPos === nodePos && "BinaryExpression" === parentType && parent.right === node || parentPos > nodePos) return true;
          }
        }
        function UnaryLike(node, parent) {
          return hasPostfixPart(node, parent) || isBinaryExpression(parent) && "**" === parent.operator && parent.left === node || isClassExtendsClause(node, parent);
        }
        function ConditionalExpression(node, parent) {
          const parentType = parent.type;
          return !!("UnaryExpression" === parentType || "SpreadElement" === parentType || "BinaryExpression" === parentType || "LogicalExpression" === parentType || "ConditionalExpression" === parentType && parent.test === node || "AwaitExpression" === parentType || isTSTypeExpression(parentType)) || UnaryLike(node, parent);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.nodes = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction: isFunction2, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
        function crawlInternal(node, state) {
          return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction2(node) ? state.hasFunction = true : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
        }
        function crawl(node) {
          return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
        }
        function isHelper(node) {
          return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
        }
        function isType2(node) {
          return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
        }
        const nodes = exports3.nodes = { AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction) return state.hasFunction ? 3 : 2;
        }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
          if (isFunction2(node.left) || isFunction2(node.right)) return 2;
        }, Literal(node) {
          if (isStringLiteral(node) && "use strict" === node.value) return 2;
        }, CallExpression(node) {
          if (isFunction2(node.callee) || isHelper(node)) return 3;
        }, OptionalCallExpression(node) {
          if (isFunction2(node.callee)) return 3;
        }, VariableDeclaration(node) {
          for (let i2 = 0; i2 < node.declarations.length; i2++) {
            const declar = node.declarations[i2];
            let enabled = isHelper(declar.id) && !isType2(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled) return 3;
          }
        }, IfStatement(node) {
          if (isBlockStatement(node.consequent)) return 3;
        } };
        nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
          if (parent.properties[0] === node) return 1;
        }, nodes.ObjectTypeCallProperty = function(node, parent) {
          var _parent$properties;
          if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length)) return 1;
        }, nodes.ObjectTypeIndexer = function(node, parent) {
          var _parent$properties2, _parent$callPropertie;
          if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length)) return 1;
        }, nodes.ObjectTypeInternalSlot = function(node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;
          if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length)) return 1;
        }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
          [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
            const ret = amounts ? 3 : 0;
            nodes[type2] = () => ret;
          });
        });
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js"), n2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _tokenMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js");
        const { isExpression, isFunction: isFunction2, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
        function commentIsNewline(c2) {
          return "CommentLine" === c2.type || HAS_NEWLINE.test(c2.value);
        }
        const { needsParens } = n2;
        class Printer {
          constructor(format, map, tokens, originalCode) {
            this.inForStatementInit = false, this.tokenContext = 0, this._tokens = null, this._originalCode = null, this._currentNode = null, this._indent = 0, this._indentRepeat = 0, this._insideAux = false, this._noLineTerminator = false, this._noLineTerminatorAfterNode = null, this._printAuxAfterOnNextUserNode = false, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = false, this._endsWithWord = false, this._endsWithDiv = false, this._lastCommentLine = 0, this._endsWithInnerRaw = false, this._indentInnerComments = true, this.tokenMap = null, this._boundGetRawIdentifier = this._getRawIdentifier.bind(this), this._printSemicolonBeforeNextNode = -1, this._printSemicolonBeforeNextToken = -1, this.format = format, this._tokens = tokens, this._originalCode = originalCode, this._indentRepeat = format.indent.style.length, this._inputMap = null == map ? void 0 : map._inputMap, this._buf = new _buffer.default(map, format.indent.style[0]);
          }
          enterForStatementInit() {
            return this.inForStatementInit ? () => {
            } : (this.inForStatementInit = true, () => {
              this.inForStatementInit = false;
            });
          }
          enterDelimited() {
            const oldInForStatementInit = this.inForStatementInit, oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
            return false === oldInForStatementInit && null === oldNoLineTerminatorAfterNode ? () => {
            } : (this.inForStatementInit = false, this._noLineTerminatorAfterNode = null, () => {
              this.inForStatementInit = oldInForStatementInit, this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
            });
          }
          generate(ast) {
            return this.format.preserveFormat && (this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode)), this.print(ast), this._maybeAddAuxComment(), this._buf.get();
          }
          indent() {
            const { format } = this;
            format.preserveFormat || format.compact || format.concise || this._indent++;
          }
          dedent() {
            const { format } = this;
            format.preserveFormat || format.compact || format.concise || this._indent--;
          }
          semicolon(force = false) {
            if (this._maybeAddAuxComment(), force) return this._appendChar(59), void (this._noLineTerminator = false);
            if (this.tokenMap) {
              const node = this._currentNode;
              if (null != node.start && null != node.end) {
                if (!this.tokenMap.endMatches(node, ";")) return void (this._printSemicolonBeforeNextNode = this._buf.getCurrentLine());
                const indexes = this.tokenMap.getIndexes(this._currentNode);
                this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
              }
            }
            this._queue(59), this._noLineTerminator = false;
          }
          rightBrace(node) {
            this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
          }
          rightParens(node) {
            this.sourceWithOffset("end", node.loc, -1), this.tokenChar(41);
          }
          space(force = false) {
            const { format } = this;
            if (!format.compact && !format.preserveFormat) {
              if (force) this._space();
              else if (this._buf.hasContent()) {
                const lastCp = this.getLastChar();
                32 !== lastCp && 10 !== lastCp && this._space();
              }
            }
          }
          word(str, noLineTerminatorAfter = false) {
            this.tokenContext = 0, this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str), (this._endsWithWord || this._endsWithDiv && 47 === str.charCodeAt(0)) && this._space(), this._append(str, false), this._endsWithWord = true, this._noLineTerminator = noLineTerminatorAfter;
          }
          number(str, number) {
            this.word(str), this._endsWithInteger = Number.isInteger(number) && !function(str2) {
              if (str2.length > 2 && 48 === str2.charCodeAt(0)) {
                const secondChar = str2.charCodeAt(1);
                return 98 === secondChar || 111 === secondChar || 120 === secondChar;
              }
              return false;
            }(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
          }
          token(str, maybeNewline = false, occurrenceCount = 0) {
            this.tokenContext = 0, this._maybePrintInnerComments(str, occurrenceCount), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str, occurrenceCount);
            const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
            (33 === lastChar && ("--" === str || 61 === strFirst) || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._append(str, maybeNewline), this._noLineTerminator = false;
          }
          tokenChar(char) {
            this.tokenContext = 0;
            const str = String.fromCharCode(char);
            this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str);
            const lastChar = this.getLastChar();
            (43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._appendChar(char), this._noLineTerminator = false;
          }
          newline(i2 = 1, force) {
            if (!(i2 <= 0)) {
              if (!force) {
                if (this.format.retainLines || this.format.compact) return;
                if (this.format.concise) return void this.space();
              }
              i2 > 2 && (i2 = 2), i2 -= this._buf.getNewlineCount();
              for (let j = 0; j < i2; j++) this._newline();
            }
          }
          endsWith(char) {
            return this.getLastChar() === char;
          }
          getLastChar() {
            return this._buf.getLastChar();
          }
          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }
          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }
          exactSource(loc, cb) {
            loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
          }
          source(prop, loc) {
            loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
          }
          sourceWithOffset(prop, loc, columnOffset) {
            loc && !this.format.preserveFormat && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, columnOffset));
          }
          sourceIdentifierName(identifierName, pos) {
            if (!this._buf._canMarkIdName) return;
            const sourcePosition = this._buf._sourcePosition;
            sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
          }
          _space() {
            this._queue(32);
          }
          _newline() {
            this._queue(10);
          }
          _catchUpToCurrentToken(str, occurrenceCount = 0) {
            const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);
            token && this._catchUpTo(token.loc.start), -1 !== this._printSemicolonBeforeNextToken && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine() && (this._buf.appendChar(59), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false), this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1;
          }
          _append(str, maybeNewline) {
            this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
          }
          _appendChar(char) {
            this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
          }
          _queue(char) {
            this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _maybeIndent(firstChar) {
            this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
          }
          _shouldIndent(firstChar) {
            if (this._indent && 10 !== firstChar && this.endsWith(10)) return true;
          }
          catchUp(line) {
            if (!this.format.retainLines) return;
            const count = line - this._buf.getCurrentLine();
            for (let i2 = 0; i2 < count; i2++) this._newline();
          }
          _catchUp(prop, loc) {
            const { format } = this;
            if (!format.preserveFormat) return void (format.retainLines && null != loc && loc[prop] && this.catchUp(loc[prop].line));
            const pos = null == loc ? void 0 : loc[prop];
            null != pos && this._catchUpTo(pos);
          }
          _catchUpTo({ line, column, index: index2 }) {
            const count = line - this._buf.getCurrentLine();
            if (count > 0 && this._noLineTerminator) return;
            for (let i2 = 0; i2 < count; i2++) this._newline();
            const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();
            if (spacesCount > 0) {
              const spaces = this._originalCode ? this._originalCode.slice(index2 - spacesCount, index2).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
              this._append(spaces, false);
            }
          }
          _getIndent() {
            return this._indentRepeat * this._indent;
          }
          printTerminatorless(node) {
            this._noLineTerminator = true, this.print(node);
          }
          print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {
            var _node$extra, _node$leadingComments, _node$leadingComments2;
            if (!node) return;
            this._endsWithInnerRaw = false;
            const nodeType = node.type, format = this.format, oldConcise = format.concise;
            node._compact && (format.concise = true);
            const printMethod = this[nodeType];
            if (void 0 === printMethod) throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
            const parent = this._currentNode;
            this._currentNode = node, this.tokenMap && (this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode);
            const oldInAux = this._insideAux;
            this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux);
            const parenthesized = null == (_node$extra = node.extra) ? void 0 : _node$extra.parenthesized;
            let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && "FunctionExpression" === nodeType || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format.preserveFormat ? this._boundGetRawIdentifier : void 0);
            if (!shouldPrintParens && parenthesized && null != (_node$leadingComments = node.leadingComments) && _node$leadingComments.length && "CommentBlock" === node.leadingComments[0].type) {
              switch (null == parent ? void 0 : parent.type) {
                case "ExpressionStatement":
                case "VariableDeclarator":
                case "AssignmentExpression":
                case "ReturnStatement":
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                case "NewExpression":
                  if (parent.callee !== node) break;
                default:
                  shouldPrintParens = true;
              }
            }
            let oldNoLineTerminatorAfterNode, oldInForStatementInitWasTrue, indentParenthesized = false;
            var _node$trailingComment;
            (!shouldPrintParens && this._noLineTerminator && (null != (_node$leadingComments2 = node.leadingComments) && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine()) && (shouldPrintParens = true, indentParenthesized = true), shouldPrintParens) || (noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n2.isLastChild(parent, node)), noLineTerminatorAfter && (null != (_node$trailingComment = node.trailingComments) && _node$trailingComment.some(commentIsNewline) ? isExpression(node) && (shouldPrintParens = true) : (oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = node)));
            shouldPrintParens && (this.tokenChar(40), indentParenthesized && this.indent(), this._endsWithInnerRaw = false, this.inForStatementInit && (oldInForStatementInitWasTrue = true, this.inForStatementInit = false), oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = null), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
            const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
            this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), indentParenthesized && (this.dedent(), this.newline()), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter, oldInForStatementInitWasTrue && (this.inForStatementInit = true)) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._currentNode = parent, format.concise = oldConcise, this._insideAux = oldInAux, void 0 !== oldNoLineTerminatorAfterNode && (this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode), this._endsWithInnerRaw = false;
          }
          _maybeAddAuxComment(enteredPositionlessNode) {
            enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
          }
          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          getPossibleRaw(node) {
            const extra = node.extra;
            if (null != (null == extra ? void 0 : extra.raw) && null != extra.rawValue && node.value === extra.rawValue) return extra.raw;
          }
          printJoin(nodes, statement, indent, separator, printTrailingSeparator, addNewlines, iterator, trailingCommentsLineOffset) {
            if (null == nodes || !nodes.length) return;
            if (null == indent && this.format.retainLines) {
              var _nodes$0$loc;
              const startLine = null == (_nodes$0$loc = nodes[0].loc) ? void 0 : _nodes$0$loc.start.line;
              null != startLine && startLine !== this._buf.getCurrentLine() && (indent = true);
            }
            indent && this.indent();
            const newlineOpts = { addNewlines, nextNodeStartLine: 0 }, boundSeparator = null == separator ? void 0 : separator.bind(this), len = nodes.length;
            for (let i2 = 0; i2 < len; i2++) {
              const node = nodes[i2];
              var _node$trailingComment2;
              if (node) {
                if (statement && this._printNewline(0 === i2, newlineOpts), this.print(node, void 0, trailingCommentsLineOffset || 0), null == iterator || iterator(node, i2), null != boundSeparator && (i2 < len - 1 ? boundSeparator(i2, false) : printTrailingSeparator && boundSeparator(i2, true)), statement) if (null != (_node$trailingComment2 = node.trailingComments) && _node$trailingComment2.length || (this._lastCommentLine = 0), i2 + 1 === len) this.newline(1);
                else {
                  var _nextNode$loc;
                  const nextNode = nodes[i2 + 1];
                  newlineOpts.nextNodeStartLine = (null == (_nextNode$loc = nextNode.loc) ? void 0 : _nextNode$loc.start.line) || 0, this._printNewline(true, newlineOpts);
                }
              }
            }
            indent && this.dedent();
          }
          printAndIndentOnComments(node) {
            const indent = node.leadingComments && node.leadingComments.length > 0;
            indent && this.indent(), this.print(node), indent && this.dedent();
          }
          printBlock(parent) {
            const node = parent.body;
            "EmptyStatement" !== node.type && this.space(), this.print(node);
          }
          _printTrailingComments(node, parent, lineOffset) {
            const { innerComments, trailingComments } = node;
            null != innerComments && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), null != trailingComments && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
          }
          _printLeadingComments(node, parent) {
            const comments = node.leadingComments;
            null != comments && comments.length && this._printComments(0, comments, node, parent);
          }
          _maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
            var _this$tokenMap;
            this._endsWithInnerRaw && this.printInnerComments(null == (_this$tokenMap = this.tokenMap) ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
            this._endsWithInnerRaw = true, this._indentInnerComments = true;
          }
          printInnerComments(nextToken) {
            const node = this._currentNode, comments = node.innerComments;
            if (null == comments || !comments.length) return;
            const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
            indent && this.indent(), this._printComments(1, comments, node, void 0, void 0, nextToken), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
          }
          noIndentInnerCommentsHere() {
            this._indentInnerComments = false;
          }
          printSequence(nodes, indent, trailingCommentsLineOffset, addNewlines) {
            this.printJoin(nodes, true, null != indent && indent, void 0, void 0, addNewlines, void 0, trailingCommentsLineOffset);
          }
          printList(items, printTrailingSeparator, statement, indent, separator, iterator) {
            this.printJoin(items, statement, indent, null != separator ? separator : commaSeparator, printTrailingSeparator, void 0, iterator);
          }
          shouldPrintTrailingComma(listEnd) {
            if (!this.tokenMap) return null;
            const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token) => this.tokenMap.matchesOriginal(token, listEnd));
            return listEndIndex <= 0 ? null : this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
          }
          _printNewline(newLine, opts) {
            const format = this.format;
            if (format.retainLines || format.compact) return;
            if (format.concise) return void this.space();
            if (!newLine) return;
            const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
            if (startLine > 0 && lastCommentLine > 0) {
              const offset = startLine - lastCommentLine;
              if (offset >= 0) return void this.newline(offset || 1);
            }
            this._buf.hasContent() && this.newline(1);
          }
          _shouldPrintComment(comment, nextToken) {
            if (comment.ignore) return 0;
            if (this._printedComments.has(comment)) return 0;
            if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) return 2;
            if (nextToken && this.tokenMap) {
              const commentTok = this.tokenMap.find(this._currentNode, (token) => token.value === comment.value);
              if (commentTok && commentTok.start > nextToken.start) return 2;
            }
            return this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0;
          }
          _printComment(comment, skipNewLines) {
            const noLineTerminator = this._noLineTerminator, isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && 1 !== skipNewLines && !this._noLineTerminator;
            printNewLines && this._buf.hasContent() && 2 !== skipNewLines && this.newline(1);
            const lastCharCode = this.getLastChar();
            let val;
            if (91 !== lastCharCode && 123 !== lastCharCode && 40 !== lastCharCode && this.space(), isBlockComment) {
              if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
                var _comment$loc;
                const offset = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
                if (offset) {
                  const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                  val = val.replace(newlineRegex, "\n");
                }
                if (this.format.concise) val = val.replace(/\n(?!$)/g, "\n");
                else {
                  let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                  (this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
                }
              }
            } else val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
            if (this._endsWithDiv && this._space(), this.tokenMap) {
              const { _printSemicolonBeforeNextToken, _printSemicolonBeforeNextNode } = this;
              this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1, this.source("start", comment.loc), this._append(val, isBlockComment), this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode, this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
            } else this.source("start", comment.loc), this._append(val, isBlockComment);
            isBlockComment || noLineTerminator || this.newline(1, true), printNewLines && 3 !== skipNewLines && this.newline(1);
          }
          _printComments(type, comments, node, parent, lineOffset = 0, nextToken) {
            const nodeLoc = node.loc, len = comments.length;
            let hasLoc = !!nodeLoc;
            const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
            let lastLine = 0, leadingCommentNewline = 0;
            const maybeNewline = this._noLineTerminator ? function() {
            } : this.newline.bind(this);
            for (let i2 = 0; i2 < len; i2++) {
              const comment = comments[i2], shouldPrint = this._shouldPrintComment(comment, nextToken);
              if (2 === shouldPrint) {
                hasLoc = false;
                break;
              }
              if (hasLoc && comment.loc && 1 === shouldPrint) {
                const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
                if (0 === type) {
                  let offset = 0;
                  0 === i2 ? !this._buf.hasContent() || "CommentLine" !== comment.type && commentStartLine === commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i2 + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
                } else if (1 === type) {
                  const offset = commentStartLine - (0 === i2 ? nodeStartLine : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i2 + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
                } else {
                  const offset = commentStartLine - (0 === i2 ? nodeEndLine - lineOffset : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
                }
              } else {
                if (hasLoc = false, 1 !== shouldPrint) continue;
                if (1 === len) {
                  const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                  0 === type ? this._printComment(comment, shouldSkipNewline && "ObjectExpression" !== node.type || singleLine && isFunction2(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && 2 === type ? this._printComment(comment, 1) : this._printComment(comment, 0);
                } else 1 !== type || "ObjectExpression" === node.type && node.properties.length > 1 || "ClassBody" === node.type || "TSInterfaceBody" === node.type ? this._printComment(comment, 0) : this._printComment(comment, 0 === i2 ? 2 : i2 === len - 1 ? 3 : 0);
              }
            }
            2 === type && hasLoc && lastLine && (this._lastCommentLine = lastLine);
          }
        }
        Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
        };
        exports3.default = Printer;
        function commaSeparator(occurrenceCount, last) {
          this.token(",", false, occurrenceCount), last || this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
        exports3.default = class {
          constructor(opts, code) {
            var _opts$sourceFileName;
            this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = void 0;
            const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
            if (this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, opts.inputSourceMap) {
              this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
              const resolvedSources = this._inputMap.resolvedSources;
              if (resolvedSources.length) for (let i2 = 0; i2 < resolvedSources.length; i2++) {
                var _this$_inputMap$sourc;
                (0, _genMapping.setSourceContent)(map, resolvedSources[i2], null == (_this$_inputMap$sourc = this._inputMap.sourcesContent) ? void 0 : _this$_inputMap$sourc[i2]);
              }
            }
            if ("string" != typeof code || opts.inputSourceMap) {
              if ("object" == typeof code) for (const sourceFileName of Object.keys(code)) (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            } else (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
          }
          get() {
            return (0, _genMapping.toEncodedMap)(this._map);
          }
          getDecoded() {
            return (0, _genMapping.toDecodedMap)(this._map);
          }
          getRawMappings() {
            return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
          }
          mark(generated, line, column, identifierName, identifierNamePos, filename) {
            var _originalMapping;
            let originalMapping;
            if (this._rawMappings = void 0, null != line) if (this._inputMap) {
              if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, { line, column }), !originalMapping.name && identifierNamePos) {
                const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
              }
            } else originalMapping = { source: (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName, line, column };
            (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: null == (_originalMapping = originalMapping) ? void 0 : _originalMapping.source, original: originalMapping });
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TokenMap = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { traverseFast, VISITOR_KEYS } = _t;
        exports3.TokenMap = class {
          constructor(ast, tokens, source) {
            this._tokens = void 0, this._source = void 0, this._nodesToTokenIndexes = /* @__PURE__ */ new Map(), this._nodesOccurrencesCountCache = /* @__PURE__ */ new Map(), this._tokensCache = /* @__PURE__ */ new Map(), this._tokens = tokens, this._source = source, traverseFast(ast, (node) => {
              const indexes = this._getTokensIndexesOfNode(node);
              indexes.length > 0 && this._nodesToTokenIndexes.set(node, indexes);
            }), this._tokensCache = null;
          }
          has(node) {
            return this._nodesToTokenIndexes.has(node);
          }
          getIndexes(node) {
            return this._nodesToTokenIndexes.get(node);
          }
          find(node, condition) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) for (let k = 0; k < indexes.length; k++) {
              const index2 = indexes[k], tok = this._tokens[index2];
              if (condition(tok, index2)) return tok;
            }
            return null;
          }
          findLastIndex(node, condition) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) for (let k = indexes.length - 1; k >= 0; k--) {
              const index2 = indexes[k];
              if (condition(this._tokens[index2], index2)) return index2;
            }
            return -1;
          }
          findMatching(node, test, occurrenceCount = 0) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) {
              let i2 = 0;
              const count = occurrenceCount;
              if (count > 1) {
                const cache = this._nodesOccurrencesCountCache.get(node);
                cache && cache.test === test && cache.count < count && (i2 = cache.i + 1, occurrenceCount -= cache.count + 1);
              }
              for (; i2 < indexes.length; i2++) {
                const tok = this._tokens[indexes[i2]];
                if (this.matchesOriginal(tok, test)) {
                  if (0 === occurrenceCount) return count > 0 && this._nodesOccurrencesCountCache.set(node, { test, count, i: i2 }), tok;
                  occurrenceCount--;
                }
              }
            }
            return null;
          }
          matchesOriginal(token, test) {
            return token.end - token.start === test.length && (null != token.value ? token.value === test : this._source.startsWith(test, token.start));
          }
          startMatches(node, test) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (!indexes) return false;
            const tok = this._tokens[indexes[0]];
            return tok.start === node.start && this.matchesOriginal(tok, test);
          }
          endMatches(node, test) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (!indexes) return false;
            const tok = this._tokens[indexes[indexes.length - 1]];
            return tok.end === node.end && this.matchesOriginal(tok, test);
          }
          _getTokensIndexesOfNode(node) {
            if (null == node.start || null == node.end) return [];
            const { first, last } = this._findTokensOfNode(node, 0, this._tokens.length - 1);
            let low = first;
            const children = function* (node2) {
              if ("TemplateLiteral" === node2.type) {
                yield node2.quasis[0];
                for (let i2 = 1; i2 < node2.quasis.length; i2++) yield node2.expressions[i2 - 1], yield node2.quasis[i2];
                return;
              }
              const keys2 = VISITOR_KEYS[node2.type];
              for (const key of keys2) {
                const child = node2[key];
                child && (Array.isArray(child) ? yield* child : yield child);
              }
            }(node);
            "ExportNamedDeclaration" !== node.type && "ExportDefaultDeclaration" !== node.type || !node.declaration || "ClassDeclaration" !== node.declaration.type || children.next();
            const indexes = [];
            for (const child of children) {
              if (null == child) continue;
              if (null == child.start || null == child.end) continue;
              const childTok = this._findTokensOfNode(child, low, last), high = childTok.first;
              for (let k = low; k < high; k++) indexes.push(k);
              low = childTok.last + 1;
            }
            for (let k = low; k <= last; k++) indexes.push(k);
            return indexes;
          }
          _findTokensOfNode(node, low, high) {
            const cached = this._tokensCache.get(node);
            if (cached) return cached;
            const first = this._findFirstTokenOfNode(node.start, low, high), last = this._findLastTokenOfNode(node.end, first, high);
            return this._tokensCache.set(node, { first, last }), { first, last };
          }
          _findFirstTokenOfNode(start, low, high) {
            for (; low <= high; ) {
              const mid = high + low >> 1;
              if (start < this._tokens[mid].start) high = mid - 1;
              else {
                if (!(start > this._tokens[mid].start)) return mid;
                low = mid + 1;
              }
            }
            return low;
          }
          _findLastTokenOfNode(end, low, high) {
            for (; low <= high; ) {
              const mid = high + low >> 1;
              if (end < this._tokens[mid].end) high = mid - 1;
              else {
                if (!(end > this._tokens[mid].end)) return mid;
                low = mid + 1;
              }
            }
            return high;
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pathOrNode) {
          const node = pathOrNode.node || pathOrNode;
          if (isPureAnnotated(node)) return;
          addComment(node, "leading", PURE_ANNOTATION);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildDecoratedClass = function(ref, path2, elements, file) {
          const { node, scope } = path2, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path2.isDeclaration(), isStrict = path2.isInStrictMode(), { superClass } = node;
          node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
          let superId;
          superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
          const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path3) => function(file2, classRef, superRef, path4) {
            const isMethod = path4.isClassMethod();
            if (path4.isPrivate()) throw path4.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
            if ("ClassAccessorProperty" === path4.node.type) throw path4.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            if ("StaticBlock" === path4.node.type) throw path4.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            const { node: node2, scope: scope2 } = path4;
            path4.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path4, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
            const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
            if (isMethod) {
              null != path4.ensureFunctionName || (path4.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path4.ensureFunctionName(false), properties.push(prop("value", _core.types.toExpression(path4.node)));
            } else _core.types.isClassProperty(node2) && node2.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope2.buildUndefinedNode()));
            var key, body;
            return path4.remove(), _core.types.objectExpression(properties);
          }(file, node.id, superId, path3))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
            return file2.addHelper("decorate");
          }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
          isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
          let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
          isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
          return { instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `], wrapClass: (path3) => (path3.replaceWith(replacement), path3.get(classPathDesc)) };
        }, exports3.hasDecorators = function(node) {
          return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
        }, exports3.hasOwnDecorators = hasOwnDecorators;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js");
        function hasOwnDecorators(node) {
          var _node$decorators;
          return !(null == (_node$decorators = node.decorators) || !_node$decorators.length);
        }
        function prop(key, value2) {
          return value2 ? _core.types.objectProperty(_core.types.identifier(key), value2) : null;
        }
        function takeDecorators(node) {
          let result;
          return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
        }
        function getKey(node) {
          return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function({ assertVersion, assumption }, { loose }, version, inherits) {
          var _assumption, _assumption2;
          assertVersion("2023-11" === version || "2023-05" === version || "2023-01" === version ? "^7.21.0" : "2021-12" === version ? "^7.16.0" : "^7.19.0");
          const VISITED = /* @__PURE__ */ new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose, ignoreFunctionLength = null != (_assumption2 = assumption("ignoreFunctionLength")) ? _assumption2 : loose, namedEvaluationVisitor = /* @__PURE__ */ function(isAnonymous, visitor) {
            function handleComputedProperty(propertyPath, key, state) {
              switch (key.type) {
                case "StringLiteral":
                  return _core.types.stringLiteral(key.value);
                case "NumericLiteral":
                case "BigIntLiteral": {
                  const keyValue = key.value + "";
                  return propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue)), _core.types.stringLiteral(keyValue);
                }
                default: {
                  const ref = propertyPath.scope.maybeGenerateMemoised(key);
                  return propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state, key))), _core.types.cloneNode(ref);
                }
              }
            }
            return { VariableDeclarator(path2, state) {
              const id = path2.node.id;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("init"));
                if (isAnonymous(initializer)) {
                  const name = id.name;
                  visitor(initializer, state, name);
                }
              }
            }, AssignmentExpression(path2, state) {
              const id = path2.node.left;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("right"));
                if (isAnonymous(initializer)) switch (path2.node.operator) {
                  case "=":
                  case "&&=":
                  case "||=":
                  case "??=":
                    visitor(initializer, state, id.name);
                }
              }
            }, AssignmentPattern(path2, state) {
              const id = path2.node.left;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("right"));
                if (isAnonymous(initializer)) {
                  const name = id.name;
                  visitor(initializer, state, name);
                }
              }
            }, ObjectExpression(path2, state) {
              for (const propertyPath of path2.get("properties")) {
                if (!propertyPath.isObjectProperty()) continue;
                const { node } = propertyPath, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
                if (isAnonymous(initializer)) {
                  if (node.computed) {
                    const ref = handleComputedProperty(propertyPath, id, state);
                    visitor(initializer, state, ref);
                  } else if (!isProtoKey(id)) if ("Identifier" === id.type) visitor(initializer, state, id.name);
                  else {
                    const className = _core.types.stringLiteral(id.value + "");
                    visitor(initializer, state, className);
                  }
                }
              }
            }, ClassPrivateProperty(path2, state) {
              const { node } = path2, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
              if (isAnonymous(initializer)) {
                const className = _core.types.stringLiteral("#" + node.key.id.name);
                visitor(initializer, state, className);
              }
            }, ClassAccessorProperty(path2, state) {
              const { node } = path2, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
              if (isAnonymous(initializer)) if (node.computed) {
                const ref = handleComputedProperty(path2, id, state);
                visitor(initializer, state, ref);
              } else if ("Identifier" === id.type) visitor(initializer, state, id.name);
              else if ("PrivateName" === id.type) {
                const className = _core.types.stringLiteral("#" + id.id.name);
                visitor(initializer, state, className);
              } else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
            }, ClassProperty(path2, state) {
              const { node } = path2, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
              if (isAnonymous(initializer)) if (node.computed) {
                const ref = handleComputedProperty(path2, id, state);
                visitor(initializer, state, ref);
              } else if ("Identifier" === id.type) visitor(initializer, state, id.name);
              else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
            } };
          }(isDecoratedAnonymousClassExpression, visitClass);
          function visitClass(path2, state, className) {
            var _node$id;
            if (VISITED.has(path2)) return;
            const { node } = path2;
            null != className || (className = null == (_node$id = node.id) ? void 0 : _node$id.name);
            const newPath = function(path3, state2, constantSuper2, ignoreFunctionLength2, className2, propertyVisitor, version2) {
              var _path$node$id, _classDecorationsId;
              const body = path3.get("body.body"), classDecorators = path3.node.decorators;
              let hasElementDecorators = false, hasComputedKeysSideEffects = false, elemDecsUseFnContext = false;
              const generateClassPrivateUid = /* @__PURE__ */ function(classPath) {
                let generator;
                return () => (generator || (generator = function(classPath2) {
                  const currentPrivateId = [], privateNames = /* @__PURE__ */ new Set();
                  return classPath2.traverse({ PrivateName(path4) {
                    privateNames.add(path4.node.id.name);
                  } }), () => {
                    let reifiedId;
                    do {
                      incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                    } while (privateNames.has(reifiedId));
                    return _core.types.privateName(_core.types.identifier(reifiedId));
                  };
                }(classPath)), generator());
              }(path3), classAssignments = [], scopeParent = path3.scope.parent, memoiseExpression = (expression, hint, assignments) => {
                const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
                return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
              };
              let protoInitLocal, staticInitLocal;
              const classIdName = null == (_path$node$id = path3.node.id) ? void 0 : _path$node$id.name, setClassName = "object" == typeof className2 ? className2 : void 0, usesFunctionContextOrYieldAwait = (decorator) => {
                try {
                  return _core.types.traverseFast(decorator, (node2) => {
                    if (_core.types.isThisExpression(node2) || _core.types.isSuper(node2) || _core.types.isYieldExpression(node2) || _core.types.isAwaitExpression(node2) || _core.types.isIdentifier(node2, { name: "arguments" }) || classIdName && _core.types.isIdentifier(node2, { name: classIdName }) || _core.types.isMetaProperty(node2) && "import" !== node2.meta.name) throw null;
                  }), false;
                } catch (_unused2) {
                  return true;
                }
              }, instancePrivateNames = [];
              for (const element of body) {
                if (!isClassDecoratableElementPath(element)) continue;
                const elementNode = element.node;
                if (!elementNode.static && _core.types.isPrivateName(elementNode.key) && instancePrivateNames.push(elementNode.key.id.name), isDecorated(elementNode)) {
                  switch (elementNode.type) {
                    case "ClassProperty":
                      propertyVisitor.ClassProperty(element, state2);
                      break;
                    case "ClassPrivateProperty":
                      propertyVisitor.ClassPrivateProperty(element, state2);
                      break;
                    case "ClassAccessorProperty":
                      if (propertyVisitor.ClassAccessorProperty(element, state2), "2023-11" === version2) break;
                    default:
                      if (elementNode.static) null != staticInitLocal || (staticInitLocal = generateLetUidIdentifier(scopeParent, "initStatic"));
                      else null != protoInitLocal || (protoInitLocal = generateLetUidIdentifier(scopeParent, "initProto"));
                  }
                  hasElementDecorators = true, elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
                } else if ("ClassAccessorProperty" === elementNode.type) {
                  propertyVisitor.ClassAccessorProperty(element, state2);
                  const { key, value: value2, static: isStatic, computed } = elementNode, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value2, isStatic), keyPath = element.get("key"), [newPath2] = element.replaceWith(newField);
                  let getterKey, setterKey;
                  computed && !keyPath.isConstantExpression() ? (getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state2, key), scopeParent, scopeParent.generateUid("computedKey")), setterKey = _core.types.cloneNode(getterKey.left)) : (getterKey = _core.types.cloneNode(key), setterKey = _core.types.cloneNode(key)), assignIdForAnonymousClass(path3, className2), addProxyAccessorsFor(path3.node.id, newPath2, getterKey, setterKey, newId, computed, isStatic, version2);
                }
                "computed" in element.node && element.node.computed && (hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key)));
              }
              if (!classDecorators && !hasElementDecorators) return path3.node.id || "string" != typeof className2 || (path3.node.id = _core.types.identifier(className2)), void (setClassName && path3.node.body.body.unshift(createStaticBlockFromExpressions([createSetFunctionNameCall(state2, setClassName)])));
              const elementDecoratorInfo = [];
              let constructorPath;
              const decoratedPrivateMethods = /* @__PURE__ */ new Set();
              let classInitLocal, classIdLocal, decoratorReceiverId = null;
              function handleDecorators(decorators) {
                let hasSideEffects = false, usesFnContext = false;
                const decoratorsThis = [];
                for (const decorator of decorators) {
                  const { expression } = decorator;
                  let object;
                  if (("2023-11" === version2 || "2023-05" === version2) && _core.types.isMemberExpression(expression)) if (_core.types.isSuper(expression.object)) object = _core.types.thisExpression();
                  else if (scopeParent.isStatic(expression.object)) object = _core.types.cloneNode(expression.object);
                  else {
                    null != decoratorReceiverId || (decoratorReceiverId = generateLetUidIdentifier(scopeParent, "obj")), object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object), expression.object = _core.types.cloneNode(decoratorReceiverId);
                  }
                  decoratorsThis.push(object), hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression)), usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(decorator));
                }
                return { hasSideEffects, usesFnContext, decoratorsThis };
              }
              const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || "2023-11" !== version2;
              let classDecorationsId, lastInstancePrivateName, needsDeclaraionForClassBinding = false, classDecorationsFlag = 0, classDecorations = [], computedKeyAssignments = [];
              if (classDecorators) {
                classInitLocal = generateLetUidIdentifier(scopeParent, "initClass"), needsDeclaraionForClassBinding = path3.isClassDeclaration(), { id: classIdLocal, path: path3 } = function(path4, className3) {
                  const id = path4.node.id, scope = path4.scope;
                  if ("ClassDeclaration" === path4.type) {
                    const className4 = id.name, varId = scope.generateUidIdentifierBasedOnNode(id), classId = _core.types.identifier(className4);
                    return scope.rename(className4, varId.name), path4.get("id").replaceWith(classId), { id: _core.types.cloneNode(varId), path: path4 };
                  }
                  {
                    let varId;
                    id ? (className3 = id.name, varId = generateLetUidIdentifier(scope.parent, className3), scope.rename(className3, varId.name)) : varId = generateLetUidIdentifier(scope.parent, "string" == typeof className3 ? className3 : "decorated_class");
                    const newClassExpr = _core.types.classExpression("string" == typeof className3 ? _core.types.identifier(className3) : null, path4.node.superClass, path4.node.body), [newPath2] = path4.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                    return { id: _core.types.cloneNode(varId), path: newPath2.get("expressions.0") };
                  }
                }(path3, className2), path3.node.decorators = null;
                const classDecsUsePrivateName = classDecorators.some(usesPrivateField), { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(classDecorators), { haveThis, decs } = generateDecorationList(classDecorators, decoratorsThis, version2);
                if (classDecorationsFlag = haveThis ? 1 : 0, classDecorations = decs, (usesFnContext || hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) && (classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments)), !hasElementDecorators) for (const element of path3.get("body.body")) {
                  const { node: node2 } = element;
                  if ("computed" in node2 && node2.computed) if (element.isClassProperty({ static: true })) {
                    if (!element.get("key").isConstantExpression()) {
                      const key = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(key, scopeParent, scopeParent.generateUid("computedKey"));
                      null != maybeAssignment && (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment));
                    }
                  } else computedKeyAssignments.length > 0 && (prependExpressionsToComputedKey(computedKeyAssignments, element), computedKeyAssignments = []);
                }
              } else assignIdForAnonymousClass(path3, className2), classIdLocal = _core.types.cloneNode(path3.node.id);
              let needsInstancePrivateBrandCheck = false, fieldInitializerExpressions = [], staticFieldInitializerExpressions = [];
              if (hasElementDecorators) {
                if (protoInitLocal) {
                  const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                  fieldInitializerExpressions.push(protoInitCall);
                }
                for (const element of body) {
                  if (!isClassDecoratableElementPath(element)) {
                    staticFieldInitializerExpressions.length > 0 && element.isStaticBlock() && (prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []);
                    continue;
                  }
                  const { node: node2 } = element, decorators = node2.decorators, hasDecorators = !(null == decorators || !decorators.length), isComputed = "computed" in node2 && node2.computed;
                  let decoratorsArray, decoratorsHaveThis, name = "computedKey";
                  if ("PrivateName" === node2.key.type ? name = node2.key.id.name : isComputed || "Identifier" !== node2.key.type || (name = node2.key.name), hasDecorators) {
                    const { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(decorators), { decs, haveThis } = generateDecorationList(decorators, decoratorsThis, version2);
                    decoratorsHaveThis = haveThis, decoratorsArray = 1 === decs.length ? decs[0] : _core.types.arrayExpression(decs), (usesFnContext || hasSideEffects && willExtractSomeElemDecs) && (decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments));
                  }
                  if (isComputed && !element.get("key").isConstantExpression()) {
                    const key2 = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state2, key2) : key2, scopeParent, scopeParent.generateUid("computedKey"));
                    null != maybeAssignment && (classDecorators && element.isClassProperty({ static: true }) ? (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment)) : node2.key = maybeAssignment);
                  }
                  const { key, static: isStatic } = node2, isPrivate = "PrivateName" === key.type, kind = getElementKind(element);
                  let locals;
                  if (isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = true), !_core.types.isClassPrivateProperty(node2) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                    let privateMethods, nameExpr;
                    if (nameExpr = isComputed ? getComputedKeyMemoiser(element.get("key")) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), kind === ACCESSOR) {
                      const { value: value2 } = element.node, params = "2023-11" === version2 && isStatic ? [] : [_core.types.thisExpression()];
                      value2 && params.push(_core.types.cloneNode(value2));
                      const newId = generateClassPrivateUid(), newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                      if (isPrivate) {
                        privateMethods = extractProxyAccessorsFor(newId, version2);
                        const getId = generateLetUidIdentifier(scopeParent, `get_${name}`), setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
                        addCallAccessorsFor(version2, newPath2, key, getId, setId, isStatic), locals = [newFieldInitId, getId, setId];
                      } else assignIdForAnonymousClass(path3, className2), addProxyAccessorsFor(path3.node.id, newPath2, _core.types.cloneNode(key), _core.types.isAssignmentExpression(key) ? _core.types.cloneNode(key.left) : _core.types.cloneNode(key), newId, isComputed, isStatic, version2), locals = [newFieldInitId];
                    } else if (kind === FIELD) {
                      const initId = generateLetUidIdentifier(scopeParent, `init_${name}`), valuePath = element.get("value"), args = "2023-11" === version2 && isStatic ? [] : [_core.types.thisExpression()];
                      valuePath.node && args.push(valuePath.node), valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args)), locals = [initId], isPrivate && (privateMethods = extractProxyAccessorsFor(key, version2));
                    } else if (isPrivate) {
                      const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
                      locals = [callId];
                      if (new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path3.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace(), privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)], kind === GETTER || kind === SETTER) movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(callId), isStatic);
                      else {
                        const node3 = element.node;
                        path3.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(callId), [], node3.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                      }
                    }
                    elementDecoratorInfo.push({ kind, decoratorsArray, decoratorsHaveThis, name: nameExpr, isStatic, privateMethods, locals }), element.node && (element.node.decorators = null);
                  }
                  if (isComputed && computedKeyAssignments.length > 0 && (classDecorators && element.isClassProperty({ static: true }) || (prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element), computedKeyAssignments = [])), fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(fieldInitializerExpressions, element), fieldInitializerExpressions = []), staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), hasDecorators && "2023-11" === version2 && (kind === FIELD || kind === ACCESSOR)) {
                    const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
                    locals.push(initExtraId);
                    const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
                    isStatic ? staticFieldInitializerExpressions.push(initExtraCall) : fieldInitializerExpressions.push(initExtraCall);
                  }
                }
              }
              if (computedKeyAssignments.length > 0) {
                const elements = path3.get("body.body");
                let lastComputedElement;
                for (let i2 = elements.length - 1; i2 >= 0; i2--) {
                  const path4 = elements[i2], node2 = path4.node;
                  if (node2.computed) {
                    if (classDecorators && _core.types.isClassProperty(node2, { static: true })) continue;
                    lastComputedElement = path4;
                    break;
                  }
                }
                null != lastComputedElement && (!function(expressions, fieldPath) {
                  const key = fieldPath.get("key"), completion = getComputedKeyLastElement(key);
                  if (completion.isConstantExpression()) prependExpressionsToComputedKey(expressions, fieldPath);
                  else {
                    const scopeParent2 = key.scope.parent, maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent2, scopeParent2.generateUid("computedKey"));
                    if (maybeAssignment) {
                      const expressionSequence = [...expressions, _core.types.cloneNode(maybeAssignment.left)], completionParent = completion.parentPath;
                      completionParent.isSequenceExpression() ? completionParent.pushContainer("expressions", expressionSequence) : completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
                    } else prependExpressionsToComputedKey(expressions, fieldPath);
                  }
                }(computedKeyAssignments, lastComputedElement), computedKeyAssignments = []);
              }
              if (fieldInitializerExpressions.length > 0) {
                const isDerivedClass = !!path3.node.superClass;
                constructorPath ? isDerivedClass ? function(expressions, constructorPath2, protoInitLocal2) {
                  constructorPath2.traverse({ CallExpression: { exit(path4) {
                    if (!path4.get("callee").isSuper()) return;
                    const newNodes = [path4.node, ...expressions.map((expr) => _core.types.cloneNode(expr))];
                    path4.isCompletionRecord() && newNodes.push(_core.types.thisExpression()), path4.replaceWith(function(expressions2, protoInitLocal3) {
                      if (protoInitLocal3) {
                        if (expressions2.length >= 2 && isProtoInitCallExpression(expressions2[1], protoInitLocal3)) {
                          const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal3), [expressions2[0]]);
                          expressions2.splice(0, 2, mergedSuperCall);
                        }
                        expressions2.length >= 2 && _core.types.isThisExpression(expressions2[expressions2.length - 1]) && isProtoInitCallExpression(expressions2[expressions2.length - 2], protoInitLocal3) && expressions2.splice(expressions2.length - 1, 1);
                      }
                      return maybeSequenceExpression(expressions2);
                    }(newNodes, protoInitLocal2)), path4.skip();
                  } }, ClassMethod(path4) {
                    "constructor" === path4.node.kind && path4.skip();
                  } });
                }(fieldInitializerExpressions, constructorPath, protoInitLocal) : function(expressions, constructorPath2) {
                  constructorPath2.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions)));
                }(fieldInitializerExpressions, constructorPath) : path3.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass)), fieldInitializerExpressions = [];
              }
              staticFieldInitializerExpressions.length > 0 && (path3.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions)), staticFieldInitializerExpressions = []);
              const sortedElementDecoratorInfo = (info = elementDecoratorInfo, [...info.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => el.isStatic && el.kind === FIELD), ...info.filter((el) => !el.isStatic && el.kind === FIELD)]), elementDecorations = function(decorationInfo, version3) {
                return _core.types.arrayExpression(decorationInfo.map((el) => {
                  let flag = el.kind;
                  return el.isStatic && (flag += "2023-11" === version3 || "2023-05" === version3 ? STATIC : STATIC_OLD_VERSION), el.decoratorsHaveThis && (flag += DECORATORS_HAVE_THIS), _core.types.arrayExpression([el.decoratorsArray, _core.types.numericLiteral(flag), el.name, ...el.privateMethods || []]);
                }));
              }("2023-11" === version2 ? elementDecoratorInfo : sortedElementDecoratorInfo, version2), elementLocals = function(decorationInfo) {
                const localIds = [];
                for (const el of decorationInfo) {
                  const { locals } = el;
                  Array.isArray(locals) ? localIds.push(...locals) : void 0 !== locals && localIds.push(locals);
                }
                return localIds;
              }(sortedElementDecoratorInfo);
              var info;
              protoInitLocal && elementLocals.push(protoInitLocal);
              staticInitLocal && elementLocals.push(staticInitLocal);
              const classLocals = [];
              let classInitInjected = false;
              const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
              let originalClassPath = path3;
              const originalClass = path3.node, staticClosures = [];
              if (classDecorators) {
                classLocals.push(classIdLocal, classInitLocal);
                const statics = [];
                if (path3.get("body.body").forEach((element) => {
                  if (element.isStaticBlock()) {
                    if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                      const staticBlockClosureId = memoiseExpression((block = element.node, _core.types.functionExpression(null, [], _core.types.blockStatement(block.body))), "staticBlock", staticClosures);
                      staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                    } else staticFieldInitializerExpressions.push(function(block2) {
                      return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block2.body)), []);
                    }(element.node));
                    element.remove();
                  } else {
                    var block;
                    if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
                      const valuePath = element.get("value");
                      if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
                        const fieldValueClosureId = memoiseExpression(function(value2) {
                          return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value2)]));
                        }(valuePath.node), "fieldValue", staticClosures);
                        valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                      }
                      staticFieldInitializerExpressions.length > 0 && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), element.node.static = false, statics.push(element.node), element.remove();
                    } else if (element.isClassPrivateMethod({ static: true })) {
                      if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                        new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path3.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace();
                        const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
                        ignoreFunctionLength2 ? (element.node.params = [_core.types.restElement(_core.types.identifier("arg"))], element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))])) : (element.node.params = element.node.params.map((p2, i2) => _core.types.isRestElement(p2) ? _core.types.restElement(_core.types.identifier("arg")) : _core.types.identifier("_" + i2)), element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]));
                      }
                      element.node.static = false, statics.push(element.node), element.remove();
                    }
                  }
                }), statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
                  const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                  staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), void 0, void 0, void 0, true, true), ...statics];
                  const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                  staticFieldInitializerExpressions.length > 0 && constructorBody.push(...staticFieldInitializerExpressions), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, false))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
                  const [newPath2] = path3.replaceWith(newExpr);
                  originalClassPath = newPath2.get("callee").get("body").get("body.0.key");
                }
              }
              !classInitInjected && classInitCall && path3.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
              let { superClass } = originalClass;
              if (superClass && ("2023-11" === version2 || "2023-05" === version2)) {
                const id = path3.scope.maybeGenerateMemoised(superClass);
                id && (originalClass.superClass = _core.types.assignmentExpression("=", id, superClass), superClass = id);
              }
              const applyDecoratorWrapper = _core.types.staticBlock([]);
              originalClass.body.body.unshift(applyDecoratorWrapper);
              const applyDecsBody = applyDecoratorWrapper.body;
              if (computedKeyAssignments.length > 0) {
                const elements = originalClassPath.get("body.body");
                let firstPublicElement;
                for (const path4 of elements) if ((path4.isClassProperty() || path4.isClassMethod()) && "constructor" !== path4.node.kind) {
                  firstPublicElement = path4;
                  break;
                }
                null != firstPublicElement ? (!function(path4) {
                  const { node: node2 } = path4;
                  node2.computed = true, _core.types.isIdentifier(node2.key) && (node2.key = _core.types.stringLiteral(node2.key.name));
                }(firstPublicElement), prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement)) : (originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), void 0, void 0, void 0, true, true)), applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))))), computedKeyAssignments = [];
              }
              applyDecsBody.push(_core.types.expressionStatement(function(elementLocals2, classLocals2, elementDecorations2, classDecorations2, classDecorationsFlag2, maybePrivateBrandName, setClassName2, superClass2, state3, version3) {
                let lhs, rhs;
                const args = [setClassName2 ? createSetFunctionNameCall(state3, setClassName2) : _core.types.thisExpression(), classDecorations2, elementDecorations2];
                "2023-11" !== version3 && args.splice(1, 2, elementDecorations2, classDecorations2);
                if ("2021-12" === version3 || "2022-03" === version3 && !state3.availableHelper("applyDecs2203R")) return lhs = _core.types.arrayPattern([...elementLocals2, ...classLocals2]), rhs = _core.types.callExpression(state3.addHelper("2021-12" === version3 ? "applyDecs" : "applyDecs2203"), args), _core.types.assignmentExpression("=", lhs, rhs);
                "2022-03" === version3 ? rhs = _core.types.callExpression(state3.addHelper("applyDecs2203R"), args) : "2023-01" === version3 ? (maybePrivateBrandName && args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)), rhs = _core.types.callExpression(state3.addHelper("applyDecs2301"), args)) : "2023-05" === version3 && ((maybePrivateBrandName || superClass2 || 0 !== classDecorationsFlag2.value) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2305"), args));
                "2023-11" === version3 && ((maybePrivateBrandName || superClass2 || 0 !== classDecorationsFlag2.value) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2311"), args));
                elementLocals2.length > 0 ? classLocals2.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals2)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals2))]) : (lhs = _core.types.arrayPattern(elementLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false)) : (lhs = _core.types.arrayPattern(classLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false));
                return _core.types.assignmentExpression("=", lhs, rhs);
              }(elementLocals, classLocals, elementDecorations, null != (_classDecorationsId = classDecorationsId) ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, setClassName, _core.types.cloneNode(superClass), state2, version2))), staticInitLocal && applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
              staticClosures.length > 0 && applyDecsBody.push(...staticClosures.map((expr) => _core.types.expressionStatement(expr)));
              if (path3.insertBefore(classAssignments.map((expr) => _core.types.expressionStatement(expr))), needsDeclaraionForClassBinding) {
                if (scopeParent.getBinding(classIdLocal.name).constantViolations.length) {
                  const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name), classOuterBindingLocal = classIdLocal;
                  path3.replaceWithMultiple([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]), _core.types.blockStatement([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]), path3.node, _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))]), _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))]);
                } else path3.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
              }
              decoratedPrivateMethods.size > 0 && function(path4, decoratedPrivateMethods2) {
                const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path5, state3) {
                  if (!state3.privateNamesMap.has(path5.node.id.name)) return;
                  const parentPath = path5.parentPath, parentParentPath = parentPath.parentPath;
                  if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node) throw path5.buildCodeFrameError(`Decorated private methods are read-only, but "#${path5.node.id.name}" is updated via this expression.`);
                } }), privateNamesMap = /* @__PURE__ */ new Map();
                for (const name of decoratedPrivateMethods2) privateNamesMap.set(name, null);
                path4.traverse(privateNameVisitor, { privateNamesMap });
              }(path3, decoratedPrivateMethods);
              return path3.scope.crawl(), path3;
            }(path2, state, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version);
            newPath ? VISITED.add(newPath) : VISITED.add(path2);
          }
          return { name: "proposal-decorators", inherits, visitor: Object.assign({ ExportDefaultDeclaration(path2, state) {
            const { declaration } = path2.node;
            if ("ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration)) {
              const isAnonymous = !declaration.id;
              null != path2.splitExportDeclaration || (path2.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration);
              const updatedVarDeclarationPath = path2.splitExportDeclaration();
              isAnonymous && visitClass(updatedVarDeclarationPath, state, _core.types.stringLiteral("default"));
            }
          }, ExportNamedDeclaration(path2) {
            const { declaration } = path2.node;
            "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration) && (null != path2.splitExportDeclaration || (path2.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path2.splitExportDeclaration());
          }, Class(path2, state) {
            visitClass(path2, state, void 0);
          } }, namedEvaluationVisitor) };
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js");
        function incrementId(id, idx = id.length - 1) {
          if (-1 === idx) return void id.unshift(65);
          const current = id[idx];
          90 === current ? id[idx] = 97 : 122 === current ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
        }
        function generateClassProperty(key, value2, isStatic) {
          return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value2, void 0, isStatic) : _core.types.classProperty(key, value2, void 0, void 0, isStatic);
        }
        function assignIdForAnonymousClass(path2, className) {
          path2.node.id || (path2.node.id = "string" == typeof className ? _core.types.identifier(className) : path2.scope.generateUidIdentifier("Class"));
        }
        function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version) {
          const thisArg = "2023-11" !== version && "2023-05" !== version || !isStatic ? _core.types.thisExpression() : className, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
          let getter, setter;
          "PrivateName" === getterKey.type ? (getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
        }
        function extractProxyAccessorsFor(targetKey, version) {
          return "2023-11" !== version && "2023-05" !== version && "2023-01" !== version ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
        }
        function getComputedKeyLastElement(path2) {
          if ((path2 = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2)).isSequenceExpression()) {
            const expressions = path2.get("expressions");
            return getComputedKeyLastElement(expressions[expressions.length - 1]);
          }
          return path2;
        }
        function getComputedKeyMemoiser(path2) {
          const element = getComputedKeyLastElement(path2);
          if (element.isConstantExpression()) return _core.types.cloneNode(path2.node);
          if (element.isIdentifier() && path2.scope.hasUid(element.node.name)) return _core.types.cloneNode(path2.node);
          if (element.isAssignmentExpression() && element.get("left").isIdentifier()) return _core.types.cloneNode(element.node.left);
          throw new Error(`Internal Error: the computed key ${path2.toString()} has not yet been memoised.`);
        }
        function prependExpressionsToComputedKey(expressions, fieldPath) {
          const key = fieldPath.get("key");
          key.isSequenceExpression() ? expressions.push(...key.node.expressions) : expressions.push(key.node), key.replaceWith(maybeSequenceExpression(expressions));
        }
        function prependExpressionsToFieldInitializer(expressions, fieldPath) {
          const initializer = fieldPath.get("value");
          initializer.node ? expressions.push(initializer.node) : expressions.length > 0 && (expressions[expressions.length - 1] = _core.types.unaryExpression("void", expressions[expressions.length - 1])), initializer.replaceWith(maybeSequenceExpression(expressions));
        }
        function prependExpressionsToStaticBlock(expressions, blockPath) {
          blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions)));
        }
        function isProtoInitCallExpression(expression, protoInitCall) {
          return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, { name: protoInitCall.name });
        }
        function createConstructorFromExpressions(expressions, isDerivedClass) {
          const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions))];
          return isDerivedClass && body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
        }
        function createStaticBlockFromExpressions(expressions) {
          return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions))]);
        }
        const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC_OLD_VERSION = 5, STATIC = 8, DECORATORS_HAVE_THIS = 16;
        function getElementKind(element) {
          switch (element.node.type) {
            case "ClassProperty":
            case "ClassPrivateProperty":
              return FIELD;
            case "ClassAccessorProperty":
              return ACCESSOR;
            case "ClassMethod":
            case "ClassPrivateMethod":
              return "get" === element.node.kind ? GETTER : "set" === element.node.kind ? SETTER : METHOD;
          }
        }
        function generateDecorationList(decorators, decoratorsThis, version) {
          const decsCount = decorators.length, haveOneThis = decoratorsThis.some(Boolean), decs = [];
          for (let i2 = 0; i2 < decsCount; i2++) "2023-11" !== version && "2023-05" !== version || !haveOneThis || decs.push(decoratorsThis[i2] || _core.types.unaryExpression("void", _core.types.numericLiteral(0))), decs.push(decorators[i2].expression);
          return { haveThis: haveOneThis, decs };
        }
        function addCallAccessorsFor(version, element, key, getId, setId, isStatic) {
          element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), "2023-11" === version && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic)), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), "2023-11" === version && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
        }
        function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
          let params, block;
          "set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
        }
        function isClassDecoratableElementPath(path2) {
          const { type } = path2;
          return "TSDeclareMethod" !== type && "TSIndexSignature" !== type && "StaticBlock" !== type;
        }
        function maybeSequenceExpression(exprs) {
          return 0 === exprs.length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs);
        }
        function createFunctionExpressionFromPrivateMethod(node) {
          const { params, body, generator: isGenerator, async: isAsync } = node;
          return _core.types.functionExpression(void 0, params, body, isGenerator, isAsync);
        }
        function createSetFunctionNameCall(state, className) {
          return _core.types.callExpression(state.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
        }
        function createToPropertyKeyCall(state, propertyKey) {
          return _core.types.callExpression(state.addHelper("toPropertyKey"), [propertyKey]);
        }
        function createPrivateBrandCheckClosure(brandName) {
          return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
        }
        function usesPrivateField(expression) {
          try {
            return _core.types.traverseFast(expression, (node) => {
              if (_core.types.isPrivateName(node)) throw null;
            }), false;
          } catch (_unused) {
            return true;
          }
        }
        function hasInstancePrivateAccess(path2, privateNames) {
          let containsInstancePrivateAccess = false;
          if (privateNames.length > 0) {
            const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path3, state) {
              state.privateNamesMap.has(path3.node.id.name) && (containsInstancePrivateAccess = true, path3.stop());
            } }), privateNamesMap = /* @__PURE__ */ new Map();
            for (const name of privateNames) privateNamesMap.set(name, null);
            path2.traverse(privateNameVisitor, { privateNamesMap });
          }
          return containsInstancePrivateAccess;
        }
        function isProtoKey(node) {
          return "Identifier" === node.type ? "__proto__" === node.name : "__proto__" === node.value;
        }
        function isDecorated(node) {
          return node.decorators && node.decorators.length > 0;
        }
        function shouldTransformElement(node) {
          switch (node.type) {
            case "ClassAccessorProperty":
              return true;
            case "ClassMethod":
            case "ClassProperty":
            case "ClassPrivateMethod":
            case "ClassPrivateProperty":
              return isDecorated(node);
            default:
              return false;
          }
        }
        function isDecoratedAnonymousClassExpression(path2) {
          return path2.isClassExpression({ id: null }) && (isDecorated(node = path2.node) || node.body.body.some(shouldTransformElement));
          var node;
        }
        function generateLetUidIdentifier(scope, name) {
          const id = scope.generateUidIdentifier(name);
          return scope.push({ id, kind: "let" }), _core.types.cloneNode(id);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.FEATURES = void 0, exports3.enableFeature = function(file, feature, loose) {
          hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
          let resolvedLoose;
          for (const [mask, name] of featuresSameLoose) {
            if (!hasFeature(file, mask)) continue;
            if (canIgnoreLoose(file, mask)) continue;
            const loose2 = isLoose(file, mask);
            if (resolvedLoose === !loose2) throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).\n\n" + getBabelShowConfigForHint(file));
            resolvedLoose = loose2;
            var higherPriorityPluginName = name;
          }
          if (void 0 !== resolvedLoose) for (const [mask, name] of featuresSameLoose) hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.

` + getBabelShowConfigForHint(file)));
        }, exports3.isLoose = isLoose, exports3.shouldTransform = function(path2, file) {
          let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
          (0, _decorators.hasOwnDecorators)(path2.node) && (decoratorPath = path2.get("decorators.0"));
          for (const el of path2.get("body.body")) !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
          if (decoratorPath && privateFieldPath) throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
          if (decoratorPath && privateMethodPath) throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
          if (decoratorPath && !hasFeature(file, FEATURES.decorators)) throw path2.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-transform-class-properties", { "loose": true }]');
          if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods)) throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
          if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods)) throw path2.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
          if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks)) throw path2.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
          if (decoratorPath || privateMethodPath || staticBlockPath) return true;
          if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields)) return true;
          return false;
        };
        var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js");
        const FEATURES = exports3.FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 }), featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey";
        var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing", canIgnoreLoose = function(file, feature) {
          return !!(file.get(looseLowPriorityKey) & feature);
        };
        function getBabelShowConfigForHint(file) {
          let { filename } = file.opts;
          return filename && "unknown" !== filename || (filename = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
        }
        function hasFeature(file, feature) {
          return !!(file.get(featuresKey) & feature);
        }
        function isLoose(file, feature) {
          return !!(file.get(looseKey) & feature);
        }
        function setLoose(file, feature, loose) {
          loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildCheckInRHS = buildCheckInRHS, exports3.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
          var _ref;
          let injectSuperRef, classRefFlags = 0;
          const staticNodes = [], instanceNodes = [];
          let lastInstanceNodeReturnsThis = false;
          const pureStaticNodes = [];
          let classBindingNode = null;
          const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (null != injectSuperRef || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef), classRefForInnerBinding = null != (_ref = ref) ? _ref : props[0].scope.generateUidIdentifier((null == innerBindingRef ? void 0 : innerBindingRef.name) || "Class");
          null != ref || (ref = _core.types.cloneNode(innerBindingRef));
          for (const prop of props) {
            prop.isClassProperty() && ts.assertFieldTransformed(prop);
            const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
            if (isStatic && (classRefFlags |= 1), isStatic || isMethod && isPrivate || isStaticBlock) {
              new _helperReplaceSupers.default({ methodPath: prop, constantSuper, file, refToPreserve: innerBindingRef, getSuperRef, getObjectRef: () => (classRefFlags |= 2, isStatic || isStaticBlock ? classRefForInnerBinding : _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"))) }).replace();
              replaceThisContext(prop, classRefForInnerBinding, innerBindingRef) && (classRefFlags |= 2);
            }
            switch (lastInstanceNodeReturnsThis = false, true) {
              case isStaticBlock: {
                const blockBody = prop.node.body;
                1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
                break;
              }
              case (isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
                staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
                break;
              case (isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
                newHelpers(file) ? staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess)) : staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
                break;
              case (isStatic && isPublic && isField && setPublicClassFields):
                if (!isNameOrLength(prop.node)) {
                  staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
                  break;
                }
              case (isStatic && isPublic && isField && !setPublicClassFields):
                staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
                break;
              case (isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
                instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
                break;
              case (isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
                instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
                break;
              case (isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
                instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
                instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
                newHelpers(file) || staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
                staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isInstance && isPublic && isField && setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
                break;
              case (isInstance && isPublic && isField && !setPublicClassFields):
                lastInstanceNodeReturnsThis = true, instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
                break;
              default:
                throw new Error("Unreachable.");
            }
          }
          2 & classRefFlags && null != innerBindingRef && (classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef))));
          return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), lastInstanceNodeReturnsThis, pureStaticNodes: pureStaticNodes.filter(Boolean), classBindingNode, wrapClass(path2) {
            for (const prop of props) prop.node.leadingComments = null, prop.remove();
            return injectSuperRef && (path2.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path2.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path2.node.superClass))), 0 !== classRefFlags && (path2.isClassExpression() ? (path2.scope.push({ id: ref }), path2.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path2.node))) : (null == innerBindingRef && (path2.node.id = ref), null != classBindingNode && path2.scope.push({ id: classRefForInnerBinding }))), path2;
          } };
        }, exports3.buildPrivateNamesMap = function(className, privateFieldsAsSymbolsOrProperties, props, file) {
          const privateNamesMap = /* @__PURE__ */ new Map();
          let classBrandId;
          for (const prop of props) if (prop.isPrivate()) {
            const { name } = prop.node.key.id;
            let update = privateNamesMap.get(name);
            if (!update) {
              const isMethod = !prop.isProperty(), isStatic = prop.node.static;
              let id, initAdded = false;
              if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic) initAdded = !!classBrandId, null != classBrandId || (classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`)), id = classBrandId;
              else id = prop.scope.generateUidIdentifier(name);
              update = { id, static: isStatic, method: isMethod, initAdded }, privateNamesMap.set(name, update);
            }
            if (prop.isClassPrivateMethod()) if ("get" === prop.node.kind) {
              const { body } = prop.node.body;
              let $;
              1 === body.length && _core.types.isReturnStatement($ = body[0]) && _core.types.isCallExpression($ = $.argument) && 1 === $.arguments.length && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($ = $.callee) ? (update.getId = _core.types.cloneNode($), update.getterDeclared = true) : update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
            } else if ("set" === prop.node.kind) {
              const { params } = prop.node, { body } = prop.node.body;
              let $;
              1 === body.length && _core.types.isExpressionStatement($ = body[0]) && _core.types.isCallExpression($ = $.expression) && 2 === $.arguments.length && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($.arguments[1], { name: params[0].name }) && _core.types.isIdentifier($ = $.callee) ? (update.setId = _core.types.cloneNode($), update.setterDeclared = true) : update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
            } else "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name));
            privateNamesMap.set(name, update);
          }
          return privateNamesMap;
        }, exports3.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
          const initNodes = [], injectedIds = /* @__PURE__ */ new Set();
          for (const [name, value2] of privateNamesMap) {
            const { static: isStatic, method: isMethod, getId, setId } = value2, isGetterOrSetter = getId || setId, id = _core.types.cloneNode(value2.id);
            let init;
            if (privateFieldsAsProperties) init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
            else if (privateFieldsAsSymbols) init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
            else if (!isStatic) {
              if (injectedIds.has(id.name)) continue;
              injectedIds.add(id.name), init = _core.types.newExpression(_core.types.identifier(!isMethod || isGetterOrSetter && !newHelpers(state) ? "WeakMap" : "WeakSet"), []);
            }
            init && (privateFieldsAsSymbols || (0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
          }
          return initNodes;
        }, exports3.privateNameVisitorFactory = privateNameVisitorFactory, exports3.transformPrivateNamesUsage = function(ref, path2, privateNamesMap, { privateFieldsAsProperties, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, state) {
          if (!privateNamesMap.size) return;
          const body = path2.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
          (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref, file: state }, handler, { noDocumentAll, noUninitializedPrivateFieldAccess, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref, file: state, privateFieldsAsProperties, innerBinding });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js"), newHelpers = (file) => file.availableHelper("classPrivateFieldGet2");
        function privateNameVisitorFactory(visitor) {
          const nestedVisitor = _traverse.visitors.environmentVisitor(Object.assign({}, visitor)), privateNameVisitor2 = Object.assign({}, visitor, { Class(path2) {
            const { privateNamesMap } = this, body = path2.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
            for (const prop of body) {
              if (!prop.isPrivate()) continue;
              const { name } = prop.node.key.id;
              visiblePrivateNames.delete(name), redeclared.push(name);
            }
            redeclared.length && (path2.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path2.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path2.skipKey("body"));
          } });
          return privateNameVisitor2;
        }
        const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path2, { noDocumentAll }) {
          const { privateNamesMap, redeclared } = this, { node, parentPath } = path2;
          if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node })) return;
          const { name } = node.id;
          privateNamesMap.has(name) && (null != redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
        } });
        function unshadow(name, scope, innerBinding) {
          for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
            var _scope;
            scope.rename(name), scope = scope.parent;
          }
        }
        function buildCheckInRHS(rhs, file, inRHSIsObject) {
          return inRHSIsObject || null == file.availableHelper || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
        }
        const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path2, { file }) {
          const { operator, left, right } = path2.node;
          if ("in" !== operator) return;
          if (!_core.types.isPrivateName(left)) return;
          const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
          if (!privateNamesMap.has(name)) return;
          if (null != redeclared && redeclared.includes(name)) return;
          if (unshadow(this.classRef.name, path2.scope, this.innerBinding), privateFieldsAsProperties) {
            const { id: id2 } = privateNamesMap.get(name);
            return void path2.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id2)})
      `);
          }
          const { id, static: isStatic } = privateNamesMap.get(name);
          isStatic ? path2.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path2.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
        } });
        function readOnlyError(file, name) {
          return _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
        }
        function writeOnlyError(file, name) {
          return file.availableHelper("writeOnlyError") ? _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]) : (console.warn("@babel/helpers is outdated, update it to silence this warning."), _core.types.buildUndefinedNode());
        }
        function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
          return noUninitializedPrivateFieldAccess ? expr : _core.types.memberExpression(expr, _core.types.identifier("_"));
        }
        function autoInherits(fn) {
          return function(member) {
            return _core.types.inherits(fn.apply(this, arguments), member.node);
          };
        }
        const privateNameHandlerSpec = { memoise(member, count) {
          const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
          memo && this.memoiser.set(object, memo, count);
        }, receiver(member) {
          const { object } = member.node;
          return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
        }, get: autoInherits(function(member) {
          const { classRef, privateNamesMap, file, innerBinding, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (isStatic) {
            if (unshadow(classRef.name, member.scope, innerBinding), !newHelpers(file)) {
              const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
              return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]);
            }
            const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
            if (!isMethod) return buildStaticPrivateFieldAccess(skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]), noUninitializedPrivateFieldAccess);
            if (getId) return skipCheck ? _core.types.callExpression(cloneId(getId), [receiver]) : _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(classRef), receiver, cloneId(getId)]);
            if (setId) {
              const err = _core.types.buildUndefinedNode();
              return skipCheck ? err : _core.types.sequenceExpression([_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
            }
            return skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]);
          }
          return isMethod ? isGetterOrSetter ? getId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(id), this.receiver(member), cloneId(getId)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]) : _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(id), this.receiver(member), cloneId(methodId)]) : _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), cloneId(methodId)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldGet2"), [cloneId(id), this.receiver(member)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
        }), boundGet(member) {
          return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
        }, set: autoInherits(function(member, value2) {
          const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (isStatic) {
            if (!newHelpers(file)) {
              const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
              return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id), value2]);
            }
            const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
            if (isMethod && !setId) {
              const err = readOnlyError(file, name);
              return skipCheck ? _core.types.sequenceExpression([value2, err]) : _core.types.sequenceExpression([value2, _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file, name)]);
            }
            return setId ? skipCheck ? _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value2]) : _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(classRef), cloneId(setId), receiver, value2]) : _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess), skipCheck ? value2 : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, value2]));
          }
          return isMethod ? setId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(id), cloneId(setId), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]) : _core.types.sequenceExpression([this.receiver(member), value2, readOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldSet2"), [cloneId(id), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]);
        }), destructureSet(member) {
          const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId } = privateNamesMap.get(name), cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (!newHelpers(file)) {
            if (isStatic) {
              try {
                var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
              } catch (_unused) {
                throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
              }
              return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]), _core.types.identifier("value"));
            }
            return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), cloneId(id)]), _core.types.identifier("value"));
          }
          if (isMethod && !setId) return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier("_"));
          if (isStatic && !isMethod) {
            const getCall = this.get(member);
            if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) return getCall;
            const ref = getCall.arguments.pop();
            return getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`), _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
          }
          const setCall = this.set(member, _core.types.identifier("_"));
          if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], { name: "_" })) throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github.com/babel/babel/issues.");
          let args;
          return args = _core.types.isMemberExpression(setCall.callee, { computed: false }) && _core.types.isIdentifier(setCall.callee.property) && "call" === setCall.callee.property.name ? [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]] : [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))], _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), args), _core.types.identifier("_"));
        }, call(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
        }, optionalCall(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } }, privateNameHandlerLoose = { get(member) {
          const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
          return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
        }, set() {
          throw new Error("private name handler with loose = true don't need set()");
        }, boundGet(member) {
          return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
        }, simpleSet(member) {
          return this.get(member);
        }, destructureSet(member) {
          return this.get(member);
        }, call(member, args) {
          return _core.types.callExpression(this.get(member), args);
        }, optionalCall(member, args) {
          return _core.types.optionalCallExpression(this.get(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } };
        function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
        }
        function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          if (!state.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
          const helper = state.addHelper("classPrivateFieldInitSpec");
          return inheritLoc(inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), inheritLoc(_core.types.cloneNode(id), prop.node.key), newHelpers(state) ? value2 : _core.template.expression.ast`{ writable: true, value: ${value2} }`])), prop), prop.node);
        }
        function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), value2 = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
          return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value2)]), prop);
        }
        var buildPrivateStaticFieldInitSpecOld = function(prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isGetterOrSetter = getId || setId;
          if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;
          if (isGetterOrSetter) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
          const value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value2}
        };
      `, prop);
        };
        function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          if (methodId) return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : void 0;
        }
        function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
          const privateName = privateNamesMap.get(prop.node.key.id.name);
          if (!privateName.initAdded) {
            if (!newHelpers(state)) {
              if (privateName.getId || privateName.setId) return function(ref2, prop2, privateNamesMap2, state2) {
                const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId, setId } = privateName2;
                if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref2}, {
            get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
          });
        `, prop2);
                const helper = state2.addHelper("classPrivateFieldInitSpec");
                return inheritLoc(inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
      },
    )`, prop2), prop2.node);
              }(ref, prop, privateNamesMap, state);
            }
            return function(ref2, prop2, privateNamesMap2, state2) {
              const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
              if (!state2.availableHelper("classPrivateMethodInitSpec")) return inheritPropComments(_core.template.statement.ast`${id}.add(${ref2})`, prop2);
              const helper = state2.addHelper("classPrivateMethodInitSpec");
              return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop2);
            }(ref, prop, privateNamesMap, state);
          }
        }
        function buildPublicFieldInitLoose(ref, prop) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value2)), prop);
        }
        function buildPublicFieldInitSpec(ref, prop, state) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value2])), prop);
        }
        function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
        }
        function buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && 0 === params.length, isSetter = setId && params.length > 0;
          if (isGetter && getterDeclared || isSetter && setterDeclared) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), null;
          if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
            const scope = prop.get("body").scope, thisArg = scope.generateUidIdentifier("this"), state = { thisRef: thisArg, argumentsPath: [] };
            if (prop.traverse(thisContextVisitor, state), state.argumentsPath.length) {
              const argumentsId = scope.generateUidIdentifier("arguments");
              scope.push({ id: argumentsId, init: _core.template.expression.ast`[].slice.call(arguments, 1)` });
              for (const path2 of state.argumentsPath) path2.replaceWith(_core.types.cloneNode(argumentsId));
            }
            params.unshift(_core.types.cloneNode(thisArg));
          }
          let declId = methodId;
          return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true, initAdded: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true, initAdded: true })), declId = setId) : isStatic && !privateFieldsAsSymbolsOrProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
        }
        const thisContextVisitor = _traverse.visitors.environmentVisitor({ Identifier(path2, state) {
          state.argumentsPath && "arguments" === path2.node.name && state.argumentsPath.push(path2);
        }, UnaryExpression(path2) {
          const { node } = path2;
          if ("delete" === node.operator) {
            const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
            _core.types.isThisExpression(argument) && path2.replaceWith(_core.types.booleanLiteral(true));
          }
        }, ThisExpression(path2, state) {
          state.needsClassRef = true, path2.replaceWith(_core.types.cloneNode(state.thisRef));
        }, MetaProperty(path2) {
          const { node, scope } = path2;
          "new" === node.meta.name && "target" === node.property.name && path2.replaceWith(scope.buildUndefinedNode());
        } }), innerReferencesVisitor = { ReferencedIdentifier(path2, state) {
          path2.scope.bindingIdentifierEquals(path2.node.name, state.innerBinding) && (state.needsClassRef = true, path2.node.name = state.thisRef.name);
        } };
        function replaceThisContext(path2, ref, innerBindingRef) {
          var _state$thisRef;
          const state = { thisRef: ref, needsClassRef: false, innerBinding: innerBindingRef };
          return path2.isMethod() || path2.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$thisRef = state.thisRef) && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name && path2.traverse(innerReferencesVisitor, state), state.needsClassRef;
        }
        function isNameOrLength({ key, computed }) {
          return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
        }
        function inheritPropComments(node, prop) {
          return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
        }
        function inheritLoc(node, original) {
          return node.start = original.start, node.end = original.end, node.loc = original.loc, node;
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "FEATURES", { enumerable: true, get: function() {
          return _features.FEATURES;
        } }), Object.defineProperty(exports3, "buildCheckInRHS", { enumerable: true, get: function() {
          return _fields.buildCheckInRHS;
        } }), exports3.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api, inherits, decoratorVersion }) {
          var _api$assumption;
          if (feature & _features.FEATURES.decorators && ("2023-11" === decoratorVersion || "2023-05" === decoratorVersion || "2023-01" === decoratorVersion || "2022-03" === decoratorVersion || "2021-12" === decoratorVersion)) return (0, _decorators.default)(api, { loose }, decoratorVersion, inherits);
          null != api || (api = { assumption: () => {
          } });
          const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), noUninitializedPrivateFieldAccess = null != (_api$assumption = api.assumption("noUninitializedPrivateFieldAccess")) && _api$assumption, constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
          if (privateFieldsAsProperties && privateFieldsAsSymbols) throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
          const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
          if (true === loose) {
            const explicit = [];
            void 0 !== setPublicClassFields && explicit.push('"setPublicClassFields"'), void 0 !== privateFieldsAsProperties && explicit.push('"privateFieldsAsProperties"'), void 0 !== privateFieldsAsSymbols && explicit.push('"privateFieldsAsSymbols"'), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
          }
          return { name, manipulateOptions, inherits, pre(file) {
            (0, _features.enableFeature)(file, feature, loose), "number" != typeof file.get(versionKey) && file.get(versionKey) && !_semver.lt(file.get(versionKey), "7.25.9") || file.set(versionKey, "7.25.9");
          }, visitor: { Class(path2, { file }) {
            var _ref;
            if ("7.25.9" !== file.get(versionKey)) return;
            if (!(0, _features.shouldTransform)(path2, file)) return;
            const pathIsClassDeclaration = path2.isClassDeclaration();
            pathIsClassDeclaration && (0, _typescript.assertFieldTransformed)(path2);
            const loose2 = (0, _features.isLoose)(file, feature);
            let constructor;
            const isDecorated = (0, _decorators2.hasDecorators)(path2.node), props = [], elements = [], computedPaths = [], privateNames = /* @__PURE__ */ new Set(), body = path2.get("body");
            for (const path3 of body.get("body")) {
              if ((path3.isClassProperty() || path3.isClassMethod()) && path3.node.computed && computedPaths.push(path3), path3.isPrivate()) {
                const { name: name2 } = path3.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
                if (path3.isClassPrivateMethod()) {
                  if ("get" === path3.node.kind) {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName)) throw path3.buildCodeFrameError("Duplicate private field");
                    privateNames.add(getName).add(name2);
                  } else if ("set" === path3.node.kind) {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName)) throw path3.buildCodeFrameError("Duplicate private field");
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName))) throw path3.buildCodeFrameError("Duplicate private field");
                  privateNames.add(name2);
                }
              }
              path3.isClassMethod({ kind: "constructor" }) ? constructor = path3 : (elements.push(path3), (path3.isProperty() || path3.isPrivate() || null != path3.isStaticBlock && path3.isStaticBlock()) && props.push(path3));
            }
            if (!props.length && !isDecorated) return;
            const innerBinding = path2.node.id;
            let ref;
            innerBinding && pathIsClassDeclaration || (null != path2.ensureFunctionName || (path2.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path2.ensureFunctionName(false), ref = path2.scope.generateUidIdentifier((null == innerBinding ? void 0 : innerBinding.name) || "Class"));
            const classRefForDefine = null != (_ref = ref) ? _ref : _core.types.cloneNode(innerBinding), privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, props, file), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, null != privateFieldsAsSymbols && privateFieldsAsSymbols, file);
            let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
            (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path2, privateNamesMap, { privateFieldsAsProperties: null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path2, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path2, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, lastInstanceNodeReturnsThis, classBindingNode, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref, path2.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose2, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, null != constantSuper ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path2, constructor, instanceNodes, (referenceVisitor, state) => {
              if (!isDecorated) for (const prop of props) null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
            }, lastInstanceNodeReturnsThis);
            const wrappedPath = wrapClass(path2);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes), null != classBindingNode && pathIsClassDeclaration && wrappedPath.insertAfter(classBindingNode);
          }, ExportDefaultDeclaration(path2, { file }) {
            {
              if ("7.25.9" !== file.get(versionKey)) return;
              const decl = path2.get("declaration");
              if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node)) if (decl.node.id) null != path2.splitExportDeclaration || (path2.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path2.splitExportDeclaration();
              else decl.node.type = "ClassExpression";
            }
          } } };
        }, Object.defineProperty(exports3, "enableFeature", { enumerable: true, get: function() {
          return _features.enableFeature;
        } }), Object.defineProperty(exports3, "injectInitialization", { enumerable: true, get: function() {
          return _misc.injectInitialization;
        } });
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _semver = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators2 = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        const versionKey = "@babel/plugin-class-features/version";
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.extractComputedKeys = function(path2, computedPaths, file) {
          const { scope } = path2, declarations = [], state = { classBinding: path2.node.id && scope.getBinding(path2.node.id.name), file };
          for (const computedPath of computedPaths) {
            const computedKey = computedPath.get("key");
            computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
            const computedNode = computedPath.node;
            if (!computedKey.isConstantExpression()) {
              const assignment = memoiseComputedKey(computedKey.node, scope, scope.generateUidBasedOnNode(computedKey.node));
              assignment && (declarations.push(_core.types.expressionStatement(assignment)), computedNode.key = _core.types.cloneNode(assignment.left));
            }
          }
          return declarations;
        }, exports3.injectInitialization = function(path2, constructor, nodes, renamer, lastReturnsThis) {
          if (!nodes.length) return;
          const isDerived = !!path2.node.superClass;
          if (!constructor) {
            const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
            isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path2.get("body").unshiftContainer("body", newConstructor);
          }
          renamer && renamer(referenceVisitor, { scope: constructor.scope });
          if (isDerived) {
            const bareSupers = [];
            constructor.traverse(findBareSupers, bareSupers);
            let isFirst = true;
            for (const bareSuper of bareSupers) if (isFirst ? isFirst = false : nodes = nodes.map((n2) => _core.types.cloneNode(n2)), bareSuper.parentPath.isExpressionStatement()) bareSuper.insertAfter(nodes);
            else {
              const allNodes = [bareSuper.node, ...nodes.map((n2) => _core.types.toExpression(n2))];
              lastReturnsThis || allNodes.push(_core.types.thisExpression()), bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
            }
          } else constructor.get("body").unshiftContainer("body", nodes);
        }, exports3.memoiseComputedKey = memoiseComputedKey;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const findBareSupers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").visitors.environmentVisitor({ Super(path2) {
          const { node, parentPath } = path2;
          parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
        } }), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path2) {
          path2.skip();
        }, ReferencedIdentifier(path2, { scope }) {
          scope.hasOwnBinding(path2.node.name) && (scope.rename(path2.node.name), path2.skip());
        } };
        function handleClassTDZ(path2, state) {
          if (state.classBinding && state.classBinding === path2.scope.getBinding(path2.node.name)) {
            const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path2.node.name)]);
            path2.replaceWith(_core.types.sequenceExpression([throwNode, path2.node])), path2.skip();
          }
        }
        const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
        function memoiseComputedKey(keyNode, scope, hint) {
          if (_core.types.isIdentifier(keyNode) && scope.hasUid(keyNode.name)) return;
          if (_core.types.isAssignmentExpression(keyNode, { operator: "=" }) && _core.types.isIdentifier(keyNode.left) && scope.hasUid(keyNode.left.name)) return _core.types.cloneNode(keyNode);
          {
            const ident = _core.types.identifier(hint);
            return scope.push({ id: ident, kind: "let" }), _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
          }
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertFieldTransformed = function(path2) {
          if (path2.node.declare) throw path2.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-transform-class-properties\n - @babel/plugin-transform-private-methods\n - @babel/plugin-proposal-decorators");
        };
      }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _interopNamespace(e) {
          if (e && e.__esModule) return e;
          var n2 = /* @__PURE__ */ Object.create(null);
          return e && Object.keys(e).forEach(function(k) {
            if ("default" !== k) {
              var d2 = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n2, k, d2.get ? d2 : { enumerable: true, get: function() {
                return e[k];
              } });
            }
          }), n2.default = e, Object.freeze(n2);
        }
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"));
        function willPathCastToBoolean(path2) {
          const maybeWrapped = path2, { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
        class AssignmentMemoiser {
          constructor() {
            this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
          }
          has(key) {
            return this._map.has(key);
          }
          get(key) {
            if (!this.has(key)) return;
            const record = this._map.get(key), { value: value2 } = record;
            return record.count--, 0 === record.count ? assignmentExpression("=", value2, key) : value2;
          }
          set(key, value2, count) {
            return this._map.set(key, { count, value: value2 });
          }
        }
        function toNonOptional(path2, base) {
          const { node } = path2;
          if (isOptionalMemberExpression(node)) return memberExpression(base, node.property, node.computed);
          if (path2.isOptionalCallExpression()) {
            const callee = path2.get("callee");
            if (path2.node.optional && callee.isOptionalMemberExpression()) {
              const object = callee.node.object, context = path2.scope.maybeGenerateMemoised(object);
              return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path2.node.arguments]);
            }
            return callExpression(base, path2.node.arguments);
          }
          return path2.node;
        }
        const handle = { memoise() {
        }, handle(member, noDocumentAll) {
          const { node, parent, parentPath, scope } = member;
          if (member.isOptionalMemberExpression()) {
            if (function(path2) {
              for (; path2 && !path2.isProgram(); ) {
                const { parentPath: parentPath2, container, listKey } = path2, parentNode = parentPath2.node;
                if (listKey) {
                  if (container !== parentNode[listKey]) return true;
                } else if (container !== parentNode) return true;
                path2 = parentPath2;
              }
              return false;
            }(member)) return;
            const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
            if (scope.path.isPattern()) return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
            const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
            if (rootParentPath.isUpdateExpression({ argument: node })) throw member.buildCodeFrameError("can't handle update expression");
            const isAssignment = rootParentPath.isAssignmentExpression({ left: endPath.node }), isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
            if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) throw member.buildCodeFrameError("can't delete a private class element");
            let startingOptional = member;
            for (; ; ) if (startingOptional.isOptionalMemberExpression()) {
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("object");
            } else {
              if (!startingOptional.isOptionalCallExpression()) throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("callee");
            }
            const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
            startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isAssignmentExpression() ? handleAssignment(this, member, parentPath) : member.replaceWith(this.get(member));
            let context, regular = member.node;
            for (let current = member; current !== endPath; ) {
              const parentPath2 = current.parentPath;
              if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
                regular = parentPath2.node;
                break;
              }
              regular = toNonOptional(parentPath2, regular), current = parentPath2;
            }
            const endParentPath = endPath.parentPath;
            if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
              const { object } = regular;
              context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
            }
            let replacementPath = endPath;
            (isDeleteOperation || isAssignment) && (replacementPath = endParentPath, regular = endParentPath.node);
            const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
            if (willEndPathCastToBoolean) {
              let nonNullishCheck;
              nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
            } else {
              let nullishCheck;
              nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
            }
            if (context) {
              const endParent = endParentPath.node;
              endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
            }
          } else {
            if (isUpdateExpression(parent, { argument: node })) {
              if (this.simpleSet) return void member.replaceWith(this.simpleSet(member));
              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const ref = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref });
              const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
              if (prefix) {
                seq.push(updateExpression(operator, cloneNode(ref), prefix));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(this.set(member, value2));
              }
              {
                const ref2 = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode(ref2)]));
              }
            }
            if (parentPath.isAssignmentExpression({ left: node })) handleAssignment(this, member, parentPath);
            else {
              if (!parentPath.isCallExpression({ callee: node })) return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
              parentPath.replaceWith(this.call(member, parentPath.node.arguments));
            }
          }
        } };
        function handleAssignment(state, member, parentPath) {
          if (state.simpleSet) return void member.replaceWith(state.simpleSet(member));
          const { operator, right: value2 } = parentPath.node;
          if ("=" === operator) parentPath.replaceWith(state.set(member, value2));
          else {
            const operatorTrunc = operator.slice(0, -1);
            LOGICAL_OPERATORS.includes(operatorTrunc) ? (state.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value2)))) : (state.memoise(member, 2), parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value2))));
          }
        }
        exports3.default = function(path2, visitor, state) {
          path2.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        exports3.default = class {
          constructor(importedSource, scope, hub) {
            this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
          }
          done() {
            return { statements: this._statements, resultName: this._resultName };
          }
          import() {
            return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
          }
          require() {
            return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
          }
          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
          }
          default(name) {
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
          }
          named(name, importName2) {
            if ("default" === importName2) return this.default(name);
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName2))], this._resultName = cloneNode(id), this;
          }
          var(name) {
            const id = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
          }
          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }
          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }
          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
          }
          prop(name) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
          }
          read(name) {
            this._resultName = memberExpression(this._resultName, identifier(name));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
        const { identifier, importSpecifier, numericLiteral, sequenceExpression, isImportDeclaration } = _t;
        function isValueImport(node) {
          return "type" !== node.importKind && "typeof" !== node.importKind;
        }
        function hasNamespaceImport(node) {
          return 1 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[0].type || 2 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[1].type;
        }
        function hasDefaultImport(node) {
          return node.specifiers.length > 0 && "ImportDefaultSpecifier" === node.specifiers[0].type;
        }
        function maybeAppendImportSpecifiers(target, source) {
          return target.specifiers.length ? !source.specifiers.length || !hasNamespaceImport(target) && !hasNamespaceImport(source) && (hasDefaultImport(source) && (hasDefaultImport(target) ? source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier("default")) : target.specifiers.unshift(source.specifiers.shift())), target.specifiers.push(...source.specifiers), true) : (target.specifiers = source.specifiers, true);
        }
        exports3.default = class {
          constructor(path2, importedSource, opts) {
            this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
            const programPath = path2.find((p2) => p2.isProgram());
            this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }
          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }
          addNamed(importName2, importedSourceIn, opts) {
            return _assert("string" == typeof importName2), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName2);
          }
          addNamespace(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
          }
          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
          }
          _applyDefaults(importedSource, opts, isInit = false) {
            let newOpts;
            return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
          }
          _generateImport(opts, importName2) {
            const isDefault = "default" === importName2, isNamed = !!importName2 && !isDefault, isNamespace = null === importName2, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
            let name = nameHint || importName2;
            const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
            if ("after" === importPosition && !isMod) throw new Error('"importPosition": "after" is only supported in modules');
            const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
            if ("es6" === importedType) {
              if (!isModuleForNode && !isModuleForBabel) throw new Error("Cannot import an ES6 module from CommonJS");
              builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName2);
            } else {
              if ("commonjs" !== importedType) throw new Error(`Unexpected interopType "${importedType}"`);
              if ("babel" === importedInterop) if (isModuleForNode) {
                name = "default" !== name ? name : importedSource;
                const es6Default = `${importedSource}$es6Default`;
                builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName2) : isNamed && builder.default(es6Default).read(importName2);
              } else isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName2), builder.defaultInterop()) : builder.var(importedSource).read(importName2) : isDefault ? builder.var(name).defaultInterop().prop(importName2) : isNamed && builder.var(name).prop(importName2));
              else if ("compiled" === importedInterop) isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName2).var(name)));
              else {
                if ("uncompiled" !== importedInterop) throw new Error(`Unknown importedInterop "${importedInterop}".`);
                if (isDefault && ensureLiveReference) throw new Error("No live reference for commonjs default");
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName2)));
              }
            }
            const { statements, resultName } = builder.done();
            return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
          }
          _insertStatements(statements, importPosition = "before", blockHoist = 3) {
            if ("after" === importPosition) {
              if (this._insertStatementsAfter(statements)) return;
            } else if (this._insertStatementsBefore(statements, blockHoist)) return;
            this._programPath.unshiftContainer("body", statements);
          }
          _insertStatementsBefore(statements, blockHoist) {
            if (1 === statements.length && isImportDeclaration(statements[0]) && isValueImport(statements[0])) {
              const firstImportDecl = this._programPath.get("body").find((p2) => p2.isImportDeclaration() && isValueImport(p2.node));
              if ((null == firstImportDecl ? void 0 : firstImportDecl.node.source.value) === statements[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])) return true;
            }
            statements.forEach((node) => {
              node._blockHoist = blockHoist;
            });
            const targetPath = this._programPath.get("body").find((p2) => {
              const val = p2.node._blockHoist;
              return Number.isFinite(val) && val < 4;
            });
            return !!targetPath && (targetPath.insertBefore(statements), true);
          }
          _insertStatementsAfter(statements) {
            const statementsSet = new Set(statements), importDeclarations = /* @__PURE__ */ new Map();
            for (const statement of statements) if (isImportDeclaration(statement) && isValueImport(statement)) {
              const source = statement.source.value;
              importDeclarations.has(source) || importDeclarations.set(source, []), importDeclarations.get(source).push(statement);
            }
            let lastImportPath = null;
            for (const bodyStmt of this._programPath.get("body")) if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
              lastImportPath = bodyStmt;
              const source = bodyStmt.node.source.value, newImports = importDeclarations.get(source);
              if (!newImports) continue;
              for (const decl of newImports) statementsSet.has(decl) && maybeAppendImportSpecifiers(bodyStmt.node, decl) && statementsSet.delete(decl);
            }
            return 0 === statementsSet.size || (lastImportPath && lastImportPath.insertAfter(Array.from(statementsSet)), !!lastImportPath);
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ImportInjector", { enumerable: true, get: function() {
          return _importInjector.default;
        } }), exports3.addDefault = function(path2, importedSource, opts) {
          return new _importInjector.default(path2).addDefault(importedSource, opts);
        }, exports3.addNamed = function(path2, name, importedSource, opts) {
          return new _importInjector.default(path2).addNamed(name, importedSource, opts);
        }, exports3.addNamespace = function(path2, importedSource, opts) {
          return new _importInjector.default(path2).addNamespace(importedSource, opts);
        }, exports3.addSideEffect = function(path2, importedSource, opts) {
          return new _importInjector.default(path2).addSideEffect(importedSource, opts);
        }, Object.defineProperty(exports3, "isModule", { enumerable: true, get: function() {
          return _isModule.default;
        } });
        var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path2) {
          return "module" === path2.node.sourceType;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
          const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
          if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && 0 === specifier.quasis.length) return deferToThen ? _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
          const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({ raw: "" }), _core.types.templateElement({ raw: "" })], [_core.types.identifier("specifier")]);
          return deferToThen ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports3.getDynamicImportSource = function(node) {
          const [source] = node.arguments;
          return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports3.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds) return null;
          if (null != moduleId && !getModuleId) return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "buildDynamicImport", { enumerable: true, get: function() {
          return _dynamicImport.buildDynamicImport;
        } }), exports3.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
          var _wrapReference;
          const statements = [], srcNamespaceId = _core.types.identifier(sourceMetadata.name);
          for (const localName of sourceMetadata.importsNamespace) localName !== sourceMetadata.name && statements.push(_core.template.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: _core.types.cloneNode(srcNamespaceId) }));
          const srcNamespace = null != (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) ? _wrapReference : srcNamespaceId;
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
          for (const exportName of sourceMetadata.reexportNamespace) statements.push((_core.types.isIdentifier(srcNamespace) ? _core.template.statement`EXPORTS.NAME = NAMESPACE;` : _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: _core.types.cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _core.template`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports3.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports3, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports3, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports3, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports3, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports3.rewriteModuleStatementsAndPrepareHeader = function(path2, { exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, getWrapperPayload = Lazy.toGetWrapperPayload(null != lazy && lazy), wrapReference = Lazy.wrapReference, esNamespaceOnly, filename, constantReexports = arguments[1].loose, enumerableModuleMeta = arguments[1].loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path2), "Cannot process module statements in a script"), path2.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path2, exportName, { importInterop, initializeReexports: constantReexports, getWrapperPayload, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path2);
          if ((0, _rewriteLiveReferences.default)(path2, meta, wrapReference), false !== strictMode) {
            path2.node.directives.some((directive) => "use strict" === directive.value.value) || path2.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data of metadata.local.values()) for (const name2 of data.names) exportedVars[name2] = true;
            let hasReexport = false;
            for (const data of metadata.source.values()) {
              for (const exportName2 of data.reexports.keys()) exportedVars[exportName2] = true;
              for (const exportName2 of data.reexportNamespace) exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length) return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))]) };
          }(path2, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, wrapReference2, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data] of metadata.local) if ("import" === data.kind) ;
            else if ("hoisted" === data.kind) initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
            else if (!noIncompleteNsImportDetection2) for (const exportName2 of data.names) initStatements.push([exportName2, null]);
            for (const data of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference2), reexports = [...data.reexports.keys()];
                for (let i2 = 0; i2 < reexportsStatements.length; i2++) initStatements.push([reexports[i2], reexportsStatements[i2]]);
              }
              if (!noIncompleteNsImportDetection2) for (const exportName2 of data.reexportNamespace) initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a2], [b]) => a2 < b ? -1 : b < a2 ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2) for (const [, initStatement] of initStatements) results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i2 = 0; i2 < initStatements.length; i2 += chunkSize) {
                let uninitializedExportNames = [];
                for (let j = 0; j < chunkSize && i2 + j < initStatements.length; j++) {
                  const [exportName2, initStatement] = initStatements[i2 + j];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path2, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports3, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports3.wrapInterop = function(programPath, expr, type) {
          if ("none" === type) return null;
          if ("node-namespace" === type) return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(true)]);
          if ("node-default" === type) return null;
          let helper;
          if ("default" === type) helper = "interopRequireDefault";
          else {
            if ("namespace" !== type) throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), Lazy = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        exports3.getDynamicImportSource = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js").getDynamicImportSource;
        const ReexportTemplate = { constant: ({ exports: exports4, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports4}.${exportName} = ${namespaceImport};
    `, constantComputed: ({ exports: exports4, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports4}["${exportName}"] = ${namespaceImport};
    `, spec: ({ exports: exports4, exportName, namespaceImport }) => _core.template.statement.ast`
      Object.defineProperty(${exports4}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    ` };
        function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
          var _wrapReference2;
          let namespace = _core.types.identifier(metadata.name);
          namespace = null != (_wrapReference2 = wrapReference(namespace, metadata.wrap)) ? _wrapReference2 : namespace;
          const { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName2]) => {
            let namespaceImport = _core.types.cloneNode(namespace);
            "default" === importName2 && "node-default" === metadata.interop || (namespaceImport = stringSpecifiers.has(importName2) ? _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName2), true) : _core.types.memberExpression(namespaceImport, _core.types.identifier(importName2)));
            const astNodes = { exports: meta.exportName, exportName, namespaceImport };
            return constantReexports || _core.types.isIdentifier(namespaceImport) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        }
        const InitTemplate = { computed: ({ exports: exports4, name, value: value2 }) => _core.template.expression.ast`${exports4}["${name}"] = ${value2}`, default: ({ exports: exports4, name, value: value2 }) => _core.template.expression.ast`${exports4}.${name} = ${value2}`, define: ({ exports: exports4, name, value: value2 }) => _core.template.expression.ast`
      Object.defineProperty(${exports4}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value2}` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: exports4 } = metadata;
          return _core.types.expressionStatement(exportNames.reduce((value2, name) => {
            const params = { exports: exports4, name, value: value2 };
            return "__proto__" === name ? InitTemplate.define(params) : stringSpecifiers.has(name) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.toGetWrapperPayload = function(lazy) {
          return (source, metadata) => {
            if (false === lazy) return null;
            if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
            if (true === lazy) return source.includes(".") ? null : "lazy";
            if (Array.isArray(lazy)) return lazy.includes(source) ? "lazy" : null;
            if ("function" == typeof lazy) return lazy(source) ? "lazy" : null;
            throw new Error(".lazy must be a boolean, string array, or function");
          };
        }, exports3.wrapReference = function(ref, payload) {
          return "lazy" === payload ? _core.types.callExpression(ref, []) : null;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js");
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath, exportName, { importInterop, initializeReexports = false, getWrapperPayload, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (null != child.splitExportDeclaration || (child.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), child.splitExportDeclaration());
            });
          }(programPath);
          const { local, sources, hasExports } = function(programPath2, { getWrapperPayload: getWrapperPayload2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration()) kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration) child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral()) return void child.get("specifiers").forEach((spec) => {
                      assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                    });
                  }
                  if (child.isFunctionDeclaration()) kind = "hoisted";
                  else if (child.isClassDeclaration()) kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" })) kind = "var";
                  else {
                    if (!child.isVariableDeclaration()) return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind) throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name) throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else child.get("specifiers").forEach((spec) => {
                  const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                  if ("__esModule" === exportName2) throw exported.buildCodeFrameError('Illegal export "__esModule".');
                  localMetadata2.names.push(exportName2);
                });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), importNodes = /* @__PURE__ */ new Map(), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode, node) => {
              const source = sourceNode.value;
              let data = sourceData.get(source);
              return data ? importNodes.get(source).push(node) : (data = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, wrap: null, get lazy() {
                return "lazy" === this.wrap;
              }, referenced: false }, sourceData.set(source, data), importNodes.set(source, [node])), data;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, "default");
                    }), data.referenced = true);
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexportNamespace.add(name);
                    }), data.referenced = true);
                  } else if (spec.isImportSpecifier()) {
                    const importName2 = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data.imports.set(localName, importName2);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, importName2);
                    }), data.referenced = true);
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), data.reexportAll = { loc: child.node.loc }, data.referenced = true;
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName2 = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data.reexports.set(exportName2, importName2), data.referenced = true, "__esModule" === exportName2) throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName2 of metadata.imports.values()) "default" === importName2 ? needsDefault = true : needsNamed = true;
              for (const importName2 of metadata.reexports.values()) "default" === importName2 ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            if (getWrapperPayload2) for (const [source, metadata] of sourceData) metadata.wrap = getWrapperPayload2(source, metadata, importNodes.get(source));
            return { hasExports: hasExports2, local: localData, sources: sourceData };
          }(programPath, { initializeReexports, getWrapperPayload }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) child.remove();
              else if (child.isExportNamedDeclaration()) child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [source, metadata] of sources) {
            const { importsNamespace, imports } = metadata;
            if (importsNamespace.size > 0 && 0 === imports.size) {
              const [nameOfnamespace] = importsNamespace;
              metadata.name = nameOfnamespace;
            }
            const resolvedInterop = resolveImportInterop(importInterop, source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source: sources, stringSpecifiers };
        }, exports3.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports3.isSideEffectImport = function(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }, exports3.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop) throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path2, stringSpecifiers) {
          if (path2.isIdentifier()) return path2.node.name;
          if (path2.isStringLiteral()) {
            const stringValue = path2.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path2.node.type}`);
        }
        function assertExportSpecifier(path2) {
          if (!path2.isExportSpecifier()) throw path2.isExportNamespaceSpecifier() ? path2.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.") : path2.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath, metadata, wrapReference) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path2) => {
            programPath.requeue(path2);
          };
          for (const [source, data] of metadata.source) {
            for (const [localName, importName2] of data.imports) imported.set(localName, [source, importName2, null]);
            for (const localName of data.importsNamespace) imported.set(localName, [source, null, localName]);
          }
          for (const [local, data] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference([source, importName2, localName], identNode) {
            const meta = metadata.source.get(source);
            if (meta.referenced = true, localName) {
              var _wrapReference;
              if (meta.wrap) identNode = null != (_wrapReference = wrapReference(identNode, meta.wrap)) ? _wrapReference : identNode;
              return identNode;
            }
            let namespace = _core.types.identifier(meta.name);
            var _wrapReference2;
            meta.wrap && (namespace = null != (_wrapReference2 = wrapReference(namespace, meta.wrap)) ? _wrapReference2 : namespace);
            if ("default" === importName2 && "node-default" === meta.interop) return namespace;
            const computed = metadata.stringSpecifiers.has(importName2);
            return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName2) : _core.types.identifier(importName2), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const rewriteBindingInitVisitor = { Scope(path2) {
          path2.skip();
        }, ClassDeclaration(path2) {
          const { requeueInParent, exported, metadata } = this, { id } = path2.node;
          if (!id) throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path2.scope));
            statement._blockHoist = path2.node._blockHoist, requeueInParent(path2.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path2) {
          const { requeueInParent, exported, metadata } = this, isVar = "var" === path2.node.kind;
          for (const decl of path2.get("declarations")) {
            const { id } = decl.node;
            let { init } = decl.node;
            if (!_core.types.isIdentifier(id) || !exported.has(id.name) || _core.types.isArrowFunctionExpression(init) || _core.types.isFunctionExpression(init) && !init.id || _core.types.isClassExpression(init) && !init.id) {
              for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) if (exported.has(localName)) {
                const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path2.scope));
                statement._blockHoist = path2.node._blockHoist, requeueInParent(path2.insertAfter(statement)[0]);
              }
            } else {
              if (!init) {
                if (isVar) continue;
                init = path2.scope.buildUndefinedNode();
              }
              decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path2.scope), requeueInParent(decl.get("init"));
            }
          }
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent) currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path2) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path2.node)) return;
          seen.add(path2.node);
          const localName = path2.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path3) {
              do {
                switch (path3.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path3.parentPath.parent.exportKind;
                  default:
                    if (path3.parentPath.isStatement() || path3.parentPath.isExpression()) return false;
                }
              } while (path3 = path3.parentPath);
            }(path2)) throw path2.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path2.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding) return;
            const ref = buildImportReference(importData, path2.node);
            if (ref.loc = path2.node.loc, (path2.parentPath.isCallExpression({ callee: path2.node }) || path2.parentPath.isOptionalCallExpression({ callee: path2.node }) || path2.parentPath.isTaggedTemplateExpression({ tag: path2.node })) && _core.types.isMemberExpression(ref)) path2.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
            else if (path2.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
              const { object, property } = ref;
              path2.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
            } else path2.replaceWith(ref);
            requeueInParent(path2), path2.skip();
          }
        }, UpdateExpression(path2) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path2.node)) return;
          seen.add(path2.node);
          const arg = path2.get("argument");
          if (arg.isMemberExpression()) return;
          const update = path2.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path2.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) if (importData) path2.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
            else if (update.prefix) path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path2.scope));
            else {
              const ref = scope.generateDeclaredUidIdentifier(localName);
              path2.replaceWith(_core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path2.scope), _core.types.cloneNode(ref)]));
            }
          }
          requeueInParent(path2), path2.skip();
        }, AssignmentExpression: { exit(path2) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path2.node)) return;
          seen.add(path2.node);
          const left = path2.get("left");
          if (!left.isMemberExpression()) if (left.isIdentifier()) {
            const localName = left.node.name;
            if (scope.getBinding(localName) !== path2.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
              const assignment = path2.node;
              importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]));
              const { operator } = assignment;
              let newExpr;
              newExpr = "=" === operator ? assignment : "&&=" === operator || "||=" === operator || "??=" === operator ? _core.types.assignmentExpression("=", assignment.left, _core.types.logicalExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)) : _core.types.assignmentExpression("=", assignment.left, _core.types.binaryExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)), path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, newExpr, path2.scope)), requeueInParent(path2), path2.skip();
            }
          } else {
            const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path2.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
            id && (path2.node.right = _core.types.sequenceExpression([path2.node.right, buildImportThrow(id)]));
            const items = [];
            if (programScopeIds.forEach((localName) => {
              const exportedNames = exported.get(localName) || [];
              exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path2.scope));
            }), items.length > 0) {
              let node = _core.types.sequenceExpression(items);
              path2.parentPath.isExpressionStatement() && (node = _core.types.expressionStatement(node), node._blockHoist = path2.parentPath.node._blockHoist);
              requeueInParent(path2.insertAfter(node)[0]);
            }
          }
        } }, ForXStatement(path2) {
          const { scope, node } = path2, { left } = node, { exported, imported, scope: programScope } = this;
          if (!_core.types.isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path2.get("body").scope;
            for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left))) programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName) return;
            path2.ensureBlock();
            const bodyPath = path2.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path2.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))])), scope.registerDeclaration(path2.get("left")), didTransformExport && bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath) {
          rewriteThisVisitor || (rewriteThisVisitor = _traverse.visitors.environmentVisitor({ ThisExpression(path2) {
            path2.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), true));
          } }), rewriteThisVisitor.noScope = true);
          (0, _traverse.default)(programPath.node, rewriteThisVisitor);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        let rewriteThisVisitor;
      }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(callee, thisNode, args, optional) {
          return 1 === args.length && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.declare = declare, exports3.declarePreset = void 0;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2)) throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2) throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version, range: range2 });
          }(range, api.version);
        } };
        function declare(builder) {
          return (api, options, dirname3) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              api[name] || (null != clonedApi || (clonedApi = copyApiObject(api)), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname3);
          };
        }
        Object.assign(apiPolyfills, { targets: () => () => ({}), assumption: () => () => {
        }, addExternalDependency: () => () => {
        } });
        exports3.declarePreset = declare;
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || hasOwnProperty.call(proto, "version") && hasOwnProperty.call(proto, "transform") && hasOwnProperty.call(proto, "template") && hasOwnProperty.call(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
      }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        const { assignmentExpression, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _core.types;
        exports3.environmentVisitor = _traverse.visitors.environmentVisitor({}), exports3.skipAllButComputedKey = function(path2) {
          path2.skip(), path2.node.computed && path2.context.maybeQueue(path2.get("key"));
        };
        const visitor = _traverse.visitors.environmentVisitor({ Super(path2, state) {
          const { node, parentPath } = path2;
          parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
        } }), unshadowSuperBindingVisitor = _traverse.visitors.environmentVisitor({ Scopable(path2, { refName }) {
          const binding = path2.scope.getOwnBinding(refName);
          binding && binding.identifier.name === refName && path2.scope.rename(refName);
        } }), specHandlers = { memoise(superMember, count) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed) return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
        }, _getPrototypeOfExpression() {
          const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
        }, get(superMember) {
          const objectRef = cloneNode(this.getObjectRef());
          return callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
        }, _call(superMember, args, optional) {
          const objectRef = cloneNode(this.getObjectRef());
          let argsNode;
          argsNode = 1 === args.length && _core.types.isSpreadElement(args[0]) && (_core.types.isIdentifier(args[0].argument) || _core.types.isArrayExpression(args[0].argument)) ? args[0].argument : _core.types.arrayExpression(args);
          const call = _core.types.callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), _core.types.numericLiteral(2 | (this.isStatic || this.isPrivateMethod ? 0 : 1))]);
          return optional ? _core.types.optionalCallExpression(call, [argsNode], true) : callExpression(call, [argsNode]);
        }, set(superMember, value2) {
          const objectRef = cloneNode(this.getObjectRef());
          return callExpression(this.file.addHelper("superPropSet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), value2, thisExpression(), _core.types.numericLiteral(superMember.isInStrictMode() ? 1 : 0), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          return this._call(superMember, args, false);
        }, optionalCall(superMember, args) {
          return this._call(superMember, args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, specHandlers_old = { memoise(superMember, count) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed) return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
        }, _getPrototypeOfExpression() {
          const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
        }, get(superMember) {
          return this._get(superMember);
        }, _get(superMember) {
          const proto = this._getPrototypeOfExpression();
          return callExpression(this.file.addHelper("get"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), thisExpression()]);
        }, set(superMember, value2) {
          const proto = this._getPrototypeOfExpression();
          return callExpression(this.file.addHelper("set"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), value2, thisExpression(), _core.types.booleanLiteral(superMember.isInStrictMode())]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember), cloneNode(thisExpression()), args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
          const { property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
        }, get(superMember) {
          const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
          let object;
          var _getSuperRef, _getSuperRef2;
          isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
          return memberExpression(object, prop, computed);
        }, set(superMember, value2) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
        }, destructureSet(superMember) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return memberExpression(thisExpression(), prop, computed);
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
        } });
        exports3.default = class {
          constructor(opts) {
            var _opts$constantSuper;
            const path2 = opts.methodPath;
            this.methodPath = path2, this.isDerivedConstructor = path2.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path2.isObjectMethod() || path2.node.static || (null == path2.isStaticBlock ? void 0 : path2.isStaticBlock()), this.isPrivateMethod = path2.isPrivate() && path2.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
          }
          getObjectRef() {
            return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
          }
          getSuperRef() {
            return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : void 0;
          }
          replace() {
            const { methodPath } = this;
            this.opts.refToPreserve && methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
            const handler = this.constantSuper ? looseHandlers : this.file.availableHelper("superPropSet") ? specHandlers : specHandlers_old;
            visitor.shouldSkip = (path2) => {
              if (path2.parentPath === methodPath && ("decorators" === path2.parentKey || "key" === path2.parentKey)) return true;
            }, (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler.get }, handler));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = function(path2, bindingNames) {
          var _arguments$;
          path2.traverse(simpleAssignmentVisitor, { scope: path2.scope, bindingNames, seen: /* @__PURE__ */ new WeakSet(), includeUpdateExpression: null == (_arguments$ = arguments[2]) || _arguments$ });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t, simpleAssignmentVisitor = { AssignmentExpression: { exit(path2) {
          const { scope, seen, bindingNames } = this;
          if ("=" === path2.node.operator) return;
          if (seen.has(path2.node)) return;
          seen.add(path2.node);
          const left = path2.get("left");
          if (!left.isIdentifier()) return;
          const localName = left.node.name;
          if (!bindingNames.has(localName)) return;
          if (scope.getBinding(localName) !== path2.scope.getBinding(localName)) return;
          const operator = path2.node.operator.slice(0, -1);
          LOGICAL_OPERATORS.includes(operator) ? path2.replaceWith(logicalExpression(operator, path2.node.left, assignmentExpression("=", cloneNode(path2.node.left), path2.node.right))) : (path2.node.right = binaryExpression(operator, cloneNode(path2.node.left), path2.node.right), path2.node.operator = "=");
        } } };
        simpleAssignmentVisitor.UpdateExpression = { exit(path2) {
          if (!this.includeUpdateExpression) return;
          const { scope, bindingNames } = this, arg = path2.get("argument");
          if (!arg.isIdentifier()) return;
          const localName = arg.node.name;
          if (bindingNames.has(localName) && scope.getBinding(localName) === path2.scope.getBinding(localName)) if (path2.parentPath.isExpressionStatement() && !path2.isCompletionRecord()) {
            const operator = "++" === path2.node.operator ? "+=" : "-=";
            path2.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
          } else if (path2.node.prefix) path2.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path2.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
          else {
            const old = path2.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
            path2.scope.push({ id: old });
            const binary = binaryExpression(path2.node.operator[0], identifier(varName), numericLiteral(1));
            path2.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isTransparentExprWrapper = isTransparentExprWrapper, exports3.skipTransparentExprWrapperNodes = function(node) {
          for (; isTransparentExprWrapper(node); ) node = node.expression;
          return node;
        }, exports3.skipTransparentExprWrappers = function(path2) {
          for (; isTransparentExprWrapper(path2.node); ) path2 = path2.get("expression");
          return path2;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
        function isTransparentExprWrapper(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
        }
      }, "./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.readCodePoint = readCodePoint, exports3.readInt = readInt, exports3.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        };
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n2;
          return { n: n2, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n2 && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n2, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i2 = 0, e = null == len ? 1 / 0 : len; i2 < e; ++i2) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isIdentifierChar = isIdentifierChar, exports3.isIdentifierName = function(name) {
          let isFirst = true;
          for (let i2 = 0; i2 < name.length; i2++) {
            let cp = name.charCodeAt(i2);
            if (55296 == (64512 & cp) && i2 + 1 < name.length) {
              const trail = name.charCodeAt(++i2);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            if (isFirst) {
              if (isFirst = false, !isIdentifierStart(cp)) return false;
            } else if (!isIdentifierChar(cp)) return false;
          }
          return !isFirst;
        }, exports3.isIdentifierStart = isIdentifierStart;
        let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          let pos = 65536;
          for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
            if (pos += set[i2], pos > code) return false;
            if (pos += set[i2 + 1], pos >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "isIdentifierChar", { enumerable: true, get: function() {
          return _identifier.isIdentifierChar;
        } }), Object.defineProperty(exports3, "isIdentifierName", { enumerable: true, get: function() {
          return _identifier.isIdentifierName;
        } }), Object.defineProperty(exports3, "isIdentifierStart", { enumerable: true, get: function() {
          return _identifier.isIdentifierStart;
        } }), Object.defineProperty(exports3, "isKeyword", { enumerable: true, get: function() {
          return _keyword.isKeyword;
        } }), Object.defineProperty(exports3, "isReservedWord", { enumerable: true, get: function() {
          return _keyword.isReservedWord;
        } }), Object.defineProperty(exports3, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        } }), Object.defineProperty(exports3, "isStrictBindReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindReservedWord;
        } }), Object.defineProperty(exports3, "isStrictReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictReservedWord;
        } });
        var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isKeyword = function(word) {
          return keywords.has(word);
        }, exports3.isReservedWord = isReservedWord, exports3.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports3.isStrictBindReservedWord = function(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }, exports3.isStrictReservedWord = isStrictReservedWord;
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.findSuggestion = function(str, arr) {
          const distances = arr.map((el) => function(a2, b) {
            let i2, j, t2 = [], u2 = [];
            const m2 = a2.length, n2 = b.length;
            if (!m2) return n2;
            if (!n2) return m2;
            for (j = 0; j <= n2; j++) t2[j] = j;
            for (i2 = 1; i2 <= m2; i2++) {
              for (u2 = [i2], j = 1; j <= n2; j++) u2[j] = a2[i2 - 1] === b[j - 1] ? t2[j - 1] : min(t2[j - 1], t2[j], u2[j - 1]) + 1;
              t2 = u2;
            }
            return u2[n2];
          }(el, str));
          return arr[distances.indexOf(min(...distances))];
        };
        const { min } = Math;
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "OptionValidator", { enumerable: true, get: function() {
          return _validator.OptionValidator;
        } }), Object.defineProperty(exports3, "findSuggestion", { enumerable: true, get: function() {
          return _findSuggestion.findSuggestion;
        } });
        var _validator = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.OptionValidator = void 0;
        var _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
        exports3.OptionValidator = class {
          constructor(descriptor) {
            this.descriptor = descriptor;
          }
          validateTopLevelOptions(options, TopLevelOptionShape) {
            const validOptionNames = Object.keys(TopLevelOptionShape);
            for (const option of Object.keys(options)) if (!validOptionNames.includes(option)) throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
          }
          validateBooleanOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("boolean" == typeof value2, `'${name}' option must be a boolean.`), value2);
          }
          validateStringOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("string" == typeof value2, `'${name}' option must be a string.`), value2);
          }
          invariant(condition, message) {
            if (!condition) throw new Error(this.formatMessage(message));
          }
          formatMessage(message) {
            return `${this.descriptor}: ${message}`;
          }
        };
      }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        function helper(minVersion, source, metadata) {
          return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }), metadata });
        }
        const helpers = exports3.default = { __proto__: null, OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", { globals: [], locals: { _OverloadYield: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_OverloadYield", dependencies: {} }), applyDecoratedDescriptor: helper("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', { globals: ["Object"], locals: { _applyDecoratedDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_applyDecoratedDescriptor", dependencies: {} }), applyDecs2311: helper("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("Attempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not supported yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["field","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', { globals: ["Symbol", "Object", "TypeError", "Error"], locals: { applyDecs2311: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2311", dependencies: { checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"] } }), arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", { globals: ["Array"], locals: { _arrayLikeToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayLikeToArray", dependencies: {} }), arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", { globals: ["Array"], locals: { _arrayWithHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithHoles", dependencies: {} }), arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", { globals: ["Array"], locals: { _arrayWithoutHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithoutHoles", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"] } }), assertClassBrand: helper("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}', { globals: ["TypeError"], locals: { _assertClassBrand: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertClassBrand", dependencies: {} }), assertThisInitialized: helper("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}`, { globals: ["ReferenceError"], locals: { _assertThisInitialized: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertThisInitialized", dependencies: {} }), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', { globals: ["Promise", "Symbol"], locals: { _asyncGeneratorDelegate: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_asyncGeneratorDelegate", dependencies: { OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"] } }), asyncIterator: helper("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', { globals: ["Symbol", "TypeError", "Object", "Promise"], locals: { _asyncIterator: ["body.0.id"], AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expressions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: [], exportName: "_asyncIterator", dependencies: {} }), asyncToGenerator: helper("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,"throw",n)}_next(void 0)}))}}', { globals: ["Promise"], locals: { asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"], _asyncToGenerator: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_asyncToGenerator", dependencies: {} }), awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", { globals: [], locals: { _awaitAsyncGenerator: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_awaitAsyncGenerator", dependencies: { OverloadYield: ["body.0.body.body.0.argument.callee"] } }), callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", { globals: ["Reflect"], locals: { _callSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_callSuper", dependencies: { getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"], possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"] } }), checkInRHS: helper("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`, { globals: ["Object", "TypeError"], locals: { _checkInRHS: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkInRHS", dependencies: {} }), checkPrivateRedeclaration: helper("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}', { globals: ["TypeError"], locals: { _checkPrivateRedeclaration: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkPrivateRedeclaration", dependencies: {} }), classCallCheck: helper("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}', { globals: ["TypeError"], locals: { _classCallCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCallCheck", dependencies: {} }), classNameTDZError: helper("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in computed property keys.')}`, { globals: ["ReferenceError"], locals: { _classNameTDZError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classNameTDZError", dependencies: {} }), classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", { globals: [], locals: { _classPrivateFieldGet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", { globals: [], locals: { _classPrivateFieldInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateFieldLooseBase: helper("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}', { globals: ["TypeError"], locals: { _classPrivateFieldBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldBase", dependencies: {} }), classPrivateFieldLooseKey: helper("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', { globals: [], locals: { id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.right.argument"], _classPrivateFieldKey: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldKey", dependencies: {} }), classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", { globals: [], locals: { _classPrivateFieldSet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", { globals: [], locals: { _classPrivateGetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateGetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", { globals: [], locals: { _classPrivateMethodInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", { globals: [], locals: { _classPrivateSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateSetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", { globals: [], locals: { _classStaticPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", { globals: ["Reflect"], locals: { _construct: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_construct", dependencies: { isNativeReflectConstruct: ["body.0.body.body.0.test.callee"], setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"] } }), createClass: helper("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', { globals: ["Object"], locals: { _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.1.right.callee"], _createClass: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createClass", dependencies: { toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"] } }), createForOfIteratorHelper: helper("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelper", dependencies: { unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"] } }), createForOfIteratorHelperLoose: helper("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelperLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelperLoose", dependencies: { unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"] } }), createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", { globals: ["Reflect"], locals: { _createSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"], possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"] } }), decorate: helper("7.1.5", `function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"===o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element descriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError('An element descriptor\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+r+'"');var t=toPropertyKey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var o=e.descriptor;this.disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?this.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),this.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a field descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError('A class descriptor\\'s .kind property must be "class", but a decorator created a class descriptor with .kind "'+r+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placement","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descriptor"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+" can't have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kind?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.decorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods ("+o.key+") can't be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decorators can't be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new TypeError("Expected '"+r+"' to be a function");return t}`, { globals: ["Object", "TypeError", "Symbol", "ReferenceError"], locals: { _decorate: ["body.0.id"], _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"], _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"], _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"], _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"], _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"], _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.consequent.test.right.callee"], _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"] }, exportBindingAssignments: [], exportName: "_decorate", dependencies: { toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"], toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"] } }), defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", { globals: ["Object"], locals: { _defaults: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defaults", dependencies: {} }), defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", { globals: ["Object"], locals: { _defineAccessor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineAccessor", dependencies: {} }), defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", { globals: ["Object"], locals: { _defineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineProperty", dependencies: { toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"] } }), extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", { globals: ["Object"], locals: { _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_extends", dependencies: {} }), get: helper("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}', { globals: ["Reflect", "Object"], locals: { _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_get", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"] } }), getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", { globals: ["Object"], locals: { _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_getPrototypeOf", dependencies: {} }), identity: helper("7.17.0", "function _identity(t){return t}", { globals: [], locals: { _identity: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_identity", dependencies: {} }), importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", { globals: ["Proxy", "Reflect"], locals: { _importDeferProxy: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_importDeferProxy", dependencies: {} }), inherits: helper("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', { globals: ["TypeError", "Object"], locals: { _inherits: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inherits", dependencies: { setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"] } }), inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", { globals: ["Object"], locals: { _inheritsLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inheritsLoose", dependencies: { setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"] } }), initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", { globals: ["Object"], locals: { _initializerDefineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerDefineProperty", dependencies: {} }), initializerWarningHelper: helper("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.")}', { globals: ["Error"], locals: { _initializerWarningHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerWarningHelper", dependencies: {} }), instanceof: helper("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}', { globals: ["Symbol"], locals: { _instanceof: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_instanceof", dependencies: {} }), interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", { globals: [], locals: { _interopRequireDefault: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_interopRequireDefault", dependencies: {} }), interopRequireWildcard: helper("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}', { globals: ["WeakMap", "Object"], locals: { _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"], _interopRequireWildcard: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_interopRequireWildcard", dependencies: {} }), isNativeFunction: helper("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(n){return"function"==typeof t}}', { globals: ["Function"], locals: { _isNativeFunction: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_isNativeFunction", dependencies: {} }), isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", { globals: ["Boolean", "Reflect"], locals: { _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.callee"], exportName: "_isNativeReflectConstruct", dependencies: {} }), iterableToArray: helper("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}', { globals: ["Symbol", "Array"], locals: { _iterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArray", dependencies: {} }), iterableToArrayLimit: helper("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}', { globals: ["Symbol", "Object"], locals: { _iterableToArrayLimit: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArrayLimit", dependencies: {} }), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', { globals: ["Symbol", "Array"], locals: { REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.value", "body.1.body.body.0.expression.right.left"], _createRawReactElement: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createRawReactElement", dependencies: {} }), maybeArrayLike: helper("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', { globals: ["Array"], locals: { _maybeArrayLike: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_maybeArrayLike", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"] } }), newArrowCheck: helper("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', { globals: ["TypeError"], locals: { _newArrowCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_newArrowCheck", dependencies: {} }), nonIterableRest: helper("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableRest: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableRest", dependencies: {} }), nonIterableSpread: helper("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableSpread", dependencies: {} }), nullishReceiverError: helper("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}', { globals: ["TypeError"], locals: { _nullishReceiverError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nullishReceiverError", dependencies: {} }), objectDestructuringEmpty: helper("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+t)}', { globals: ["TypeError"], locals: { _objectDestructuringEmpty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectDestructuringEmpty", dependencies: {} }), objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", { globals: ["Object"], locals: { ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"], _objectSpread2: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_objectSpread2", dependencies: { defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"] } }), objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", { globals: ["Object"], locals: { _objectWithoutProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutProperties", dependencies: { objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"] } }), objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", { globals: [], locals: { _objectWithoutPropertiesLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutPropertiesLoose", dependencies: {} }), possibleConstructorReturn: helper("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', { globals: ["TypeError"], locals: { _possibleConstructorReturn: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_possibleConstructorReturn", dependencies: { assertThisInitialized: ["body.0.body.body.2.argument.callee"] } }), readOnlyError: helper("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, { globals: ["TypeError"], locals: { _readOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_readOnlyError", dependencies: {} }), regeneratorRuntime: helper("7.18.0", `function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}`, { globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"], locals: { _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_regeneratorRuntime", dependencies: {} }), set: helper("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', { globals: ["Reflect", "Object", "TypeError"], locals: { set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.body.0.argument.expressions.0.left"], _set: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_set", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"], defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"] } }), setFunctionName: helper("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.defineProperty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', { globals: ["Object"], locals: { setFunctionName: ["body.0.id"] }, exportBindingAssignments: [], exportName: "setFunctionName", dependencies: {} }), setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", { globals: ["Object"], locals: { _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_setPrototypeOf", dependencies: {} }), skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", { globals: [], locals: { _skipFirstGeneratorNext: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_skipFirstGeneratorNext", dependencies: {} }), slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", { globals: [], locals: { _slicedToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_slicedToArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", { globals: [], locals: { _superPropBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropBase", dependencies: { getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"] } }), superPropGet: helper("7.25.0", 'function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&"function"==typeof p?function(t){return p.apply(e,t)}:p}', { globals: [], locals: { _superPropGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropGet", dependencies: { get: ["body.0.body.body.0.declarations.0.init.callee"], getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"] } }), superPropSet: helper("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", { globals: [], locals: { _superPropSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropSet", dependencies: { set: ["body.0.body.body.0.argument.callee"], getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"] } }), taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", { globals: ["Object"], locals: { _taggedTemplateLiteral: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteral", dependencies: {} }), taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", { globals: [], locals: { _taggedTemplateLiteralLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteralLoose", dependencies: {} }), tdz: helper("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', { globals: ["ReferenceError"], locals: { _tdzError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_tdzError", dependencies: {} }), temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", { globals: [], locals: { _temporalRef: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalRef", dependencies: { temporalUndefined: ["body.0.body.body.0.argument.test.right"], tdz: ["body.0.body.body.0.argument.consequent.callee"] } }), temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", { globals: [], locals: { _temporalUndefined: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalUndefined", dependencies: {} }), toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", { globals: [], locals: { _toArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", { globals: [], locals: { _toConsumableArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toConsumableArray", dependencies: { arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableSpread: ["body.0.body.body.0.argument.right.callee"] } }), toPrimitive: helper("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}', { globals: ["Symbol", "TypeError", "String", "Number"], locals: { toPrimitive: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPrimitive", dependencies: {} }), toPropertyKey: helper("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', { globals: [], locals: { toPropertyKey: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPropertyKey", dependencies: { toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"] } }), toSetter: helper("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,t.apply(n,e)}})}', { globals: ["Object"], locals: { _toSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toSetter", dependencies: {} }), typeof: helper("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}', { globals: ["Symbol"], locals: { _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_typeof", dependencies: {} }), unsupportedIterableToArray: helper("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', { globals: ["Array"], locals: { _unsupportedIterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_unsupportedIterableToArray", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"] } }), usingCtx: helper("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}', { globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"], locals: { _usingCtx: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_usingCtx", dependencies: {} }), wrapAsyncGenerator: helper("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', { globals: ["Promise", "Symbol"], locals: { _wrapAsyncGenerator: ["body.0.id"], AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.object.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.expressions.3.left.object.object"] }, exportBindingAssignments: [], exportName: "_wrapAsyncGenerator", dependencies: { OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"] } }), wrapNativeSuper: helper("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', { globals: ["Map", "TypeError", "Object"], locals: { _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"], exportName: "_wrapNativeSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"], setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"], isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"], construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"] } }), wrapRegExp: helper("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', { globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"], locals: { _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_wrapRegExp", dependencies: { setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"], inherits: ["body.0.body.body.4.argument.expressions.0.callee"] } }), writeOnlyError: helper("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, { globals: ["TypeError"], locals: { _writeOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_writeOnlyError", dependencies: {} }) };
        Object.assign(helpers, { AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", { globals: [], locals: { _AwaitValue: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_AwaitValue", dependencies: {} }), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', { globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"], locals: { old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"], old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expressions.3.callee"], old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"], old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"], old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"], old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"], old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"], old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"], old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"], old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"], old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"], old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressions.1.callee"], old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"], applyDecs: ["body.13.id"] }, exportBindingAssignments: [], exportName: "applyDecs", dependencies: { setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"], applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee.left"], applyDecs2203: ["body.2.id"] }, exportBindingAssignments: [], exportName: "applyDecs2203", dependencies: {} }), applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2203R", dependencies: { setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2301: helper("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2301", dependencies: { checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2305: helper("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeError(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!==P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method")+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', { globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"], locals: { applyDecs2305: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2305", dependencies: { checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"] } }), classApplyDescriptorDestructureSet: helper("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");return t}', { globals: ["TypeError"], locals: { _classApplyDescriptorDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorDestructureSet", dependencies: {} }), classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", { globals: [], locals: { _classApplyDescriptorGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorGet", dependencies: {} }), classApplyDescriptorSet: helper("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=l}}', { globals: ["TypeError"], locals: { _classApplyDescriptorSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorSet", dependencies: {} }), classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", { globals: [], locals: { _classCheckPrivateStaticAccess: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticAccess", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.callee"] } }), classCheckPrivateStaticFieldDescriptor: helper("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError("attempted to "+e+" private static field before its declaration")}', { globals: ["TypeError"], locals: { _classCheckPrivateStaticFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticFieldDescriptor", dependencies: {} }), classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", { globals: [], locals: { _classExtractFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classExtractFieldDescriptor", dependencies: { classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"] } }), classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", { globals: [], locals: { _classPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", { globals: [], locals: { _classPrivateFieldGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", { globals: [], locals: { _classPrivateFieldSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", { globals: [], locals: { _classPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), classPrivateMethodSet: helper("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', { globals: ["TypeError"], locals: { _classPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodSet", dependencies: {} }), classStaticPrivateFieldDestructureSet: helper("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', { globals: [], locals: { _classStaticPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecGet: helper("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', { globals: [], locals: { _classStaticPrivateFieldSpecGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecSet: helper("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', { globals: [], locals: { _classStaticPrivateFieldSpecSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateMethodSet: helper("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static private field")}', { globals: ["TypeError"], locals: { _classStaticPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodSet", dependencies: {} }), defineEnumerableProperties: helper("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}', { globals: ["Object"], locals: { _defineEnumerableProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineEnumerableProperties", dependencies: {} }), dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', { globals: ["SuppressedError", "Error", "Object", "Promise"], locals: { dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expressions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"], _dispose: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_dispose", dependencies: {} }), objectSpread: helper("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', { globals: ["Object"], locals: { _objectSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectSpread", dependencies: { defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"] } }), using: helper("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:n,d:r,a:e}),n}', { globals: ["Object", "TypeError", "Symbol"], locals: { _using: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_using", dependencies: {} }) });
      }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0, exports3.get = get, exports3.getDependencies = function(name) {
          return loadHelper(name).getDependencies();
        }, exports3.list = void 0, exports3.minVersion = function(name) {
          return loadHelper(name).minVersion;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js");
        const { cloneNode, identifier } = _t;
        function deep(obj, path2, value2) {
          try {
            const parts = path2.split(".");
            let last = parts.shift();
            for (; parts.length > 0; ) obj = obj[last], last = parts.shift();
            if (!(arguments.length > 2)) return obj[last];
            obj[last] = value2;
          } catch (e) {
            throw e.message += ` (when accessing ${path2})`, e;
          }
        }
        const helperData = /* @__PURE__ */ Object.create(null);
        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpersGenerated.default[name];
            if (!helper) throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
            helperData[name] = { minVersion: helper.minVersion, build(getDependency, bindingName, localBindings, adjustAst) {
              const ast = helper.ast();
              return function(ast2, metadata, bindingName2, localBindings2, getDependency2, adjustAst2) {
                const { locals, dependencies, exportBindingAssignments, exportName } = metadata, bindings = new Set(localBindings2 || []);
                bindingName2 && bindings.add(bindingName2);
                for (const [name2, paths] of (Object.entries || ((o) => Object.keys(o).map((k) => [k, o[k]])))(locals)) {
                  let newName = name2;
                  if (bindingName2 && name2 === exportName) newName = bindingName2;
                  else for (; bindings.has(newName); ) newName = "_" + newName;
                  if (newName !== name2) for (const path2 of paths) deep(ast2, path2, identifier(newName));
                }
                for (const [name2, paths] of (Object.entries || ((o) => Object.keys(o).map((k) => [k, o[k]])))(dependencies)) {
                  const ref = "function" == typeof getDependency2 && getDependency2(name2) || identifier(name2);
                  for (const path2 of paths) deep(ast2, path2, cloneNode(ref));
                }
                null == adjustAst2 || adjustAst2(ast2, exportName, (map) => {
                  exportBindingAssignments.forEach((p2) => deep(ast2, p2, map(deep(ast2, p2))));
                });
              }(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst), { nodes: ast.body, globals: helper.metadata.globals };
            }, getDependencies: () => Object.keys(helper.metadata.dependencies) };
          }
          return helperData[name];
        }
        function get(name, getDependency, bindingName, localBindings, adjustAst) {
          if ("object" == typeof bindingName) {
            const id = bindingName;
            bindingName = "Identifier" === (null == id ? void 0 : id.type) ? id.name : void 0;
          }
          return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
        }
        exports3.ensure = (name) => {
          loadHelper(name);
        };
        exports3.list = Object.keys(_helpersGenerated.default).map((name) => name.replace(/^_/, ""));
        exports3.default = get;
      }, "./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function _objectWithoutPropertiesLoose(r2, e) {
          if (null == r2) return {};
          var t2 = {};
          for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
            if (e.includes(n2)) continue;
            t2[n2] = r2[n2];
          }
          return t2;
        }
        Object.defineProperty(exports3, "__esModule", { value: true });
        class Position {
          constructor(line, col, index2) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index2;
          }
        }
        class SourceLocation {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position, columnOffset) {
          const { line, column, index: index2 } = position;
          return new Position(line, column + columnOffset, index2 + columnOffset);
        }
        const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = (node) => "UpdateExpression" === node.type ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.', DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`, ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.", ImportBindingIsString: ({ importName: importName2 }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName2}" as foo }\`?`, ImportCallArity: "`import()` requires exactly one or two arguments.", ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is disallowed as a lexically bound name.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.', StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationExport: "Using declaration cannot be exported.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded = ["message"];
        function defineHidden(obj, key, value2) {
          Object.defineProperty(obj, key, { enumerable: false, configurable: true, value: value2 });
        }
        function toParseErrorConstructor({ toMessage, code: code2, reasonCode, syntaxPlugin }) {
          const hasMissingPlugin = "MissingPlugin" === reasonCode || "MissingOneOfPlugins" === reasonCode;
          {
            const oldReasonCodes = { AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter", AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter", SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter", SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType" };
            oldReasonCodes[reasonCode] && (reasonCode = oldReasonCodes[reasonCode]);
          }
          return function constructor(loc, details) {
            const error = new SyntaxError();
            return error.code = code2, error.reasonCode = reasonCode, error.loc = loc, error.pos = loc.index, error.syntaxPlugin = syntaxPlugin, hasMissingPlugin && (error.missingPlugin = details.missingPlugin), defineHidden(error, "clone", function(overrides = {}) {
              var _overrides$loc;
              const { line, column, index: index2 } = null != (_overrides$loc = overrides.loc) ? _overrides$loc : loc;
              return constructor(new Position(line, column, index2), Object.assign({}, details, overrides.details));
            }), defineHidden(error, "details", details), Object.defineProperty(error, "message", { configurable: true, get() {
              const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
              return this.message = message, message;
            }, set(value2) {
              Object.defineProperty(this, "message", { value: value2, writable: true });
            } }), error;
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument)) return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template3 = argument[reasonCode], _ref = "string" == typeof template3 ? { message: () => template3 } : "function" == typeof template3 ? { message: template3 } : template3, { message } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: "BABEL_PARSER_SYNTAX_ERROR", reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty: defineProperty2 } = Object, toUnenumerable = (object, key) => {
          object && defineProperty2(object, key, { enumerable: false, value: object[key] });
        };
        function toESTreeLocation(node) {
          return toUnenumerable(node.loc.start, "index"), toUnenumerable(node.loc.end, "index"), node;
        }
        class TokContext {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types = { brace: new TokContext("{"), j_oTag: new TokContext("<tag"), j_cTag: new TokContext("</tag"), j_expr: new TokContext("<tag>...</tag>", true) };
        types.template = new TokContext("`", true);
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$1 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$1.set(name, token), token;
        }
        function createBinop(name, binop) {
          return createToken(name, { beforeExpr: true, binop });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _defer: createKeywordLike("defer", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _source: createKeywordLike("source", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _using: createKeywordLike("using", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _satisfies: createKeywordLike("satisfies", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), placeholder: createToken("%%", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd") };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 133;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 133;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 137;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 129 && token <= 131;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types.template ? context.pop() : context.push(types.template);
        }, tokenTypes[143].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
        let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code2, set) {
          let pos = 65536;
          for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
            if (pos += set[i2], pos > code2) return false;
            if (pos += set[i2 + 1], pos >= code2) return true;
          }
          return false;
        }
        function isIdentifierStart(code2) {
          return code2 < 65 ? 36 === code2 : code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code2) {
          return code2 < 48 ? 36 === code2 : code2 < 58 || !(code2 < 65) && (code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        class Scope {
          constructor(flags) {
            this.flags = 0, this.names = /* @__PURE__ */ new Map(), this.firstLexicalName = "", this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inTopLevel() {
            return (1 & this.currentScope().flags) > 0;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && !(2 & flags);
          }
          get inStaticBlock() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (128 & flags) return true;
              if (451 & flags) return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType) {
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              let type = scope.names.get(name) || 0;
              16 & bindingType ? type |= 4 : (scope.firstLexicalName || (scope.firstLexicalName = name), type |= 2), scope.names.set(name, type), 8 & bindingType && this.maybeExportDefined(scope, name);
            } else if (4 & bindingType) for (let i2 = this.scopeStack.length - 1; i2 >= 0 && (scope = this.scopeStack[i2], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.names.set(name, 1 | (scope.names.get(name) || 0)), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i2) ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (!(1 & bindingType)) return false;
            if (8 & bindingType) return scope.names.has(name);
            const type = scope.names.get(name);
            return 16 & bindingType ? (2 & type) > 0 || !this.treatFunctionsAsVarInScope(scope) && (1 & type) > 0 : (2 & type) > 0 && !(8 & scope.flags && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (4 & type) > 0;
          }
          checkLocalExport(id) {
            const { name } = id;
            this.scopeStack[0].names.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (387 & flags) return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (451 & flags && !(4 & flags)) return flags;
            }
          }
        }
        class FlowScope extends Scope {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType) return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (super.isRedeclaredInScope(scope, name, bindingType)) return true;
            if (2048 & bindingType && !scope.declareFunctions.has(name)) {
              const type = scope.names.get(name);
              return (4 & type) > 0 || (2 & type) > 0;
            }
            return false;
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        class BaseParser {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          sourceToOffsetPos(sourcePos) {
            return sourcePos + this.startIndex;
          }
          offsetToSourcePos(offsetPos) {
            return offsetPos - this.startIndex;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig) return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName)) return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions)) if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key]) return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        }
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i2 = elements.length;
          for (; null === lastElement && i2 > 0; ) lastElement = elements[--i2];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        class CommentsParser extends BaseParser {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename);
            const { commentsLen } = this.state;
            this.comments.length !== commentsLen && (this.comments.length = commentsLen), this.comments.push(comment), this.state.commentsLen++;
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i2 = commentStackLength - 1;
            const lastCommentWS = commentStack[i2];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i2--);
            const { start: nodeStart } = node;
            for (; i2 >= 0; i2--) {
              const commentWS = commentStack[i2], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i2, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode) null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
              void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
            }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1)) switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default:
                  setInnerComments(node, comments);
              }
              else setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i2 = commentStack.length - 1; i2 >= 0; i2--) this.finalizeComment(commentStack[i2]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length) return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          resetPreviousIdentifierLeadingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            0 !== length && (commentStack[length - 1].trailingNode === node ? commentStack[length - 1].trailingNode = null : length >= 2 && commentStack[length - 2].trailingNode === node && (commentStack[length - 2].trailingNode = null));
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i2 = commentStackLength - 1;
            for (; i2 >= 0; i2--) {
              const commentWS = commentStack[i2], commentEnd = commentWS.end;
              if (commentWS.start === end) commentWS.leadingNode = node;
              else if (commentEnd === start) commentWS.trailingNode = node;
              else if (commentEnd < start) break;
            }
          }
        }
        const lineBreakG = new RegExp(/\r\n|[\r\n\u2028\u2029]/.source, "g");
        function isNewLine(code2) {
          switch (code2) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        function hasNewLine(input, start, end) {
          for (let i2 = start; i2 < end; i2++) if (isNewLine(input.charCodeAt(i2))) return true;
          return false;
        }
        const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
        function isWhitespace(code2) {
          switch (code2) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.flags = 1024, this.startIndex = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [types.brace], this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          get strict() {
            return (1 & this.flags) > 0;
          }
          set strict(v2) {
            v2 ? this.flags |= 1 : this.flags &= -2;
          }
          init({ strictMode, sourceType, startIndex, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.startIndex = startIndex, this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
          }
          get maybeInArrowParameters() {
            return (2 & this.flags) > 0;
          }
          set maybeInArrowParameters(v2) {
            v2 ? this.flags |= 2 : this.flags &= -3;
          }
          get inType() {
            return (4 & this.flags) > 0;
          }
          set inType(v2) {
            v2 ? this.flags |= 4 : this.flags &= -5;
          }
          get noAnonFunctionType() {
            return (8 & this.flags) > 0;
          }
          set noAnonFunctionType(v2) {
            v2 ? this.flags |= 8 : this.flags &= -9;
          }
          get hasFlowComment() {
            return (16 & this.flags) > 0;
          }
          set hasFlowComment(v2) {
            v2 ? this.flags |= 16 : this.flags &= -17;
          }
          get isAmbientContext() {
            return (32 & this.flags) > 0;
          }
          set isAmbientContext(v2) {
            v2 ? this.flags |= 32 : this.flags &= -33;
          }
          get inAbstractClass() {
            return (64 & this.flags) > 0;
          }
          set inAbstractClass(v2) {
            v2 ? this.flags |= 64 : this.flags &= -65;
          }
          get inDisallowConditionalTypesContext() {
            return (128 & this.flags) > 0;
          }
          set inDisallowConditionalTypesContext(v2) {
            v2 ? this.flags |= 128 : this.flags &= -129;
          }
          get soloAwait() {
            return (256 & this.flags) > 0;
          }
          set soloAwait(v2) {
            v2 ? this.flags |= 256 : this.flags &= -257;
          }
          get inFSharpPipelineDirectBody() {
            return (512 & this.flags) > 0;
          }
          set inFSharpPipelineDirectBody(v2) {
            v2 ? this.flags |= 512 : this.flags &= -513;
          }
          get canStartJSXElement() {
            return (1024 & this.flags) > 0;
          }
          set canStartJSXElement(v2) {
            v2 ? this.flags |= 1024 : this.flags &= -1025;
          }
          get containsEsc() {
            return (2048 & this.flags) > 0;
          }
          set containsEsc(v2) {
            v2 ? this.flags |= 2048 : this.flags &= -2049;
          }
          get hasTopLevelAwait() {
            return (4096 & this.flags) > 0;
          }
          set hasTopLevelAwait(v2) {
            v2 ? this.flags |= 4096 : this.flags &= -4097;
          }
          curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
          }
          clone() {
            const state = new State();
            return state.flags = this.flags, state.startIndex = this.startIndex, state.curLine = this.curLine, state.lineStart = this.lineStart, state.startLoc = this.startLoc, state.endLoc = this.endLoc, state.errors = this.errors.slice(), state.potentialArrowAt = this.potentialArrowAt, state.noArrowAt = this.noArrowAt.slice(), state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), state.topicContext = this.topicContext, state.labels = this.labels.slice(), state.commentsLen = this.commentsLen, state.commentStack = this.commentStack.slice(), state.pos = this.pos, state.type = this.type, state.value = this.value, state.start = this.start, state.end = this.end, state.lastTokEndLoc = this.lastTokEndLoc, state.lastTokStartLoc = this.lastTokStartLoc, state.context = this.context.slice(), state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, state.strictErrors = this.strictErrors, state.tokensLength = this.tokensLength, state;
          }
        }
        var _isDigit = function(code2) {
          return code2 >= 48 && code2 <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code2;
              return { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code2 ? null : String.fromCharCode(code2));
            }
            case 117: {
              let code2;
              return { code: code2, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code2 ? null : String.fromCodePoint(code2));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n2;
          return { n: n2, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n2 && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n2, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i2 = 0, e = null == len ? 1 / 0 : len; i2 < e; ++i2) {
            const code2 = input.charCodeAt(pos);
            let val;
            if (95 !== code2 || "bail" === allowNumSeparator) {
              if (val = code2 >= 97 ? code2 - 97 + 10 : code2 >= 65 ? code2 - 65 + 10 : _isDigit(code2) ? code2 - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code2;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code2 && code2 > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code: code2, pos };
        }
        function buildPosition(pos, lineStart, curLine) {
          return new Position(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token {
          constructor(state) {
            const startIndex = state.startIndex || 0;
            this.type = state.type, this.value = state.value, this.start = startIndex + state.start, this.end = startIndex + state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
          }
        }
        class Tokenizer extends CommentsParser {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), { radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.comments = [], this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          nextTokenInLineStart() {
            return this.nextTokenInLineStartSince(this.state.pos);
          }
          nextTokenInLineStartSince(pos) {
            return skipWhiteSpaceInLine.lastIndex = pos, skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
          }
          lookaheadInLineCharCode() {
            return this.input.charCodeAt(this.nextTokenInLineStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at)), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(140) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment(commentEnd) {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
            if (-1 === end) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
            for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2; lineBreakG.test(this.input) && lineBreakG.lastIndex <= end; ) ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
            if (this.isLookahead) return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end + commentEnd.length), loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length) for (; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead) return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end), loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop: for (; this.state.pos < this.length; ) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch)) ++this.state.pos;
                  else if (45 === ch && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart)) break loop;
                    {
                      const comment = this.skipLineComment(3);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                    }
                  } else {
                    if (60 !== ch || this.inModule || !this.options.annexB) break loop;
                    {
                      const pos = this.state.pos;
                      if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3)) break loop;
                      {
                        const comment = this.skipLineComment(4);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                  }
              }
            }
            if (comments.length > 0) {
              const end = this.state.pos, commentWhitespace = { start: this.sourceToOffsetPos(spaceStart), end: this.sourceToOffsetPos(end), comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter()) return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57) throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else isIdentifierStart(next) ? (++this.state.pos, this.finishToken(139, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(139, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2) return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch) return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            const value2 = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value2), true;
          }
          readToken_mult_modulo(code2) {
            let type = 42 === code2 ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code2 && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width++, type = 37 === code2 ? 33 : 30), this.finishOp(type, width);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code2) {
              if (124 === code2) {
                if (62 === next) return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code2 ? 43 : 45, 1) : this.finishOp(30, 2);
            } else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code2 ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType) if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
              this.finishOp(37, 2);
              94 === this.input.codePointAt(this.state.pos) && this.unexpected();
            } else this.finishOp(44, 1);
            else this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code2 ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next) return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next) return 61 === code2 && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code2 ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code2) {
            switch (code2) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(2);
                } else ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(6);
                } else ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next) return void this.readRadixNumber(16);
                if (111 === next || 79 === next) return void this.readRadixNumber(8);
                if (98 === next || 66 === next) return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code2);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code2);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code2);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code2);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code2);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart(code2)) return void this.readWord(code2);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(code2) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
              const ch = this.input.charCodeAt(pos);
              if (isNewLine(ch)) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
              if (escaped) escaped = false;
              else {
                if (91 === ch) inClass = true;
                else if (93 === ch && inClass) inClass = false;
                else if (47 === ch && !inClass) break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp)) 118 === cp ? mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, nextPos());
              else {
                if (!isIdentifierChar(cp) && 92 !== cp) break;
                this.raise(Errors.MalformedRegExpFlags, nextPos());
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(138, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n: n2, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
            return this.state.pos = pos, n2;
          }
          readRadixNumber(radix) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), { radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next) ++this.state.pos, isBigInt = true;
            else if (109 === next) throw this.raise(Errors.InvalidDecimal, startLoc);
            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
            if (isBigInt) {
              const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(136, str);
            } else this.finishToken(135, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, this.state.curPosition());
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, startLoc), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, startLoc), ++this.state.pos, isBigInt = true), 109 === next) {
              this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, startLoc), ++this.state.pos;
              var isDecimal = true;
            }
            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt) return void this.finishToken(136, str);
            if (isDecimal) return void this.finishToken(137, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(135, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code: code2, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code2;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(134, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos))), 96 === this.input.codePointAt(pos) ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, at) {
            const index2 = at.index;
            this.state.strict && !this.state.strictErrors.has(index2) ? this.raise(toParseError, at) : this.state.strictErrors.set(index2, [toParseError, at]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch) break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, this.state.curPosition()), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, escStart), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$1.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(132, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, at, details = {}) {
            const error = toParseError(at instanceof Position ? at : at.loc.start, details);
            if (!this.options.errorRecovery) throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, at, details = {}) {
            const loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i2 = errors.length - 1; i2 >= 0; i2--) {
              const error = errors[i2];
              if (error.loc.index === pos) return errors[i2] = toParseError(loc, details);
              if (error.loc.index < pos) break;
            }
            return this.raise(toParseError, at, details);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, null != loc ? loc : this.state.startLoc, { expected: type ? tokenLabelName(type) : null });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName)) return true;
            throw this.raise(Errors.MissingPlugin, null != loc ? loc : this.state.startLoc, { missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name))) throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, buildPosition(pos, lineStart, curLine));
            };
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
              } else redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, loc, { identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack) if (classScope.privateNames.has(name)) return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
          }
        }
        class ExpressionScope {
          constructor(type = 0) {
            this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return 2 === this.type || 1 === this.type;
          }
          isCertainlyParameterDeclaration() {
            return 3 === this.type;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, at) {
            const index2 = at.index;
            this.declarationErrors.set(index2, [ParsingErrorClass, at]);
          }
          clearDeclarationError(index2) {
            this.declarationErrors.delete(index2);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, node) {
            const origin = node.loc.start, { stack } = this;
            let i2 = stack.length - 1, scope = stack[i2];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i2];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParameterBindingError(error, node) {
            const { stack } = this, scope = stack[stack.length - 1], origin = node.loc.start;
            if (scope.isCertainlyParameterDeclaration()) this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError(at) {
            const { stack } = this;
            let i2 = stack.length - 1, scope = stack[i2];
            for (; scope.canBeArrowParameterDeclaration(); ) 2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at), scope = stack[--i2];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, loc);
              let i2 = stack.length - 2, scope = stack[i2];
              for (; scope.canBeArrowParameterDeclaration(); ) scope.clearDeclarationError(loc.index), scope = stack[--i2];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (2 & this.currentFlags()) > 0;
          }
          get hasYield() {
            return (1 & this.currentFlags()) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags(isAsync, isGenerator) {
          return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
        }
        class UtilParser extends Tokenizer {
          addExtra(node, key, value2, enumerable = true) {
            if (!node) return;
            let { extra } = node;
            null == extra && (extra = {}, node.extra = extra), enumerable ? extra[key] = value2 : Object.defineProperty(extra, key, { enumerable, value: value2 });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError) throw this.raise(toParseError, this.state.startLoc);
              this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
          }
          hasFollowingLineBreak() {
            return hasNewLine(this.input, this.state.end, this.nextTokenStart());
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError) return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal) return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors) return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow) return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, doubleProtoLoc), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type) return function(node2) {
            return cloneIdentifier(node2);
          }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node(void 0, this.start, this.loc.start), keys2 = Object.keys(this);
          for (let i2 = 0, length = keys2.length; i2 < length; i2++) {
            const key = keys2[i2];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        class NodeUtils extends UtilParser {
          startNode() {
            const loc = this.state.startLoc;
            return new Node(this, loc.index, loc);
          }
          startNodeAt(loc) {
            return new Node(this, loc.index, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, startLoc) {
            node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.loc.start);
          }
        }
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: " ", iexcl: "¡", cent: "¢", pound: "£", curren: "¤", yen: "¥", brvbar: "¦", sect: "§", uml: "¨", copy: "©", ordf: "ª", laquo: "«", not: "¬", shy: "­", reg: "®", macr: "¯", deg: "°", plusmn: "±", sup2: "²", sup3: "³", acute: "´", micro: "µ", para: "¶", middot: "·", cedil: "¸", sup1: "¹", ordm: "º", raquo: "»", frac14: "¼", frac12: "½", frac34: "¾", iquest: "¿", Agrave: "À", Aacute: "Á", Acirc: "Â", Atilde: "Ã", Auml: "Ä", Aring: "Å", AElig: "Æ", Ccedil: "Ç", Egrave: "È", Eacute: "É", Ecirc: "Ê", Euml: "Ë", Igrave: "Ì", Iacute: "Í", Icirc: "Î", Iuml: "Ï", ETH: "Ð", Ntilde: "Ñ", Ograve: "Ò", Oacute: "Ó", Ocirc: "Ô", Otilde: "Õ", Ouml: "Ö", times: "×", Oslash: "Ø", Ugrave: "Ù", Uacute: "Ú", Ucirc: "Û", Uuml: "Ü", Yacute: "Ý", THORN: "Þ", szlig: "ß", agrave: "à", aacute: "á", acirc: "â", atilde: "ã", auml: "ä", aring: "å", aelig: "æ", ccedil: "ç", egrave: "è", eacute: "é", ecirc: "ê", euml: "ë", igrave: "ì", iacute: "í", icirc: "î", iuml: "ï", eth: "ð", ntilde: "ñ", ograve: "ò", oacute: "ó", ocirc: "ô", otilde: "õ", ouml: "ö", divide: "÷", oslash: "ø", ugrave: "ù", uacute: "ú", ucirc: "û", uuml: "ü", yacute: "ý", thorn: "þ", yuml: "ÿ", OElig: "Œ", oelig: "œ", Scaron: "Š", scaron: "š", Yuml: "Ÿ", fnof: "ƒ", circ: "ˆ", tilde: "˜", Alpha: "Α", Beta: "Β", Gamma: "Γ", Delta: "Δ", Epsilon: "Ε", Zeta: "Ζ", Eta: "Η", Theta: "Θ", Iota: "Ι", Kappa: "Κ", Lambda: "Λ", Mu: "Μ", Nu: "Ν", Xi: "Ξ", Omicron: "Ο", Pi: "Π", Rho: "Ρ", Sigma: "Σ", Tau: "Τ", Upsilon: "Υ", Phi: "Φ", Chi: "Χ", Psi: "Ψ", Omega: "Ω", alpha: "α", beta: "β", gamma: "γ", delta: "δ", epsilon: "ε", zeta: "ζ", eta: "η", theta: "θ", iota: "ι", kappa: "κ", lambda: "λ", mu: "μ", nu: "ν", xi: "ξ", omicron: "ο", pi: "π", rho: "ρ", sigmaf: "ς", sigma: "σ", tau: "τ", upsilon: "υ", phi: "φ", chi: "χ", psi: "ψ", omega: "ω", thetasym: "ϑ", upsih: "ϒ", piv: "ϖ", ensp: " ", emsp: " ", thinsp: " ", zwnj: "‌", zwj: "‍", lrm: "‎", rlm: "‏", ndash: "–", mdash: "—", lsquo: "‘", rsquo: "’", sbquo: "‚", ldquo: "“", rdquo: "”", bdquo: "„", dagger: "†", Dagger: "‡", bull: "•", hellip: "…", permil: "‰", prime: "′", Prime: "″", lsaquo: "‹", rsaquo: "›", oline: "‾", frasl: "⁄", euro: "€", image: "ℑ", weierp: "℘", real: "ℜ", trade: "™", alefsym: "ℵ", larr: "←", uarr: "↑", rarr: "→", darr: "↓", harr: "↔", crarr: "↵", lArr: "⇐", uArr: "⇑", rArr: "⇒", dArr: "⇓", hArr: "⇔", forall: "∀", part: "∂", exist: "∃", empty: "∅", nabla: "∇", isin: "∈", notin: "∉", ni: "∋", prod: "∏", sum: "∑", minus: "−", lowast: "∗", radic: "√", prop: "∝", infin: "∞", ang: "∠", and: "∧", or: "∨", cap: "∩", cup: "∪", int: "∫", there4: "∴", sim: "∼", cong: "≅", asymp: "≈", ne: "≠", equiv: "≡", le: "≤", ge: "≥", sub: "⊂", sup: "⊃", nsub: "⊄", sube: "⊆", supe: "⊇", oplus: "⊕", otimes: "⊗", perp: "⊥", sdot: "⋅", lceil: "⌈", rceil: "⌉", lfloor: "⌊", rfloor: "⌋", lang: "〈", rang: "〉", loz: "◊", spades: "♠", clubs: "♣", hearts: "♥", diams: "♦" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type) return object.name;
          if ("JSXNamespacedName" === object.type) return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type) return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope {
          constructor(...args) {
            super(...args), this.tsNames = /* @__PURE__ */ new Map();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          constructor(...args) {
            super(...args), this.importsStack = [];
          }
          createScope(flags) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new TypeScriptScope(flags);
          }
          enter(flags) {
            256 === flags && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(flags);
          }
          exit() {
            const flags = super.exit();
            return 256 === flags && this.importsStack.pop(), flags;
          }
          hasImport(name, allowShadow) {
            const len = this.importsStack.length;
            if (this.importsStack[len - 1].has(name)) return true;
            if (!allowShadow && len > 1) {
              for (let i2 = 0; i2 < len - 1; i2++) if (this.importsStack[i2].has(name)) return true;
            }
            return false;
          }
          declareName(name, bindingType, loc) {
            if (4096 & bindingType) return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
            const scope = this.currentScope();
            let type = scope.tsNames.get(name) || 0;
            if (1024 & bindingType) return this.maybeExportDefined(scope, name), void scope.tsNames.set(name, 16 | type);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), type |= 1), 256 & bindingType && (type |= 2), 512 & bindingType && (type |= 4), 128 & bindingType && (type |= 8), type && scope.tsNames.set(name, type);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            const type = scope.tsNames.get(name);
            if ((2 & type) > 0) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== (4 & type) > 0;
              }
              return true;
            }
            return 128 & bindingType && (8 & type) > 0 ? !!(2 & scope.names.get(name)) && !!(1 & bindingType) : !!(2 & bindingType && (1 & type) > 0) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const { name } = id;
            if (this.hasImport(name)) return;
            for (let i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
              const type = this.scopeStack[i2].tsNames.get(name);
              if ((1 & type) > 0 || (16 & type) > 0) return;
            }
            super.checkLocalExport(id);
          }
        }
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        class LValParser extends NodeUtils {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node) : "MemberExpression" === parenthesized.type || this.isOptionalMemberExpression(parenthesized) || this.raise(Errors.InvalidParenthesizedAssignment, node) : this.raise(Errors.InvalidParenthesizedAssignment, node)), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i2 = 0, length = node.properties.length, last = length - 1; i2 < length; i2++) {
                  var _node$extra2;
                  const prop = node.properties[i2], isLast = i2 === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
                }
                break;
              case "ObjectProperty": {
                const { key, value: value2 } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, node.left.loc.end), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type) this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, prop);
            } else this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i2 = 0; i2 <= end; i2++) {
              const elt = exprList[i2];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i2 < end ? this.raise(Errors.RestTrailingComma, elt) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, trailingCommaLoc));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i2) => "ObjectMethod" !== prop.type && (i2 === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList) "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, flags) {
            const allowEmpty = 1 & flags, elts = [];
            let first = true;
            for (; !this.eat(close); ) if (first ? first = false : this.expect(12), allowEmpty && this.match(12)) elts.push(null);
            else {
              if (this.eat(close)) break;
              if (this.match(21)) {
                let rest = this.parseRestBinding();
                if ((this.hasPlugin("flow") || 2 & flags) && (rest = this.parseFunctionParamType(rest)), elts.push(rest), !this.checkCommaAfterRest(closeCharCode)) {
                  this.expect(close);
                  break;
                }
              } else {
                const decorators = [];
                for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc); this.match(26); ) decorators.push(this.parseDecorator());
                elts.push(this.parseAssignableListItem(flags, decorators));
              }
            }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const { type, startLoc } = this.state;
            if (21 === type) return this.parseBindingRestProperty(this.startNode());
            const prop = this.startNode();
            return 139 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startLoc, false, false, true, false);
          }
          parseAssignableListItem(flags, decorators) {
            const left = this.parseMaybeDefault();
            (this.hasPlugin("flow") || 2 & flags) && this.parseFunctionParamType(left);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseFunctionParamType(param) {
            return param;
          }
          parseMaybeDefault(startLoc, left) {
            var _left;
            if (null != startLoc || (startLoc = this.state.startLoc), left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29)) return left;
            const node = this.startNodeAt(startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            switch (type) {
              case "AssignmentPattern":
                return "left";
              case "RestElement":
                return "argument";
              case "ObjectProperty":
                return "value";
              case "ParenthesizedExpression":
                return "expression";
              case "ArrayPattern":
                return "elements";
              case "ObjectPattern":
                return "properties";
            }
            return false;
          }
          isOptionalMemberExpression(expression) {
            return "OptionalMemberExpression" === expression.type;
          }
          checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression)) return;
            const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
            if (isOptionalMemberExpression || "MemberExpression" === type) return isOptionalMemberExpression && (this.expectPlugin("optionalChainingAssign", expression.loc.start), "AssignmentExpression" !== ancestor.type && this.raise(Errors.InvalidLhsOptionalChaining, expression, { ancestor })), void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, expression));
            if ("Identifier" === type) {
              this.checkIdentifier(expression, binding, strictModeChanged);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, expression) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity) return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, expression, { ancestor });
            }
            let key, isParenthesizedExpression;
            "string" == typeof validity ? (key = validity, isParenthesizedExpression = "ParenthesizedExpression" === type) : [key, isParenthesizedExpression] = validity;
            const nextAncestor = "ArrayPattern" === type || "ObjectPattern" === type ? { type } : ancestor, val = expression[key];
            if (Array.isArray(val)) for (const child of val) child && this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
            else val && this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
          }
          checkIdentifier(at, bindingType, strictModeChanged = false) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, at, { bindingName: at.name })), 8192 & bindingType && "let" === at.name && this.raise(Errors.LetInLexicalBinding, at), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern) break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, node);
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc), true);
          }
        }
        function assert(x) {
          if (!x) throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type) return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isValidAmbientConstInitializer(expression, estree) {
          var _expression$extra;
          const { type } = expression;
          if (null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) return false;
          if (estree) {
            if ("Literal" === type) {
              const { value: value2 } = expression;
              if ("string" == typeof value2 || "boolean" == typeof value2) return true;
            }
          } else if ("StringLiteral" === type || "BooleanLiteral" === type) return true;
          return !(!isNumber(expression, estree) && !function(expression2, estree2) {
            if ("UnaryExpression" === expression2.type) {
              const { operator, argument } = expression2;
              if ("-" === operator && isNumber(argument, estree2)) return true;
            }
            return false;
          }(expression, estree)) || ("TemplateLiteral" === type && 0 === expression.expressions.length || !!isPossiblyLiteralEnum(expression));
        }
        function isNumber(expression, estree) {
          return estree ? "Literal" === expression.type && ("number" == typeof expression.value || "bigint" in expression) : "NumericLiteral" === expression.type || "BigIntLiteral" === expression.type;
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && !expression.computed && isUncomputedMemberExpressionChain(expression.object);
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (_2) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value2) {
            let bigInt;
            try {
              bigInt = BigInt(value2);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value2), node;
          }
          parseDecimalLiteral(value2) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value2), node;
          }
          estreeParseLiteral(value2) {
            return this.parseLiteral(value2, "Literal");
          }
          parseStringLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNumericLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          directiveToStmt(directive) {
            const expression = directive.value;
            delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
            const stmt = directive;
            return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d2) => this.directiveToStmt(d2));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value2, type) {
            const node = super.parseLiteral(value2, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          nameIsConstructor(key) {
            return "Literal" === key.type ? "constructor" === key.value : super.nameIsConstructor(key);
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value: value2 } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
            } else super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "Property" !== prop.type || "get" !== prop.kind && "set" !== prop.kind ? "Property" === prop.type && prop.method ? this.raise(Errors.PatternHasMethod, prop.key) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS) : this.raise(Errors.PatternHasAccessor, prop.key);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            var _ref, _ref2;
            "Import" === node.callee.type && (node.type = "ImportExpression", node.source = node.arguments[0], node.options = null != (_ref = node.arguments[1]) ? _ref : null, node.attributes = null != (_ref2 = node.arguments[1]) ? _ref2 : null, delete node.arguments, delete node.callee);
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished, decorators) {
            const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
              case "ExportDefaultDeclaration": {
                var _declaration$decorato;
                const { declaration } = node;
                "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
              }
            }
            return node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          isOptionalMemberExpression(node) {
            return "ChainExpression" === node.type ? "MemberExpression" === node.expression.type : super.isOptionalMemberExpression(node);
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return "Property" === node.type && (node.method || "get" === node.kind || "set" === node.kind);
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, startLoc) {
            super.resetStartLocation(node, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? void (60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(142, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(Errors.UnterminatedString, this.state.startLoc);
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote) break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(134, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos)) return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count = 0, semi = false;
              for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 === this.codePointAtPos(this.state.pos)); ) ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity) return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar(ch) || 45 === ch);
            this.finishToken(141, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(141) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14)) return name;
            const node = this.startNodeAt(startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type) return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types.brace), this.next(), node = this.jsxParseExpressionContainer(node, types.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, node), node;
              case 143:
              case 134:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8)) node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(144) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(144); ) attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(144), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(144) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(144), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startLoc) {
            const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents: for (; ; ) switch (this.state.type) {
                case 143:
                  if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                    closingElement = this.jsxParseClosingElementAt(startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startLoc));
                  break;
                case 142:
                  children.push(this.parseLiteral(this.state.value, "JSXText"));
                  break;
                case 5: {
                  const node2 = this.startNode();
                  this.setContext(types.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                  break;
                }
                default:
                  this.unexpected();
              }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, closingElement) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47)) throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(143) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(143), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code2) {
            const context = this.curContext();
            if (context !== types.j_expr) {
              if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code2)) return void this.jsxReadWord();
                if (62 === code2) return ++this.state.pos, void this.finishToken(144);
                if ((34 === code2 || 39 === code2) && context === types.j_oTag) return void this.jsxReadString(code2);
              }
              if (60 === code2 && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1)) return ++this.state.pos, void this.finishToken(143);
              super.getTokenFromCode(code2);
            } else this.jsxReadToken();
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 143 === prevType) context.splice(-2, 2, types.j_cTag), this.state.canStartJSXElement = false;
            else if (143 === type) context.push(types.j_oTag);
            else if (144 === type) {
              const out = context[context.length - 1];
              out === types.j_oTag && 56 === prevType || out === types.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types.j_expr) : (this.setContext(types.j_expr), this.state.canStartJSXElement = true);
            } else this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          finishToken(type, val) {
            134 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches) if ("flow" === matches[1]) this.flowPragma = "flow";
              else {
                if ("noflow" !== matches[1]) throw new Error("Unexpected flow pragma");
                this.flowPragma = "noflow";
              }
              else ;
            }
            super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(127) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc), this.flowParseDeclareModule(node)) : this.isContextual(130) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(131) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(129) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(134) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(130) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc), super.parseImport(bodyNode2)) : (this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, { unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            return this.match(74) || this.match(68) || this.match(80) || this.isContextual(131) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131) ? ("ExportNamedDeclaration" === (node = this.parseExport(node, null)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(111), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished2 = this.flowParseTypeAlias(node);
            return finished2.type = "DeclareTypeAlias", finished2;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished2 = this.flowParseOpaqueType(node, true);
            return finished2.type = "DeclareOpaqueType", finished2;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node, false), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
            if (isClass) {
              if (node.implements = [], node.mixins = [], this.eatContextual(117)) do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
              if (this.eatContextual(113)) do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node, false), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, { reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(130), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(143) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); ) node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); ) node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(129), node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(118)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(106)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0)) null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47)) null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(99) || this.isContextual(104)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc) : this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc), variance && this.raise(FlowErrors.InexactVariance, variance), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, variance), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this)) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, property), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, property);
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startLoc, id) {
            null != startLoc || (startLoc = this.state.startLoc);
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startLoc, id) {
            const node = this.startNodeAt(startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); ) this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, node), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, node)), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47: {
                const node2 = this.startNode();
                return node2.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), this.finishNode(node2, "FunctionTypeAnnotation");
              }
              case 10: {
                const node2 = this.startNode();
                if (this.next(), !this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = 17 !== token && 14 !== token;
                } else isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type)) return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), node2.typeParameters = null, this.finishNode(node2, "FunctionTypeAnnotation");
              }
              case 134:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(135)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(136)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
                }
                return void this.unexpected();
              case 135:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 136:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type)) return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
            }
            this.unexpected();
          }
          flowParsePostfixType() {
            const startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); ) node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); ) node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (132 === this.state.type && "_" === this.state.value) {
              const startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatementLike(flags) {
            if (this.state.strict && this.isContextual(129)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatementLike(flags);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr, decorators) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name) return this.flowParseInterface(node);
                if ("type" === expr.name) return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name) return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 126 === type || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return 126 === type || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.match(17)) return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh) return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i2 = 0; i2 < invalid.length; i2++) noArrowAt.push(invalid[i2].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type && "BlockStatement" !== node2.body.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i2 = 0; i2 < list.length; i2++) (test(list[i2], i2, list) ? list1 : list2).push(list[i2]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse3) {
            let result;
            return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse3(), this.state.noArrowParamsConversionAt.pop()) : result = parse3(), result;
          }
          parseParenItem(node, startLoc) {
            const newNode = super.parseParenItem(node, startLoc);
            if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = newNode, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return newNode;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExportDeclaration(node) {
            if (this.isContextual(130)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(131)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(129)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.isContextual(126)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(130) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(125)) {
              if (super.parseClassMemberFromModifier(classBody, member)) return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, startLoc) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, member.value));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, this.state.curPosition(), { identifierName: fullWord }), this.finishToken(132, fullWord);
          }
          getTokenFromCode(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            123 === code2 && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code2 && 60 !== code2 ? this.state.inType && 63 === code2 ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next2, next22) {
              return 64 === current && 64 === next2 && isIdentifierStart(next22);
            }(code2, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code2) : (this.state.pos += 2, this.readIterator()) : this.finishOp(62 === code2 ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              const expr = exprList[i2];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i2] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              var _expr$extra;
              const expr = exprList[i2];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(113)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, param) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseFunctionParamType(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, param), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, param), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, param), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, param), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation), node;
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              if (!isExport) return true;
              const ch = this.lookaheadCharCode();
              return 123 === ch || 42 === ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            if (super.applyImportPhase(node, isExport, phase, loc), isExport) {
              if (!phase && this.match(65)) return;
              node.exportKind = "type" === phase ? phase : "value";
            } else "type" === phase && this.match(55) && this.unexpected(), node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type)) specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, isConstructor) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted) return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
              if (arrowExpression) return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown) throw jsx.error;
              if (arrow.thrown) throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown) return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || !this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {
              for (let i2 = 0; i2 < node.params.length; i2++) this.isThisParam(node.params[i2]) && i2 > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i2]);
              super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
          }
          parseSubscripts(base, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && this.state.noArrowAt.includes(startLoc.index)) {
              this.next();
              const node = this.startNodeAt(startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted) return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
              if (result.node && !result.error) return result.node;
              if (arrow.node) return this.state = arrow.failState, arrow.node;
              if (result.node) return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startLoc, noCalls);
          }
          parseSubscript(base, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls) return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node) return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startLoc) {
            const node = this.startNodeAt(startLoc);
            if (this.parseFunctionParams(node, false), this.parseArrow(node)) return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code2 && 47 === next && this.state.hasFlowComment) return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code2);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code2 || 125 !== next ? super.readToken_pipe_amp(code2) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition()), fileNode;
          }
          skipBlockComment() {
            if (!this.hasPlugin("flowComments") || !this.skipFlowComment()) return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
            {
              if (this.state.hasFlowComment) throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); ) shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos)) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, { memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, loc, enumContext);
          }
          flowEnumErrorNumberMemberNotInitialized(loc, details) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
          }
          flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 135: {
                const literal = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 134: {
                const literal = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName) continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, id, { memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, id, { memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length) return defaultedMembers;
            if (0 === defaultedMembers.length) return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(102)) return null;
            if (!tokenIsIdentifier(this.state.type)) throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName });
            const { value: value2 } = this.state;
            return this.next(), "boolean" !== value2 && "number" !== value2 && "string" !== value2 && "symbol" !== value2 && this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, { enumName, invalidEnumType: value2 }), value2;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, { enumName }), empty();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
          }
          tsNextTokenOnSameLineAndCanFollowModifier() {
            return this.next(), !this.hasPrecedingLineBreak() && this.tsTokenCanFollowModifier();
          }
          tsNextTokenCanFollowModifier() {
            return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type && 75 !== this.state.type) return;
            const modifier = this.state.value;
            if (allowedModifiers.includes(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
            }
          }
          tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, loc, { orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, loc, { modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier) break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, startLoc, { modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); ) result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x) throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element) return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind)) break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStartLoc.index;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(134) || this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc), node.argument = super.parseExprAtom(), this.eat(12) && !this.match(11) ? (node.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : node.options = null, this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseTypeParameter(parseModifiers) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47)) return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(143) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, node), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            const list = super.parseBindingList(11, 41, 2);
            for (const pattern of list) {
              const { type } = pattern;
              "AssignmentPattern" !== type && "TSParameterProperty" !== type || this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, { type });
            }
            return list;
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))) return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, node);
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind) method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, this.state.curPosition()), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length) this.raise(Errors.BadSetterArity, this.state.curPosition());
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
              } else method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, node);
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedType() {
            const node = this.startNode();
            this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (node.readonly = true), this.expect(0);
            {
              const typeParameter = this.startNode();
              typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsExpectThenParseType(58), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
            }
            return node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { startLoc } = this.state, rest = this.eat(21);
            let labeled, label, optional, type;
            const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
            if (58 === chAfterWord) labeled = true, optional = false, label = this.parseIdentifier(true), this.expect(14), type = this.tsParseType();
            else if (63 === chAfterWord) {
              optional = true;
              const startLoc2 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
              58 === this.lookaheadCharCode() ? (labeled = true, label = this.createIdentifier(this.startNodeAt(startLoc2), wordName), this.expect(17), this.expect(14), type = this.tsParseType()) : (labeled = false, type = typeOrLabel, this.expect(17));
            } else type = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
            if (labeled) {
              let labeledNode;
              label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type, this.eat(17) && (labeledNode.optional = true, this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc))) : (labeledNode = this.startNodeAtNode(type), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, type), labeledNode.label = type, labeledNode.elementType = this.tsParseType()), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            switch (this.state.type) {
              case 135:
              case 136:
              case 134:
              case 85:
              case 86:
                node.literal = super.parseExprAtom();
                break;
              default:
                this.unexpected();
            }
            return this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 134:
              case 135:
              case 136:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  return 135 !== nextToken.type && 136 !== nextToken.type && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value2) {
                    switch (value2) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); ) if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
            }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, node);
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(115);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 121 && token <= 123 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types2 = [];
            do {
              types2.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types2.length || hasLeadingOperator ? (node.types = types2, this.finishNode(node, kind)) : types2[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, 1), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21)) return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return true;
              if (this.match(11) && (this.next(), this.match(19))) return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t2 = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t2.typeAnnotation = thisTypePredicate, this.finishNode(t2, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable) return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t2.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t2, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t2);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t2.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t2, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          tsTryParseTypeAnnotation() {
            if (this.match(14)) return this.tsParseTypeAnnotation();
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (109 !== this.state.type) return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t2 = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t2.typeAnnotation = this.tsParseType();
            }), this.finishNode(t2, "TSTypeAnnotation");
          }
          tsParseType() {
            assert(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(124) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
            const node = this.startNode();
            return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, { token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties = {}) {
            if (this.hasFollowingLineBreak()) return null;
            this.expectContextual(129), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, this.state.startLoc)), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            if (this.match(token)) return this.tsNextThenParseType();
          }
          tsExpectThenParseType(token) {
            return this.tsInType(() => (this.expect(token), this.tsParseType()));
          }
          tsNextThenParseType() {
            return this.tsInType(() => (this.next(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties = {}) {
            return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(126), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(112) ? (node.kind = "global", node.global = true, node.id = this.parseIdentifier()) : this.match(134) ? (node.kind = "module", node.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
            node.isExport = isExport || false, node.id = maybeDefaultIdentifier || this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, moduleReference), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(119) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = true, this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f2) {
            const state = this.state.clone(), res = f2();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f2) {
            const result = this.tryParse((abort) => f2() || abort());
            if (!result.aborted && result.node) return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f2) {
            const state = this.state.clone(), result = f2();
            if (void 0 !== result && false !== result) return result;
            this.state = state;
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator()) return;
            let kind, startType = this.state.type;
            return this.isContextual(100) && (startType = 74, kind = "let"), this.tsInAmbientContext(() => {
              switch (startType) {
                case 68:
                  return nany.declare = true, super.parseFunctionStatement(nany, false, false);
                case 80:
                  return nany.declare = true, this.parseClass(nany, true, false);
                case 126:
                  return this.tsParseEnumDeclaration(nany, { declare: true });
                case 112:
                  return this.tsParseAmbientExternalModuleDeclaration(nany);
                case 75:
                case 74:
                  return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
                case 129: {
                  const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                  if (result) return result;
                }
                default:
                  if (tokenIsIdentifier(startType)) return this.tsParseDeclaration(nany, this.state.value, true, null);
              }
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
          }
          tsParseExpressionStatement(node, expr, decorators) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                return declaration && (declaration.declare = true), declaration;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.kind = "global", node.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false, decorators);
            }
          }
          tsParseDeclaration(node, value2, next, decorators) {
            switch (value2) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(node, decorators);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(134)) return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type)) return node.kind = "module", this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return node.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startLoc) {
            if (!this.match(47)) return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startLoc);
              return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt()) return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length ? this.raise(TSErrors.EmptyTypeArguments, node) : this.state.inType || this.curContext() !== types.brace || this.reScan_lt_gt(), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 124 && token <= 130;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(flags, decorators) {
            const startLoc = this.state.startLoc, modified = {};
            this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, modified);
            const accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly;
            4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
            const left = this.parseMaybeDefault();
            2 & flags && this.parseFunctionParamType(left);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp = this.startNodeAt(startLoc);
              return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, pp), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          tsDisallowOptionalPattern(node) {
            for (const param of node.params) "Identifier" !== param.type && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, param);
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, node), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type, isMethod));
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls) return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                  if (asyncArrowFn) return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments) return;
                if (isOptionalCall && !this.match(10)) return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) return;
                const node = this.startNodeAt(startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result) return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), result;
            }
            return super.parseSubscript(base, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            let isSatisfies;
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
              const node = this.startNodeAt(leftStartLoc);
              return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, this.state.startLoc, { keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
          checkDuplicateExports() {
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              const ch = this.lookaheadCharCode();
              return isExport ? 123 === ch || 42 === ch : 61 !== ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            super.applyImportPhase(node, isExport, phase, loc), isExport ? node.exportKind = "type" === phase ? "type" : "value" : node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImport(node) {
            if (this.match(134)) return node.importKind = "value", super.parseImport(node);
            let importNode;
            if (tokenIsIdentifier(this.state.type) && 61 === this.lookaheadCharCode()) return node.importKind = "value", this.tsParseImportEqualsDeclaration(node);
            if (this.isContextual(130)) {
              const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
              if (61 === this.lookaheadCharCode()) return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
              importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            } else importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode), importNode;
          }
          parseExport(node, decorators) {
            if (this.match(83)) {
              this.next();
              const nodeImportEquals = node;
              let maybeDefaultIdentifier = null;
              return this.isContextual(130) && this.isPotentialImportPhase(false) ? maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false) : nodeImportEquals.importKind = "value", this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
            }
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = true, this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(128), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            return super.parseExport(node, decorators);
          }
          isAbstractClass() {
            return this.isContextual(124) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext) return declaration;
            for (const { id, init } of declaration.declarations) init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init) : isValidAmbientConstInitializer(init, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init));
            return declaration;
          }
          parseStatementContent(flags, decorators) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseStatementContent(flags, decorators);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(106) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }, member);
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition()), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx) return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, member), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, member, { modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, member), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, member));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, member)), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
          }
          parseExpressionStatement(node, expr, decorators) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr, decorators) : void 0) || super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(expr, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startLoc) {
            const newNode = super.parseParenItem(node, startLoc);
            if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startLoc = this.state.startLoc, isDeclare = this.eatContextual(125);
            if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(113)) return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            node.optional || (this.eat(35) ? node.definite = true : this.eat(17) && (node.optional = true));
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, node), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, node, { modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          parseClassAccessorProperty(node) {
            return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, node), super.parseClassAccessorProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, method, { kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || hasOwnProperty.call(node.value, "body")) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, isConstructor) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47))) return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted) return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error)) return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
            if (arrow.node) return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node) return this.state = typeCast.failState, typeCast.node;
            throw (null == (_jsx3 = jsx) ? void 0 : _jsx3.error) || arrow.error || (null == (_typeCast2 = typeCast) ? void 0 : _typeCast2.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || node.params[0].constraint || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, node);
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted) return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseFunctionParamType(param) {
            this.eat(17) && (param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node) : this.raise(TSErrors.UnexpectedTypeCastInParameter, node), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            switch (type) {
              case "TSTypeCastExpression":
                return true;
              case "TSParameterProperty":
                return "parameter";
              case "TSNonNullExpression":
              case "TSInstantiationExpression":
                return "expression";
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
                return (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true];
              default:
                return super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            }
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation), node;
          }
          getTokenFromCode(code2) {
            if (this.state.inType) {
              if (62 === code2) return void this.finishOp(48, 1);
              if (60 === code2) return void this.finishOp(47, 1);
            }
            super.getTokenFromCode(code2);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              const expr = exprList[i2];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i2] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } = this.state;
            this.state.isAmbientContext = true, this.state.strict = false;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext, this.state.strict = oldStrict;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node, decorators) {
            if (this.match(80)) return node.abstract = true, this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
            if (this.isContextual(129)) {
              if (!this.hasFollowingLineBreak()) return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node), this.tsParseInterfaceDeclaration(node);
            } else this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, method, { methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly) {
            return !isString2 && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10)) return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(133)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            let placeholder = node;
            return placeholder.expectedNode && placeholder.type || (placeholder = this.finishNode(placeholder, "Placeholder")), placeholder.expectedNode = expectedNode, placeholder;
          }
          getTokenFromCode(code2) {
            37 === code2 && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(133, 2) : super.getTokenFromCode(code2);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          chStartsBindingIdentifier(ch, pos) {
            if (super.chStartsBindingIdentifier(ch, pos)) return true;
            return 133 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            var _expr$extra;
            if ("Placeholder" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
            }
            this.semicolon();
            const stmtPlaceholder = node;
            return stmtPlaceholder.name = expr.name, this.finishPlaceholder(stmtPlaceholder, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next();
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(133) || this.match(5))) {
                if (optionalId || !isStatement) return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
              }
              node.id = placeholder;
            } else this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node, decorators) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseExport(node, decorators);
            const node2 = node;
            if (!this.isContextual(98) && !this.match(12)) return node2.specifiers = [], node2.source = null, node2.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node2, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node2, decorators);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            var _specifiers;
            return !(null == (_specifiers = node.specifiers) || !_specifiers.length) || super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(98) && !this.match(12)) return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(98), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins);
        class ExpressionParser extends LValParser {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord) return void this.raise(Errors.RecordNoProto, key);
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, key)), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && this.offsetToSourcePos(expr.start) === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startLoc);
              for (node.expressions = [expr]; this.eat(12); ) node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startLoc = this.state.startLoc;
            if (this.isContextual(108) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startLoc), operator = this.state.value;
              if (node.operator = operator, this.match(29)) {
                this.toAssignable(left, true), node.left = left;
                const startIndex = startLoc.index;
                null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
              } else node.left = left;
              return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, this.finishNode(node, "AssignmentExpression")), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value2 = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, left, { identifierName: value2 }), this.classScope.usePrivateName(value2, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait) throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp) throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
                return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            if (39 === op) switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => this.parseHackPipeBody());
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
            }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, startLoc, { type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, startLoc), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.recordAwaitIfAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, node) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, node);
              }
              if (!update) return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc), this.parseAwait(startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression")), node;
            }
            const startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, expr = this.finishNode(node2, "UpdateExpression"));
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
          }
          parseSubscripts(base, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type) return this.parseBind(base, startLoc, noCalls, state);
            if (tokenIsTemplate(type)) return this.parseTaggedTemplateExpression(base, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && (this.raise(Errors.OptionalChainingNoNew, this.state.startLoc), 40 === this.lookaheadCharCode())) return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(139) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, startLoc), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startLoc, noCalls, state) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startLoc, state) {
            const node = this.startNodeAt(startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, startLoc), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type) if (0 === node.arguments.length || node.arguments.length > 2) this.raise(Errors.ImportCallArity, node);
            else for (const arg of node.arguments) "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, arg);
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node, decorators = null;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : this.match(10) ? this.options.createImportExpressions ? this.parseImportCall(node) : this.finishNode(node, "Import") : (this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 135:
                return this.parseNumericLiteral(this.state.value);
              case 136:
                return this.parseBigIntLiteral(this.state.value);
              case 134:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                decorators = this.parseDecorators();
              case 80:
                return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type) return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, callee);
              }
              case 139:
                return this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal) return this.parseTopicReference(pipeProposal);
                this.unexpected();
                break;
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                isIdentifierStart(lookaheadCh) || 62 === lookaheadCh ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                break;
              }
              default:
                if (137 === type) return this.parseDecimalLiteral(this.state.value);
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(127) && 123 === this.lookaheadInLineCharCode()) return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2) return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                    if (tokenIsIdentifier(type2)) return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2) return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, { token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition()), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, node) : this.raise(Errors.SuperNotAllowed, node), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, node), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, node.property, { target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            if (this.next(), this.isContextual(101)) this.inModule || this.raise(Errors.ImportMetaOutsideModule, id), this.sawUnambiguousESM = true;
            else if (this.isContextual(105) || this.isContextual(97)) {
              const isSource = this.isContextual(105);
              if (isSource || this.unexpected(), this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions) throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
              return this.next(), node.phase = isSource ? "source" : "defer", this.parseImportCall(node);
            }
            return this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value2, type, node) {
            return this.addExtra(node, "rawValue", value2), this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.value = value2, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value2, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value2, type, node);
          }
          parseStringLiteral(value2) {
            return this.parseLiteral(value2, "StringLiteral");
          }
          parseNumericLiteral(value2) {
            return this.parseLiteral(value2, "NumericLiteral");
          }
          parseBigIntLiteral(value2) {
            return this.parseLiteral(value2, "BigIntLiteral");
          }
          parseDecimalLiteral(value2) {
            return this.parseLiteral(value2, "DecimalLiteral");
          }
          parseRegExpLiteral(value2) {
            const node = this.startNode();
            return this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.pattern = value2.pattern, node.flags = value2.flags, this.next(), this.finishNode(node, "RegExpLiteral");
          }
          parseBooleanLiteral(value2) {
            const node = this.startNode();
            return node.value = value2, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first) first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41)) break;
              } else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
          }
          wrapParenthesis(startLoc, expression) {
            if (!this.options.createParenthesizedExpressions) return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19)) return node;
          }
          parseParenItem(node, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, metaProp), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            const isImport = this.match(83), callee = this.parseNoCallExpr();
            node.callee = callee, !isImport || "Import" !== callee.type && "ImportExpression" !== callee.type || this.raise(Errors.ImportCallNotNewExpression, callee);
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value: value2 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
            null === value2 && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value2 ? null : value2.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            let curElt = this.parseTemplateElement(isTagged);
            const quasis = [curElt], substitutions = [];
            for (; !curElt.tail; ) substitutions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), quasis.push(curElt = this.parseTemplateElement(isTagged));
            return node.expressions = substitutions, node.quasis = quasis, this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, prop), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26); ) decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startLoc, isAsync = false, isAccessor = false;
            if (this.match(21)) return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startLoc = this.state.startLoc);
            let isGenerator = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc;
            if (this.parsePropertyName(prop, refExpressionErrors), !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const { key } = prop, keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), { kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, method), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, method);
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator || this.match(10)) return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14)) return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern) prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              } else prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0)) prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value: value2 } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type)) key = this.parseIdentifier(true);
              else switch (type) {
                case 135:
                  key = this.parseNumericLiteral(value2);
                  break;
                case 134:
                  key = this.parseStringLiteral(value2);
                  break;
                case 136:
                  key = this.parseBigIntLiteral(value2);
                  break;
                case 139: {
                  const privateKeyLoc = this.state.startLoc;
                  null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), key = this.parsePrivateName();
                  break;
                }
                default:
                  if (137 === type) {
                    key = this.parseDecimalLiteral(value2);
                    break;
                  }
                  this.unexpected();
              }
              prop.key = key, 139 !== type && (prop.computed = false);
            }
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = isAsync;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = isGenerator, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression) node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end);
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i2 = 0, len = params.length; i2 < len; i2++) if (!this.isSimpleParameter(params[i2])) return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params) this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12)) allowEmpty || this.raise(Errors.UnexpectedToken, this.state.curPosition(), { unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(liberal) {
            let name;
            const { startLoc, type } = this.state;
            tokenIsKeywordOrIdentifier(type) ? name = this.state.value : this.unexpected();
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(132) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10) return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word)) return;
            if (checkKeywords && function(word2) {
              return keywords.has(word2);
            }(word)) return void this.raise(Errors.UnexpectedKeyword, startLoc, { keyword: word });
            if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule)) this.raise(Errors.UnexpectedReservedWord, startLoc, { reservedWord: word });
            else if ("yield" === word) {
              if (this.prodParam.hasYield) return void this.raise(Errors.YieldBindingIdentifier, startLoc);
            } else if ("await" === word) {
              if (this.prodParam.hasAwait) return void this.raise(Errors.AwaitBindingIdentifier, startLoc);
              if (this.scope.inStaticBlock) return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
              this.expressionScope.recordAsyncArrowParametersError(startLoc);
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction) return void this.raise(Errors.ArgumentsInClass, startLoc);
          }
          recordAwaitIfAllowed() {
            const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
            return isAwaitAllowed && !this.scope.inFunction && (this.state.hasTopLevelAwait = true), isAwaitAllowed;
          }
          parseAwait(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, node), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak()) return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 102 === type && !this.state.containsEsc || 138 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak()) switch (delegating = this.eat(55), this.state.type) {
              case 13:
              case 140:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating) break;
              default:
                argument = this.parseMaybeAssign();
            }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          parseImportCall(node) {
            if (this.next(), node.source = this.parseMaybeAssignAllowIn(), node.options = null, this.eat(12) && !this.match(11) && (node.options = this.parseMaybeAssignAllowIn(), this.eat(12) && !this.match(11))) {
              do {
                this.parseMaybeAssignAllowIn();
              } while (this.eat(12) && !this.match(11));
              this.raise(Errors.ImportCallArity, node);
            }
            return this.expect(11), this.finishNode(node, "ImportExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
          }
          parseSmartPipelineBodyInStyle(childExpr, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19)) throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, startLoc);
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.match(5) || this.unexpected(null, 5);
            const program = this.startNodeAt(this.state.endLoc);
            this.next();
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        }
        const loopLabel = { kind: 1 }, switchLabel = { kind: 2 }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;
        class StatementParser extends ExpressionParser {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.comments, this.options.tokens && (file.tokens = function(tokens, input, startIndex) {
              for (let i2 = 0; i2 < tokens.length; i2++) {
                const token = tokens[i2], { type } = token;
                if ("number" == typeof type) {
                  if (139 === type) {
                    const { loc, start, value: value2, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i2, 1, new Token({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token({ type: getExportedToken(132), value: value2, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i2++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value: value2, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start - startIndex) ? new Token({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value2 ? null : value2.slice(1, -1), endToken = new Token({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value2 ? null : value2.slice(1, -2), endToken = new Token({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i2, 1, startToken, new Token({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i2 += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input, this.startIndex)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 140, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule) {
              if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [localName, at] of Array.from(this.scope.undefinedExports)) this.raise(Errors.ModuleExportUndefined, at, { localName });
              this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
            }
            let finishedProgram;
            return finishedProgram = 140 === end ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end)), val = directiveLiteral.value = raw.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28)) return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet() {
            return !!this.isContextual(100) && this.hasFollowingBindingAtom();
          }
          chStartsBindingIdentifier(ch, pos) {
            if (isIdentifierStart(ch)) {
              if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
                if (!isIdentifierChar(endCh) && 92 !== endCh) return false;
              }
              return true;
            }
            return 92 === ch;
          }
          chStartsBindingPattern(ch) {
            return 91 === ch || 123 === ch;
          }
          hasFollowingBindingAtom() {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
          }
          hasInLineFollowingBindingIdentifierOrBrace() {
            const next = this.nextTokenInLineStart(), nextCh = this.codePointAtPos(next);
            return 123 === nextCh || this.chStartsBindingIdentifier(nextCh, next);
          }
          startsUsingForOf() {
            const { type, containsEsc } = this.lookahead();
            return !(102 === type && !containsEsc) && (tokenIsIdentifier(type) && !this.hasFollowingLineBreak() ? (this.expectPlugin("explicitResourceManagement"), true) : void 0);
          }
          startsAwaitUsing() {
            let next = this.nextTokenInLineStart();
            if (this.isUnparsedContextual(next, "using")) {
              next = this.nextTokenInLineStartSince(next + 5);
              const nextCh = this.codePointAtPos(next);
              if (this.chStartsBindingIdentifier(nextCh, next)) return this.expectPlugin("explicitResourceManagement"), true;
            }
            return false;
          }
          parseModuleItem() {
            return this.parseStatementLike(15);
          }
          parseStatementListItem() {
            return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
          }
          parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
            let flags = 0;
            return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
          }
          parseStatement() {
            return this.parseStatementLike(0);
          }
          parseStatementLike(flags) {
            let decorators = null;
            return this.match(26) && (decorators = this.parseDecorators(true)), this.parseStatementContent(flags, decorators);
          }
          parseStatementContent(flags, decorators) {
            const startType = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
            switch (startType) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoWhileStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode()) break;
                return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc), this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
              case 80:
                return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 96:
                if (!this.state.containsEsc && this.startsAwaitUsing()) return this.recordAwaitIfAllowed() ? allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, node) : this.raise(Errors.AwaitUsingNotInAsyncContext, node), this.next(), this.parseVarStatement(node, "await using");
                break;
              case 107:
                if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) break;
                return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(node, "using");
              case 100: {
                if (this.state.containsEsc) break;
                const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
                if (91 !== nextCh) {
                  if (!allowDeclaration && this.hasFollowingLineBreak()) break;
                  if (!this.chStartsBindingIdentifier(nextCh, next) && 123 !== nextCh) break;
                }
              }
              case 75:
                allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
              case 74: {
                const kind = this.state.value;
                return this.parseVarStatement(node, kind);
              }
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode) break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, this.state.startLoc), this.next(), 83 === startType ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node, decorators), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction()) return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(startType) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, node);
          }
          decoratorsEnabledBeforeExport() {
            return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && false !== this.getPluginOption("decorators", "decoratorsBeforeExport");
          }
          maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
            return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? ("boolean" != typeof this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const decorators = [];
            do {
              decorators.push(this.parseDecorator());
            } while (this.match(26));
            if (this.match(82)) allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, this.state.startLoc);
            else if (!this.canHaveLeadingDecorator()) throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
            return decorators;
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              const startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc2, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr), false === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
              } else {
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startLoc);
                  node2.object = expr, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
              }
            } else node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i2;
            for (i2 = 0; i2 < this.state.labels.length; ++i2) {
              const lab = this.state.labels[i2];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || 1 === lab.kind)) break;
                if (node.label && isBreak) break;
              }
            }
            if (i2 === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, node, { type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoWhileStatement(node) {
            return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel);
            let awaitAt = null;
            if (this.isContextual(96) && this.recordAwaitIfAllowed() && (awaitAt = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10), this.match(13)) return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(100);
            {
              const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing(), starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
              if (this.match(74) || this.match(75) || isLetOrUsing) {
                const initNode = this.startNode();
                let kind;
                startsWithAwaitUsing ? (kind = "await using", this.recordAwaitIfAllowed() || this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) : kind = this.state.value, this.next(), this.parseVar(initNode, true, kind);
                const init2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
                return isForIn && starsWithUsingDeclaration && this.raise(Errors.ForInUsing, init2), (isForIn || this.isContextual(102)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
              }
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(102);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, init), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, init)), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { type }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, isHangingDeclaration) {
            return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, this.state.startLoc), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur;
            this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
            for (let sawDefault; !this.match(8); ) if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), sawDefault = true, cur.test = null), this.expect(14);
            } else cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom();
            return this.scope.enter(this.options.annexB && "Identifier" === param.type ? 8 : 0), this.checkLVal(param, { type: "CatchClause" }, 9), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, node), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, this.state.startLoc), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, flags) {
            for (const label of this.state.labels) label.name === maybeName && this.raise(Errors.LabelRedeclaration, expr, { labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? 1 : this.match(71) ? 2 : null;
            var token;
            for (let i2 = this.state.labels.length - 1; i2 >= 0; i2--) {
              const label = this.state.labels[i2];
              if (label.statementStart !== node.start) break;
              label.statementStart = this.sourceToOffsetPos(this.state.start), label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.sourceToOffsetPos(this.state.start) }), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr, decorators) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            null == afterBlockParse || afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && this.options.annexB && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, init, { type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, init, { ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(102)) ? "const" !== kind && "using" !== kind && "await using" !== kind || this.match(58) || this.isContextual(102) || this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind }) : this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12)) break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            const id = this.parseBindingAtom();
            "using" !== kind && "await using" !== kind || "ArrayPattern" !== id.type && "ObjectPattern" !== id.type || this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start), this.checkLVal(id, { type: "VariableDeclarator" }, "var" === kind ? 5 : 8201), decl.id = id;
          }
          parseAsyncFunctionExpression(node) {
            return this.parseFunction(node, 8);
          }
          parseFunction(node, flags = 0) {
            const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
            this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), node.generator = true), isDeclaration && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, isConstructor) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next();
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          nameIsConstructor(key) {
            return "Identifier" === key.type && "constructor" === key.name || "StringLiteral" === key.type && "constructor" === key.value;
          }
          isNonstaticConstructor(method) {
            return !method.computed && !method.static && this.nameIsConstructor(method.key);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0) throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, member);
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length) throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(106);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member)) return;
              if (this.eat(5)) return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(139);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, publicMethod.key), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type), key = this.parseClassElementName(member), maybeContextualKw = isContextual ? key.name : null, isPrivate = this.isPrivateName(key), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate) return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, key), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, key), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty()) isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if ("async" !== maybeContextualKw || this.isLineTerminator()) if ("get" !== maybeContextualKw && "set" !== maybeContextualKw || this.match(55) && this.isLineTerminator()) if ("accessor" !== maybeContextualKw || this.isLineTerminator()) this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
              const isPrivate2 = this.match(139);
              this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
            }
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = maybeContextualKw;
              const isPrivate2 = this.match(139);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, publicMethod.key), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
            else {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(139);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, publicMethod.key), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
            }
          }
          parseClassElementName(member) {
            const { type, value: value2 } = this.state;
            if (132 !== type && 134 !== type || !member.static || "prototype" !== value2 || this.raise(Errors.StaticPrototype, this.state.startLoc), 139 === type) {
              "constructor" === value2 && this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member), member.key;
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, member);
          }
          pushClassProperty(classBody, prop) {
            !prop.computed && this.nameIsConstructor(prop.key) && this.raise(Errors.ConstructorClassField, prop.key), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            isPrivate || prop.computed || !this.nameIsConstructor(prop.key) || this.raise(Errors.ConstructorClassField, prop.key);
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 8331) {
            if (tokenIsIdentifier(this.state.type)) node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement) throw this.raise(Errors.MissingClassName, this.state.startLoc);
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node, decorators) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true), hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace) {
              if (hasDefault && this.unexpected(), decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            }
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            let hasDeclaration;
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 98), isFromRequired || hasSpecifiers) {
              if (hasDeclaration = false, decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              this.parseExportFrom(node, isFromRequired);
            } else hasDeclaration = this.maybeParseExportDeclaration(node);
            if (isFromRequired || hasSpecifiers || hasDeclaration) {
              var _node2$declaration;
              const node2 = node;
              if (this.checkExport(node2, true, false, !!node2.source), "ClassDeclaration" === (null == (_node2$declaration = node2.declaration) ? void 0 : _node2$declaration.type)) this.maybeTakeDecorators(decorators, node2.declaration, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.finishNode(node2, "ExportNamedDeclaration");
            }
            if (this.eat(65)) {
              const node2 = node, decl = this.parseExportDefaultExpression();
              if (node2.declaration = decl, "ClassDeclaration" === decl.type) this.maybeTakeDecorators(decorators, decl, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.checkExport(node2, true, true), this.finishNode(node2, "ExportDefaultDeclaration");
            }
            this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom", null == maybeDefaultIdentifier ? void 0 : maybeDefaultIdentifier.loc.start);
              const id = maybeDefaultIdentifier || this.parseIdentifier(true), specifier = this.startNodeAtNode(id);
              return specifier.exported = id, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              var _ref;
              null != (_ref = node).specifiers || (_ref.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              const node2 = node;
              node2.specifiers || (node2.specifiers = []);
              const isTypeExport = "type" === node2.exportKind;
              return node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node2.source = null, node2.declaration = null, this.hasPlugin("importAssertions") && (node2.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95)) return false;
            const next = this.nextTokenInLineStart();
            return this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode();
            if (this.match(68)) return this.next(), this.parseFunction(expr, 5);
            if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(expr, 13);
            if (this.match(80)) return this.parseClass(expr, true, true);
            if (this.match(26)) return this.hasPlugin("decorators") && true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
            if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            if (this.match(80)) {
              return this.parseClass(this.startNode(), true, false);
            }
            return this.parseStatementListItem();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 100 === type) return false;
              if ((130 === type || 129 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 98 !== nextType || 5 === nextType) return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65)) return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom) return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            this.eatContextual(98) ? (node.source = this.parseImportSource(), this.checkExport(node), this.maybeParseImportAttributes(node), this.checkJSONModuleImport(node)) : expect && this.unexpected(), this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), true) : this.isContextual(107) || this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(Errors.UsingDeclarationExport, this.state.startLoc), true) : 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            var _node$specifiers;
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
                }
              } else if (null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const specifier of node.specifiers) {
                const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                  const { local } = specifier;
                  "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, specifier, { localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                }
              }
              else if (node.declaration) {
                const decl = node.declaration;
                if ("FunctionDeclaration" === decl.type || "ClassDeclaration" === decl.type) {
                  const { id } = decl;
                  if (!id) throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === decl.type) for (const declaration of decl.declarations) this.checkDeclaration(declaration.id);
              }
            }
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type) this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type) for (const prop of node.properties) this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type) for (const elem of node.elements) elem && this.checkDeclaration(elem);
            else "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, node) : this.raise(Errors.DuplicateExport, node, { exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else if (this.expect(12), this.eat(8)) break;
              const isMaybeTypeOnly = this.isContextual(130), isString2 = this.match(134), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString2 ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(134)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = loneSurrogate.exec(result.value);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, { surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value: value2 }) => "json" === value2.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkImportReflection(node) {
            const { specifiers } = node, singleBindingType = 1 === specifiers.length ? specifiers[0].type : null;
            if ("source" === node.phase) "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
            else if ("defer" === node.phase) "ImportNamespaceSpecifier" !== singleBindingType && this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
            else if (node.module) {
              var _node$assertions;
              "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start), (null == (_node$assertions = node.assertions) ? void 0 : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
            }
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported) return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
              }
            }
          }
          isPotentialImportPhase(isExport) {
            return !isExport && (this.isContextual(105) || this.isContextual(97) || this.isContextual(127));
          }
          applyImportPhase(node, isExport, phase, loc) {
            isExport || ("module" === phase ? (this.expectPlugin("importReflection", loc), node.module = true) : this.hasPlugin("importReflection") && (node.module = false), "source" === phase ? (this.expectPlugin("sourcePhaseImports", loc), node.phase = "source") : "defer" === phase ? (this.expectPlugin("deferredImportEvaluation", loc), node.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (node.phase = null));
          }
          parseMaybeImportPhase(node, isExport) {
            if (!this.isPotentialImportPhase(isExport)) return this.applyImportPhase(node, isExport, null), null;
            const phaseIdentifier = this.parseIdentifier(true), { type } = this.state;
            return (tokenIsKeywordOrIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type) ? (this.resetPreviousIdentifierLeadingComments(phaseIdentifier), this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start), null) : (this.applyImportPhase(node, isExport, null), phaseIdentifier);
          }
          isPrecedingIdImportPhase(phase) {
            const { type } = this.state;
            return tokenIsIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type;
          }
          parseImport(node) {
            return this.match(134) ? this.parseImportSourceAndAttributes(node) : this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
          }
          parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
            node.specifiers = [];
            const parseNext = !this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
            return parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(98), this.parseImportSourceAndAttributes(node);
          }
          parseImportSourceAndAttributes(node) {
            return null != node.specifiers || (node.specifiers = []), node.source = this.parseImportSource(), this.maybeParseImportAttributes(node), this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(134) || this.unexpected(), this.parseExprAtom();
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type, bindingType = 8201) {
            return this.checkLVal(specifier.local, { type }, bindingType), this.finishNode(specifier, type);
          }
          parseImportAttributes() {
            this.expect(5);
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8)) break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: keyName }), attrNames.add(keyName), this.match(134) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return this.expect(8), attrs;
          }
          parseModuleAttributes() {
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, node.key), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, { key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAttributes(node) {
            let attributes;
            var useWith = false;
            if (this.match(76)) {
              if (this.hasPrecedingLineBreak() && 40 === this.lookaheadCharCode()) return;
              this.next(), attributes = this.hasPlugin("moduleAttributes") ? this.parseModuleAttributes() : this.parseImportAttributes(), useWith = true;
            } else this.isContextual(94) && !this.hasPrecedingLineBreak() ? (this.hasPlugin("deprecatedImportAssert") || this.hasPlugin("importAssertions") || this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(node, "deprecatedAssertSyntax", true), this.next(), attributes = this.parseImportAttributes()) : attributes = [];
            !useWith && this.hasPlugin("importAssertions") ? node.assertions = attributes : node.attributes = attributes;
          }
          maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier) {
              const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
              return specifier.local = maybeDefaultIdentifier, node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier")), true;
            }
            return !!tokenIsKeywordOrIdentifier(this.state.type) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else {
                if (this.eat(14)) throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
                if (this.expect(12), this.eat(8)) break;
              }
              const specifier = this.startNode(), importedIsString = this.match(134), isMaybeTypeOnly = this.isContextual(130);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        }
        class Parser extends StatementParser {
          constructor(options, input, pluginsMap) {
            super(options = function(opts) {
              const options2 = { sourceType: "script", sourceFilename: void 0, startIndex: 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createImportExpressions: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
              if (null == opts) return options2;
              if (null != opts.annexB && false !== opts.annexB) throw new Error("The `annexB` option can only be set to `false`.");
              for (const key of Object.keys(options2)) null != opts[key] && (options2[key] = opts[key]);
              if (1 === options2.startLine) null == opts.startIndex && options2.startColumn > 0 ? options2.startIndex = options2.startColumn : null == opts.startColumn && options2.startIndex > 0 && (options2.startColumn = options2.startIndex);
              else if ((null == opts.startColumn || null == opts.startIndex) && null != opts.startIndex) throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = pluginsMap, this.filename = options.sourceFilename, this.startIndex = options.startIndex;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file.comments.length = this.state.commentsLen, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes)) tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser;
          const pluginsMap = /* @__PURE__ */ new Map();
          if (null != options && options.plugins) {
            for (const plugin of options.plugins) {
              let name, opts;
              "string" == typeof plugin ? name = plugin : [name, opts] = plugin, pluginsMap.has(name) || pluginsMap.set(name, opts || {});
            }
            !function(pluginsMap2) {
              if (pluginsMap2.has("decorators")) {
                if (pluginsMap2.has("decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
                const decoratorsBeforeExport = pluginsMap2.get("decorators").decoratorsBeforeExport;
                if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
                const allowCallParenthesized = pluginsMap2.get("decorators").allowCallParenthesized;
                if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized) throw new Error("'allowCallParenthesized' must be a boolean.");
              }
              if (pluginsMap2.has("flow") && pluginsMap2.has("typescript")) throw new Error("Cannot combine flow and typescript plugins.");
              if (pluginsMap2.has("placeholders") && pluginsMap2.has("v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
              if (pluginsMap2.has("pipelineOperator")) {
                var _pluginsMap$get;
                const proposal = pluginsMap2.get("pipelineOperator").proposal;
                if (!PIPELINE_PROPOSALS.includes(proposal)) {
                  const proposalList = PIPELINE_PROPOSALS.map((p2) => `"${p2}"`).join(", ");
                  throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
                }
                const tupleSyntaxIsHash = "hash" === (null == (_pluginsMap$get = pluginsMap2.get("recordAndTuple")) ? void 0 : _pluginsMap$get.syntaxType);
                if ("hack" === proposal) {
                  if (pluginsMap2.has("placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                  if (pluginsMap2.has("v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                  const topicToken = pluginsMap2.get("pipelineOperator").topicToken;
                  if (!TOPIC_TOKENS.includes(topicToken)) {
                    const tokenList = TOPIC_TOKENS.map((t2) => `"${t2}"`).join(", ");
                    throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                  }
                  if ("#" === topicToken && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
                } else if ("smart" === proposal && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
              }
              if (pluginsMap2.has("moduleAttributes")) {
                if (pluginsMap2.has("deprecatedImportAssert") || pluginsMap2.has("importAssertions")) throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
                if ("may-2020" !== pluginsMap2.get("moduleAttributes").version) throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
              }
              if (pluginsMap2.has("importAssertions") && pluginsMap2.has("deprecatedImportAssert")) throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
              if (!pluginsMap2.has("deprecatedImportAssert") && pluginsMap2.has("importAttributes") && pluginsMap2.get("importAttributes").deprecatedAssertSyntax && pluginsMap2.set("deprecatedImportAssert", {}), pluginsMap2.has("recordAndTuple")) {
                const syntaxType = pluginsMap2.get("recordAndTuple").syntaxType;
                if (null != syntaxType) {
                  const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
                  if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p2) => `'${p2}'`).join(", "));
                }
              }
              if (pluginsMap2.has("asyncDoExpressions") && !pluginsMap2.has("doExpressions")) {
                const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
                throw error.missingPlugins = "doExpressions", error;
              }
              if (pluginsMap2.has("optionalChainingAssign") && "2023-07" !== pluginsMap2.get("optionalChainingAssign").version) throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
            }(pluginsMap), cls = function(pluginsMap2) {
              const pluginList = [];
              for (const name of mixinPluginNames) pluginsMap2.has(name) && pluginList.push(name);
              const key = pluginList.join("|");
              let cls2 = parserClassCache.get(key);
              if (!cls2) {
                cls2 = Parser;
                for (const plugin of pluginList) cls2 = mixinPlugins[plugin](cls2);
                parserClassCache.set(key, cls2);
              }
              return cls2;
            }(pluginsMap);
          }
          return new cls(options, input, pluginsMap);
        }
        const parserClassCache = /* @__PURE__ */ new Map();
        exports3.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType)) return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM) return ast;
            if (parser.ambiguousScriptDifferentAst) try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused) {
            }
            else ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports3.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports3.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js");
        exports3.A = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion(7);
          var { legacy } = options;
          const { version } = options;
          if (legacy || "legacy" === version) return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default };
          if (version && "2018-09" !== version && "2021-12" !== version && "2022-03" !== version && "2023-01" !== version && "2023-05" !== version && "2023-11" !== version) throw new Error("The '.version' option must be one of 'legacy', '2023-11', '2023-05', '2023-01', '2022-03', or '2021-12'.");
          return api.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default, decoratorVersion: version });
        });
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = /* @__PURE__ */ new WeakSet();
        function applyEnsureOrdering(path2) {
          const identDecorators = (path2.isClass() ? [path2, ...path2.get("body.body")] : path2.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
          if (0 !== identDecorators.length) return _core.types.sequenceExpression(identDecorators.map((decorator) => {
            const expression = decorator.expression, id = decorator.expression = path2.scope.generateDeclaredUidIdentifier("dec");
            return _core.types.assignmentExpression("=", id, expression);
          }).concat([path2.node]));
        }
        function hasClassDecorators(classNode) {
          var _classNode$decorators;
          return !(null == (_classNode$decorators = classNode.decorators) || !_classNode$decorators.length);
        }
        function hasMethodDecorators(body) {
          return body.some((node) => {
            var _node$decorators;
            return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
          });
        }
        function applyTargetDecorators(path2, state, decoratedProps) {
          const name = path2.scope.generateDeclaredUidIdentifier(path2.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
            let decorators = [];
            if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length) return acc;
            if (node.computed) throw path2.buildCodeFrameError("Computed method/property decorators are not yet supported.");
            const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path2.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
            if (_core.types.isClassProperty(node, { static: false })) {
              const descriptor = path2.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
              node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
            } else acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path2.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
            return acc;
          }, []);
          return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path2.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
        }
        function decoratedClassToExpression({ node, scope }) {
          if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body)) return;
          const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
        }
        const visitor = { ExportDefaultDeclaration(path2) {
          const decl = path2.get("declaration");
          if (!decl.isClassDeclaration()) return;
          const replacement = decoratedClassToExpression(decl);
          if (replacement) {
            const [varDeclPath] = path2.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
            decl.node.id || path2.scope.registerDeclaration(varDeclPath);
          }
        }, ClassDeclaration(path2) {
          const replacement = decoratedClassToExpression(path2);
          if (replacement) {
            const [newPath] = path2.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path2.scope.getOwnBinding(id.name);
            binding.identifier = id, binding.path = decl;
          }
        }, ClassExpression(path2, state) {
          const decoratedClass = applyEnsureOrdering(path2) || function(classPath) {
            if (!hasClassDecorators(classPath.node)) return;
            const decorators = classPath.node.decorators || [];
            classPath.node.decorators = null;
            const name = classPath.scope.generateDeclaredUidIdentifier("class");
            return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
              return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
            }, classPath.node);
          }(path2) || function(path3, state2) {
            if (hasMethodDecorators(path3.node.body.body)) return applyTargetDecorators(path3, state2, path3.node.body.body);
          }(path2, state);
          decoratedClass && path2.replaceWith(decoratedClass);
        }, ObjectExpression(path2, state) {
          const decoratedObject = applyEnsureOrdering(path2) || function(path3, state2) {
            if (hasMethodDecorators(path3.node.properties)) return applyTargetDecorators(path3, state2, path3.node.properties.filter((prop) => "SpreadElement" !== prop.type));
          }(path2, state);
          decoratedObject && path2.replaceWith(decoratedObject);
        }, AssignmentExpression(path2, state) {
          WARNING_CALLS.has(path2.node.right) && path2.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path2.get("left.object").node), _core.types.stringLiteral(path2.get("left.property").node.name || path2.get("left.property").node.value), _core.types.cloneNode(path2.get("right.arguments")[0].node), _core.types.cloneNode(path2.get("right.arguments")[1].node)]));
        }, CallExpression(path2, state) {
          3 === path2.node.arguments.length && WARNING_CALLS.has(path2.node.arguments[2]) && path2.node.callee.name === state.addHelper("defineProperty").name && path2.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path2.get("arguments")[0].node), _core.types.cloneNode(path2.get("arguments")[1].node), _core.types.cloneNode(path2.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path2.get("arguments.2.arguments")[1].node)]));
        } };
        exports3.default = visitor;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports3.default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
          let { version } = options;
          {
            const { legacy } = options;
            if (void 0 !== legacy) {
              if ("boolean" != typeof legacy) throw new Error(".legacy must be a boolean.");
              if (void 0 !== version) throw new Error("You can either use the .legacy or the .version option, not both.");
            }
            if (void 0 === version) version = legacy ? "legacy" : "2018-09";
            else if ("2023-11" !== version && "2023-05" !== version && "2023-01" !== version && "2022-03" !== version && "2021-12" !== version && "2018-09" !== version && "legacy" !== version) throw new Error("Unsupported decorators version: " + version);
            var { decoratorsBeforeExport } = options;
            if (void 0 === decoratorsBeforeExport) {
              if ("2021-12" === version || "2022-03" === version) decoratorsBeforeExport = false;
              else if ("2018-09" === version) throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
            } else {
              if ("legacy" === version || "2022-03" === version || "2023-01" === version) throw new Error(`'decoratorsBeforeExport' can't be used with ${version} decorators.`);
              if ("boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }
          return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
            "legacy" === version ? parserOpts.plugins.push("decorators-legacy") : "2023-01" === version || "2023-05" === version || "2023-11" === version ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: false }], "decoratorAutoAccessors") : "2022-03" === version ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : "2021-12" === version ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports3.A = (0, _helperPluginUtils.declare)((api) => {
          api.assertVersion(7);
          const isPlugin = (plugin, name) => "plugin" === name || Array.isArray(plugin) && "plugin" === plugin[0], options = (plugin) => Array.isArray(plugin) && plugin.length > 1 ? plugin[1] : {};
          return { name: "syntax-import-assertions", manipulateOptions(opts, { plugins }) {
            for (let i2 = 0; i2 < plugins.length; i2++) {
              const plugin = plugins[i2];
              if (isPlugin(plugin, "deprecatedImportAssert")) return;
              if (isPlugin(plugin, "importAttributes")) return void plugins.splice(i2, 1, "deprecatedImportAssert", ["importAttributes", Object.assign({}, options(plugin), { deprecatedAssertSyntax: true })]);
            }
            plugins.push("importAssertions");
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports3.default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "syntax-jsx", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.some((p2) => "typescript" === (Array.isArray(p2) ? p2[0] : p2)) || parserOpts.plugins.push("jsx");
        } }));
      }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), removePlugin = function(plugins, name) {
          const indices = [];
          plugins.forEach((plugin, i2) => {
            (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i2);
          });
          for (const i2 of indices) plugins.splice(i2, 1);
        };
        exports3.default = (0, _helperPluginUtils.declare)((api, opts) => {
          api.assertVersion(7);
          const { disallowAmbiguousJSXLike, dts } = opts;
          var { isTSX } = opts;
          return { name: "syntax-typescript", manipulateOptions(opts2, parserOpts) {
            {
              const { plugins } = parserOpts;
              removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push("objectRestSpread", "classProperties"), isTSX && plugins.push("jsx");
            }
            parserOpts.plugins.push(["typescript", { disallowAmbiguousJSXLike, dts }]);
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports3.A = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "transform-export-namespace-from", manipulateOptions: (_2, parser) => parser.plugins.push("exportNamespaceFrom"), visitor: { ExportNamedDeclaration(path2) {
          var _exported$name;
          const { node, scope } = path2, { specifiers } = node, index2 = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index2])) return;
          const nodes = [];
          1 === index2 && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
          const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
          const [importDeclaration] = path2.replaceWithMultiple(nodes);
          path2.scope.registerDeclaration(importDeclaration);
        } } }));
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformDynamicImport = function(path2, noInterop, file) {
          const buildRequire = noInterop ? requireNoInterop : requireInterop;
          path2.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path2.node, true, false, (specifier) => buildRequire(specifier, file)));
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
        const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.defineCommonJSHook = function(file, hook) {
          let hooks = file.get(commonJSHooksKey);
          hooks || file.set(commonJSHooksKey, hooks = []);
          hooks.push(hook);
        }, exports3.makeInvokers = function(file) {
          const hooks = file.get(commonJSHooksKey);
          return { getWrapperPayload: (...args) => findMap(hooks, (hook) => null == hook.getWrapperPayload ? void 0 : hook.getWrapperPayload(...args)), wrapReference: (...args) => findMap(hooks, (hook) => null == hook.wrapReference ? void 0 : hook.wrapReference(...args)), buildRequireWrapper: (...args) => findMap(hooks, (hook) => null == hook.buildRequireWrapper ? void 0 : hook.buildRequireWrapper(...args)) };
        };
        const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
        function findMap(arr, cb) {
          if (arr) for (const el of arr) {
            const res = cb(el);
            if (null != res) return res;
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0, Object.defineProperty(exports3, "defineCommonJSHook", { enumerable: true, get: function() {
          return _hooks.defineCommonJSHook;
        } });
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _lazy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js"), _hooks = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js");
        exports3.default = (0, _helperPluginUtils.declare)((api, options) => {
          var _api$assumption, _api$assumption2, _api$assumption3;
          api.assertVersion(7);
          const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = null != (_api$assumption = api.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace) throw new Error(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace) throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path2) {
            const localName = path2.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path2.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path2.parentPath.isObjectProperty({ value: path2.node }) && path2.parentPath.parentPath.isObjectPattern() || path2.parentPath.isAssignmentExpression({ left: path2.node }) || path2.isAssignmentExpression({ left: path2.node }) || path2.replaceWith(getAssertion(localName));
          }, UpdateExpression(path2) {
            const arg = path2.get("argument");
            if (!arg.isIdentifier()) return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path2.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path2.replaceWith(_core.types.assignmentExpression(path2.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path2) {
            const left = path2.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName) return;
              const localBinding = path2.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding) return;
              const right = path2.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path2.scope.getBinding(localName2));
              if (localName) {
                const right = path2.get("right");
                right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
          }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path2) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
            if (path2.isCallExpression() && !_core.types.isImport(path2.node.callee)) return;
            let { scope } = path2;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            (0, _dynamicImport.transformDynamicImport)(path2, noInterop, this.file);
          }, Program: { exit(path2, state) {
            if (!(0, _helperModuleTransforms.isModule)(path2)) return;
            path2.scope.rename("exports"), path2.scope.rename("module"), path2.scope.rename("require"), path2.scope.rename("__filename"), path2.scope.rename("__dirname"), allowCommonJSExports || path2.traverse(moduleExportsVisitor, { scope: path2.scope });
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = _core.types.stringLiteral(moduleName));
            const hooks = (0, _hooks.makeInvokers)(this.file), { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path2, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
                header = _core.types.expressionStatement(loadExpr);
              } else {
                const init = (0, _helperModuleTransforms.wrapInterop)(path2, loadExpr, metadata.interop) || loadExpr;
                if (metadata.wrap) {
                  const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                  if (false === res) continue;
                  header = res;
                }
                null != header || (header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `);
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path2.unshiftContainer("body", headers), path2.get("body").forEach((path3) => {
              headers.includes(path3.node) && path3.isVariableDeclaration() && path3.scope.registerDeclaration(path3);
            });
          } } } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.lazyImportsHook = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
        exports3.lazyImportsHook = (lazy) => ({ name: "@babel/plugin-transform-modules-commonjs/lazy", version: "7.26.3", getWrapperPayload: (source, metadata) => (0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll ? null : true === lazy ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy) ? lazy.includes(source) ? "lazy/function" : null : "function" == typeof lazy ? lazy(source) ? "lazy/function" : null : void 0, buildRequireWrapper(name, init, payload, referenced) {
          if ("lazy/function" === payload) return !!referenced && _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
        }, wrapReference(ref, payload) {
          if ("lazy/function" === payload) return _core.types.callExpression(ref, []);
        } });
      }, "./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function({ name, development }) {
          return (0, _helperPluginUtils.declare)((_2, options) => {
            const { pure: PURE_ANNOTATION, throwIfNamespace = true, filter, runtime: RUNTIME_DEFAULT = development ? "automatic" : "classic", importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource, pragma: PRAGMA_DEFAULT = DEFAULT.pragma, pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag } = options;
            var { useSpread = false, useBuiltIns = false } = options;
            if ("classic" === RUNTIME_DEFAULT) {
              if ("boolean" != typeof useSpread) throw new Error("transform-react-jsx currently only accepts a boolean option for useSpread (defaults to false)");
              if ("boolean" != typeof useBuiltIns) throw new Error("transform-react-jsx currently only accepts a boolean option for useBuiltIns (defaults to false)");
              if (useSpread && useBuiltIns) throw new Error("transform-react-jsx currently only accepts useBuiltIns or useSpread but not both");
            }
            const injectMetaPropertiesVisitor = { JSXOpeningElement(path2, state) {
              const attributes = [];
              (function(scope) {
                do {
                  const { path: path3 } = scope;
                  if (path3.isFunctionParent() && !path3.isArrowFunctionExpression()) return !path3.isMethod() || ("constructor" !== path3.node.kind || !isDerivedClass(path3.parentPath.parentPath));
                  if (path3.isTSModuleBlock()) return false;
                } while (scope = scope.parent);
                return true;
              })(path2.scope) && attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__self"), _core.types.jsxExpressionContainer(_core.types.thisExpression()))), attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__source"), _core.types.jsxExpressionContainer(function(path3, state2) {
                const location = path3.node.loc;
                if (!location) return path3.scope.buildUndefinedNode();
                if (!state2.fileNameIdentifier) {
                  const { filename = "" } = state2, fileNameIdentifier = path3.scope.generateUidIdentifier("_jsxFileName");
                  path3.scope.getProgramParent().push({ id: fileNameIdentifier, init: _core.types.stringLiteral(filename) }), state2.fileNameIdentifier = fileNameIdentifier;
                }
                return function(fileNameIdentifier, lineNumber, column0Based) {
                  const fileLineLiteral = null != lineNumber ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral(), fileColumnLiteral = null != column0Based ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();
                  return _core.template.expression.ast`{
    fileName: ${fileNameIdentifier},
    lineNumber: ${fileLineLiteral},
    columnNumber: ${fileColumnLiteral},
  }`;
                }(_core.types.cloneNode(state2.fileNameIdentifier), location.start.line, location.start.column);
              }(path2, state)))), path2.pushContainer("attributes", attributes);
            } };
            return { name, inherits: _pluginSyntaxJsx.default, visitor: { JSXNamespacedName(path2) {
              if (throwIfNamespace) throw path2.buildCodeFrameError("Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.");
            }, JSXSpreadChild(path2) {
              throw path2.buildCodeFrameError("Spread children are not supported in React.");
            }, Program: { enter(path2, state) {
              const { file } = state;
              let runtime = RUNTIME_DEFAULT, source = IMPORT_SOURCE_DEFAULT, pragma = PRAGMA_DEFAULT, pragmaFrag = PRAGMA_FRAG_DEFAULT, sourceSet = !!options.importSource, pragmaSet = !!options.pragma, pragmaFragSet = !!options.pragmaFrag;
              if (file.ast.comments) for (const comment of file.ast.comments) {
                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(comment.value);
                sourceMatches && (source = sourceMatches[1], sourceSet = true);
                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(comment.value);
                runtimeMatches && (runtime = runtimeMatches[1]);
                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);
                jsxMatches && (pragma = jsxMatches[1], pragmaSet = true);
                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);
                jsxFragMatches && (pragmaFrag = jsxFragMatches[1], pragmaFragSet = true);
              }
              if (set(state, "runtime", runtime), "classic" === runtime) {
                if (sourceSet) throw path2.buildCodeFrameError("importSource cannot be set when runtime is classic.");
                const createElement = toMemberExpression(pragma), fragment = toMemberExpression(pragmaFrag);
                set(state, "id/createElement", () => _core.types.cloneNode(createElement)), set(state, "id/fragment", () => _core.types.cloneNode(fragment)), set(state, "defaultPure", pragma === DEFAULT.pragma);
              } else {
                if ("automatic" !== runtime) throw path2.buildCodeFrameError('Runtime must be either "classic" or "automatic".');
                {
                  if (pragmaSet || pragmaFragSet) throw path2.buildCodeFrameError("pragma and pragmaFrag cannot be set when runtime is automatic.");
                  const define2 = (name2, id) => set(state, name2, /* @__PURE__ */ function(pass, path3, importName2, source2) {
                    return () => {
                      const actualSource = function(source3, importName3) {
                        switch (importName3) {
                          case "Fragment":
                            return `${source3}/${development ? "jsx-dev-runtime" : "jsx-runtime"}`;
                          case "jsxDEV":
                            return `${source3}/jsx-dev-runtime`;
                          case "jsx":
                          case "jsxs":
                            return `${source3}/jsx-runtime`;
                          case "createElement":
                            return source3;
                        }
                      }(source2, importName2);
                      if ((0, _helperModuleImports.isModule)(path3)) {
                        let reference = get(pass, `imports/${importName2}`);
                        return reference ? _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamed)(path3, importName2, actualSource, { importedInterop: "uncompiled", importPosition: "after" }), set(pass, `imports/${importName2}`, reference), reference);
                      }
                      {
                        let reference = get(pass, `requires/${actualSource}`);
                        return reference ? reference = _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamespace)(path3, actualSource, { importedInterop: "uncompiled" }), set(pass, `requires/${actualSource}`, reference)), _core.types.memberExpression(reference, _core.types.identifier(importName2));
                      }
                    };
                  }(state, path2, id, source));
                  define2("id/jsx", development ? "jsxDEV" : "jsx"), define2("id/jsxs", development ? "jsxDEV" : "jsxs"), define2("id/createElement", "createElement"), define2("id/fragment", "Fragment"), set(state, "defaultPure", source === DEFAULT.importSource);
                }
              }
              development && path2.traverse(injectMetaPropertiesVisitor, state);
            } }, JSXFragment: { exit(path2, file) {
              let callExpr;
              callExpr = "classic" === get(file, "runtime") ? function(path3, file2) {
                if (filter && !filter(path3.node, file2)) return;
                return call(file2, "createElement", [get(file2, "id/fragment")(), _core.types.nullLiteral(), ..._core.types.react.buildChildren(path3.node)]);
              }(path2, file) : function(path3, file2) {
                const args = [get(file2, "id/fragment")()], children = _core.types.react.buildChildren(path3.node);
                args.push(_core.types.objectExpression(children.length > 0 ? [buildChildrenProperty(children)] : [])), development && args.push(path3.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));
                return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
              }(path2, file), path2.replaceWith(_core.types.inherits(callExpr, path2.node));
            } }, JSXElement: { exit(path2, file) {
              let callExpr;
              callExpr = "classic" === get(file, "runtime") || function(path3) {
                const openingPath = path3.get("openingElement"), attributes = openingPath.node.attributes;
                let seenPropsSpread = false;
                for (let i2 = 0; i2 < attributes.length; i2++) {
                  const attr = attributes[i2];
                  if (seenPropsSpread && _core.types.isJSXAttribute(attr) && "key" === attr.name.name) return true;
                  _core.types.isJSXSpreadAttribute(attr) && (seenPropsSpread = true);
                }
                return false;
              }(path2) ? function(path3, file2) {
                const openingPath = path3.get("openingElement");
                return call(file2, "createElement", [getTag(openingPath), buildCreateElementOpeningElementAttributes(file2, path3, openingPath.get("attributes")), ..._core.types.react.buildChildren(path3.node)]);
              }(path2, file) : function(path3, file2) {
                const openingPath = path3.get("openingElement"), args = [getTag(openingPath)], attribsArray = [], extracted = /* @__PURE__ */ Object.create(null);
                for (const attr of openingPath.get("attributes")) if (attr.isJSXAttribute() && _core.types.isJSXIdentifier(attr.node.name)) {
                  const { name: name2 } = attr.node.name;
                  switch (name2) {
                    case "__source":
                    case "__self":
                      if (extracted[name2]) throw sourceSelfError(path3, name2);
                    case "key": {
                      const keyValue = convertAttributeValue(attr.node.value);
                      if (null === keyValue) throw attr.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
                      extracted[name2] = keyValue;
                      break;
                    }
                    default:
                      attribsArray.push(attr);
                  }
                } else attribsArray.push(attr);
                const children = _core.types.react.buildChildren(path3.node);
                let attribs;
                attribs = attribsArray.length || children.length ? function(attribs2, children2) {
                  const props = attribs2.reduce(accumulateAttribute, []);
                  (null == children2 ? void 0 : children2.length) > 0 && props.push(buildChildrenProperty(children2));
                  return _core.types.objectExpression(props);
                }(attribsArray, children) : _core.types.objectExpression([]);
                if (args.push(attribs), development) {
                  var _extracted$key;
                  args.push(null != (_extracted$key = extracted.key) ? _extracted$key : path3.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1)), extracted.__source ? (args.push(extracted.__source), extracted.__self && args.push(extracted.__self)) : extracted.__self && args.push(path3.scope.buildUndefinedNode(), extracted.__self);
                } else void 0 !== extracted.key && args.push(extracted.key);
                return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
              }(path2, file), path2.replaceWith(_core.types.inherits(callExpr, path2.node));
            } }, JSXAttribute(path2) {
              _core.types.isJSXElement(path2.node.value) && (path2.node.value = _core.types.jsxExpressionContainer(path2.node.value));
            } } };
            function isDerivedClass(classPath) {
              return null !== classPath.node.superClass;
            }
            function call(pass, name2, args) {
              const node = _core.types.callExpression(get(pass, `id/${name2}`)(), args);
              return (null != PURE_ANNOTATION ? PURE_ANNOTATION : get(pass, "defaultPure")) && (0, _helperAnnotateAsPure.default)(node), node;
            }
            function convertJSXIdentifier(node, parent) {
              return _core.types.isJSXIdentifier(node) ? "this" === node.name && _core.types.isReferenced(node, parent) ? _core.types.thisExpression() : _core.types.isValidIdentifier(node.name, false) ? (node.type = "Identifier", node) : _core.types.stringLiteral(node.name) : _core.types.isJSXMemberExpression(node) ? _core.types.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node)) : _core.types.isJSXNamespacedName(node) ? _core.types.stringLiteral(`${node.namespace.name}:${node.name.name}`) : node;
            }
            function convertAttributeValue(node) {
              return _core.types.isJSXExpressionContainer(node) ? node.expression : node;
            }
            function accumulateAttribute(array, attribute) {
              if (_core.types.isJSXSpreadAttribute(attribute.node)) {
                const arg = attribute.node.argument;
                return _core.types.isObjectExpression(arg) && !arg.properties.some((value3) => _core.types.isObjectProperty(value3, { computed: false, shorthand: false }) && (_core.types.isIdentifier(value3.key, { name: "__proto__" }) || _core.types.isStringLiteral(value3.key, { value: "__proto__" }))) ? array.push(...arg.properties) : array.push(_core.types.spreadElement(arg)), array;
              }
              const value2 = convertAttributeValue("key" !== attribute.node.name.name ? attribute.node.value || _core.types.booleanLiteral(true) : attribute.node.value);
              if ("key" === attribute.node.name.name && null === value2) throw attribute.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
              var _value$extra;
              _core.types.isStringLiteral(value2) && !_core.types.isJSXExpressionContainer(attribute.node.value) && (value2.value = value2.value.replace(/\n\s+/g, " "), null == (_value$extra = value2.extra) || delete _value$extra.raw);
              return _core.types.isJSXNamespacedName(attribute.node.name) ? attribute.node.name = _core.types.stringLiteral(attribute.node.name.namespace.name + ":" + attribute.node.name.name.name) : _core.types.isValidIdentifier(attribute.node.name.name, false) ? attribute.node.name.type = "Identifier" : attribute.node.name = _core.types.stringLiteral(attribute.node.name.name), array.push(_core.types.inherits(_core.types.objectProperty(attribute.node.name, value2), attribute.node)), array;
            }
            function buildChildrenProperty(children) {
              let childrenNode;
              if (1 === children.length) childrenNode = children[0];
              else {
                if (!(children.length > 1)) return;
                childrenNode = _core.types.arrayExpression(children);
              }
              return _core.types.objectProperty(_core.types.identifier("children"), childrenNode);
            }
            function getTag(openingPath) {
              const tagExpr = convertJSXIdentifier(openingPath.node.name, openingPath.node);
              let tagName;
              return _core.types.isIdentifier(tagExpr) ? tagName = tagExpr.name : _core.types.isStringLiteral(tagExpr) && (tagName = tagExpr.value), _core.types.react.isCompatTag(tagName) ? _core.types.stringLiteral(tagName) : tagExpr;
            }
            function buildCreateElementOpeningElementAttributes(file, path2, attribs) {
              const runtime = get(file, "runtime");
              if ("automatic" !== runtime) {
                const objs = [], props2 = attribs.reduce(accumulateAttribute, []);
                if (useSpread) props2.length && objs.push(_core.types.objectExpression(props2));
                else {
                  let start = 0;
                  props2.forEach((prop, i2) => {
                    _core.types.isSpreadElement(prop) && (i2 > start && objs.push(_core.types.objectExpression(props2.slice(start, i2))), objs.push(prop.argument), start = i2 + 1);
                  }), props2.length > start && objs.push(_core.types.objectExpression(props2.slice(start)));
                }
                if (!objs.length) return _core.types.nullLiteral();
                if (!(1 !== objs.length || _core.types.isSpreadElement(props2[0]) && _core.types.isObjectExpression(props2[0].argument))) return objs[0];
                _core.types.isObjectExpression(objs[0]) || objs.unshift(_core.types.objectExpression([]));
                const helper = useBuiltIns ? _core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")) : file.addHelper("extends");
                return _core.types.callExpression(helper, objs);
              }
              const props = [], found = /* @__PURE__ */ Object.create(null);
              for (const attr of attribs) {
                const { node } = attr, name2 = _core.types.isJSXAttribute(node) && _core.types.isJSXIdentifier(node.name) && node.name.name;
                if ("automatic" === runtime && ("__source" === name2 || "__self" === name2)) {
                  if (found[name2]) throw sourceSelfError(path2, name2);
                  found[name2] = true;
                }
                accumulateAttribute(props, attr);
              }
              return 1 === props.length && _core.types.isSpreadElement(props[0]) && !_core.types.isObjectExpression(props[0].argument) ? props[0].argument : props.length > 0 ? _core.types.objectExpression(props) : _core.types.nullLiteral();
            }
          });
        };
        var _pluginSyntaxJsx = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js");
        const DEFAULT = { importSource: "react", runtime: "automatic", pragma: "React.createElement", pragmaFrag: "React.Fragment" }, JSX_SOURCE_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxImportSource\s+(\S+)\s*$/m, JSX_RUNTIME_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxRuntime\s+(\S+)\s*$/m, JSX_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsx\s+(\S+)\s*$/m, JSX_FRAG_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxFrag\s+(\S+)\s*$/m, get = (pass, name) => pass.get(`@babel/plugin-react-jsx/${name}`), set = (pass, name, v2) => pass.set(`@babel/plugin-react-jsx/${name}`, v2);
        function toMemberExpression(id) {
          return id.split(".").map((name) => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));
        }
        function sourceSelfError(path2, name) {
          const pluginName = `transform-react-jsx-${name.slice(2)}`;
          return path2.buildCodeFrameError(`Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.A = void 0;
        var _createPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js");
        exports3.A = (0, _createPlugin.default)({ name: "transform-react-jsx", development: false });
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path2, t2) {
          const { name } = path2.node.id, parentIsExport = path2.parentPath.isExportNamedDeclaration();
          let isExported = parentIsExport;
          !isExported && t2.isProgram(path2.parent) && (isExported = path2.parent.body.some((stmt) => t2.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t2.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
          const { enumValues: entries } = (0, _enum.translateEnumValues)(path2, t2);
          if (isExported) {
            const obj = t2.objectExpression(entries.map(([name2, value2]) => t2.objectProperty(t2.isValidIdentifier(name2) ? t2.identifier(name2) : t2.stringLiteral(name2), value2)));
            return void (path2.scope.hasOwnBinding(name) ? (parentIsExport ? path2.parentPath : path2).replaceWith(t2.expressionStatement(t2.callExpression(t2.memberExpression(t2.identifier("Object"), t2.identifier("assign")), [path2.node.id, obj]))) : (path2.replaceWith(t2.variableDeclaration("var", [t2.variableDeclarator(path2.node.id, obj)])), path2.scope.registerDeclaration(path2)));
          }
          const entriesMap = new Map(entries);
          path2.scope.path.traverse({ Scope(path3) {
            path3.scope.hasOwnBinding(name) && path3.skip();
          }, MemberExpression(path3) {
            if (!t2.isIdentifier(path3.node.object, { name })) return;
            let key;
            if (path3.node.computed) {
              if (!t2.isStringLiteral(path3.node.property)) return;
              key = path3.node.property.value;
            } else {
              if (!t2.isIdentifier(path3.node.property)) return;
              key = path3.node.property.name;
            }
            entriesMap.has(key) && path3.replaceWith(t2.cloneNode(entriesMap.get(key)));
          } }), path2.remove();
        };
        var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path2, t2) {
          const { node, parentPath } = path2;
          if (node.declare) return void path2.remove();
          const name = node.id.name, { fill, data, isPure } = function(path3, t3, id) {
            const { enumValues: x, data: data2, isPure: isPure2 } = translateEnumValues(path3, t3), assignments = x.map(([memberName, memberValue]) => buildEnumMember(isSyntacticallyString(memberValue), { ENUM: t3.cloneNode(id), NAME: memberName, VALUE: memberValue }));
            return { fill: { ID: t3.cloneNode(id), ASSIGNMENTS: assignments }, data: data2, isPure: isPure2 };
          }(path2, t2, node.id);
          switch (parentPath.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program": {
              const isGlobal = t2.isProgram(path2.parent), isSeen = function seen(parentPath2) {
                if (parentPath2.isExportDeclaration()) return seen(parentPath2.parentPath);
                return !!parentPath2.getData(name) || (parentPath2.setData(name, true), false);
              }(parentPath);
              let init = t2.objectExpression([]);
              (isSeen || isGlobal) && (init = t2.logicalExpression("||", t2.cloneNode(fill.ID), init));
              const enumIIFE = buildEnumWrapper(Object.assign({}, fill, { INIT: init }));
              if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) {
                (parentPath.isExportDeclaration() ? parentPath : path2).replaceWith(t2.expressionStatement(t2.assignmentExpression("=", t2.cloneNode(node.id), enumIIFE)));
              } else path2.scope.registerDeclaration(path2.replaceWith(t2.variableDeclaration(isGlobal ? "var" : "let", [t2.variableDeclarator(node.id, enumIIFE)]))[0]);
              ENUMS.set(path2.scope.getBindingIdentifier(name), data);
              break;
            }
            default:
              throw new Error(`Unexpected enum parent '${path2.parent.type}`);
          }
        }, exports3.isSyntacticallyString = isSyntacticallyString, exports3.translateEnumValues = translateEnumValues;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        const ENUMS = /* @__PURE__ */ new WeakMap(), buildEnumWrapper = _core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");
        const buildStringAssignment = (0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'), buildNumericAssignment = (0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'), buildEnumMember = (isString2, options) => (isString2 ? buildStringAssignment : buildNumericAssignment)(options);
        function isSyntacticallyString(expr) {
          switch ((expr = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(expr)).type) {
            case "BinaryExpression": {
              const left = expr.left, right = expr.right;
              return "+" === expr.operator && (isSyntacticallyString(left) || isSyntacticallyString(right));
            }
            case "TemplateLiteral":
            case "StringLiteral":
              return true;
          }
          return false;
        }
        function ReferencedIdentifier(expr, state) {
          const { seen, path: path2, t: t2 } = state, name = expr.node.name;
          seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t2.memberExpression(t2.cloneNode(path2.node.id), t2.cloneNode(expr.node))), expr.skip());
        }
        const enumSelfReferenceVisitor = { ReferencedIdentifier };
        function translateEnumValues(path2, t2) {
          var _ENUMS$get;
          const bindingIdentifier = path2.scope.getBindingIdentifier(path2.node.id.name), seen = null != (_ENUMS$get = ENUMS.get(bindingIdentifier)) ? _ENUMS$get : /* @__PURE__ */ new Map();
          let lastName, constValue = -1, isPure = true;
          const enumValues = path2.get("members").map((memberPath) => {
            const member = memberPath.node, name = t2.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
            let value2;
            if (member.initializer) constValue = computeConstantValue(initializerPath, seen), void 0 !== constValue ? (seen.set(name, constValue), _assert("number" == typeof constValue || "string" == typeof constValue), value2 = constValue === 1 / 0 || Number.isNaN(constValue) ? t2.identifier(String(constValue)) : constValue === -1 / 0 ? t2.unaryExpression("-", t2.identifier("Infinity")) : t2.valueToNode(constValue)) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t: t2, seen, path: path2 }) : initializerPath.traverse(enumSelfReferenceVisitor, { t: t2, seen, path: path2 }), value2 = initializerPath.node, seen.set(name, void 0));
            else if ("number" == typeof constValue) constValue += 1, value2 = t2.numericLiteral(constValue), seen.set(name, constValue);
            else {
              if ("string" == typeof constValue) throw path2.buildCodeFrameError("Enum member must have initializer.");
              {
                const lastRef = t2.memberExpression(t2.cloneNode(path2.node.id), t2.stringLiteral(lastName), true);
                value2 = t2.binaryExpression("+", t2.numericLiteral(1), lastRef), seen.set(name, void 0);
              }
            }
            return lastName = name, [name, value2];
          });
          return { isPure, data: seen, enumValues };
        }
        function computeConstantValue(path2, prevMembers, seen = /* @__PURE__ */ new Set()) {
          return evaluate(path2);
          function evaluate(path3) {
            const expr = path3.node;
            switch (expr.type) {
              case "MemberExpression":
              case "Identifier":
                return evaluateRef(path3, prevMembers, seen);
              case "StringLiteral":
              case "NumericLiteral":
                return expr.value;
              case "UnaryExpression":
                return function(path4) {
                  const value2 = evaluate(path4.get("argument"));
                  if (void 0 === value2) return;
                  switch (path4.node.operator) {
                    case "+":
                      return value2;
                    case "-":
                      return -value2;
                    case "~":
                      return ~value2;
                    default:
                      return;
                  }
                }(path3);
              case "BinaryExpression":
                return function(path4) {
                  const left = evaluate(path4.get("left"));
                  if (void 0 === left) return;
                  const right = evaluate(path4.get("right"));
                  if (void 0 === right) return;
                  switch (path4.node.operator) {
                    case "|":
                      return left | right;
                    case "&":
                      return left & right;
                    case ">>":
                      return left >> right;
                    case ">>>":
                      return left >>> right;
                    case "<<":
                      return left << right;
                    case "^":
                      return left ^ right;
                    case "*":
                      return left * right;
                    case "/":
                      return left / right;
                    case "+":
                      return left + right;
                    case "-":
                      return left - right;
                    case "%":
                      return left % right;
                    case "**":
                      return Math.pow(left, right);
                    default:
                      return;
                  }
                }(path3);
              case "ParenthesizedExpression":
                return evaluate(path3.get("expression"));
              case "TemplateLiteral": {
                if (1 === expr.quasis.length) return expr.quasis[0].value.cooked;
                const paths = path3.get("expressions"), quasis = expr.quasis;
                let str = "";
                for (let i2 = 0; i2 < quasis.length; i2++) if (str += quasis[i2].value.cooked, i2 + 1 < quasis.length) {
                  const value2 = evaluateRef(paths[i2], prevMembers, seen);
                  if (void 0 === value2) return;
                  str += value2;
                }
                return str;
              }
              default:
                return;
            }
          }
          function evaluateRef(path3, prevMembers2, seen2) {
            if (path3.isMemberExpression()) {
              const expr = path3.node, obj = expr.object, prop = expr.property;
              if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) return;
              const bindingIdentifier = path3.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
              if (!data) return;
              return data.get(prop.computed ? prop.value : prop.name);
            }
            if (path3.isIdentifier()) {
              const name = path3.node.name;
              if (["Infinity", "NaN"].includes(name)) return Number(name);
              let value2 = null == prevMembers2 ? void 0 : prevMembers2.get(name);
              if (void 0 !== value2) return value2;
              if (seen2.has(path3.node)) return;
              return seen2.add(path3.node), value2 = computeConstantValue(path3.resolve(), prevMembers2, seen2), null == prevMembers2 || prevMembers2.set(name, value2), value2;
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.GLOBAL_TYPES = void 0, exports3.isGlobalType = function({ scope }, name) {
          return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
        }, exports3.registerGlobalType = function(programScope, name) {
          GLOBAL_TYPES.get(programScope).add(name);
        };
        const GLOBAL_TYPES = exports3.GLOBAL_TYPES = /* @__PURE__ */ new WeakMap();
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
        function isInType(path2) {
          switch (path2.parent.type) {
            case "TSTypeReference":
            case "TSExpressionWithTypeArguments":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            case "TSQualifiedName":
              return "TSImportEqualsDeclaration" !== path2.parentPath.findParent((path3) => "TSQualifiedName" !== path3.type).type;
            case "ExportSpecifier":
              return "type" === path2.parent.exportKind || "type" === path2.parentPath.parent.exportKind;
            default:
              return false;
          }
        }
        const NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap(), PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
        function safeRemove(path2) {
          const ids = path2.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            const binding = path2.scope.getBinding(name);
            binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
          }
          path2.opts.noScope = true, path2.remove(), path2.opts.noScope = false;
        }
        function assertCjsTransformEnabled(path2, pass, wrong, suggestion, extra = "") {
          if ("commonjs" !== pass.file.get("@babel/plugin-transform-modules-*")) throw path2.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.
Please consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
        }
        exports3.default = (0, _helperPluginUtils.declare)((api, opts) => {
          const { types: t2, template: template3 } = api;
          api.assertVersion(7);
          const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+(\S+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
          var { allowDeclareFields = false } = opts;
          const classMemberVisitors = { field(path2) {
            const { node } = path2;
            if (!allowDeclareFields && node.declare) throw path2.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (node.declare) {
              if (node.value) throw path2.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
              node.decorators || path2.remove();
            } else if (node.definite) {
              if (node.value) throw path2.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
              allowDeclareFields || node.decorators || t2.isClassPrivateProperty(node) || path2.remove();
            } else node.abstract ? path2.remove() : allowDeclareFields || node.value || node.decorators || t2.isClassPrivateProperty(node) || path2.remove();
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
          }, method({ node }) {
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
          }, constructor(path2, classPath) {
            path2.node.accessibility && (path2.node.accessibility = null);
            const assigns = [], { scope } = path2;
            for (const paramPath of path2.get("params")) {
              const param = paramPath.node;
              if ("TSParameterProperty" === param.type) {
                const parameter = param.parameter;
                if (PARSED_PARAMS.has(parameter)) continue;
                let id;
                if (PARSED_PARAMS.add(parameter), t2.isIdentifier(parameter)) id = parameter;
                else {
                  if (!t2.isAssignmentPattern(parameter) || !t2.isIdentifier(parameter.left)) throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                  id = parameter.left;
                }
                assigns.push(template3.statement.ast`
              this.${t2.cloneNode(id)} = ${t2.cloneNode(id)}
            `), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
              }
            }
            (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path2, assigns);
          } };
          return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path2, state) {
            const { file } = state;
            let fileJsxPragma = null, fileJsxPragmaFrag = null;
            const programScope = path2.scope;
            if (_globalTypes.GLOBAL_TYPES.has(programScope) || _globalTypes.GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set()), file.ast.comments) for (const comment of file.ast.comments) {
              const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
              jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
            }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
            for (let stmt of path2.get("body")) if (stmt.isImportDeclaration()) {
              if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" === stmt.node.importKind) {
                for (const specifier of stmt.node.specifiers) (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                stmt.remove();
                continue;
              }
              const importsToRemove = /* @__PURE__ */ new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
              for (const specifier of stmt.node.specifiers) if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
                (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                const binding = stmt.scope.getBinding(specifier.local.name);
                binding && importsToRemove.add(binding.path);
              }
              if (onlyRemoveTypeImports) NEEDS_EXPLICIT_ESM.set(path2.node, false);
              else {
                if (0 === stmt.node.specifiers.length) {
                  NEEDS_EXPLICIT_ESM.set(path2.node, false);
                  continue;
                }
                for (const specifier of stmt.node.specifiers) {
                  const binding = stmt.scope.getBinding(specifier.local.name);
                  binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path2, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path2.node, false));
                }
              }
              if (isAllSpecifiersElided() && !onlyRemoveTypeImports) stmt.remove();
              else for (const importPath of importsToRemove) importPath.remove();
            } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true })) for (const name of Object.keys(stmt.getBindingIdentifiers())) (0, _globalTypes.registerGlobalType)(programScope, name);
            else (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
          }, exit(path2) {
            "module" === path2.node.sourceType && NEEDS_EXPLICIT_ESM.get(path2.node) && path2.pushContainer("body", t2.exportNamedDeclaration());
          } }, ExportNamedDeclaration(path2, state) {
            if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" !== path2.node.exportKind) if (path2.node.source && path2.node.specifiers.length > 0 && path2.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind)) path2.remove();
            else if (!path2.node.source && path2.node.specifiers.length > 0 && path2.node.specifiers.every((specifier) => t2.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path2, specifier.local.name))) path2.remove();
            else {
              if (t2.isTSModuleDeclaration(path2.node.declaration)) {
                const namespace = path2.node.declaration;
                if (!t2.isStringLiteral(namespace.id)) {
                  const id = (0, _namespace.getFirstIdentifier)(namespace.id);
                  if (path2.scope.hasOwnBinding(id.name)) path2.replaceWith(namespace);
                  else {
                    const [newExport] = path2.replaceWithMultiple([t2.exportNamedDeclaration(t2.variableDeclaration("let", [t2.variableDeclarator(t2.cloneNode(id))])), namespace]);
                    path2.scope.registerDeclaration(newExport);
                  }
                }
              }
              NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
            }
            else path2.remove();
          }, ExportAllDeclaration(path2) {
            "type" === path2.node.exportKind && path2.remove();
          }, ExportSpecifier(path2) {
            (!path2.parent.source && (0, _globalTypes.isGlobalType)(path2, path2.node.local.name) || "type" === path2.node.exportKind) && path2.remove();
          }, ExportDefaultDeclaration(path2, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), t2.isIdentifier(path2.node.declaration) && (0, _globalTypes.isGlobalType)(path2, path2.node.declaration.name) ? path2.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
          }, TSDeclareFunction(path2) {
            safeRemove(path2);
          }, TSDeclareMethod(path2) {
            safeRemove(path2);
          }, VariableDeclaration(path2) {
            path2.node.declare && safeRemove(path2);
          }, VariableDeclarator({ node }) {
            node.definite && (node.definite = null);
          }, TSIndexSignature(path2) {
            path2.remove();
          }, ClassDeclaration(path2) {
            const { node } = path2;
            node.declare && safeRemove(path2);
          }, Class(path2) {
            const { node } = path2;
            node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path2.get("body.body").forEach((child) => {
              child.isClassMethod() || child.isClassPrivateMethod() ? "constructor" === child.node.kind ? classMemberVisitors.constructor(child, path2) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) && classMemberVisitors.field(child);
            });
          }, Function(path2) {
            const { node } = path2;
            node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
            const params = node.params;
            params.length > 0 && t2.isIdentifier(params[0], { name: "this" }) && params.shift();
          }, TSModuleDeclaration(path2) {
            (0, _namespace.default)(path2, allowNamespaces);
          }, TSInterfaceDeclaration(path2) {
            path2.remove();
          }, TSTypeAliasDeclaration(path2) {
            path2.remove();
          }, TSEnumDeclaration(path2) {
            optimizeConstEnums && path2.node.const ? (0, _constEnum.default)(path2, t2) : (0, _enum.default)(path2, t2);
          }, TSImportEqualsDeclaration(path2, pass) {
            const { id, moduleReference, isExport } = path2.node;
            let init, varKind;
            t2.isTSExternalModuleReference(moduleReference) ? (assertCjsTransformEnabled(path2, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option"), init = t2.callExpression(t2.identifier("require"), [moduleReference.expression]), varKind = "const") : (init = entityNameToExpr(moduleReference), varKind = "var");
            const newNode = t2.variableDeclaration(varKind, [t2.variableDeclarator(id, init)]);
            path2.replaceWith(isExport ? t2.exportNamedDeclaration(newNode) : newNode), path2.scope.registerDeclaration(path2);
          }, TSExportAssignment(path2, pass) {
            assertCjsTransformEnabled(path2, pass, "export = <value>;", "export default <value>;"), path2.replaceWith(template3.statement.ast`module.exports = ${path2.node.expression}`);
          }, TSTypeAssertion(path2) {
            path2.replaceWith(path2.node.expression);
          }, ["TSAsExpression" + (t2.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path2) {
            let { node } = path2;
            do {
              node = node.expression;
            } while (t2.isTSAsExpression(node) || null != t2.isTSSatisfiesExpression && t2.isTSSatisfiesExpression(node));
            path2.replaceWith(node);
          }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path2) {
            path2.replaceWith(path2.node.expression);
          }, CallExpression(path2) {
            path2.node.typeParameters = null;
          }, OptionalCallExpression(path2) {
            path2.node.typeParameters = null;
          }, NewExpression(path2) {
            path2.node.typeParameters = null;
          }, JSXOpeningElement(path2) {
            path2.node.typeParameters = null;
          }, TaggedTemplateExpression(path2) {
            path2.node.typeParameters = null;
          } } };
          function entityNameToExpr(node) {
            return t2.isTSQualifiedName(node) ? t2.memberExpression(entityNameToExpr(node.left), node.right) : node;
          }
          function visitPattern({ node }) {
            node.typeAnnotation && (node.typeAnnotation = null), t2.isIdentifier(node) && node.optional && (node.optional = null);
          }
          function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
            for (const path2 of binding.referencePaths) if (!isInType(path2)) return false;
            if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName) return true;
            let sourceFileHasJsx = false;
            return programPath.traverse({ "JSXElement|JSXFragment"(path2) {
              sourceFileHasJsx = true, path2.stop();
            } }), !sourceFileHasJsx;
          }
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path2, allowNamespaces) {
          if (path2.node.declare || "StringLiteral" === path2.node.id.type) return void path2.remove();
          if (!allowNamespaces) throw path2.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const name = getFirstIdentifier(path2.node.id).name, value2 = handleNested(path2, path2.node);
          if (null === value2) {
            const program = path2.findParent((p2) => p2.isProgram());
            (0, _globalTypes.registerGlobalType)(program.scope, name), path2.remove();
          } else path2.scope.hasOwnBinding(name) ? path2.replaceWith(value2) : path2.scope.registerDeclaration(path2.replaceWithMultiple([getDeclaration(name), value2])[0]);
        }, exports3.getFirstIdentifier = getFirstIdentifier;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js");
        function getFirstIdentifier(node) {
          return _core.types.isIdentifier(node) ? node : getFirstIdentifier(node.left);
        }
        function getDeclaration(name) {
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
        }
        function getMemberExpression(name, itemName) {
          return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
        }
        function handleVariableDeclaration(node, name, hub) {
          if ("const" !== node.kind) throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const { declarations } = node;
          if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
            for (const declarator of declarations) declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
            return [node];
          }
          const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
          for (const idName in bindingIdentifiers) assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
          return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
        }
        function buildNestedAmbientModuleError(path2, node) {
          return path2.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
        }
        function handleNested(path2, node, parentExport) {
          const names = /* @__PURE__ */ new Set(), realName = node.id, name = path2.scope.generateUid(realName.name), body = node.body;
          let namespaceTopLevel;
          node.id;
          namespaceTopLevel = _core.types.isTSModuleBlock(body) ? body.body : [_core.types.exportNamedDeclaration(body)];
          let isEmpty = true;
          for (let i2 = 0; i2 < namespaceTopLevel.length; i2++) {
            const subNode = namespaceTopLevel[i2];
            switch (subNode.type) {
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.id)) throw buildNestedAmbientModuleError(path2, subNode);
                const transformed = handleNested(path2, subNode);
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i2] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i2++, 1, getDeclaration(moduleName), transformed));
                }
                continue;
              }
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration":
                isEmpty = false, names.add(subNode.id.name);
                continue;
              case "VariableDeclaration":
                isEmpty = false;
                for (const name2 in _core.types.getBindingIdentifiers(subNode)) names.add(name2);
                continue;
              default:
                isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
                continue;
              case "ExportNamedDeclaration":
            }
            if (!("declare" in subNode.declaration) || !subNode.declaration.declare) switch (subNode.declaration.type) {
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration": {
                isEmpty = false;
                const itemName = subNode.declaration.id.name;
                names.add(itemName), namespaceTopLevel.splice(i2++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                break;
              }
              case "VariableDeclaration": {
                isEmpty = false;
                const nodes = handleVariableDeclaration(subNode.declaration, name, path2.hub);
                namespaceTopLevel.splice(i2, nodes.length, ...nodes), i2 += nodes.length - 1;
                break;
              }
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.declaration.id)) throw buildNestedAmbientModuleError(path2, subNode.declaration);
                const transformed = handleNested(path2, subNode.declaration, _core.types.identifier(name));
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.declaration.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i2] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i2++, 1, getDeclaration(moduleName), transformed));
                } else namespaceTopLevel.splice(i2, 1), i2--;
              }
            }
          }
          if (isEmpty) return null;
          let fallthroughValue = _core.types.objectExpression([]);
          if (parentExport) {
            const memberExpr = _core.types.memberExpression(parentExport, realName);
            fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
          }
          return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
        }
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js");
        var transformModulesCommonJS = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), helperValidatorOption = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js");
        function _interopDefault(e) {
          return e && e.__esModule ? e : { default: e };
        }
        var transformTypeScript__default = _interopDefault(transformTypeScript), transformModulesCommonJS__default = _interopDefault(transformModulesCommonJS);
        const v2 = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
        var pluginRewriteTSImports = helperPluginUtils.declare(function({ types: t2, template: template3 }) {
          function maybeReplace(source, path2) {
            source && (t2.isStringLiteral(source) ? /[\\/]/.test(source.value) && (source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js")) : path2.replaceWith(template3.expression.ast`(${source} + "").replace(/([\\/].*\.[mc]?)tsx?$/, "$1js")`));
          }
          return { name: "preset-typescript/plugin-rewrite-ts-imports", visitor: { "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"(path2) {
            const node = path2.node;
            "value" === (t2.isImportDeclaration(node) ? node.importKind : node.exportKind) && maybeReplace(node.source, path2.get("source"));
          }, CallExpression(path2) {
            t2.isImport(path2.node.callee) && maybeReplace(path2.node.arguments[0], path2.get("arguments.0"));
          }, ImportExpression(path2) {
            maybeReplace(path2.node.source, path2.get("source"));
          } } };
        }), index2 = helperPluginUtils.declarePreset((api, opts) => {
          api.assertVersion(7);
          const { allExtensions, ignoreExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums, rewriteImportExtensions } = function(options = {}) {
            let { allowNamespaces: allowNamespaces2 = true, jsxPragma: jsxPragma2, onlyRemoveTypeImports: onlyRemoveTypeImports2 } = options;
            const TopLevelOptions_ignoreExtensions = "ignoreExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", TopLevelOptions_rewriteImportExtensions = "rewriteImportExtensions", TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_isTSX = "isTSX", jsxPragmaFrag2 = v2.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
            var allExtensions2 = v2.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, false), isTSX2 = v2.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, false);
            isTSX2 && v2.invariant(allExtensions2, "isTSX:true requires allExtensions:true");
            const ignoreExtensions2 = v2.validateBooleanOption(TopLevelOptions_ignoreExtensions, options.ignoreExtensions, false), disallowAmbiguousJSXLike2 = v2.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
            disallowAmbiguousJSXLike2 && v2.invariant(allExtensions2, "disallowAmbiguousJSXLike:true requires allExtensions:true");
            const normalized = { ignoreExtensions: ignoreExtensions2, allowNamespaces: allowNamespaces2, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma: jsxPragma2, jsxPragmaFrag: jsxPragmaFrag2, onlyRemoveTypeImports: onlyRemoveTypeImports2, optimizeConstEnums: v2.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, false), rewriteImportExtensions: v2.validateBooleanOption(TopLevelOptions_rewriteImportExtensions, options.rewriteImportExtensions, false) };
            return normalized.allExtensions = allExtensions2, normalized.isTSX = isTSX2, normalized;
          }(opts), pluginOptions = (disallowAmbiguousJSXLike2) => ({ allowDeclareFields: opts.allowDeclareFields, allowNamespaces, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums }), getPlugins = (isTSX2, disallowAmbiguousJSXLike2) => [[transformTypeScript__default.default, Object.assign({ isTSX: isTSX2 }, pluginOptions(disallowAmbiguousJSXLike2))]];
          return { plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [], overrides: allExtensions || ignoreExtensions ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }] : [{ test: /\.ts$/, plugins: getPlugins(false, false) }, { test: /\.mts$/, sourceType: "module", plugins: getPlugins(false, true) }, { test: /\.cts$/, sourceType: "unambiguous", plugins: [[transformModulesCommonJS__default.default, { allowTopLevelThis: true }], [transformTypeScript__default.default, pluginOptions(true)]] }, { test: /\.tsx$/, plugins: getPlugins(true, false) }] };
        });
        exports3.default = index2;
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = /* @__PURE__ */ new WeakMap(), templateAstCache = /* @__PURE__ */ new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign((tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
            }
            if (Array.isArray(tpl)) {
              let builder = templateFnCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
            }
            if ("object" == typeof tpl && tpl) {
              if (args.length > 0) throw new Error("Unexpected extra params.");
              return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
            }
            throw new Error("Unexpected template param " + typeof tpl);
          }, { ast: (tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            }
            if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
            }
            throw new Error("Unexpected template param " + typeof tpl);
          } });
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js");
        const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
        function extendedTrace(fn) {
          let rootStack = "";
          try {
            throw new Error();
          } catch (error) {
            error.stack && (rootStack = error.stack.split("\n").slice(3).join("\n"));
          }
          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              throw err.stack += `
    =============
${rootStack}`, err;
            }
          };
        }
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.statements = exports3.statement = exports3.smart = exports3.program = exports3.expression = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { assertExpressionStatement } = _t;
        function makeStatementFormatter(fn) {
          return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
          }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
        }
        exports3.smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]), exports3.statements = makeStatementFormatter((body) => body), exports3.statement = makeStatementFormatter((body) => {
          if (0 === body.length) throw new Error("Found nothing to return.");
          if (body.length > 1) throw new Error("Found multiple statements but wanted one");
          return body[0];
        });
        const expression = exports3.expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
          if (ast.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
          if (0 === expression.unwrap(ast).start) throw new Error("Parse result included parens.");
        }, unwrap: ({ program }) => {
          const [stmt] = program.body;
          return assertExpressionStatement(stmt), stmt.expression;
        } };
        exports3.program = { code: (str) => str, validate: () => {
        }, unwrap: (ast) => ast.program };
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.statements = exports3.statement = exports3.smart = exports3.program = exports3.expression = exports3.default = void 0;
        var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js");
        const smart = exports3.smart = (0, _builder.default)(formatters.smart), statement = exports3.statement = (0, _builder.default)(formatters.statement), statements = exports3.statements = (0, _builder.default)(formatters.statements), expression = exports3.expression = (0, _builder.default)(formatters.expression), program = exports3.program = (0, _builder.default)(formatters.program);
        exports3.default = Object.assign(smart.bind(void 0), { smart, statement, statements, expression, program, ast: smart.ast });
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, tpl, opts) {
          const { metadata, names } = function(formatter2, tpl2, opts2) {
            let prefix = "BABEL_TPL$";
            const raw = tpl2.join("");
            do {
              prefix = "$$" + prefix;
            } while (raw.includes(prefix));
            const { names: names2, code } = function(tpl3, prefix2) {
              const names3 = [];
              let code2 = tpl3[0];
              for (let i2 = 1; i2 < tpl3.length; i2++) {
                const value2 = `${prefix2}${i2 - 1}`;
                names3.push(value2), code2 += value2 + tpl3[i2];
              }
              return { names: names3, code: code2 };
            }(tpl2, prefix), metadata2 = (0, _parse.default)(formatter2, formatter2.code(code), { parser: opts2.parser, placeholderWhitelist: new Set(names2.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
            return { metadata: metadata2, names: names2 };
          }(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            return arg.forEach((replacement, i2) => {
              defaultReplacements[names[i2]] = replacement;
            }), (arg2) => {
              const replacements = (0, _options.normalizeReplacements)(arg2);
              return replacements && Object.keys(replacements).forEach((key) => {
                if (hasOwnProperty.call(defaultReplacements, key)) throw new Error("Unexpected replacement overlap.");
              }), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
            };
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.merge = function(a2, b) {
          const { placeholderWhitelist = a2.placeholderWhitelist, placeholderPattern = a2.placeholderPattern, preserveComments = a2.preserveComments, syntacticPlaceholders = a2.syntacticPlaceholders } = b;
          return { parser: Object.assign({}, a2.parser, b.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
        }, exports3.normalizeReplacements = function(replacements) {
          if (Array.isArray(replacements)) return replacements.reduce((acc, replacement, i2) => (acc["$" + i2] = replacement, acc), {});
          if ("object" == typeof replacements || null == replacements) return replacements || void 0;
          throw new Error("Template replacements must be an array, object, null, or undefined");
        }, exports3.validate = function(opts) {
          if (null != opts && "object" != typeof opts) throw new Error("Unknown template options.");
          const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(r2, e) {
            if (null == r2) return {};
            var t2 = {};
            for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
              if (e.includes(n2)) continue;
              t2[n2] = r2[n2];
            }
            return t2;
          }(_ref, _excluded);
          if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
          if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && false !== placeholderPattern) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
          if (null != preserveComments && "boolean" != typeof preserveComments) throw new Error("'.preserveComments' must be a boolean, null, or undefined");
          if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders) throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
          if (true === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          return { parser, placeholderWhitelist: placeholderWhitelist || void 0, placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern, preserveComments: null == preserveComments ? void 0 : preserveComments, syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders };
        };
        const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, code, opts) {
          const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
            const plugins = (parserOpts.plugins || []).slice();
            false !== syntacticPlaceholders2 && plugins.push("placeholders");
            parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
            try {
              return (0, _parser.parse)(code2, parserOpts);
            } catch (err) {
              const loc = err.loc;
              throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
            }
          }(code, opts.parser, syntacticPlaceholders);
          removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
          const state = { syntactic: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, legacy: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, placeholderWhitelist, placeholderPattern, syntacticPlaceholders };
          return traverse(ast, placeholderVisitorHandler, state), Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel-codeframe.mjs");
        const { isCallExpression, isExpressionStatement, isFunction: isFunction2, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;
          let name, hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
          if (isPlaceholder(node)) {
            if (false === state.syntacticPlaceholders) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
            name = node.name.name, hasSyntacticPlaceholders = true;
          } else {
            if (hasSyntacticPlaceholders || state.syntacticPlaceholders) return;
            if (isIdentifier(node) || isJSXIdentifier(node)) name = node.name;
            else {
              if (!isStringLiteral(node)) return;
              name = node.value;
            }
          }
          if (hasSyntacticPlaceholders && (null != state.placeholderPattern || null != state.placeholderWhitelist)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          if (!(hasSyntacticPlaceholders || false !== state.placeholderPattern && (state.placeholderPattern || PATTERN).test(name) || null != (_state$placeholderWhi = state.placeholderWhitelist) && _state$placeholderWhi.has(name))) return;
          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;
          isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction2(parent) && "params" === key ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
          const { placeholders, placeholderNames } = hasSyntacticPlaceholders ? state.syntactic : state.legacy;
          placeholders.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
            let parent2 = ast2;
            for (let i2 = 0; i2 < ancestors2.length - 1; i2++) {
              const { key: key3, index: index3 } = ancestors2[i2];
              parent2 = void 0 === index3 ? parent2[key3] : parent2[key3][index3];
            }
            const { key: key2, index: index2 } = ancestors2[ancestors2.length - 1];
            return { parent: parent2, key: key2, index: index2 };
          }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
        }
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(metadata, replacements) {
          const ast = cloneNode(metadata.ast);
          replacements && (metadata.placeholders.forEach((placeholder) => {
            if (!hasOwnProperty.call(replacements, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          }), Object.keys(replacements).forEach((key) => {
            if (!metadata.placeholderNames.has(key)) throw new Error(`Unknown substitution "${key}" given`);
          }));
          return metadata.placeholders.slice().reverse().forEach((placeholder) => {
            try {
              !function(placeholder2, ast2, replacement) {
                placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : "object" == typeof replacement && (replacement = cloneNode(replacement)));
                const { parent, key, index: index2 } = placeholder2.resolve(ast2);
                if ("string" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement)) throw new Error("Expected string substitution");
                } else if ("statement" === placeholder2.type) void 0 === index2 ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
                else if ("param" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index2) throw new Error("Assertion failure.");
                } else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement)) throw new Error("Cannot replace single expression with an array.");
                function set(parent2, key2, value2) {
                  const node = parent2[key2];
                  parent2[key2] = value2, "Identifier" !== node.type && "Placeholder" !== node.type || (node.typeAnnotation && (value2.typeAnnotation = node.typeAnnotation), node.optional && (value2.optional = node.optional), node.decorators && (value2.decorators = node.decorators));
                }
                if (void 0 === index2) validate(parent, key, replacement), set(parent, key, replacement);
                else {
                  const items = parent[key].slice();
                  "statement" === placeholder2.type || "param" === placeholder2.type ? null == replacement ? items.splice(index2, 1) : Array.isArray(replacement) ? items.splice(index2, 1, ...replacement) : set(items, index2, replacement) : set(items, index2, replacement), validate(parent, key, items), parent[key] = items;
                }
              }(placeholder, ast, replacements && replacements[placeholder.name] || null);
            } catch (e) {
              throw e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`, e;
            }
          }), ast;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, code, opts) {
          let metadata;
          return code = formatter.code(code), (arg) => {
            const replacements = (0, _options.normalizeReplacements)(arg);
            return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.clear = function() {
          clearPath(), clearScope();
        }, exports3.clearPath = clearPath, exports3.clearScope = clearScope, exports3.getCachedPaths = function(hub, parent) {
          var _pathsCache$get;
          return null == (_pathsCache$get = pathsCache.get(false ? null : nullHub)) ? void 0 : _pathsCache$get.get(parent);
        }, exports3.getOrCreateCachedPaths = function(hub, parent) {
          0;
          let parents = pathsCache.get(false ? null : nullHub);
          parents || pathsCache.set(false ? null : nullHub, parents = /* @__PURE__ */ new WeakMap());
          let paths = parents.get(parent);
          paths || parents.set(parent, paths = /* @__PURE__ */ new Map());
          return paths;
        }, exports3.scope = exports3.path = void 0;
        let pathsCache = exports3.path = /* @__PURE__ */ new WeakMap(), scope = exports3.scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports3.path = pathsCache = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports3.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        const nullHub = Object.freeze({});
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { VISITOR_KEYS } = _t;
        exports3.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit) return true;
            if (opts[node.type]) return true;
            const keys2 = VISITOR_KEYS[node.type];
            if (null == keys2 || !keys2.length) return false;
            for (const key of keys2) if (node[key]) return true;
            return false;
          }
          create(node, container, key, listKey) {
            return _index.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
          }
          maybeQueue(path2, notPriority) {
            this.queue && (notPriority ? this.queue.push(path2) : this.priorityQueue.push(path2));
          }
          visitMultiple(container, parent, listKey) {
            if (0 === container.length) return false;
            const queue = [];
            for (let key = 0; key < container.length; key++) {
              const node = container[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false, visitIndex = 0;
            for (; visitIndex < queue.length; ) {
              const path2 = queue[visitIndex];
              if (visitIndex++, _context.resync.call(path2), 0 !== path2.contexts.length && path2.contexts[path2.contexts.length - 1] === this || _context.pushContext.call(path2, this), null === path2.key) continue;
              const { node } = path2;
              if (!visited.has(node)) {
                if (node && visited.add(node), path2.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop)) break;
              }
            }
            for (let i2 = 0; i2 < visitIndex; i2++) _context.popContext.call(queue[i2]);
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports3, "NodePath", { enumerable: true, get: function() {
          return _index.default;
        } }), Object.defineProperty(exports3, "Scope", { enumerable: true, get: function() {
          return _index2.default;
        } }), exports3.visitors = exports3.default = void 0, __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
        exports3.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type) throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            if (!parentPath && visitSelf) throw new Error("visitSelf can only be used when providing a NodePath.");
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf));
          }
        }
        exports3.default = traverse;
        function hasDenylistedType(path2, state) {
          path2.node.type === state.type && (state.has = true, path2.stop());
        }
        traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path2, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path2, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type)) return false;
          if (tree.type === type) return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.find = function(callback) {
          let path2 = this;
          do {
            if (callback(path2)) return path2;
          } while (path2 = path2.parentPath);
          return null;
        }, exports3.findParent = function(callback) {
          let path2 = this;
          for (; path2 = path2.parentPath; ) if (callback(path2)) return path2;
          return null;
        }, exports3.getAncestry = function() {
          let path2 = this;
          const paths = [];
          do {
            paths.push(path2);
          } while (path2 = path2.parentPath);
          return paths;
        }, exports3.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length) return this;
          if (1 === paths.length) return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path2) => {
            const ancestry = [];
            do {
              ancestry.unshift(path2);
            } while ((path2 = path2.parentPath) && path2 !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop: for (let i2 = 0; i2 < minDepth; i2++) {
            const shouldMatch = first[i2];
            for (const ancestry of ancestries) if (ancestry[i2] !== shouldMatch) break depthLoop;
            lastCommonIndex = i2, lastCommon = shouldMatch;
          }
          if (lastCommon) return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports3.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i2, ancestries) {
            let earliest;
            const keys2 = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path2 = ancestry[i2 + 1];
              if (!earliest) {
                earliest = path2;
                continue;
              }
              if (path2.listKey && earliest.listKey === path2.listKey && path2.key < earliest.key) {
                earliest = path2;
                continue;
              }
              keys2.indexOf(earliest.parentKey) > keys2.indexOf(path2.parentKey) && (earliest = path2);
            }
            return earliest;
          });
        }, exports3.getFunctionParent = function() {
          return this.findParent((p2) => p2.isFunction());
        }, exports3.getStatementParent = function() {
          let path2 = this;
          do {
            if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) break;
            path2 = path2.parentPath;
          } while (path2);
          if (path2 && (path2.isProgram() || path2.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path2;
        }, exports3.inType = function(...candidateTypes) {
          let path2 = this;
          for (; path2; ) {
            for (const type of candidateTypes) if (path2.node.type === type) return true;
            path2 = path2.parentPath;
          }
          return false;
        }, exports3.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports3.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports3.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports3.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key) return;
          const node = this.node;
          if (!node) return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading) return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && (leading && prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments)), trailing && !hasNext && prev.addComments("trailing", trailing));
          hasNext && (trailing && next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments)), leading && !hasPrev && next.addComments("leading", leading));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
        function removeIfExisting(list, toRemove) {
          if (null == toRemove || !toRemove.length) return list;
          const set = new Set(toRemove);
          return list.filter((el) => !set.has(el));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._call = _call, exports3._getQueueContexts = function() {
          let path2 = this, contexts = this.contexts;
          for (; !contexts.length && (path2 = path2.parentPath, path2); ) contexts = path2.contexts;
          return contexts;
        }, exports3._resyncKey = _resyncKey, exports3._resyncList = _resyncList, exports3._resyncParent = _resyncParent, exports3._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || _removal._markRemoved.call(this);
        }, exports3.call = call, exports3.isDenylisted = isDenylisted, exports3.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports3.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports3.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed) return;
          const contexts = this.contexts;
          for (const context of contexts) context.maybeQueue(pathToQueue);
        }, exports3.requeueComputedKeyAndDecorators = function() {
          const { context, node } = this;
          !t2.isPrivate(node) && node.computed && context.maybeQueue(this.get("key"));
          if (node.decorators) for (const decorator of this.get("decorators")) context.maybeQueue(decorator);
        }, exports3.resync = function() {
          if (this.removed) return;
          _resyncParent.call(this), _resyncList.call(this), _resyncKey.call(this);
        }, exports3.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return setScope.call(this), this;
        }, exports3.setKey = setKey, exports3.setScope = setScope, exports3.setup = function(parentPath, container, listKey, key) {
          this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, setKey.call(this, key);
        }, exports3.skip = function() {
          this.shouldSkip = true;
        }, exports3.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports3.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports3.visit = function() {
          var _this$opts$shouldSkip, _this$opts;
          if (!this.node) return false;
          if (this.isDenylisted()) return false;
          if (null != (_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) && _this$opts$shouldSkip.call(_this$opts, this)) return false;
          const currentContext = this.context;
          if (this.shouldSkip || call.call(this, "enter")) return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), call.call(this, "exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), t2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        function call(key) {
          const opts = this.opts;
          return this.debug(key), !(!this.node || !_call.call(this, opts[key])) || !!this.node && _call.call(this, null == (_opts$this$node$type = opts[this.node.type]) ? void 0 : _opts$this$node$type[key]);
          var _opts$this$node$type;
        }
        function _call(fns) {
          if (!fns) return false;
          for (const fn of fns) {
            if (!fn) continue;
            const node = this.node;
            if (!node) return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then) throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret) throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node) return true;
            if (this._traverseFlags > 0) return true;
          }
          return false;
        }
        function isDenylisted() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return null == denylist ? void 0 : denylist.includes(this.node.type);
        }
        function restoreContext(path2, context) {
          path2.context !== context && (path2.context = context, path2.state = context.state, path2.opts = context.opts);
        }
        function setScope() {
          var _this$opts2, _this$scope;
          if (null != (_this$opts2 = this.opts) && _this$opts2.noScope) return;
          let target, path2 = this.parentPath;
          for ((("key" === this.key || "decorators" === this.listKey) && path2.isMethod() || "discriminant" === this.key && path2.isSwitchStatement()) && (path2 = path2.parentPath); path2 && !target; ) {
            var _path$opts;
            if (null != (_path$opts = path2.opts) && _path$opts.noScope) return;
            target = path2.scope, path2 = path2.parentPath;
          }
          this.scope = this.getScope(target), null == (_this$scope = this.scope) || _this$scope.init();
        }
        function _resyncParent() {
          this.parentPath && (this.parent = this.parentPath.node);
        }
        function _resyncKey() {
          if (this.container && this.node !== this.container[this.key]) {
            if (Array.isArray(this.container)) {
              for (let i2 = 0; i2 < this.container.length; i2++) if (this.container[i2] === this.node) return void setKey.call(this, i2);
            } else for (const key of Object.keys(this.container)) if (this.container[key] === this.node) return void setKey.call(this, key);
            this.key = null;
          }
        }
        function _resyncList() {
          if (!this.parent || !this.inList) return;
          const newContainer = this.parent[this.listKey];
          this.container !== newContainer && (this.container = newContainer || null);
        }
        function setKey(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }
        exports3.isBlacklisted = isDenylisted;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.arrowFunctionToExpression = function({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => null == (_arguments$ = arguments[0]) ? void 0 : _arguments$.specCompliant)() } = {}) {
          if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          let self2 = this;
          var _self$ensureFunctionN;
          noNewArrows || (self2 = null != (_self$ensureFunctionN = self2.ensureFunctionName(false)) ? _self$ensureFunctionN : self2);
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(self2, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
          if (fn.ensureBlock(), function(path2, type) {
            path2.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports3.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body)) throw new Error("Can't convert array path to a block statement");
          if (!bodyNode) throw new Error("Can't convert node without a body");
          if (body.isBlockStatement()) return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports3.ensureFunctionName = function(supportUnicodeId) {
          if (this.node.id) return this;
          const res = getFunctionName(this.node, this.parent);
          if (null == res) return this;
          let { name } = res;
          if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) return null;
          if (name.startsWith("get ") || name.startsWith("set ")) return null;
          name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
          const id = identifier(name);
          inherits(id, res.originalNode);
          const state = { needsRename: false, name }, { scope } = this, binding = scope.getOwnBinding(name);
          binding ? "param" === binding.kind && (state.needsRename = true) : (scope.parent.hasBinding(name) || scope.hasGlobal(name)) && this.traverse(refersOuterBindingVisitor, state);
          if (!state.needsRename) return this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
          if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) return scope.rename(id.name), this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
          if (!isFunction2(this.node)) return null;
          const key = scope.generateUidIdentifier(id.name), params = [];
          for (let i2 = 0, len = function(node) {
            const count = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
            return -1 === count ? node.params.length : count;
          }(this.node); i2 < len; i2++) params.push(scope.generateUidIdentifier("x"));
          const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode(key)}.apply(this, arguments);
      }

      ${cloneNode(id)}.toString = function () {
        return ${cloneNode(key)}.toString();
      }

      return ${cloneNode(id)};
    })(${toExpression(this.node)})
  `;
          return this.replaceWith(call)[0].get("arguments.0");
        }, exports3.splitExportDeclaration = function() {
          if (!this.isExportDeclaration() || this.isExportAllDeclaration()) throw new Error("Only default and named export declarations can be split.");
          if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
          const declaration = this.get("declaration");
          if (this.isExportDefaultDeclaration()) {
            const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration(), exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression(), scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
            let id = declaration.node.id, needBindingRegistration = false;
            id ? exportExpr && scope.hasBinding(id.name) && (needBindingRegistration = true, id = scope.generateUidIdentifier(id.name)) : (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || exportExpr) && (declaration.node.id = cloneNode(id)));
            const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
            return this.insertAfter(updatedExportDeclaration), this.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(this), this;
          }
          if (this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
          const bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
          return this.insertAfter(aliasDeclar), this.replaceWith(declaration.node), this;
        }, exports3.toComputedKey = function() {
          let key;
          if (this.isMemberExpression()) key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod()) throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
          return key;
        }, exports3.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression, toBindingIdentifierName, isFunction: isFunction2, isAssignmentPattern, isRestElement, getFunctionName, cloneNode, variableDeclaration, variableDeclarator, exportNamedDeclaration, exportSpecifier, inherits } = _t;
        exports3.arrowFunctionToShadowed = function() {
          this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
        };
        const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } });
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p2) => p2.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p2), false) : p2.isFunction() || p2.isProgram() || p2.isClassProperty({ static: false }) || p2.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) if (arrowParent) thisEnvFn = arrowParent;
          else {
            if (!allowInsertArrow) throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
            fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
          }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            if (!allowInsertArrowWithRest) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow) throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value2 = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value2));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value2));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                const op = isAssignment2 ? "set" : "get";
                return getBinding(thisEnvFn2, `superprop_${op}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName) fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value2 = superParentPath.node.right;
                args.push(value2);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2)) return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } });
        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data = thisEnvFn.getData(cacheKey);
          if (!data) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name, thisEnvFn.setData(cacheKey, data), thisEnvFn.scope.push({ id, init: init(data) });
          }
          return data;
        }
        const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" })) return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments")) return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } });
        const refersOuterBindingVisitor = { "ReferencedIdentifier|BindingIdentifier"(path2, state) {
          path2.node.name === state.name && (state.needsRename = true, path2.stop());
        }, Scope(path2, state) {
          path2.scope.hasOwnBinding(state.name) && path2.skip();
        } };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value2 = evaluateCached(this, state);
          state.confident || (value2 = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value: value2 };
        }, exports3.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident) return !!res.value;
        };
        const VALID_OBJECT_CALLEES = ["Number", "String", "Math"], VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null], INVALID_METHODS = ["random"];
        function isValidObjectCallee(val) {
          return VALID_OBJECT_CALLEES.includes(val);
        }
        function deopt(path2, state) {
          state.confident && (state.deoptPath = path2, state.confident = false);
        }
        const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
        function evaluateCached(path2, state) {
          const { node } = path2, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path2, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path3, state2) {
              if (!state2.confident) return;
              if (path3.isSequenceExpression()) {
                const exprs = path3.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path3.isStringLiteral() || path3.isNumericLiteral() || path3.isBooleanLiteral()) return path3.node.value;
              if (path3.isNullLiteral()) return null;
              if (path3.isTemplateLiteral()) return evaluateQuasis(path3, path3.node.quasis, state2);
              if (path3.isTaggedTemplateExpression() && path3.get("tag").isMemberExpression()) {
                const object = path3.get("tag.object"), { node: { name } } = object, property = path3.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path3.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name) return evaluateQuasis(path3, path3.node.quasi.quasis, state2, true);
              }
              if (path3.isConditionalExpression()) {
                const testResult = evaluateCached(path3.get("test"), state2);
                if (!state2.confident) return;
                return evaluateCached(testResult ? path3.get("consequent") : path3.get("alternate"), state2);
              }
              if (path3.isExpressionWrapper()) return evaluateCached(path3.get("expression"), state2);
              if (path3.isMemberExpression() && !path3.parentPath.isCallExpression({ callee: path3.node })) {
                const property = path3.get("property"), object = path3.get("object");
                if (object.isLiteral()) {
                  const value2 = object.node.value, type = typeof value2;
                  let key = null;
                  if (path3.node.computed) {
                    if (key = evaluateCached(property, state2), !state2.confident) return;
                  } else property.isIdentifier() && (key = property.node.name);
                  if (!("number" !== type && "string" !== type || null == key || "number" != typeof key && "string" != typeof key)) return value2[key];
                }
              }
              if (path3.isReferencedIdentifier()) {
                const binding = path3.scope.getBinding(path3.node.name);
                if (binding) {
                  if (binding.constantViolations.length > 0 || path3.node.start < binding.path.node.end) return void deopt(binding.path, state2);
                  if (binding.hasValue) return binding.value;
                }
                const name = path3.node.name;
                if (Globals.has(name)) return binding ? void deopt(binding.path, state2) : Globals.get(name);
                const resolved = path3.resolve();
                return resolved === path3 ? void deopt(path3, state2) : evaluateCached(resolved, state2);
              }
              if (path3.isUnaryExpression({ prefix: true })) {
                if ("void" === path3.node.operator) return;
                const argument = path3.get("argument");
                if ("typeof" === path3.node.operator && (argument.isFunction() || argument.isClass())) return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident) return;
                switch (path3.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path3.isArrayExpression()) {
                const arr = [], elems = path3.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident) return void deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path3.isObjectExpression()) {
                const obj = {}, props = path3.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement()) return void deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident) return void deopt(key.deopt, state2);
                    key = key.value;
                  } else key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value2 = prop.get("value").evaluate();
                  if (!value2.confident) return void deopt(value2.deopt, state2);
                  value2 = value2.value, obj[key] = value2;
                }
                return obj;
              }
              if (path3.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path3.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path3.get("right"), state2), rightConfident = state2.confident;
                switch (path3.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident) return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident) return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident) return;
                    return null != left ? left : right;
                }
              }
              if (path3.isBinaryExpression()) {
                const left = evaluateCached(path3.get("left"), state2);
                if (!state2.confident) return;
                const right = evaluateCached(path3.get("right"), state2);
                if (!state2.confident) return;
                switch (path3.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path3.isCallExpression()) {
                const callee = path3.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path3.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || function(val2) {
                  return VALID_IDENTIFIER_CALLEES.includes(val2);
                }(callee.node.name)) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name)) {
                    context = global[object.node.name];
                    const key = property.node.name;
                    hasOwnProperty.call(context, key) && (func = context[key]);
                  }
                  if (object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path3.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident) return;
                  return func.apply(context, args);
                }
              }
              deopt(path3, state2);
            }(path2, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path2, quasis, state, raw = false) {
          let str = "", i2 = 0;
          const exprs = path2.isTemplateLiteral() ? path2.get("expressions") : path2.get("quasi.expressions");
          for (const elem of quasis) {
            if (!state.confident) break;
            str += raw ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i2++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident) return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._getKey = _getKey, exports3._getPattern = _getPattern, exports3.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? _getKey.call(this, key, context) : _getPattern.call(this, parts, context);
        }, exports3.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports3.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports3.getAssignmentIdentifiers = function() {
          return _getAssignmentIdentifiers(this.node);
        }, exports3.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            if (!id.node) continue;
            const keys2 = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier()) if (duplicates) {
              (ids[id.node.name] = ids[id.node.name] || []).push(id);
            } else ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              declaration.isDeclaration() && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression()) continue;
              }
              if (keys2) for (let i2 = 0; i2 < keys2.length; i2++) {
                const key = keys2[i2], child = id.get(key);
                Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
              }
            }
          }
          return ids;
        }, exports3.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports3.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r2) => r2.path);
        }, exports3.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports3.getOpposite = function() {
          if ("left" === this.key) return this.getSibling("right");
          if ("right" === this.key) return this.getSibling("left");
          return null;
        }, exports3.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports3.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports3.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports3.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { getAssignmentIdentifiers: _getAssignmentIdentifiers, getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
        function addCompletionRecords(path2, records, context) {
          return path2 && records.push(..._getCompletionRecords(path2, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c2) => {
            c2.type = BREAK_COMPLETION;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c2) => {
            c2.path.isBreakStatement({ label: null }) && (reachable ? c2.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c2.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i2 = 0; i2 < paths.length; i2++) {
              const path2 = paths[i2], newContext = Object.assign({}, context, { inCaseClause: false });
              path2.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path2, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c2) => c2.type === BREAK_COMPLETION)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c2) => c2.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c2) => c2.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i2 === paths.length - 1) completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i3 = 0; i3 < statementCompletions.length; i3++) {
                  const c2 = statementCompletions[i3];
                  c2.type === BREAK_COMPLETION && completions.push(c2), c2.type === NORMAL_COMPLETION && lastNormalCompletions.push(c2);
                }
              }
            }
          } else if (paths.length) for (let i2 = paths.length - 1; i2 >= 0; i2--) {
            const pathCompletions = _getCompletionRecords(paths[i2], context);
            if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
              completions.push(...pathCompletions);
              break;
            }
          }
          return completions;
        }
        function _getCompletionRecords(path2, context) {
          let records = [];
          if (path2.isIfStatement()) records = addCompletionRecords(path2.get("consequent"), records, context), records = addCompletionRecords(path2.get("alternate"), records, context);
          else {
            if (path2.isDoExpression() || path2.isFor() || path2.isWhile() || path2.isLabeledStatement()) return addCompletionRecords(path2.get("body"), records, context);
            if (path2.isProgram() || path2.isBlockStatement()) return getStatementListCompletion(path2.get("body"), context);
            if (path2.isFunction()) return _getCompletionRecords(path2.get("body"), context);
            if (path2.isTryStatement()) records = addCompletionRecords(path2.get("block"), records, context), records = addCompletionRecords(path2.get("handler"), records, context);
            else {
              if (path2.isCatchClause()) return addCompletionRecords(path2.get("body"), records, context);
              if (path2.isSwitchStatement()) return function(cases, records2, context2) {
                let lastNormalCompletions = [];
                for (let i2 = 0; i2 < cases.length; i2++) {
                  const caseCompletions = _getCompletionRecords(cases[i2], context2), normalCompletions = [], breakCompletions = [];
                  for (const c2 of caseCompletions) c2.type === NORMAL_COMPLETION && normalCompletions.push(c2), c2.type === BREAK_COMPLETION && breakCompletions.push(c2);
                  normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                }
                return records2.push(...lastNormalCompletions), records2;
              }(path2.get("cases"), records, context);
              if (path2.isSwitchCase()) return getStatementListCompletion(path2.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path2.isBreakStatement() ? records.push(/* @__PURE__ */ function(path3) {
                return { type: BREAK_COMPLETION, path: path3 };
              }(path2)) : records.push(/* @__PURE__ */ function(path3) {
                return { type: NORMAL_COMPLETION, path: path3 };
              }(path2));
            }
          }
          return records;
        }
        function _getKey(key, context) {
          const node = this.node, container = node[key];
          return Array.isArray(container) ? container.map((_2, i2) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i2 }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }
        function _getPattern(parts, context) {
          let path2 = this;
          for (const part of parts) path2 = "." === part ? path2.parentPath : Array.isArray(path2) ? path2[part] : path2.get(part, context);
          return path2;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = exports3.SHOULD_STOP = exports3.SHOULD_SKIP = exports3.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t2 = _t, cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), NodePath_context = _context, NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug = _debug("babel"), NodePath_Final = (exports3.REMOVED = 1, exports3.SHOULD_STOP = 2, exports3.SHOULD_SKIP = 4, exports3.default = class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          get removed() {
            return (1 & this._traverseFlags) > 0;
          }
          set removed(v2) {
            v2 ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
          get shouldStop() {
            return (2 & this._traverseFlags) > 0;
          }
          set shouldStop(v2) {
            v2 ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get shouldSkip() {
            return (4 & this._traverseFlags) > 0;
          }
          set shouldSkip(v2) {
            v2 ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent) throw new Error("To get a node path the parent needs to exist");
            const targetNode = container[key], paths = cache.getOrCreateCachedPaths(hub, parent);
            let path2 = paths.get(targetNode);
            return path2 || (path2 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path2)), _context.setup.call(path2, parentPath, container, listKey, key), path2;
          }
          getScope(scope) {
            return this.isScope() ? new _index2.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path2 = this;
            do {
              let key = path2.key;
              path2.inList && (key = `${path2.listKey}[${key}]`), parts.unshift(key);
            } while (path2 = path2.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
        }), methods = { findParent: NodePath_ancestry.findParent, find: NodePath_ancestry.find, getFunctionParent: NodePath_ancestry.getFunctionParent, getStatementParent: NodePath_ancestry.getStatementParent, getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom, getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom, getAncestry: NodePath_ancestry.getAncestry, isAncestor: NodePath_ancestry.isAncestor, isDescendant: NodePath_ancestry.isDescendant, inType: NodePath_ancestry.inType, getTypeAnnotation: NodePath_inference.getTypeAnnotation, isBaseType: NodePath_inference.isBaseType, couldBeBaseType: NodePath_inference.couldBeBaseType, baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches, isGenericType: NodePath_inference.isGenericType, replaceWithMultiple: NodePath_replacement.replaceWithMultiple, replaceWithSourceString: NodePath_replacement.replaceWithSourceString, replaceWith: NodePath_replacement.replaceWith, replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements, replaceInline: NodePath_replacement.replaceInline, evaluateTruthy: NodePath_evaluation.evaluateTruthy, evaluate: NodePath_evaluation.evaluate, toComputedKey: NodePath_conversion.toComputedKey, ensureBlock: NodePath_conversion.ensureBlock, unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment, arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression, splitExportDeclaration: NodePath_conversion.splitExportDeclaration, ensureFunctionName: NodePath_conversion.ensureFunctionName, matchesPattern: NodePath_introspection.matchesPattern, isStatic: NodePath_introspection.isStatic, isNodeType: NodePath_introspection.isNodeType, canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression, canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement, isCompletionRecord: NodePath_introspection.isCompletionRecord, isStatementOrBlock: NodePath_introspection.isStatementOrBlock, referencesImport: NodePath_introspection.referencesImport, getSource: NodePath_introspection.getSource, willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore, _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo, resolve: NodePath_introspection.resolve, isConstantExpression: NodePath_introspection.isConstantExpression, isInStrictMode: NodePath_introspection.isInStrictMode, isDenylisted: NodePath_context.isDenylisted, visit: NodePath_context.visit, skip: NodePath_context.skip, skipKey: NodePath_context.skipKey, stop: NodePath_context.stop, setContext: NodePath_context.setContext, requeue: NodePath_context.requeue, requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators, remove: NodePath_removal.remove, insertBefore: NodePath_modification.insertBefore, insertAfter: NodePath_modification.insertAfter, unshiftContainer: NodePath_modification.unshiftContainer, pushContainer: NodePath_modification.pushContainer, getOpposite: NodePath_family.getOpposite, getCompletionRecords: NodePath_family.getCompletionRecords, getSibling: NodePath_family.getSibling, getPrevSibling: NodePath_family.getPrevSibling, getNextSibling: NodePath_family.getNextSibling, getAllNextSiblings: NodePath_family.getAllNextSiblings, getAllPrevSiblings: NodePath_family.getAllPrevSiblings, get: NodePath_family.get, getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers, getBindingIdentifiers: NodePath_family.getBindingIdentifiers, getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers, getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths, getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths, shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings, addComment: NodePath_comments.addComment, addComments: NodePath_comments.addComments };
        Object.assign(NodePath_Final.prototype, methods), NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")], Object.assign(NodePath_Final.prototype, { has: NodePath_introspection[String("has")], is: NodePath_introspection[String("is")], isnt: NodePath_introspection[String("isnt")], equals: NodePath_introspection[String("equals")], hoist: NodePath_modification[String("hoist")], updateSiblingKeys: NodePath_modification.updateSiblingKeys, call: NodePath_context.call, isBlacklisted: NodePath_context[String("isBlacklisted")], setScope: NodePath_context.setScope, resync: NodePath_context.resync, popContext: NodePath_context.popContext, pushContext: NodePath_context.pushContext, setup: NodePath_context.setup, setKey: NodePath_context.setKey }), NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, Object.assign(NodePath_Final.prototype, { _getTypeAnnotation: NodePath_inference._getTypeAnnotation, _replaceWith: NodePath_replacement._replaceWith, _resolve: NodePath_introspection._resolve, _call: NodePath_context._call, _resyncParent: NodePath_context._resyncParent, _resyncKey: NodePath_context._resyncKey, _resyncList: NodePath_context._resyncList, _resyncRemoved: NodePath_context._resyncRemoved, _getQueueContexts: NodePath_context._getQueueContexts, _removeFromScope: NodePath_removal._removeFromScope, _callRemovalHooks: NodePath_removal._callRemovalHooks, _remove: NodePath_removal._remove, _markRemoved: NodePath_removal._markRemoved, _assertUnremoved: NodePath_removal._assertUnremoved, _containerInsert: NodePath_modification._containerInsert, _containerInsertBefore: NodePath_modification._containerInsertBefore, _containerInsertAfter: NodePath_modification._containerInsertAfter, _verifyNodeList: NodePath_modification._verifyNodeList, _getKey: NodePath_family._getKey, _getPattern: NodePath_family._getPattern });
        for (const type of t2.TYPES) {
          const typeKey = `is${type}`, fn = t2[typeKey];
          NodePath_Final.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath_Final.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts)) throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes)) "_" !== type[0] && (t2.TYPES.includes(type) || t2.TYPES.push(type));
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._getTypeAnnotation = _getTypeAnnotation, exports3.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) return right.type === left.type;
          return false;
        }, exports3.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type)) return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types) if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports3.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type) return type;
          type = _getTypeAnnotation.call(this) || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports3.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports3.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type))) return true;
          return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _getTypeAnnotation() {
          const node = this.node;
          if (node) {
            if (node.typeAnnotation) return node.typeAnnotation;
            if (!typeAnnotationInferringNodes.has(node)) {
              typeAnnotationInferringNodes.add(node);
              try {
                var _inferer;
                let inferer = inferers[node.type];
                if (inferer) return inferer.call(this, node);
                if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent) return this.parentPath.getTypeAnnotation();
              } finally {
                typeAnnotationInferringNodes.delete(node);
              }
            }
          } else if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
            const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
            return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
          }
        }
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName) return isStringTypeAnnotation(type);
          if ("number" === baseName) return isNumberTypeAnnotation(type);
          if ("boolean" === baseName) return isBooleanTypeAnnotation(type);
          if ("any" === baseName) return isAnyTypeAnnotation(type);
          if ("mixed" === baseName) return isMixedTypeAnnotation(type);
          if ("empty" === baseName) return isEmptyTypeAnnotation(type);
          if ("void" === baseName) return isVoidTypeAnnotation(type);
          if (soft) return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if (!this.isReferenced()) return;
          const binding = this.scope.getBinding(node.name);
          if (binding) return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path2, name) {
            const types = [], functionConstantViolations = [];
            let constantViolations = getConstantViolationsBefore(binding2, path2, functionConstantViolations);
            const testType = getConditionalAnnotation(binding2, path2, name);
            if (testType) {
              const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
              constantViolations = constantViolations.filter((path3) => !testConstantViolations.includes(path3)), types.push(testType.typeAnnotation);
            }
            if (constantViolations.length) {
              constantViolations.push(...functionConstantViolations);
              for (const violation of constantViolations) types.push(violation.getTypeAnnotation());
            }
            if (!types.length) return;
            return (0, _util.createUnionType)(types);
          }(binding, this, node.name);
          if ("undefined" === node.name) return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name) return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path2, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path2);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path2) {
          const operator = path2.node.operator, right = path2.get("right").resolve(), left = path2.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target) return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator) ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator) return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath) return;
          if (!typeofPath.get("argument").isIdentifier({ name })) return;
          if (typePath = typePath.resolve(), !typePath.isLiteral()) return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path2, name) {
          const ifStatement = function(binding2, path3, name2) {
            let parentPath;
            for (; parentPath = path3.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path3.key) return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2) return;
              path3 = parentPath;
            }
          }(binding, path2, name);
          if (!ifStatement) return;
          const paths = [ifStatement.get("test")], types = [];
          for (let i2 = 0; i2 < paths.length; i2++) {
            const path3 = paths[i2];
            if (path3.isLogicalExpression()) "&&" === path3.node.operator && (paths.push(path3.get("left")), paths.push(path3.get("right")));
            else if (path3.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path3);
              type && types.push(type);
            }
          }
          return types.length ? { typeAnnotation: (0, _util.createUnionType)(types), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArrayExpression = ArrayExpression, exports3.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports3.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports3.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports3.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee)) return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" })) return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee)) return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports3.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports3.ClassDeclaration = exports3.ClassExpression = exports3.FunctionDeclaration = exports3.ArrowFunctionExpression = exports3.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports3, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports3.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports3.NewExpression = function(node) {
          if ("Identifier" === node.callee.type) return genericTypeAnnotation(node.callee);
        }, exports3.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports3.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports3.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports3.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports3.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports3.RestElement = RestElement, exports3.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports3.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports3.TSAsExpression = TSAsExpression, exports3.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports3.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports3.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports3.TypeCastExpression = TypeCastExpression, exports3.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator) return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.includes(operator)) return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
        }, exports3.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator) return numberTypeAnnotation();
        }, exports3.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier()) return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async) return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator) return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType) return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createUnionType = function(types) {
          if (types.every((v2) => isFlowType(v2))) return createFlowUnionType ? createFlowUnionType(types) : createUnionTypeAnnotation(types);
          if (types.every((v2) => isTSType(v2)) && createTSUnionType) return createTSUnionType(types);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports3._resolve = _resolve, exports3.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports3.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression()) return false;
          if (this.isExpression()) return isBlockStatement(replacement);
          if (this.isBlockStatement()) return isExpression(replacement);
          return false;
        }, exports3.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code) return code.slice(node.start, node.end);
          }
          return "";
        }, exports3.isCompletionRecord = function(allowInsideFunction) {
          let path2 = this, first = true;
          do {
            const { type, container } = path2;
            if (!first && (path2.isFunction() || "StaticBlock" === type)) return !!allowInsideFunction;
            if (first = false, Array.isArray(container) && path2.key !== container.length - 1) return false;
          } while ((path2 = path2.parentPath) && !path2.isProgram() && !path2.isDoExpression());
          return true;
        }, exports3.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral()) return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression()) return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression()) {
            const { operator } = this.node;
            return "in" !== operator && "instanceof" !== operator && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          }
          if (this.isMemberExpression()) return !this.node.computed && this.get("object").isIdentifier({ name: "Symbol" }) && !this.scope.hasBinding("Symbol", { noGlobals: true });
          if (this.isCallExpression()) return 1 === this.node.arguments.length && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", { noGlobals: true }) && this.get("arguments")[0].isStringLiteral();
          return false;
        }, exports3.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path2) => {
            if (path2.isProgram({ sourceType: "module" })) return true;
            if (path2.isClass()) return true;
            if (path2.isArrowFunctionExpression() && !path2.get("body").isBlockStatement()) return false;
            let body;
            if (path2.isFunction()) body = path2.node.body;
            else {
              if (!path2.isProgram()) return false;
              body = path2.node;
            }
            for (const directive of body.directives) if ("use strict" === directive.value.value) return true;
          });
        }, exports3.isNodeType = function(type) {
          return isType2(this.type, type);
        }, exports3.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports3.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports3.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports3.referencesImport = function(moduleSource, importName2) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName2 || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName2 }) : this.node.property.name === importName2)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind) return false;
          const path2 = binding.path, parent = path2.parentPath;
          if (!parent.isImportDeclaration()) return false;
          if (parent.node.source.value !== moduleSource) return false;
          if (!importName2) return true;
          if (path2.isImportDefaultSpecifier() && "default" === importName2) return true;
          if (path2.isImportNamespaceSpecifier() && "*" === importName2) return true;
          if (path2.isImportSpecifier() && isIdentifier(path2.node.imported, { name: importName2 })) return true;
          return false;
        }, exports3.resolve = function(dangerous, resolved) {
          return _resolve.call(this, dangerous, resolved) || this;
        }, exports3.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType: isType2, matchesPattern: _matchesPattern } = _t;
        function getOuterFunction(path2) {
          return path2.isProgram() ? path2 : (path2.parentPath.scope.getFunctionParent() || path2.parentPath.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i2 = 0; i2 < maxIndex; i2++) {
            const path2 = paths[i2];
            if (isExecutionUncertain(path2.parent.type, path2.parentKey)) return true;
          }
          return false;
        }
        exports3.has = function(key) {
          var _this$node;
          const val = null == (_this$node = this.node) ? void 0 : _this$node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }, exports3.is = exports3.has, exports3.isnt = function(key) {
          return !this.has(key);
        }, exports3.equals = function(key, value2) {
          return this.node[key] === value2;
        };
        const SYMBOL_CHECKING = Symbol();
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node) return function(base2, target2, cache2) {
            let cached, nodeMap = cache2.get(base2.node);
            if (nodeMap) {
              if (cached = nodeMap.get(target2.node)) return cached === SYMBOL_CHECKING ? "unknown" : cached;
            } else cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
            nodeMap.set(target2.node, SYMBOL_CHECKING);
            const result = function(base3, target3, cache3) {
              if (!target3.isFunctionDeclaration()) return "before" === _guessExecutionStatusRelativeToCached(base3, target3, cache3) ? "before" : "unknown";
              if (target3.parentPath.isExportDeclaration()) return "unknown";
              const binding = target3.scope.getBinding(target3.node.id.name);
              if (!binding.references) return "before";
              const referencePaths = binding.referencePaths;
              let allStatus;
              for (const path2 of referencePaths) {
                if (!!path2.find((path3) => path3.node === target3.node)) continue;
                if ("callee" !== path2.key || !path2.parentPath.isCallExpression()) return "unknown";
                const status = _guessExecutionStatusRelativeToCached(base3, path2, cache3);
                if (allStatus && allStatus !== status) return "unknown";
                allStatus = status;
              }
              return allStatus;
            }(base2, target2, cache2);
            return nodeMap.set(target2.node, result), result;
          }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.includes(base)) return "after";
          if (paths.this.includes(target)) return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path2 = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path2), commonIndex.target >= 0 ? commonPath = path2 : commonIndex.this++;
          }
          if (!commonPath) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys2 = VISITOR_KEYS[commonPath.type], keyPosition_this = keys2.indexOf(divergence.this.parentKey);
          return keys2.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
        function _resolve(dangerous, resolved) {
          var _resolved;
          if (null == (_resolved = resolved) || !_resolved.includes(this)) if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier()) return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding) return;
            if (!binding.constant) return;
            if ("module" === binding.kind) return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node)) return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression()) return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey)) return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty()) continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match) return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem) return elem.resolve(dangerous, resolved);
              }
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path2, state) {
          if (path2.isJSXIdentifier() && react.isCompatTag(path2.node.name) && !path2.parentPath.isJSXMemberExpression()) return;
          if ("this" === path2.node.name) {
            let scope = path2.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path2.scope.getBinding(path2.node.name);
          if (binding) {
            for (const violation of binding.constantViolations) if (violation.scope !== binding.path.scope) return state.mutableBinding = true, void path2.stop();
            binding === state.scope.getBinding(path2.node.name) && (state.bindings[path2.node.name] = binding);
          }
        } };
        exports3.default = class {
          constructor(path2, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path2, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier)) return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope)) break;
              if (this.scopes.push(scope), this.breakOnScopePaths.includes(scope.path)) break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path2 = this._getAttachmentPath();
            if (!path2) return;
            let targetScope = path2.scope;
            if (targetScope.path === path2 && (targetScope = path2.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction()) for (const name of Object.keys(this.bindings)) {
              if (!targetScope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind || "params" === binding.path.parentKey) continue;
              if (this.getAttachmentParentForPath(binding.path).key >= path2.key) {
                this.attachAfter = true, path2 = binding.path;
                for (const violationPath of binding.constantViolations) this.getAttachmentParentForPath(violationPath).key > path2.key && (path2 = violationPath);
              }
            }
            return path2;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope)) return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope) return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i2 = 0; i2 < bodies.length; i2++) if (!bodies[i2].node._blockHoist) return bodies[i2];
                }
              } else if (scope.path.isProgram()) return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope) return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path2) {
            do {
              if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) return path2;
            } while (path2 = path2.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant) return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding) return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo) return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.hooks = void 0;
        exports3.hooks = [function(self2, parent) {
          if ("test" === self2.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self2.key && parent.isExportDeclaration() || "body" === self2.key && parent.isLabeledStatement() || "declarations" === self2.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self2.key && parent.isExpressionStatement()) return parent.remove(), true;
        }, function(self2, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length) return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self2, parent) {
          if (parent.isBinary()) return "left" === self2.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self2, parent) {
          if (parent.isIfStatement() && "consequent" === self2.key || "body" === self2.key && (parent.isLoop() || parent.isArrowFunctionExpression())) return self2.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier(node) && isBinding(node, parent, grandparent);
        }, exports3.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports3.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports3.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports3.isForAwaitStatement = function() {
          return isForOfStatement(this.node, { await: true });
        }, exports3.isGenerated = function() {
          return !this.isUser();
        }, exports3.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports3.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports3.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts)) return false;
            if (isCompatTag(node.name)) return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports3.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports3.isRestProperty = function() {
          var _this$parentPath;
          return nodeIsRestElement(this.node) && (null == (_this$parentPath = this.parentPath) ? void 0 : _this$parentPath.isObjectPattern());
        }, exports3.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports3.isSpreadProperty = function() {
          var _this$parentPath2;
          return nodeIsRestElement(this.node) && (null == (_this$parentPath2 = this.parentPath) ? void 0 : _this$parentPath2.isObjectExpression());
        }, exports3.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node })) return false;
              if (isForStatement(parent, { init: node })) return false;
            }
            return true;
          }
          return false;
        }, exports3.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports3.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
        exports3.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports3.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.Var = exports3.User = exports3.Statement = exports3.SpreadProperty = exports3.Scope = exports3.RestProperty = exports3.ReferencedMemberExpression = exports3.ReferencedIdentifier = exports3.Referenced = exports3.Pure = exports3.NumericLiteralTypeAnnotation = exports3.Generated = exports3.ForAwaitStatement = exports3.Flow = exports3.Expression = exports3.ExistentialTypeParam = exports3.BlockScoped = exports3.BindingIdentifier = void 0;
        exports3.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], exports3.ReferencedMemberExpression = ["MemberExpression"], exports3.BindingIdentifier = ["Identifier"], exports3.Statement = ["Statement"], exports3.Expression = ["Expression"], exports3.Scope = ["Scopable", "Pattern"], exports3.Referenced = null, exports3.BlockScoped = null, exports3.Var = ["VariableDeclaration"], exports3.User = null, exports3.Generated = null, exports3.Pure = null, exports3.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"], exports3.RestProperty = ["RestElement"], exports3.SpreadProperty = ["RestElement"], exports3.ExistentialTypeParam = ["ExistsTypeAnnotation"], exports3.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"], exports3.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._containerInsert = _containerInsert, exports3._containerInsertAfter = _containerInsertAfter, exports3._containerInsertBefore = _containerInsertBefore, exports3._verifyNodeList = _verifyNodeList, exports3.insertAfter = function(nodes_) {
          if (_removal._assertUnremoved.call(this), this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            const self2 = this;
            if (self2.node) {
              const node = self2.node;
              let { scope } = this;
              if (scope.path.isPattern()) return assertExpression(node), self2.replaceWith(callExpression(arrowFunctionExpression([], node), [])), self2.get("callee.body").insertAfter(nodes), [self2];
              if (isHiddenInSequenceExpression(self2)) nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee)) nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier(node2.left)) return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope)) nodes.unshift(node), nodes.push(cloneNode(node.left));
              else if (scope.isPure(node, true)) nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container)) return _containerInsertAfter.call(this, nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports3.insertBefore = function(nodes_) {
          _removal._assertUnremoved.call(this);
          const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key) return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container)) return _containerInsertBefore.call(this, nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports3.pushContainer = function(listKey, nodes) {
          _removal._assertUnremoved.call(this);
          const verifiedNodes = _verifyNodeList.call(this, nodes), container = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports3.unshiftContainer = function(listKey, nodes) {
          _removal._assertUnremoved.call(this), nodes = _verifyNodeList.call(this, nodes);
          const path2 = _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context);
          return _containerInsertBefore.call(path2, nodes);
        }, exports3.updateSiblingKeys = updateSiblingKeys;
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
        function _containerInsert(from, nodes) {
          updateSiblingKeys.call(this, from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i2 = 0; i2 < nodes.length; i2++) {
            var _this$context;
            const to = from + i2, path2 = this.getSibling(to);
            paths.push(path2), null != (_this$context = this.context) && _this$context.queue && _context.pushContext.call(path2, this.context);
          }
          const contexts = _context._getQueueContexts.call(this);
          for (const path2 of paths) {
            _context.setScope.call(path2), path2.debug("Inserted.");
            for (const context of contexts) context.maybeQueue(path2, true);
          }
          return paths;
        }
        function _containerInsertBefore(nodes) {
          return _containerInsert.call(this, this.key, nodes);
        }
        function _containerInsertAfter(nodes) {
          return _containerInsert.call(this, this.key + 1, nodes);
        }
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path2) {
          return isSequenceExpression(path2.parent) && (last(path2.parent.expressions) !== path2.node || isHiddenInSequenceExpression(path2.parentPath));
        }
        function updateSiblingKeys(fromIndex, incrementBy) {
          if (!this.parent) return;
          const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
          for (const [, path2] of paths) "number" == typeof path2.key && path2.container === this.container && path2.key >= fromIndex && (path2.key += incrementBy);
        }
        function _verifyNodeList(nodes) {
          if (!nodes) return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i2} and type of ${type}`);
            }
          }
          return nodes;
        }
        exports3.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._assertUnremoved = _assertUnremoved, exports3._callRemovalHooks = _callRemovalHooks, exports3._markRemoved = _markRemoved, exports3._remove = _remove, exports3._removeFromScope = _removeFromScope, exports3.remove = function() {
          var _this$opts;
          if (_assertUnremoved.call(this), _context.resync.call(this), _callRemovalHooks.call(this)) return void _markRemoved.call(this);
          null != (_this$opts = this.opts) && _this$opts.noScope || _removeFromScope.call(this);
          this.shareCommentsWithSiblings(), _remove.call(this), _markRemoved.call(this);
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { getBindingIdentifiers } = _t;
        function _removeFromScope() {
          const bindings = getBindingIdentifiers(this.node, false, false, true);
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }
        function _callRemovalHooks() {
          if (this.parentPath) {
            for (const fn of _removalHooks.hooks) if (fn(this, this.parentPath)) return true;
          }
        }
        function _remove() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), _modification.updateSiblingKeys.call(this, this.key, -1)) : _replacement._replaceWith.call(this, null);
        }
        function _markRemoved() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node), this.node = null;
        }
        function _assertUnremoved() {
          if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._replaceWith = _replaceWith, exports3.replaceExpressionWithStatements = function(nodes) {
          _context.resync.call(this);
          const declars = [], nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
          if (nodesAsSingleExpression) {
            for (const id of declars) this.scope.push({ id });
            return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
          }
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.node.async, isParentGenerator = null == functionParent ? void 0 : functionParent.node.generator, container = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container, []));
          const callee = this.get("callee");
          callee.get("body").scope.hoistVariables((id) => this.scope.push({ id }));
          const completionRecords = callee.getCompletionRecords();
          for (const path2 of completionRecords) {
            if (!path2.isExpressionStatement()) continue;
            const loop = path2.findParent((path3) => path3.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path2.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path2.node.expression));
            } else path2.replaceWith(returnStatement(path2.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports3.replaceInline = function(nodes) {
          if (_context.resync.call(this), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = _modification._verifyNodeList.call(this, nodes);
              const paths = _modification._containerInsertAfter.call(this, nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports3.replaceWith = function(replacementPath) {
          if (_context.resync.call(this), this.removed) throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement) return [this];
          if (this.isProgram() && !isProgram(replacement)) throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement) throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath2 = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath2 = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return _replaceWith.call(this, replacement), this.type = replacement.type, _context.setScope.call(this), this.requeue(), [nodePath2 ? this.get(nodePath2) : this];
        }, exports3.replaceWithMultiple = function(nodes) {
          var _getCachedPaths;
          _context.resync.call(this), nodes = _modification._verifyNodeList.call(this, nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports3.replaceWithSourceString = function(replacement) {
          let ast;
          _context.resync.call(this);
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel-codeframe.mjs"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, buildUndefinedNode, callExpression, cloneNode, conditionalExpression, expressionStatement, getBindingIdentifiers, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isBlockStatement, isEmptyStatement, isExpression, isExpressionStatement, isIfStatement, isProgram, isStatement, isVariableDeclaration, removeComments, returnStatement, sequenceExpression, validate, yieldExpression } = _t;
        function _replaceWith(node) {
          var _getCachedPaths2;
          if (!this.container) throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node), this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }
        function gatherSequenceExpressions(nodes, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes) if (isEmptyStatement(node) || (ensureLastUndefined = false), isExpression(node)) exprs.push(node);
          else if (isExpressionStatement(node)) exprs.push(node.expression);
          else if (isVariableDeclaration(node)) {
            if ("var" !== node.kind) return;
            for (const declar of node.declarations) {
              const bindings = getBindingIdentifiers(declar);
              for (const key of Object.keys(bindings)) declars.push(cloneNode(bindings[key]));
              declar.init && exprs.push(assignmentExpression("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if (isIfStatement(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
            if (!consequent || !alternate) return;
            exprs.push(conditionalExpression(node.test, consequent, alternate));
          } else if (isBlockStatement(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body) return;
            exprs.push(body);
          } else {
            if (!isEmptyStatement(node)) return;
            0 === nodes.indexOf(node) && (ensureLastUndefined = true);
          }
          return ensureLastUndefined && exprs.push(buildUndefinedNode()), 1 === exprs.length ? exprs[0] : sequenceExpression(exprs);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          constructor({ identifier, scope, path: path2, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path2, this.kind = kind, "var" !== kind && "hoisted" !== kind || !function(path3) {
              for (let { parentPath, key } = path3; parentPath; { parentPath, key } = parentPath) {
                if (parentPath.isFunctionParent()) return false;
                if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && "body" === key) return true;
              }
              return false;
            }(path2) || this.reassign(path2), this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value2) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value2);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path2) {
            this.constant = false, this.constantViolations.includes(path2) || this.constantViolations.push(path2);
          }
          reference(path2) {
            this.referencePaths.includes(path2) || (this.referenced = true, this.references++, this.referencePaths.push(path2));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t2 = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
        const { NOT_LOCAL_BINDING, assignmentExpression, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isCallExpression, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMemberExpression, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, expressionStatement, matchesPattern, memberExpression, numericLiteral, toIdentifier, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode, sequenceExpression } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              var _node$specifiers;
              if (isImportDeclaration(node) || isExportDeclaration(node)) if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) gatherNodeParts(node.source, parts);
              else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const e of node.specifiers) gatherNodeParts(e, parts);
              else (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e of node.properties) gatherNodeParts(e, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path2) {
          const declar = path2.get("init");
          if (declar.isVar()) {
            const { scope } = path2;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path2) {
          if (path2.isBlockScoped()) return;
          if (path2.isImportDeclaration()) return;
          if (path2.isExportDeclaration()) return;
          (path2.scope.getFunctionParent() || path2.scope.getProgramParent()).registerDeclaration(path2);
        }, ImportDeclaration(path2) {
          path2.scope.getBlockParent().registerDeclaration(path2);
        }, ReferencedIdentifier(path2, state) {
          state.references.push(path2);
        }, ForXStatement(path2, state) {
          const left = path2.get("left");
          if (left.isPattern() || left.isIdentifier()) state.constantViolations.push(path2);
          else if (left.isVar()) {
            const { scope } = path2;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path2) {
          const { node, scope } = path2;
          if (isExportAllDeclaration(node)) return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id) return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path2);
          } else if (isVariableDeclaration(declar)) for (const decl of declar.declarations) for (const name of Object.keys(getBindingIdentifiers(decl))) {
            const binding = scope.getBinding(name);
            null == binding || binding.reference(path2);
          }
        } }, LabeledStatement(path2) {
          path2.scope.getBlockParent().registerDeclaration(path2);
        }, AssignmentExpression(path2, state) {
          state.assignments.push(path2);
        }, UpdateExpression(path2, state) {
          state.constantViolations.push(path2);
        }, UnaryExpression(path2, state) {
          "delete" === path2.node.operator && state.constantViolations.push(path2);
        }, BlockScoped(path2) {
          let scope = path2.scope;
          scope.path === path2 && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path2), path2.isClassDeclaration() && path2.node.id) {
            const name = path2.node.id.name;
            path2.scope.bindings[name] = path2.scope.parent.getBinding(name);
          }
        }, CatchClause(path2) {
          path2.scope.registerBinding("let", path2);
        }, Function(path2) {
          const params = path2.get("params");
          for (const param of params) path2.scope.registerBinding("param", param);
          path2.isFunctionExpression() && path2.node.id && !path2.node.id[NOT_LOCAL_BINDING] && path2.scope.registerBinding("local", path2.get("id"), path2);
        }, ClassExpression(path2) {
          path2.node.id && !path2.node.id[NOT_LOCAL_BINDING] && path2.scope.registerBinding("local", path2.get("id"), path2);
        }, TSTypeAnnotation(path2) {
          path2.skip();
        } };
        let uid = 0;
        class Scope {
          constructor(path2) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.inited = void 0, this.labels = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path2, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path2) return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path2, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path2 = this.path;
            do {
              var _path;
              const shouldSkip = "key" === path2.key || "decorators" === path2.listKey;
              path2 = path2.parentPath, shouldSkip && path2.isMethod() && (path2 = path2.parentPath), null != (_path = path2) && _path.isScope() && (parent = path2);
            } while (path2 && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
            let i2 = 1;
            do {
              uid2 = `_${name}`, i2 > 1 && (uid2 += i2), i2++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) return true;
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node)) return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind) return;
            if ("local" === local.kind) return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind) throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName) {
            const binding = this.getBinding(oldName);
            if (binding) {
              newName || (newName = this.generateUidIdentifier(oldName).name);
              new _renamer.default(binding, oldName, newName).rename(arguments[2]);
            }
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path2) {
            this.labels.set(path2.node.label.name, path2);
          }
          registerDeclaration(path2) {
            if (path2.isLabeledStatement()) this.registerLabel(path2);
            else if (path2.isFunctionDeclaration()) this.registerBinding("hoisted", path2.get("id"), path2);
            else if (path2.isVariableDeclaration()) {
              const declarations = path2.get("declarations"), { kind } = path2.node;
              for (const declar of declarations) this.registerBinding("using" === kind || "await using" === kind ? "const" : kind, declar);
            } else if (path2.isClassDeclaration()) {
              if (path2.node.declare) return;
              this.registerBinding("let", path2);
            } else if (path2.isImportDeclaration()) {
              const isTypeDeclaration = "type" === path2.node.importKind || "typeof" === path2.node.importKind, specifiers = path2.get("specifiers");
              for (const specifier of specifiers) {
                const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && ("type" === specifier.node.importKind || "typeof" === specifier.node.importKind);
                this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
              }
            } else if (path2.isExportDeclaration()) {
              const declar = path2.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else this.registerBinding("unknown", path2);
          }
          buildUndefinedNode() {
            return buildUndefinedNode();
          }
          registerConstantViolation(path2) {
            const ids = path2.getAssignmentIdentifiers();
            for (const name of Object.keys(ids)) {
              var _this$getBinding;
              null == (_this$getBinding = this.getBinding(name)) || _this$getBinding.reassign(path2);
            }
          }
          registerBinding(kind, path2, bindingPath = path2) {
            if (!kind) throw new ReferenceError("no `kind`");
            if (path2.isVariableDeclaration()) {
              const declarators = path2.get("declarations");
              for (const declar of declarators) this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path2.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id) continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? local.reassign(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node)) return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body) if (!this.isPure(method, constantsOnly)) return false;
              return true;
            }
            if (isBinary(node)) return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements) if (null !== elem && !this.isPure(elem, constantsOnly)) return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties) if (!this.isPure(prop, constantsOnly)) return false;
              return true;
            }
            if (isMethod(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node)) return this.isPure(node.argument, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions) if (!this.isPure(expression, constantsOnly)) return false;
              return true;
            }
            return isTaggedTemplateExpression(node) ? matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", { noGlobals: true }) && this.isPure(node.quasi, constantsOnly) : isMemberExpression(node) ? !node.computed && isIdentifier(node.object) && "Symbol" === node.object.name && isIdentifier(node.property) && "for" !== node.property.name && !this.hasBinding("Symbol", { noGlobals: true }) : isCallExpression(node) ? matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", { noGlobals: true }) && 1 === node.arguments.length && t2.isStringLiteral(node.arguments[0]) : isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data = scope.data[key];
              if (null != data) return data;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path2 = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              if (scope.crawling) return;
              if (scope.path.isProgram()) break;
            } while (scope = scope.parent);
            const programParent = scope, state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path2.type && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
              for (const visit of collectorVisitor.enter) visit.call(state, path2, state);
              const typeVisitors = collectorVisitor[path2.type];
              if (typeVisitors) for (const visit of typeVisitors.enter) visit.call(state, path2, state);
            }
            path2.traverse(collectorVisitor, state), this.crawling = false;
            for (const path3 of state.assignments) {
              const ids = path3.getAssignmentIdentifiers();
              for (const name of Object.keys(ids)) path3.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path3.scope.registerConstantViolation(path3);
            }
            for (const ref of state.references) {
              const binding = ref.scope.getBinding(ref.node.name);
              binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
            }
            for (const path3 of state.constantViolations) path3.scope.registerConstantViolation(path3);
          }
          push(opts) {
            let path2 = this.path;
            path2.isPattern() ? path2 = this.getPatternParent().path : path2.isBlockStatement() || path2.isProgram() || (path2 = this.getBlockParent().path), path2.isSwitchStatement() && (path2 = (this.getFunctionParent() || this.getProgramParent()).path);
            const { init, unique: unique2, kind = "var", id } = opts;
            if (!init && !unique2 && ("var" === kind || "let" === kind) && path2.isFunction() && !path2.node.name && isCallExpression(path2.parent, { callee: path2.node }) && path2.parent.arguments.length <= path2.node.params.length && isIdentifier(id)) return path2.pushContainer("params", id), void path2.scope.registerBinding("param", path2.get("params")[path2.node.params.length - 1]);
            (path2.isLoop() || path2.isCatchClause() || path2.isFunction()) && (path2.ensureBlock(), path2 = path2.get("body"));
            const blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique2 && path2.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path2.unshiftContainer("body", [declar]), unique2 || path2.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(id, init), len = declarPath.node.declarations.push(declarator);
            path2.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram()) return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent()) return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent()) return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern()) return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings)) key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind) return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding2;
            return null == (_this$getBinding2 = this.getBinding(name)) ? void 0 : _this$getBinding2.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, opts) {
            if (!name) return false;
            let noGlobals, noUids, scope = this;
            do {
              if (scope.hasOwnBinding(name)) return true;
            } while (scope = scope.parent);
            return "object" == typeof opts ? (noGlobals = opts.noGlobals, noUids = opts.noUids) : "boolean" == typeof opts && (noGlobals = opts), !(noUids || !this.hasUid(name)) || (!(noGlobals || !Scope.globals.includes(name)) || !(noGlobals || !Scope.contextVariables.includes(name)));
          }
          parentHasBinding(name, opts) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, opts);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding3;
            null == (_this$getBinding3 = this.getBinding(name)) || _this$getBinding3.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
          hoistVariables(emit = (id) => this.push({ id })) {
            this.crawl();
            const seen = /* @__PURE__ */ new Set();
            for (const name of Object.keys(this.bindings)) {
              const binding = this.bindings[name];
              if (!binding) continue;
              const { path: path2 } = binding;
              if (!path2.isVariableDeclarator()) continue;
              const { parent, parentPath } = path2;
              if ("var" !== parent.kind || seen.has(parent)) continue;
              let firstId;
              seen.add(path2.parent);
              const init = [];
              for (const decl of parent.declarations) {
                null != firstId || (firstId = decl.id), decl.init && init.push(assignmentExpression("=", decl.id, decl.init));
                const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));
                for (const name2 of ids) emit(identifier(name2), null != decl.init);
              }
              if (parentPath.parentPath.isFor({ left: parent })) parentPath.replaceWith(firstId);
              else if (0 === init.length) parentPath.remove();
              else {
                const expr = 1 === init.length ? init[0] : sequenceExpression(init);
                parentPath.parentPath.isForStatement({ init: parent }) ? parentPath.replaceWith(expr) : parentPath.replaceWith(expressionStatement(expr));
              }
            }
          }
        }
        exports3.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"], Scope.prototype._renameFromMap = function(map, oldName, newName, value2) {
          map[oldName] && (map[newName] = value2, map[oldName] = null);
        }, Scope.prototype.traverse = function(node, opts, state) {
          (0, _index.default)(node, opts, this, state, this.path);
        }, Scope.prototype._generateUid = function(name, i2) {
          let id = name;
          return i2 > 1 && (id += i2), `_${id}`;
        }, Scope.prototype.toArray = function(node, i2, arrayLikeIsIterable) {
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            if (null != binding && binding.constant && binding.path.isGenericType("Array")) return node;
          }
          if (isArrayExpression(node)) return node;
          if (isIdentifier(node, { name: "arguments" })) return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
          let helperName;
          const args = [node];
          return true === i2 ? helperName = "toConsumableArray" : "number" == typeof i2 ? (args.push(numericLiteral(i2)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.path.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.path.hub.addHelper(helperName), args);
        }, Scope.prototype.getAllBindingsOfKind = function(...kinds) {
          const ids = /* @__PURE__ */ Object.create(null);
          for (const kind of kinds) {
            let scope = this;
            do {
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                binding.kind === kind && (ids[name] = binding);
              }
              scope = scope.parent;
            } while (scope);
          }
          return ids;
        }, Object.defineProperties(Scope.prototype, { parentBlock: { configurable: true, enumerable: true, get() {
          return this.path.parent;
        } }, hub: { configurable: true, enumerable: true, get() {
          return this.path.hub;
        } } });
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var t2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t = t2, _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { getAssignmentIdentifiers } = _t, renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path2, state) {
          path2.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path2.skip(), path2.isMethod() && (path2.requeueComputedKeyAndDecorators ? path2.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path2)));
        }, ObjectProperty({ node, scope }, state) {
          const { name } = node.key;
          var _node$extra;
          !node.shorthand || name !== state.oldName && name !== state.newName || scope.getBindingIdentifier(name) !== state.binding.identifier || (node.shorthand = false, null != (_node$extra = node.extra) && _node$extra.shorthand && (node.extra.shorthand = false));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path2, state) {
          if (path2.isVariableDeclaration()) return;
          const ids = path2.isAssignmentExpression() ? getAssignmentIdentifiers(path2.node) : path2.getOuterBindingIdentifiers();
          for (const name in ids) name === state.oldName && (ids[name].name = state.newName);
        } };
        exports3.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t2.isDeclaration(declaration) && !declaration.id) return;
              }
              maybeExportDeclar.isExportAllDeclaration() || maybeExportDeclar.splitExportDeclaration();
            }
          }
          maybeConvertFromClassFunctionDeclaration(path2) {
            return path2;
          }
          maybeConvertFromClassFunctionExpression(path2) {
            return path2;
          }
          rename() {
            const { binding, oldName, newName } = this, { scope, path: path2 } = binding, parentDeclar = path2.find((path3) => path3.isDeclaration() || path3.isFunctionExpression() || path3.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = arguments[0] || scope.block, skipKeys = { discriminant: true };
            t2.isMethod(blockToTraverse) && (blockToTraverse.computed && (skipKeys.key = true), t2.isObjectMethod(blockToTraverse) || (skipKeys.decorators = true)), (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, skipKeys), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path2), this.maybeConvertFromClassFunctionExpression(path2));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.traverseNode = function(node, opts, scope, state, path2, skipKeys, visitSelf) {
          const keys2 = VISITOR_KEYS[node.type];
          if (!keys2) return false;
          const context = new _context.default(scope, opts, state, path2);
          if (visitSelf) return (null == skipKeys || !skipKeys[path2.parentKey]) && context.visitQueue([path2]);
          for (const key of keys2) if ((null == skipKeys || !skipKeys[key]) && context.visit(node, key)) return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.environmentVisitor = function(visitor) {
          return merge([_environmentVisitor, visitor]);
        }, exports3.explode = explode$1, exports3.isExplodedVisitor = isExplodedVisitor, exports3.merge = merge, exports3.verify = verify$1;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), virtualTypesValidators = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
        function isExplodedVisitor(visitor) {
          return null == visitor ? void 0 : visitor._exploded;
        }
        function explode$1(visitor) {
          if (isExplodedVisitor(visitor)) return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const parts = nodeType.split("|");
            if (1 === parts.length) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts) visitor[part] = fns;
          }
          verify$1(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key)) continue;
              const fns = obj[key];
              "function" == typeof fns && (obj[key] = { enter: fns });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            if (!(nodeType in virtualTypes)) continue;
            const fns = visitor[nodeType];
            for (const type of Object.keys(fns)) fns[type] = wrapCheck(nodeType, fns[type]);
            delete visitor[nodeType];
            const types = virtualTypes[nodeType];
            if (null !== types) for (const type of types) visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
            else mergePair(visitor, fns);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            let aliases = FLIPPED_ALIAS_KEYS[nodeType];
            if (nodeType in DEPRECATED_KEYS) {
              const deprecatedKey = DEPRECATED_KEYS[nodeType];
              deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases = [deprecatedKey];
            } else if (nodeType in DEPRECATED_ALIASES) {
              const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
              deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
            }
            if (!aliases) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const alias of aliases) {
              const existing = visitor[alias];
              existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
            }
          }
          for (const nodeType of Object.keys(visitor)) shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify$1(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor) throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType)) continue;
              if (!TYPES.includes(nodeType)) throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse 7.26.4`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors) for (const visitorKey of Object.keys(visitors)) {
                if ("enter" !== visitorKey && "exit" !== visitorKey) throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
              }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path2, val) {
          const fns = [].concat(val);
          for (const fn of fns) if ("function" != typeof fn) throw new TypeError(`Non-function found defined in ${path2} with type ${typeof fn}`);
        }
        function merge(visitors, states = [], wrapper) {
          const mergedVisitor = { _verified: true, _exploded: true };
          Object.defineProperty(mergedVisitor, "_exploded", { enumerable: false }), Object.defineProperty(mergedVisitor, "_verified", { enumerable: false });
          for (let i2 = 0; i2 < visitors.length; i2++) {
            const visitor = explode$1(visitors[i2]), state = states[i2];
            let topVisitor = visitor;
            (state || wrapper) && (topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper)), mergePair(mergedVisitor, topVisitor);
            for (const key of Object.keys(visitor)) {
              if (shouldIgnoreKey(key)) continue;
              let typeVisitor = visitor[key];
              (state || wrapper) && (typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper));
              mergePair(mergedVisitor[key] || (mergedVisitor[key] = {}), typeVisitor);
            }
          }
          return mergedVisitor;
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const phase of ["enter", "exit"]) {
            let fns = oldVisitor[phase];
            Array.isArray(fns) && (fns = fns.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path2) {
                fn.call(state, path2, state);
              }), wrapper && (newFn = wrapper(null == state ? void 0 : state.key, phase, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[phase] = fns);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const validator = virtualTypesValidators[`is${nodeType}`], newFn = function(path2) {
            if (validator.call(path2)) return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const phase of ["enter", "exit"]) src[phase] && (dest[phase] = [].concat(dest[phase] || [], src[phase]));
        }
        const _environmentVisitor = { FunctionParent(path2) {
          path2.isArrowFunctionExpression() || (path2.skip(), path2.isMethod() && (path2.requeueComputedKeyAndDecorators ? path2.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path2)));
        }, Property(path2) {
          path2.isObjectProperty() || (path2.skip(), path2.requeueComputedKeyAndDecorators ? path2.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path2));
        } };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;
            const type = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        };
        var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertAccessor = function(node, opts) {
          assert("Accessor", node, opts);
        }, exports3.assertAnyTypeAnnotation = function(node, opts) {
          assert("AnyTypeAnnotation", node, opts);
        }, exports3.assertArgumentPlaceholder = function(node, opts) {
          assert("ArgumentPlaceholder", node, opts);
        }, exports3.assertArrayExpression = function(node, opts) {
          assert("ArrayExpression", node, opts);
        }, exports3.assertArrayPattern = function(node, opts) {
          assert("ArrayPattern", node, opts);
        }, exports3.assertArrayTypeAnnotation = function(node, opts) {
          assert("ArrayTypeAnnotation", node, opts);
        }, exports3.assertArrowFunctionExpression = function(node, opts) {
          assert("ArrowFunctionExpression", node, opts);
        }, exports3.assertAssignmentExpression = function(node, opts) {
          assert("AssignmentExpression", node, opts);
        }, exports3.assertAssignmentPattern = function(node, opts) {
          assert("AssignmentPattern", node, opts);
        }, exports3.assertAwaitExpression = function(node, opts) {
          assert("AwaitExpression", node, opts);
        }, exports3.assertBigIntLiteral = function(node, opts) {
          assert("BigIntLiteral", node, opts);
        }, exports3.assertBinary = function(node, opts) {
          assert("Binary", node, opts);
        }, exports3.assertBinaryExpression = function(node, opts) {
          assert("BinaryExpression", node, opts);
        }, exports3.assertBindExpression = function(node, opts) {
          assert("BindExpression", node, opts);
        }, exports3.assertBlock = function(node, opts) {
          assert("Block", node, opts);
        }, exports3.assertBlockParent = function(node, opts) {
          assert("BlockParent", node, opts);
        }, exports3.assertBlockStatement = function(node, opts) {
          assert("BlockStatement", node, opts);
        }, exports3.assertBooleanLiteral = function(node, opts) {
          assert("BooleanLiteral", node, opts);
        }, exports3.assertBooleanLiteralTypeAnnotation = function(node, opts) {
          assert("BooleanLiteralTypeAnnotation", node, opts);
        }, exports3.assertBooleanTypeAnnotation = function(node, opts) {
          assert("BooleanTypeAnnotation", node, opts);
        }, exports3.assertBreakStatement = function(node, opts) {
          assert("BreakStatement", node, opts);
        }, exports3.assertCallExpression = function(node, opts) {
          assert("CallExpression", node, opts);
        }, exports3.assertCatchClause = function(node, opts) {
          assert("CatchClause", node, opts);
        }, exports3.assertClass = function(node, opts) {
          assert("Class", node, opts);
        }, exports3.assertClassAccessorProperty = function(node, opts) {
          assert("ClassAccessorProperty", node, opts);
        }, exports3.assertClassBody = function(node, opts) {
          assert("ClassBody", node, opts);
        }, exports3.assertClassDeclaration = function(node, opts) {
          assert("ClassDeclaration", node, opts);
        }, exports3.assertClassExpression = function(node, opts) {
          assert("ClassExpression", node, opts);
        }, exports3.assertClassImplements = function(node, opts) {
          assert("ClassImplements", node, opts);
        }, exports3.assertClassMethod = function(node, opts) {
          assert("ClassMethod", node, opts);
        }, exports3.assertClassPrivateMethod = function(node, opts) {
          assert("ClassPrivateMethod", node, opts);
        }, exports3.assertClassPrivateProperty = function(node, opts) {
          assert("ClassPrivateProperty", node, opts);
        }, exports3.assertClassProperty = function(node, opts) {
          assert("ClassProperty", node, opts);
        }, exports3.assertCompletionStatement = function(node, opts) {
          assert("CompletionStatement", node, opts);
        }, exports3.assertConditional = function(node, opts) {
          assert("Conditional", node, opts);
        }, exports3.assertConditionalExpression = function(node, opts) {
          assert("ConditionalExpression", node, opts);
        }, exports3.assertContinueStatement = function(node, opts) {
          assert("ContinueStatement", node, opts);
        }, exports3.assertDebuggerStatement = function(node, opts) {
          assert("DebuggerStatement", node, opts);
        }, exports3.assertDecimalLiteral = function(node, opts) {
          assert("DecimalLiteral", node, opts);
        }, exports3.assertDeclaration = function(node, opts) {
          assert("Declaration", node, opts);
        }, exports3.assertDeclareClass = function(node, opts) {
          assert("DeclareClass", node, opts);
        }, exports3.assertDeclareExportAllDeclaration = function(node, opts) {
          assert("DeclareExportAllDeclaration", node, opts);
        }, exports3.assertDeclareExportDeclaration = function(node, opts) {
          assert("DeclareExportDeclaration", node, opts);
        }, exports3.assertDeclareFunction = function(node, opts) {
          assert("DeclareFunction", node, opts);
        }, exports3.assertDeclareInterface = function(node, opts) {
          assert("DeclareInterface", node, opts);
        }, exports3.assertDeclareModule = function(node, opts) {
          assert("DeclareModule", node, opts);
        }, exports3.assertDeclareModuleExports = function(node, opts) {
          assert("DeclareModuleExports", node, opts);
        }, exports3.assertDeclareOpaqueType = function(node, opts) {
          assert("DeclareOpaqueType", node, opts);
        }, exports3.assertDeclareTypeAlias = function(node, opts) {
          assert("DeclareTypeAlias", node, opts);
        }, exports3.assertDeclareVariable = function(node, opts) {
          assert("DeclareVariable", node, opts);
        }, exports3.assertDeclaredPredicate = function(node, opts) {
          assert("DeclaredPredicate", node, opts);
        }, exports3.assertDecorator = function(node, opts) {
          assert("Decorator", node, opts);
        }, exports3.assertDirective = function(node, opts) {
          assert("Directive", node, opts);
        }, exports3.assertDirectiveLiteral = function(node, opts) {
          assert("DirectiveLiteral", node, opts);
        }, exports3.assertDoExpression = function(node, opts) {
          assert("DoExpression", node, opts);
        }, exports3.assertDoWhileStatement = function(node, opts) {
          assert("DoWhileStatement", node, opts);
        }, exports3.assertEmptyStatement = function(node, opts) {
          assert("EmptyStatement", node, opts);
        }, exports3.assertEmptyTypeAnnotation = function(node, opts) {
          assert("EmptyTypeAnnotation", node, opts);
        }, exports3.assertEnumBody = function(node, opts) {
          assert("EnumBody", node, opts);
        }, exports3.assertEnumBooleanBody = function(node, opts) {
          assert("EnumBooleanBody", node, opts);
        }, exports3.assertEnumBooleanMember = function(node, opts) {
          assert("EnumBooleanMember", node, opts);
        }, exports3.assertEnumDeclaration = function(node, opts) {
          assert("EnumDeclaration", node, opts);
        }, exports3.assertEnumDefaultedMember = function(node, opts) {
          assert("EnumDefaultedMember", node, opts);
        }, exports3.assertEnumMember = function(node, opts) {
          assert("EnumMember", node, opts);
        }, exports3.assertEnumNumberBody = function(node, opts) {
          assert("EnumNumberBody", node, opts);
        }, exports3.assertEnumNumberMember = function(node, opts) {
          assert("EnumNumberMember", node, opts);
        }, exports3.assertEnumStringBody = function(node, opts) {
          assert("EnumStringBody", node, opts);
        }, exports3.assertEnumStringMember = function(node, opts) {
          assert("EnumStringMember", node, opts);
        }, exports3.assertEnumSymbolBody = function(node, opts) {
          assert("EnumSymbolBody", node, opts);
        }, exports3.assertExistsTypeAnnotation = function(node, opts) {
          assert("ExistsTypeAnnotation", node, opts);
        }, exports3.assertExportAllDeclaration = function(node, opts) {
          assert("ExportAllDeclaration", node, opts);
        }, exports3.assertExportDeclaration = function(node, opts) {
          assert("ExportDeclaration", node, opts);
        }, exports3.assertExportDefaultDeclaration = function(node, opts) {
          assert("ExportDefaultDeclaration", node, opts);
        }, exports3.assertExportDefaultSpecifier = function(node, opts) {
          assert("ExportDefaultSpecifier", node, opts);
        }, exports3.assertExportNamedDeclaration = function(node, opts) {
          assert("ExportNamedDeclaration", node, opts);
        }, exports3.assertExportNamespaceSpecifier = function(node, opts) {
          assert("ExportNamespaceSpecifier", node, opts);
        }, exports3.assertExportSpecifier = function(node, opts) {
          assert("ExportSpecifier", node, opts);
        }, exports3.assertExpression = function(node, opts) {
          assert("Expression", node, opts);
        }, exports3.assertExpressionStatement = function(node, opts) {
          assert("ExpressionStatement", node, opts);
        }, exports3.assertExpressionWrapper = function(node, opts) {
          assert("ExpressionWrapper", node, opts);
        }, exports3.assertFile = function(node, opts) {
          assert("File", node, opts);
        }, exports3.assertFlow = function(node, opts) {
          assert("Flow", node, opts);
        }, exports3.assertFlowBaseAnnotation = function(node, opts) {
          assert("FlowBaseAnnotation", node, opts);
        }, exports3.assertFlowDeclaration = function(node, opts) {
          assert("FlowDeclaration", node, opts);
        }, exports3.assertFlowPredicate = function(node, opts) {
          assert("FlowPredicate", node, opts);
        }, exports3.assertFlowType = function(node, opts) {
          assert("FlowType", node, opts);
        }, exports3.assertFor = function(node, opts) {
          assert("For", node, opts);
        }, exports3.assertForInStatement = function(node, opts) {
          assert("ForInStatement", node, opts);
        }, exports3.assertForOfStatement = function(node, opts) {
          assert("ForOfStatement", node, opts);
        }, exports3.assertForStatement = function(node, opts) {
          assert("ForStatement", node, opts);
        }, exports3.assertForXStatement = function(node, opts) {
          assert("ForXStatement", node, opts);
        }, exports3.assertFunction = function(node, opts) {
          assert("Function", node, opts);
        }, exports3.assertFunctionDeclaration = function(node, opts) {
          assert("FunctionDeclaration", node, opts);
        }, exports3.assertFunctionExpression = function(node, opts) {
          assert("FunctionExpression", node, opts);
        }, exports3.assertFunctionParent = function(node, opts) {
          assert("FunctionParent", node, opts);
        }, exports3.assertFunctionTypeAnnotation = function(node, opts) {
          assert("FunctionTypeAnnotation", node, opts);
        }, exports3.assertFunctionTypeParam = function(node, opts) {
          assert("FunctionTypeParam", node, opts);
        }, exports3.assertGenericTypeAnnotation = function(node, opts) {
          assert("GenericTypeAnnotation", node, opts);
        }, exports3.assertIdentifier = function(node, opts) {
          assert("Identifier", node, opts);
        }, exports3.assertIfStatement = function(node, opts) {
          assert("IfStatement", node, opts);
        }, exports3.assertImmutable = function(node, opts) {
          assert("Immutable", node, opts);
        }, exports3.assertImport = function(node, opts) {
          assert("Import", node, opts);
        }, exports3.assertImportAttribute = function(node, opts) {
          assert("ImportAttribute", node, opts);
        }, exports3.assertImportDeclaration = function(node, opts) {
          assert("ImportDeclaration", node, opts);
        }, exports3.assertImportDefaultSpecifier = function(node, opts) {
          assert("ImportDefaultSpecifier", node, opts);
        }, exports3.assertImportExpression = function(node, opts) {
          assert("ImportExpression", node, opts);
        }, exports3.assertImportNamespaceSpecifier = function(node, opts) {
          assert("ImportNamespaceSpecifier", node, opts);
        }, exports3.assertImportOrExportDeclaration = function(node, opts) {
          assert("ImportOrExportDeclaration", node, opts);
        }, exports3.assertImportSpecifier = function(node, opts) {
          assert("ImportSpecifier", node, opts);
        }, exports3.assertIndexedAccessType = function(node, opts) {
          assert("IndexedAccessType", node, opts);
        }, exports3.assertInferredPredicate = function(node, opts) {
          assert("InferredPredicate", node, opts);
        }, exports3.assertInterfaceDeclaration = function(node, opts) {
          assert("InterfaceDeclaration", node, opts);
        }, exports3.assertInterfaceExtends = function(node, opts) {
          assert("InterfaceExtends", node, opts);
        }, exports3.assertInterfaceTypeAnnotation = function(node, opts) {
          assert("InterfaceTypeAnnotation", node, opts);
        }, exports3.assertInterpreterDirective = function(node, opts) {
          assert("InterpreterDirective", node, opts);
        }, exports3.assertIntersectionTypeAnnotation = function(node, opts) {
          assert("IntersectionTypeAnnotation", node, opts);
        }, exports3.assertJSX = function(node, opts) {
          assert("JSX", node, opts);
        }, exports3.assertJSXAttribute = function(node, opts) {
          assert("JSXAttribute", node, opts);
        }, exports3.assertJSXClosingElement = function(node, opts) {
          assert("JSXClosingElement", node, opts);
        }, exports3.assertJSXClosingFragment = function(node, opts) {
          assert("JSXClosingFragment", node, opts);
        }, exports3.assertJSXElement = function(node, opts) {
          assert("JSXElement", node, opts);
        }, exports3.assertJSXEmptyExpression = function(node, opts) {
          assert("JSXEmptyExpression", node, opts);
        }, exports3.assertJSXExpressionContainer = function(node, opts) {
          assert("JSXExpressionContainer", node, opts);
        }, exports3.assertJSXFragment = function(node, opts) {
          assert("JSXFragment", node, opts);
        }, exports3.assertJSXIdentifier = function(node, opts) {
          assert("JSXIdentifier", node, opts);
        }, exports3.assertJSXMemberExpression = function(node, opts) {
          assert("JSXMemberExpression", node, opts);
        }, exports3.assertJSXNamespacedName = function(node, opts) {
          assert("JSXNamespacedName", node, opts);
        }, exports3.assertJSXOpeningElement = function(node, opts) {
          assert("JSXOpeningElement", node, opts);
        }, exports3.assertJSXOpeningFragment = function(node, opts) {
          assert("JSXOpeningFragment", node, opts);
        }, exports3.assertJSXSpreadAttribute = function(node, opts) {
          assert("JSXSpreadAttribute", node, opts);
        }, exports3.assertJSXSpreadChild = function(node, opts) {
          assert("JSXSpreadChild", node, opts);
        }, exports3.assertJSXText = function(node, opts) {
          assert("JSXText", node, opts);
        }, exports3.assertLVal = function(node, opts) {
          assert("LVal", node, opts);
        }, exports3.assertLabeledStatement = function(node, opts) {
          assert("LabeledStatement", node, opts);
        }, exports3.assertLiteral = function(node, opts) {
          assert("Literal", node, opts);
        }, exports3.assertLogicalExpression = function(node, opts) {
          assert("LogicalExpression", node, opts);
        }, exports3.assertLoop = function(node, opts) {
          assert("Loop", node, opts);
        }, exports3.assertMemberExpression = function(node, opts) {
          assert("MemberExpression", node, opts);
        }, exports3.assertMetaProperty = function(node, opts) {
          assert("MetaProperty", node, opts);
        }, exports3.assertMethod = function(node, opts) {
          assert("Method", node, opts);
        }, exports3.assertMiscellaneous = function(node, opts) {
          assert("Miscellaneous", node, opts);
        }, exports3.assertMixedTypeAnnotation = function(node, opts) {
          assert("MixedTypeAnnotation", node, opts);
        }, exports3.assertModuleDeclaration = function(node, opts) {
          (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert("ModuleDeclaration", node, opts);
        }, exports3.assertModuleExpression = function(node, opts) {
          assert("ModuleExpression", node, opts);
        }, exports3.assertModuleSpecifier = function(node, opts) {
          assert("ModuleSpecifier", node, opts);
        }, exports3.assertNewExpression = function(node, opts) {
          assert("NewExpression", node, opts);
        }, exports3.assertNoop = function(node, opts) {
          assert("Noop", node, opts);
        }, exports3.assertNullLiteral = function(node, opts) {
          assert("NullLiteral", node, opts);
        }, exports3.assertNullLiteralTypeAnnotation = function(node, opts) {
          assert("NullLiteralTypeAnnotation", node, opts);
        }, exports3.assertNullableTypeAnnotation = function(node, opts) {
          assert("NullableTypeAnnotation", node, opts);
        }, exports3.assertNumberLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert("NumberLiteral", node, opts);
        }, exports3.assertNumberLiteralTypeAnnotation = function(node, opts) {
          assert("NumberLiteralTypeAnnotation", node, opts);
        }, exports3.assertNumberTypeAnnotation = function(node, opts) {
          assert("NumberTypeAnnotation", node, opts);
        }, exports3.assertNumericLiteral = function(node, opts) {
          assert("NumericLiteral", node, opts);
        }, exports3.assertObjectExpression = function(node, opts) {
          assert("ObjectExpression", node, opts);
        }, exports3.assertObjectMember = function(node, opts) {
          assert("ObjectMember", node, opts);
        }, exports3.assertObjectMethod = function(node, opts) {
          assert("ObjectMethod", node, opts);
        }, exports3.assertObjectPattern = function(node, opts) {
          assert("ObjectPattern", node, opts);
        }, exports3.assertObjectProperty = function(node, opts) {
          assert("ObjectProperty", node, opts);
        }, exports3.assertObjectTypeAnnotation = function(node, opts) {
          assert("ObjectTypeAnnotation", node, opts);
        }, exports3.assertObjectTypeCallProperty = function(node, opts) {
          assert("ObjectTypeCallProperty", node, opts);
        }, exports3.assertObjectTypeIndexer = function(node, opts) {
          assert("ObjectTypeIndexer", node, opts);
        }, exports3.assertObjectTypeInternalSlot = function(node, opts) {
          assert("ObjectTypeInternalSlot", node, opts);
        }, exports3.assertObjectTypeProperty = function(node, opts) {
          assert("ObjectTypeProperty", node, opts);
        }, exports3.assertObjectTypeSpreadProperty = function(node, opts) {
          assert("ObjectTypeSpreadProperty", node, opts);
        }, exports3.assertOpaqueType = function(node, opts) {
          assert("OpaqueType", node, opts);
        }, exports3.assertOptionalCallExpression = function(node, opts) {
          assert("OptionalCallExpression", node, opts);
        }, exports3.assertOptionalIndexedAccessType = function(node, opts) {
          assert("OptionalIndexedAccessType", node, opts);
        }, exports3.assertOptionalMemberExpression = function(node, opts) {
          assert("OptionalMemberExpression", node, opts);
        }, exports3.assertParenthesizedExpression = function(node, opts) {
          assert("ParenthesizedExpression", node, opts);
        }, exports3.assertPattern = function(node, opts) {
          assert("Pattern", node, opts);
        }, exports3.assertPatternLike = function(node, opts) {
          assert("PatternLike", node, opts);
        }, exports3.assertPipelineBareFunction = function(node, opts) {
          assert("PipelineBareFunction", node, opts);
        }, exports3.assertPipelinePrimaryTopicReference = function(node, opts) {
          assert("PipelinePrimaryTopicReference", node, opts);
        }, exports3.assertPipelineTopicExpression = function(node, opts) {
          assert("PipelineTopicExpression", node, opts);
        }, exports3.assertPlaceholder = function(node, opts) {
          assert("Placeholder", node, opts);
        }, exports3.assertPrivate = function(node, opts) {
          assert("Private", node, opts);
        }, exports3.assertPrivateName = function(node, opts) {
          assert("PrivateName", node, opts);
        }, exports3.assertProgram = function(node, opts) {
          assert("Program", node, opts);
        }, exports3.assertProperty = function(node, opts) {
          assert("Property", node, opts);
        }, exports3.assertPureish = function(node, opts) {
          assert("Pureish", node, opts);
        }, exports3.assertQualifiedTypeIdentifier = function(node, opts) {
          assert("QualifiedTypeIdentifier", node, opts);
        }, exports3.assertRecordExpression = function(node, opts) {
          assert("RecordExpression", node, opts);
        }, exports3.assertRegExpLiteral = function(node, opts) {
          assert("RegExpLiteral", node, opts);
        }, exports3.assertRegexLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert("RegexLiteral", node, opts);
        }, exports3.assertRestElement = function(node, opts) {
          assert("RestElement", node, opts);
        }, exports3.assertRestProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert("RestProperty", node, opts);
        }, exports3.assertReturnStatement = function(node, opts) {
          assert("ReturnStatement", node, opts);
        }, exports3.assertScopable = function(node, opts) {
          assert("Scopable", node, opts);
        }, exports3.assertSequenceExpression = function(node, opts) {
          assert("SequenceExpression", node, opts);
        }, exports3.assertSpreadElement = function(node, opts) {
          assert("SpreadElement", node, opts);
        }, exports3.assertSpreadProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert("SpreadProperty", node, opts);
        }, exports3.assertStandardized = function(node, opts) {
          assert("Standardized", node, opts);
        }, exports3.assertStatement = function(node, opts) {
          assert("Statement", node, opts);
        }, exports3.assertStaticBlock = function(node, opts) {
          assert("StaticBlock", node, opts);
        }, exports3.assertStringLiteral = function(node, opts) {
          assert("StringLiteral", node, opts);
        }, exports3.assertStringLiteralTypeAnnotation = function(node, opts) {
          assert("StringLiteralTypeAnnotation", node, opts);
        }, exports3.assertStringTypeAnnotation = function(node, opts) {
          assert("StringTypeAnnotation", node, opts);
        }, exports3.assertSuper = function(node, opts) {
          assert("Super", node, opts);
        }, exports3.assertSwitchCase = function(node, opts) {
          assert("SwitchCase", node, opts);
        }, exports3.assertSwitchStatement = function(node, opts) {
          assert("SwitchStatement", node, opts);
        }, exports3.assertSymbolTypeAnnotation = function(node, opts) {
          assert("SymbolTypeAnnotation", node, opts);
        }, exports3.assertTSAnyKeyword = function(node, opts) {
          assert("TSAnyKeyword", node, opts);
        }, exports3.assertTSArrayType = function(node, opts) {
          assert("TSArrayType", node, opts);
        }, exports3.assertTSAsExpression = function(node, opts) {
          assert("TSAsExpression", node, opts);
        }, exports3.assertTSBaseType = function(node, opts) {
          assert("TSBaseType", node, opts);
        }, exports3.assertTSBigIntKeyword = function(node, opts) {
          assert("TSBigIntKeyword", node, opts);
        }, exports3.assertTSBooleanKeyword = function(node, opts) {
          assert("TSBooleanKeyword", node, opts);
        }, exports3.assertTSCallSignatureDeclaration = function(node, opts) {
          assert("TSCallSignatureDeclaration", node, opts);
        }, exports3.assertTSConditionalType = function(node, opts) {
          assert("TSConditionalType", node, opts);
        }, exports3.assertTSConstructSignatureDeclaration = function(node, opts) {
          assert("TSConstructSignatureDeclaration", node, opts);
        }, exports3.assertTSConstructorType = function(node, opts) {
          assert("TSConstructorType", node, opts);
        }, exports3.assertTSDeclareFunction = function(node, opts) {
          assert("TSDeclareFunction", node, opts);
        }, exports3.assertTSDeclareMethod = function(node, opts) {
          assert("TSDeclareMethod", node, opts);
        }, exports3.assertTSEntityName = function(node, opts) {
          assert("TSEntityName", node, opts);
        }, exports3.assertTSEnumDeclaration = function(node, opts) {
          assert("TSEnumDeclaration", node, opts);
        }, exports3.assertTSEnumMember = function(node, opts) {
          assert("TSEnumMember", node, opts);
        }, exports3.assertTSExportAssignment = function(node, opts) {
          assert("TSExportAssignment", node, opts);
        }, exports3.assertTSExpressionWithTypeArguments = function(node, opts) {
          assert("TSExpressionWithTypeArguments", node, opts);
        }, exports3.assertTSExternalModuleReference = function(node, opts) {
          assert("TSExternalModuleReference", node, opts);
        }, exports3.assertTSFunctionType = function(node, opts) {
          assert("TSFunctionType", node, opts);
        }, exports3.assertTSImportEqualsDeclaration = function(node, opts) {
          assert("TSImportEqualsDeclaration", node, opts);
        }, exports3.assertTSImportType = function(node, opts) {
          assert("TSImportType", node, opts);
        }, exports3.assertTSIndexSignature = function(node, opts) {
          assert("TSIndexSignature", node, opts);
        }, exports3.assertTSIndexedAccessType = function(node, opts) {
          assert("TSIndexedAccessType", node, opts);
        }, exports3.assertTSInferType = function(node, opts) {
          assert("TSInferType", node, opts);
        }, exports3.assertTSInstantiationExpression = function(node, opts) {
          assert("TSInstantiationExpression", node, opts);
        }, exports3.assertTSInterfaceBody = function(node, opts) {
          assert("TSInterfaceBody", node, opts);
        }, exports3.assertTSInterfaceDeclaration = function(node, opts) {
          assert("TSInterfaceDeclaration", node, opts);
        }, exports3.assertTSIntersectionType = function(node, opts) {
          assert("TSIntersectionType", node, opts);
        }, exports3.assertTSIntrinsicKeyword = function(node, opts) {
          assert("TSIntrinsicKeyword", node, opts);
        }, exports3.assertTSLiteralType = function(node, opts) {
          assert("TSLiteralType", node, opts);
        }, exports3.assertTSMappedType = function(node, opts) {
          assert("TSMappedType", node, opts);
        }, exports3.assertTSMethodSignature = function(node, opts) {
          assert("TSMethodSignature", node, opts);
        }, exports3.assertTSModuleBlock = function(node, opts) {
          assert("TSModuleBlock", node, opts);
        }, exports3.assertTSModuleDeclaration = function(node, opts) {
          assert("TSModuleDeclaration", node, opts);
        }, exports3.assertTSNamedTupleMember = function(node, opts) {
          assert("TSNamedTupleMember", node, opts);
        }, exports3.assertTSNamespaceExportDeclaration = function(node, opts) {
          assert("TSNamespaceExportDeclaration", node, opts);
        }, exports3.assertTSNeverKeyword = function(node, opts) {
          assert("TSNeverKeyword", node, opts);
        }, exports3.assertTSNonNullExpression = function(node, opts) {
          assert("TSNonNullExpression", node, opts);
        }, exports3.assertTSNullKeyword = function(node, opts) {
          assert("TSNullKeyword", node, opts);
        }, exports3.assertTSNumberKeyword = function(node, opts) {
          assert("TSNumberKeyword", node, opts);
        }, exports3.assertTSObjectKeyword = function(node, opts) {
          assert("TSObjectKeyword", node, opts);
        }, exports3.assertTSOptionalType = function(node, opts) {
          assert("TSOptionalType", node, opts);
        }, exports3.assertTSParameterProperty = function(node, opts) {
          assert("TSParameterProperty", node, opts);
        }, exports3.assertTSParenthesizedType = function(node, opts) {
          assert("TSParenthesizedType", node, opts);
        }, exports3.assertTSPropertySignature = function(node, opts) {
          assert("TSPropertySignature", node, opts);
        }, exports3.assertTSQualifiedName = function(node, opts) {
          assert("TSQualifiedName", node, opts);
        }, exports3.assertTSRestType = function(node, opts) {
          assert("TSRestType", node, opts);
        }, exports3.assertTSSatisfiesExpression = function(node, opts) {
          assert("TSSatisfiesExpression", node, opts);
        }, exports3.assertTSStringKeyword = function(node, opts) {
          assert("TSStringKeyword", node, opts);
        }, exports3.assertTSSymbolKeyword = function(node, opts) {
          assert("TSSymbolKeyword", node, opts);
        }, exports3.assertTSThisType = function(node, opts) {
          assert("TSThisType", node, opts);
        }, exports3.assertTSTupleType = function(node, opts) {
          assert("TSTupleType", node, opts);
        }, exports3.assertTSType = function(node, opts) {
          assert("TSType", node, opts);
        }, exports3.assertTSTypeAliasDeclaration = function(node, opts) {
          assert("TSTypeAliasDeclaration", node, opts);
        }, exports3.assertTSTypeAnnotation = function(node, opts) {
          assert("TSTypeAnnotation", node, opts);
        }, exports3.assertTSTypeAssertion = function(node, opts) {
          assert("TSTypeAssertion", node, opts);
        }, exports3.assertTSTypeElement = function(node, opts) {
          assert("TSTypeElement", node, opts);
        }, exports3.assertTSTypeLiteral = function(node, opts) {
          assert("TSTypeLiteral", node, opts);
        }, exports3.assertTSTypeOperator = function(node, opts) {
          assert("TSTypeOperator", node, opts);
        }, exports3.assertTSTypeParameter = function(node, opts) {
          assert("TSTypeParameter", node, opts);
        }, exports3.assertTSTypeParameterDeclaration = function(node, opts) {
          assert("TSTypeParameterDeclaration", node, opts);
        }, exports3.assertTSTypeParameterInstantiation = function(node, opts) {
          assert("TSTypeParameterInstantiation", node, opts);
        }, exports3.assertTSTypePredicate = function(node, opts) {
          assert("TSTypePredicate", node, opts);
        }, exports3.assertTSTypeQuery = function(node, opts) {
          assert("TSTypeQuery", node, opts);
        }, exports3.assertTSTypeReference = function(node, opts) {
          assert("TSTypeReference", node, opts);
        }, exports3.assertTSUndefinedKeyword = function(node, opts) {
          assert("TSUndefinedKeyword", node, opts);
        }, exports3.assertTSUnionType = function(node, opts) {
          assert("TSUnionType", node, opts);
        }, exports3.assertTSUnknownKeyword = function(node, opts) {
          assert("TSUnknownKeyword", node, opts);
        }, exports3.assertTSVoidKeyword = function(node, opts) {
          assert("TSVoidKeyword", node, opts);
        }, exports3.assertTaggedTemplateExpression = function(node, opts) {
          assert("TaggedTemplateExpression", node, opts);
        }, exports3.assertTemplateElement = function(node, opts) {
          assert("TemplateElement", node, opts);
        }, exports3.assertTemplateLiteral = function(node, opts) {
          assert("TemplateLiteral", node, opts);
        }, exports3.assertTerminatorless = function(node, opts) {
          assert("Terminatorless", node, opts);
        }, exports3.assertThisExpression = function(node, opts) {
          assert("ThisExpression", node, opts);
        }, exports3.assertThisTypeAnnotation = function(node, opts) {
          assert("ThisTypeAnnotation", node, opts);
        }, exports3.assertThrowStatement = function(node, opts) {
          assert("ThrowStatement", node, opts);
        }, exports3.assertTopicReference = function(node, opts) {
          assert("TopicReference", node, opts);
        }, exports3.assertTryStatement = function(node, opts) {
          assert("TryStatement", node, opts);
        }, exports3.assertTupleExpression = function(node, opts) {
          assert("TupleExpression", node, opts);
        }, exports3.assertTupleTypeAnnotation = function(node, opts) {
          assert("TupleTypeAnnotation", node, opts);
        }, exports3.assertTypeAlias = function(node, opts) {
          assert("TypeAlias", node, opts);
        }, exports3.assertTypeAnnotation = function(node, opts) {
          assert("TypeAnnotation", node, opts);
        }, exports3.assertTypeCastExpression = function(node, opts) {
          assert("TypeCastExpression", node, opts);
        }, exports3.assertTypeParameter = function(node, opts) {
          assert("TypeParameter", node, opts);
        }, exports3.assertTypeParameterDeclaration = function(node, opts) {
          assert("TypeParameterDeclaration", node, opts);
        }, exports3.assertTypeParameterInstantiation = function(node, opts) {
          assert("TypeParameterInstantiation", node, opts);
        }, exports3.assertTypeScript = function(node, opts) {
          assert("TypeScript", node, opts);
        }, exports3.assertTypeofTypeAnnotation = function(node, opts) {
          assert("TypeofTypeAnnotation", node, opts);
        }, exports3.assertUnaryExpression = function(node, opts) {
          assert("UnaryExpression", node, opts);
        }, exports3.assertUnaryLike = function(node, opts) {
          assert("UnaryLike", node, opts);
        }, exports3.assertUnionTypeAnnotation = function(node, opts) {
          assert("UnionTypeAnnotation", node, opts);
        }, exports3.assertUpdateExpression = function(node, opts) {
          assert("UpdateExpression", node, opts);
        }, exports3.assertUserWhitespacable = function(node, opts) {
          assert("UserWhitespacable", node, opts);
        }, exports3.assertV8IntrinsicIdentifier = function(node, opts) {
          assert("V8IntrinsicIdentifier", node, opts);
        }, exports3.assertVariableDeclaration = function(node, opts) {
          assert("VariableDeclaration", node, opts);
        }, exports3.assertVariableDeclarator = function(node, opts) {
          assert("VariableDeclarator", node, opts);
        }, exports3.assertVariance = function(node, opts) {
          assert("Variance", node, opts);
        }, exports3.assertVoidTypeAnnotation = function(node, opts) {
          assert("VoidTypeAnnotation", node, opts);
        }, exports3.assertWhile = function(node, opts) {
          assert("While", node, opts);
        }, exports3.assertWhileStatement = function(node, opts) {
          assert("WhileStatement", node, opts);
        }, exports3.assertWithStatement = function(node, opts) {
          assert("WithStatement", node, opts);
        }, exports3.assertYieldExpression = function(node, opts) {
          assert("YieldExpression", node, opts);
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts)) throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(types) {
          const flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.unionTypeAnnotation)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports3.default = function(type) {
          switch (type) {
            case "string":
              return (0, _index.stringTypeAnnotation)();
            case "number":
              return (0, _index.numberTypeAnnotation)();
            case "undefined":
              return (0, _index.voidTypeAnnotation)();
            case "boolean":
              return (0, _index.booleanTypeAnnotation)();
            case "function":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
            case "object":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
            case "symbol":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
            case "bigint":
              return (0, _index.anyTypeAnnotation)();
          }
          throw new Error("Invalid typeof value: " + type);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.anyTypeAnnotation = function() {
          return { type: "AnyTypeAnnotation" };
        }, exports3.argumentPlaceholder = function() {
          return { type: "ArgumentPlaceholder" };
        }, exports3.arrayExpression = function(elements = []) {
          const node = { type: "ArrayExpression", elements }, defs = NODE_FIELDS.ArrayExpression;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports3.arrayPattern = function(elements) {
          const node = { type: "ArrayPattern", elements }, defs = NODE_FIELDS.ArrayPattern;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports3.arrayTypeAnnotation = function(elementType) {
          const node = { type: "ArrayTypeAnnotation", elementType }, defs = NODE_FIELDS.ArrayTypeAnnotation;
          return validate(defs.elementType, node, "elementType", elementType, 1), node;
        }, exports3.arrowFunctionExpression = function(params, body, async = false) {
          const node = { type: "ArrowFunctionExpression", params, body, async, expression: null }, defs = NODE_FIELDS.ArrowFunctionExpression;
          return validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
        }, exports3.assignmentExpression = function(operator, left, right) {
          const node = { type: "AssignmentExpression", operator, left, right }, defs = NODE_FIELDS.AssignmentExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.assignmentPattern = function(left, right) {
          const node = { type: "AssignmentPattern", left, right }, defs = NODE_FIELDS.AssignmentPattern;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.awaitExpression = function(argument) {
          const node = { type: "AwaitExpression", argument }, defs = NODE_FIELDS.AwaitExpression;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.bigIntLiteral = function(value2) {
          const node = { type: "BigIntLiteral", value: value2 }, defs = NODE_FIELDS.BigIntLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.binaryExpression = function(operator, left, right) {
          const node = { type: "BinaryExpression", operator, left, right }, defs = NODE_FIELDS.BinaryExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.bindExpression = function(object, callee) {
          const node = { type: "BindExpression", object, callee }, defs = NODE_FIELDS.BindExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.callee, node, "callee", callee, 1), node;
        }, exports3.blockStatement = function(body, directives = []) {
          const node = { type: "BlockStatement", body, directives }, defs = NODE_FIELDS.BlockStatement;
          return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), node;
        }, exports3.booleanLiteral = function(value2) {
          const node = { type: "BooleanLiteral", value: value2 }, defs = NODE_FIELDS.BooleanLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.booleanLiteralTypeAnnotation = function(value2) {
          const node = { type: "BooleanLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.booleanTypeAnnotation = function() {
          return { type: "BooleanTypeAnnotation" };
        }, exports3.breakStatement = function(label = null) {
          const node = { type: "BreakStatement", label }, defs = NODE_FIELDS.BreakStatement;
          return validate(defs.label, node, "label", label, 1), node;
        }, exports3.callExpression = function(callee, _arguments) {
          const node = { type: "CallExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.CallExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
        }, exports3.catchClause = function(param = null, body) {
          const node = { type: "CatchClause", param, body }, defs = NODE_FIELDS.CatchClause;
          return validate(defs.param, node, "param", param, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.classAccessorProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          const node = { type: "ClassAccessorProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassAccessorProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
        }, exports3.classBody = function(body) {
          const node = { type: "ClassBody", body }, defs = NODE_FIELDS.ClassBody;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports3.classDeclaration = function(id = null, superClass = null, body, decorators = null) {
          const node = { type: "ClassDeclaration", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports3.classExpression = function(id = null, superClass = null, body, decorators = null) {
          const node = { type: "ClassExpression", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassExpression;
          return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports3.classImplements = function(id, typeParameters = null) {
          const node = { type: "ClassImplements", id, typeParameters }, defs = NODE_FIELDS.ClassImplements;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
          const node = { type: "ClassMethod", kind, key, params, body, computed, static: _static, generator, async }, defs = NODE_FIELDS.ClassMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports3.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
          const node = { type: "ClassPrivateMethod", kind, key, params, body, static: _static }, defs = NODE_FIELDS.ClassPrivateMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.static, node, "static", _static), node;
        }, exports3.classPrivateProperty = function(key, value2 = null, decorators = null, _static = false) {
          const node = { type: "ClassPrivateProperty", key, value: value2, decorators, static: _static }, defs = NODE_FIELDS.ClassPrivateProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.static, node, "static", _static), node;
        }, exports3.classProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          const node = { type: "ClassProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
        }, exports3.conditionalExpression = function(test, consequent, alternate) {
          const node = { type: "ConditionalExpression", test, consequent, alternate }, defs = NODE_FIELDS.ConditionalExpression;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
        }, exports3.continueStatement = function(label = null) {
          const node = { type: "ContinueStatement", label }, defs = NODE_FIELDS.ContinueStatement;
          return validate(defs.label, node, "label", label, 1), node;
        }, exports3.debuggerStatement = function() {
          return { type: "DebuggerStatement" };
        }, exports3.decimalLiteral = function(value2) {
          const node = { type: "DecimalLiteral", value: value2 }, defs = NODE_FIELDS.DecimalLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.declareClass = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "DeclareClass", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareClass;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.declareExportAllDeclaration = function(source, attributes = null) {
          const node = { type: "DeclareExportAllDeclaration", source, attributes }, defs = NODE_FIELDS.DeclareExportAllDeclaration;
          return validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
        }, exports3.declareExportDeclaration = function(declaration = null, specifiers = null, source = null, attributes = null) {
          const node = { type: "DeclareExportDeclaration", declaration, specifiers, source, attributes }, defs = NODE_FIELDS.DeclareExportDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
        }, exports3.declareFunction = function(id) {
          const node = { type: "DeclareFunction", id }, defs = NODE_FIELDS.DeclareFunction;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.declareInterface = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "DeclareInterface", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareInterface;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.declareModule = function(id, body, kind = null) {
          const node = { type: "DeclareModule", id, body, kind }, defs = NODE_FIELDS.DeclareModule;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), validate(defs.kind, node, "kind", kind), node;
        }, exports3.declareModuleExports = function(typeAnnotation) {
          const node = { type: "DeclareModuleExports", typeAnnotation }, defs = NODE_FIELDS.DeclareModuleExports;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
          const node = { type: "DeclareOpaqueType", id, typeParameters, supertype }, defs = NODE_FIELDS.DeclareOpaqueType;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), node;
        }, exports3.declareTypeAlias = function(id, typeParameters = null, right) {
          const node = { type: "DeclareTypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.DeclareTypeAlias;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.declareVariable = function(id) {
          const node = { type: "DeclareVariable", id }, defs = NODE_FIELDS.DeclareVariable;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.declaredPredicate = function(value2) {
          const node = { type: "DeclaredPredicate", value: value2 }, defs = NODE_FIELDS.DeclaredPredicate;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports3.decorator = function(expression) {
          const node = { type: "Decorator", expression }, defs = NODE_FIELDS.Decorator;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.directive = function(value2) {
          const node = { type: "Directive", value: value2 }, defs = NODE_FIELDS.Directive;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports3.directiveLiteral = function(value2) {
          const node = { type: "DirectiveLiteral", value: value2 }, defs = NODE_FIELDS.DirectiveLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.doExpression = function(body, async = false) {
          const node = { type: "DoExpression", body, async }, defs = NODE_FIELDS.DoExpression;
          return validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
        }, exports3.doWhileStatement = function(test, body) {
          const node = { type: "DoWhileStatement", test, body }, defs = NODE_FIELDS.DoWhileStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.emptyStatement = function() {
          return { type: "EmptyStatement" };
        }, exports3.emptyTypeAnnotation = function() {
          return { type: "EmptyTypeAnnotation" };
        }, exports3.enumBooleanBody = function(members) {
          const node = { type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumBooleanBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports3.enumBooleanMember = function(id) {
          const node = { type: "EnumBooleanMember", id, init: null }, defs = NODE_FIELDS.EnumBooleanMember;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.enumDeclaration = function(id, body) {
          const node = { type: "EnumDeclaration", id, body }, defs = NODE_FIELDS.EnumDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.enumDefaultedMember = function(id) {
          const node = { type: "EnumDefaultedMember", id }, defs = NODE_FIELDS.EnumDefaultedMember;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.enumNumberBody = function(members) {
          const node = { type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumNumberBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports3.enumNumberMember = function(id, init) {
          const node = { type: "EnumNumberMember", id, init }, defs = NODE_FIELDS.EnumNumberMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports3.enumStringBody = function(members) {
          const node = { type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumStringBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports3.enumStringMember = function(id, init) {
          const node = { type: "EnumStringMember", id, init }, defs = NODE_FIELDS.EnumStringMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports3.enumSymbolBody = function(members) {
          const node = { type: "EnumSymbolBody", members, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumSymbolBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports3.existsTypeAnnotation = function() {
          return { type: "ExistsTypeAnnotation" };
        }, exports3.exportAllDeclaration = function(source) {
          const node = { type: "ExportAllDeclaration", source }, defs = NODE_FIELDS.ExportAllDeclaration;
          return validate(defs.source, node, "source", source, 1), node;
        }, exports3.exportDefaultDeclaration = function(declaration) {
          const node = { type: "ExportDefaultDeclaration", declaration }, defs = NODE_FIELDS.ExportDefaultDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), node;
        }, exports3.exportDefaultSpecifier = function(exported) {
          const node = { type: "ExportDefaultSpecifier", exported }, defs = NODE_FIELDS.ExportDefaultSpecifier;
          return validate(defs.exported, node, "exported", exported, 1), node;
        }, exports3.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
          const node = { type: "ExportNamedDeclaration", declaration, specifiers, source }, defs = NODE_FIELDS.ExportNamedDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
        }, exports3.exportNamespaceSpecifier = function(exported) {
          const node = { type: "ExportNamespaceSpecifier", exported }, defs = NODE_FIELDS.ExportNamespaceSpecifier;
          return validate(defs.exported, node, "exported", exported, 1), node;
        }, exports3.exportSpecifier = function(local, exported) {
          const node = { type: "ExportSpecifier", local, exported }, defs = NODE_FIELDS.ExportSpecifier;
          return validate(defs.local, node, "local", local, 1), validate(defs.exported, node, "exported", exported, 1), node;
        }, exports3.expressionStatement = function(expression) {
          const node = { type: "ExpressionStatement", expression }, defs = NODE_FIELDS.ExpressionStatement;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.file = function(program, comments = null, tokens = null) {
          const node = { type: "File", program, comments, tokens }, defs = NODE_FIELDS.File;
          return validate(defs.program, node, "program", program, 1), validate(defs.comments, node, "comments", comments, 1), validate(defs.tokens, node, "tokens", tokens), node;
        }, exports3.forInStatement = function(left, right, body) {
          const node = { type: "ForInStatement", left, right, body }, defs = NODE_FIELDS.ForInStatement;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.forOfStatement = function(left, right, body, _await = false) {
          const node = { type: "ForOfStatement", left, right, body, await: _await }, defs = NODE_FIELDS.ForOfStatement;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), validate(defs.await, node, "await", _await), node;
        }, exports3.forStatement = function(init = null, test = null, update = null, body) {
          const node = { type: "ForStatement", init, test, update, body }, defs = NODE_FIELDS.ForStatement;
          return validate(defs.init, node, "init", init, 1), validate(defs.test, node, "test", test, 1), validate(defs.update, node, "update", update, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.functionDeclaration = function(id = null, params, body, generator = false, async = false) {
          const node = { type: "FunctionDeclaration", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports3.functionExpression = function(id = null, params, body, generator = false, async = false) {
          const node = { type: "FunctionExpression", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionExpression;
          return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports3.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
          const node = { type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType }, defs = NODE_FIELDS.FunctionTypeAnnotation;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.rest, node, "rest", rest, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports3.functionTypeParam = function(name = null, typeAnnotation) {
          const node = { type: "FunctionTypeParam", name, typeAnnotation }, defs = NODE_FIELDS.FunctionTypeParam;
          return validate(defs.name, node, "name", name, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.genericTypeAnnotation = function(id, typeParameters = null) {
          const node = { type: "GenericTypeAnnotation", id, typeParameters }, defs = NODE_FIELDS.GenericTypeAnnotation;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.identifier = function(name) {
          const node = { type: "Identifier", name }, defs = NODE_FIELDS.Identifier;
          return validate(defs.name, node, "name", name), node;
        }, exports3.ifStatement = function(test, consequent, alternate = null) {
          const node = { type: "IfStatement", test, consequent, alternate }, defs = NODE_FIELDS.IfStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
        }, exports3.import = function() {
          return { type: "Import" };
        }, exports3.importAttribute = function(key, value2) {
          const node = { type: "ImportAttribute", key, value: value2 }, defs = NODE_FIELDS.ImportAttribute;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), node;
        }, exports3.importDeclaration = function(specifiers, source) {
          const node = { type: "ImportDeclaration", specifiers, source }, defs = NODE_FIELDS.ImportDeclaration;
          return validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
        }, exports3.importDefaultSpecifier = function(local) {
          const node = { type: "ImportDefaultSpecifier", local }, defs = NODE_FIELDS.ImportDefaultSpecifier;
          return validate(defs.local, node, "local", local, 1), node;
        }, exports3.importExpression = function(source, options = null) {
          const node = { type: "ImportExpression", source, options }, defs = NODE_FIELDS.ImportExpression;
          return validate(defs.source, node, "source", source, 1), validate(defs.options, node, "options", options, 1), node;
        }, exports3.importNamespaceSpecifier = function(local) {
          const node = { type: "ImportNamespaceSpecifier", local }, defs = NODE_FIELDS.ImportNamespaceSpecifier;
          return validate(defs.local, node, "local", local, 1), node;
        }, exports3.importSpecifier = function(local, imported) {
          const node = { type: "ImportSpecifier", local, imported }, defs = NODE_FIELDS.ImportSpecifier;
          return validate(defs.local, node, "local", local, 1), validate(defs.imported, node, "imported", imported, 1), node;
        }, exports3.indexedAccessType = function(objectType, indexType) {
          const node = { type: "IndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.IndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports3.inferredPredicate = function() {
          return { type: "InferredPredicate" };
        }, exports3.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.InterfaceDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.interfaceExtends = function(id, typeParameters = null) {
          const node = { type: "InterfaceExtends", id, typeParameters }, defs = NODE_FIELDS.InterfaceExtends;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.interfaceTypeAnnotation = function(_extends = null, body) {
          const node = { type: "InterfaceTypeAnnotation", extends: _extends, body }, defs = NODE_FIELDS.InterfaceTypeAnnotation;
          return validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.interpreterDirective = function(value2) {
          const node = { type: "InterpreterDirective", value: value2 }, defs = NODE_FIELDS.InterpreterDirective;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.intersectionTypeAnnotation = function(types) {
          const node = { type: "IntersectionTypeAnnotation", types }, defs = NODE_FIELDS.IntersectionTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports3.jSXAttribute = exports3.jsxAttribute = function(name, value2 = null) {
          const node = { type: "JSXAttribute", name, value: value2 }, defs = NODE_FIELDS.JSXAttribute;
          return validate(defs.name, node, "name", name, 1), validate(defs.value, node, "value", value2, 1), node;
        }, exports3.jSXClosingElement = exports3.jsxClosingElement = function(name) {
          const node = { type: "JSXClosingElement", name }, defs = NODE_FIELDS.JSXClosingElement;
          return validate(defs.name, node, "name", name, 1), node;
        }, exports3.jSXClosingFragment = exports3.jsxClosingFragment = function() {
          return { type: "JSXClosingFragment" };
        }, exports3.jSXElement = exports3.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
          const node = { type: "JSXElement", openingElement, closingElement, children, selfClosing }, defs = NODE_FIELDS.JSXElement;
          return validate(defs.openingElement, node, "openingElement", openingElement, 1), validate(defs.closingElement, node, "closingElement", closingElement, 1), validate(defs.children, node, "children", children, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
        }, exports3.jSXEmptyExpression = exports3.jsxEmptyExpression = function() {
          return { type: "JSXEmptyExpression" };
        }, exports3.jSXExpressionContainer = exports3.jsxExpressionContainer = function(expression) {
          const node = { type: "JSXExpressionContainer", expression }, defs = NODE_FIELDS.JSXExpressionContainer;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.jSXFragment = exports3.jsxFragment = function(openingFragment, closingFragment, children) {
          const node = { type: "JSXFragment", openingFragment, closingFragment, children }, defs = NODE_FIELDS.JSXFragment;
          return validate(defs.openingFragment, node, "openingFragment", openingFragment, 1), validate(defs.closingFragment, node, "closingFragment", closingFragment, 1), validate(defs.children, node, "children", children, 1), node;
        }, exports3.jSXIdentifier = exports3.jsxIdentifier = function(name) {
          const node = { type: "JSXIdentifier", name }, defs = NODE_FIELDS.JSXIdentifier;
          return validate(defs.name, node, "name", name), node;
        }, exports3.jSXMemberExpression = exports3.jsxMemberExpression = function(object, property) {
          const node = { type: "JSXMemberExpression", object, property }, defs = NODE_FIELDS.JSXMemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), node;
        }, exports3.jSXNamespacedName = exports3.jsxNamespacedName = function(namespace, name) {
          const node = { type: "JSXNamespacedName", namespace, name }, defs = NODE_FIELDS.JSXNamespacedName;
          return validate(defs.namespace, node, "namespace", namespace, 1), validate(defs.name, node, "name", name, 1), node;
        }, exports3.jSXOpeningElement = exports3.jsxOpeningElement = function(name, attributes, selfClosing = false) {
          const node = { type: "JSXOpeningElement", name, attributes, selfClosing }, defs = NODE_FIELDS.JSXOpeningElement;
          return validate(defs.name, node, "name", name, 1), validate(defs.attributes, node, "attributes", attributes, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
        }, exports3.jSXOpeningFragment = exports3.jsxOpeningFragment = function() {
          return { type: "JSXOpeningFragment" };
        }, exports3.jSXSpreadAttribute = exports3.jsxSpreadAttribute = function(argument) {
          const node = { type: "JSXSpreadAttribute", argument }, defs = NODE_FIELDS.JSXSpreadAttribute;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.jSXSpreadChild = exports3.jsxSpreadChild = function(expression) {
          const node = { type: "JSXSpreadChild", expression }, defs = NODE_FIELDS.JSXSpreadChild;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.jSXText = exports3.jsxText = function(value2) {
          const node = { type: "JSXText", value: value2 }, defs = NODE_FIELDS.JSXText;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.labeledStatement = function(label, body) {
          const node = { type: "LabeledStatement", label, body }, defs = NODE_FIELDS.LabeledStatement;
          return validate(defs.label, node, "label", label, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.logicalExpression = function(operator, left, right) {
          const node = { type: "LogicalExpression", operator, left, right }, defs = NODE_FIELDS.LogicalExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.memberExpression = function(object, property, computed = false, optional = null) {
          const node = { type: "MemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.MemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
        }, exports3.metaProperty = function(meta, property) {
          const node = { type: "MetaProperty", meta, property }, defs = NODE_FIELDS.MetaProperty;
          return validate(defs.meta, node, "meta", meta, 1), validate(defs.property, node, "property", property, 1), node;
        }, exports3.mixedTypeAnnotation = function() {
          return { type: "MixedTypeAnnotation" };
        }, exports3.moduleExpression = function(body) {
          const node = { type: "ModuleExpression", body }, defs = NODE_FIELDS.ModuleExpression;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports3.newExpression = function(callee, _arguments) {
          const node = { type: "NewExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.NewExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
        }, exports3.noop = function() {
          return { type: "Noop" };
        }, exports3.nullLiteral = function() {
          return { type: "NullLiteral" };
        }, exports3.nullLiteralTypeAnnotation = function() {
          return { type: "NullLiteralTypeAnnotation" };
        }, exports3.nullableTypeAnnotation = function(typeAnnotation) {
          const node = { type: "NullableTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.NullableTypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.numberLiteral = function(value2) {
          return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value2);
        }, exports3.numberLiteralTypeAnnotation = function(value2) {
          const node = { type: "NumberLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.numberTypeAnnotation = function() {
          return { type: "NumberTypeAnnotation" };
        }, exports3.numericLiteral = numericLiteral, exports3.objectExpression = function(properties) {
          const node = { type: "ObjectExpression", properties }, defs = NODE_FIELDS.ObjectExpression;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports3.objectMethod = function(kind = "method", key, params, body, computed = false, generator = false, async = false) {
          const node = { type: "ObjectMethod", kind, key, params, body, computed, generator, async }, defs = NODE_FIELDS.ObjectMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports3.objectPattern = function(properties) {
          const node = { type: "ObjectPattern", properties }, defs = NODE_FIELDS.ObjectPattern;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports3.objectProperty = function(key, value2, computed = false, shorthand = false, decorators = null) {
          const node = { type: "ObjectProperty", key, value: value2, computed, shorthand, decorators }, defs = NODE_FIELDS.ObjectProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.computed, node, "computed", computed), validate(defs.shorthand, node, "shorthand", shorthand), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports3.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
          const node = { type: "ObjectTypeAnnotation", properties, indexers, callProperties, internalSlots, exact }, defs = NODE_FIELDS.ObjectTypeAnnotation;
          return validate(defs.properties, node, "properties", properties, 1), validate(defs.indexers, node, "indexers", indexers, 1), validate(defs.callProperties, node, "callProperties", callProperties, 1), validate(defs.internalSlots, node, "internalSlots", internalSlots, 1), validate(defs.exact, node, "exact", exact), node;
        }, exports3.objectTypeCallProperty = function(value2) {
          const node = { type: "ObjectTypeCallProperty", value: value2, static: null }, defs = NODE_FIELDS.ObjectTypeCallProperty;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports3.objectTypeIndexer = function(id = null, key, value2, variance = null) {
          const node = { type: "ObjectTypeIndexer", id, key, value: value2, variance, static: null }, defs = NODE_FIELDS.ObjectTypeIndexer;
          return validate(defs.id, node, "id", id, 1), validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports3.objectTypeInternalSlot = function(id, value2, optional, _static, method) {
          const node = { type: "ObjectTypeInternalSlot", id, value: value2, optional, static: _static, method }, defs = NODE_FIELDS.ObjectTypeInternalSlot;
          return validate(defs.id, node, "id", id, 1), validate(defs.value, node, "value", value2, 1), validate(defs.optional, node, "optional", optional), validate(defs.static, node, "static", _static), validate(defs.method, node, "method", method), node;
        }, exports3.objectTypeProperty = function(key, value2, variance = null) {
          const node = { type: "ObjectTypeProperty", key, value: value2, variance, kind: null, method: null, optional: null, proto: null, static: null }, defs = NODE_FIELDS.ObjectTypeProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports3.objectTypeSpreadProperty = function(argument) {
          const node = { type: "ObjectTypeSpreadProperty", argument }, defs = NODE_FIELDS.ObjectTypeSpreadProperty;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
          const node = { type: "OpaqueType", id, typeParameters, supertype, impltype }, defs = NODE_FIELDS.OpaqueType;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), validate(defs.impltype, node, "impltype", impltype, 1), node;
        }, exports3.optionalCallExpression = function(callee, _arguments, optional) {
          const node = { type: "OptionalCallExpression", callee, arguments: _arguments, optional }, defs = NODE_FIELDS.OptionalCallExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), validate(defs.optional, node, "optional", optional), node;
        }, exports3.optionalIndexedAccessType = function(objectType, indexType) {
          const node = { type: "OptionalIndexedAccessType", objectType, indexType, optional: null }, defs = NODE_FIELDS.OptionalIndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports3.optionalMemberExpression = function(object, property, computed = false, optional) {
          const node = { type: "OptionalMemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.OptionalMemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
        }, exports3.parenthesizedExpression = function(expression) {
          const node = { type: "ParenthesizedExpression", expression }, defs = NODE_FIELDS.ParenthesizedExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.pipelineBareFunction = function(callee) {
          const node = { type: "PipelineBareFunction", callee }, defs = NODE_FIELDS.PipelineBareFunction;
          return validate(defs.callee, node, "callee", callee, 1), node;
        }, exports3.pipelinePrimaryTopicReference = function() {
          return { type: "PipelinePrimaryTopicReference" };
        }, exports3.pipelineTopicExpression = function(expression) {
          const node = { type: "PipelineTopicExpression", expression }, defs = NODE_FIELDS.PipelineTopicExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.placeholder = function(expectedNode, name) {
          const node = { type: "Placeholder", expectedNode, name }, defs = NODE_FIELDS.Placeholder;
          return validate(defs.expectedNode, node, "expectedNode", expectedNode), validate(defs.name, node, "name", name, 1), node;
        }, exports3.privateName = function(id) {
          const node = { type: "PrivateName", id }, defs = NODE_FIELDS.PrivateName;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.program = function(body, directives = [], sourceType = "script", interpreter = null) {
          const node = { type: "Program", body, directives, sourceType, interpreter }, defs = NODE_FIELDS.Program;
          return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), validate(defs.sourceType, node, "sourceType", sourceType), validate(defs.interpreter, node, "interpreter", interpreter, 1), node;
        }, exports3.qualifiedTypeIdentifier = function(id, qualification) {
          const node = { type: "QualifiedTypeIdentifier", id, qualification }, defs = NODE_FIELDS.QualifiedTypeIdentifier;
          return validate(defs.id, node, "id", id, 1), validate(defs.qualification, node, "qualification", qualification, 1), node;
        }, exports3.recordExpression = function(properties) {
          const node = { type: "RecordExpression", properties }, defs = NODE_FIELDS.RecordExpression;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports3.regExpLiteral = regExpLiteral, exports3.regexLiteral = function(pattern, flags = "") {
          return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
        }, exports3.restElement = restElement, exports3.restProperty = function(argument) {
          return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
        }, exports3.returnStatement = function(argument = null) {
          const node = { type: "ReturnStatement", argument }, defs = NODE_FIELDS.ReturnStatement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.sequenceExpression = function(expressions) {
          const node = { type: "SequenceExpression", expressions }, defs = NODE_FIELDS.SequenceExpression;
          return validate(defs.expressions, node, "expressions", expressions, 1), node;
        }, exports3.spreadElement = spreadElement, exports3.spreadProperty = function(argument) {
          return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
        }, exports3.staticBlock = function(body) {
          const node = { type: "StaticBlock", body }, defs = NODE_FIELDS.StaticBlock;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports3.stringLiteral = function(value2) {
          const node = { type: "StringLiteral", value: value2 }, defs = NODE_FIELDS.StringLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.stringLiteralTypeAnnotation = function(value2) {
          const node = { type: "StringLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.StringLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports3.stringTypeAnnotation = function() {
          return { type: "StringTypeAnnotation" };
        }, exports3.super = function() {
          return { type: "Super" };
        }, exports3.switchCase = function(test = null, consequent) {
          const node = { type: "SwitchCase", test, consequent }, defs = NODE_FIELDS.SwitchCase;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), node;
        }, exports3.switchStatement = function(discriminant, cases) {
          const node = { type: "SwitchStatement", discriminant, cases }, defs = NODE_FIELDS.SwitchStatement;
          return validate(defs.discriminant, node, "discriminant", discriminant, 1), validate(defs.cases, node, "cases", cases, 1), node;
        }, exports3.symbolTypeAnnotation = function() {
          return { type: "SymbolTypeAnnotation" };
        }, exports3.taggedTemplateExpression = function(tag, quasi) {
          const node = { type: "TaggedTemplateExpression", tag, quasi }, defs = NODE_FIELDS.TaggedTemplateExpression;
          return validate(defs.tag, node, "tag", tag, 1), validate(defs.quasi, node, "quasi", quasi, 1), node;
        }, exports3.templateElement = function(value2, tail = false) {
          const node = { type: "TemplateElement", value: value2, tail }, defs = NODE_FIELDS.TemplateElement;
          return validate(defs.value, node, "value", value2), validate(defs.tail, node, "tail", tail), node;
        }, exports3.templateLiteral = function(quasis, expressions) {
          const node = { type: "TemplateLiteral", quasis, expressions }, defs = NODE_FIELDS.TemplateLiteral;
          return validate(defs.quasis, node, "quasis", quasis, 1), validate(defs.expressions, node, "expressions", expressions, 1), node;
        }, exports3.thisExpression = function() {
          return { type: "ThisExpression" };
        }, exports3.thisTypeAnnotation = function() {
          return { type: "ThisTypeAnnotation" };
        }, exports3.throwStatement = function(argument) {
          const node = { type: "ThrowStatement", argument }, defs = NODE_FIELDS.ThrowStatement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.topicReference = function() {
          return { type: "TopicReference" };
        }, exports3.tryStatement = function(block, handler = null, finalizer = null) {
          const node = { type: "TryStatement", block, handler, finalizer }, defs = NODE_FIELDS.TryStatement;
          return validate(defs.block, node, "block", block, 1), validate(defs.handler, node, "handler", handler, 1), validate(defs.finalizer, node, "finalizer", finalizer, 1), node;
        }, exports3.tSAnyKeyword = exports3.tsAnyKeyword = function() {
          return { type: "TSAnyKeyword" };
        }, exports3.tSArrayType = exports3.tsArrayType = function(elementType) {
          const node = { type: "TSArrayType", elementType }, defs = NODE_FIELDS.TSArrayType;
          return validate(defs.elementType, node, "elementType", elementType, 1), node;
        }, exports3.tSAsExpression = exports3.tsAsExpression = function(expression, typeAnnotation) {
          const node = { type: "TSAsExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSAsExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSBigIntKeyword = exports3.tsBigIntKeyword = function() {
          return { type: "TSBigIntKeyword" };
        }, exports3.tSBooleanKeyword = exports3.tsBooleanKeyword = function() {
          return { type: "TSBooleanKeyword" };
        }, exports3.tSCallSignatureDeclaration = exports3.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSCallSignatureDeclaration;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSConditionalType = exports3.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
          const node = { type: "TSConditionalType", checkType, extendsType, trueType, falseType }, defs = NODE_FIELDS.TSConditionalType;
          return validate(defs.checkType, node, "checkType", checkType, 1), validate(defs.extendsType, node, "extendsType", extendsType, 1), validate(defs.trueType, node, "trueType", trueType, 1), validate(defs.falseType, node, "falseType", falseType, 1), node;
        }, exports3.tSConstructSignatureDeclaration = exports3.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructSignatureDeclaration;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSConstructorType = exports3.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSConstructorType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructorType;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSDeclareFunction = exports3.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
          const node = { type: "TSDeclareFunction", id, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareFunction;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports3.tSDeclareMethod = exports3.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
          const node = { type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareMethod;
          return validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports3.tSEnumDeclaration = exports3.tsEnumDeclaration = function(id, members) {
          const node = { type: "TSEnumDeclaration", id, members }, defs = NODE_FIELDS.TSEnumDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.members, node, "members", members, 1), node;
        }, exports3.tSEnumMember = exports3.tsEnumMember = function(id, initializer = null) {
          const node = { type: "TSEnumMember", id, initializer }, defs = NODE_FIELDS.TSEnumMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.initializer, node, "initializer", initializer, 1), node;
        }, exports3.tSExportAssignment = exports3.tsExportAssignment = function(expression) {
          const node = { type: "TSExportAssignment", expression }, defs = NODE_FIELDS.TSExportAssignment;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.tSExpressionWithTypeArguments = exports3.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
          const node = { type: "TSExpressionWithTypeArguments", expression, typeParameters }, defs = NODE_FIELDS.TSExpressionWithTypeArguments;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.tSExternalModuleReference = exports3.tsExternalModuleReference = function(expression) {
          const node = { type: "TSExternalModuleReference", expression }, defs = NODE_FIELDS.TSExternalModuleReference;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.tSFunctionType = exports3.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSFunctionType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSFunctionType;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSImportEqualsDeclaration = exports3.tsImportEqualsDeclaration = function(id, moduleReference) {
          const node = { type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null }, defs = NODE_FIELDS.TSImportEqualsDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.moduleReference, node, "moduleReference", moduleReference, 1), node;
        }, exports3.tSImportType = exports3.tsImportType = function(argument, qualifier = null, typeParameters = null) {
          const node = { type: "TSImportType", argument, qualifier, typeParameters }, defs = NODE_FIELDS.TSImportType;
          return validate(defs.argument, node, "argument", argument, 1), validate(defs.qualifier, node, "qualifier", qualifier, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.tSIndexSignature = exports3.tsIndexSignature = function(parameters, typeAnnotation = null) {
          const node = { type: "TSIndexSignature", parameters, typeAnnotation }, defs = NODE_FIELDS.TSIndexSignature;
          return validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSIndexedAccessType = exports3.tsIndexedAccessType = function(objectType, indexType) {
          const node = { type: "TSIndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.TSIndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports3.tSInferType = exports3.tsInferType = function(typeParameter) {
          const node = { type: "TSInferType", typeParameter }, defs = NODE_FIELDS.TSInferType;
          return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), node;
        }, exports3.tSInstantiationExpression = exports3.tsInstantiationExpression = function(expression, typeParameters = null) {
          const node = { type: "TSInstantiationExpression", expression, typeParameters }, defs = NODE_FIELDS.TSInstantiationExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.tSInterfaceBody = exports3.tsInterfaceBody = function(body) {
          const node = { type: "TSInterfaceBody", body }, defs = NODE_FIELDS.TSInterfaceBody;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports3.tSInterfaceDeclaration = exports3.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.TSInterfaceDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.tSIntersectionType = exports3.tsIntersectionType = function(types) {
          const node = { type: "TSIntersectionType", types }, defs = NODE_FIELDS.TSIntersectionType;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports3.tSIntrinsicKeyword = exports3.tsIntrinsicKeyword = function() {
          return { type: "TSIntrinsicKeyword" };
        }, exports3.tSLiteralType = exports3.tsLiteralType = function(literal) {
          const node = { type: "TSLiteralType", literal }, defs = NODE_FIELDS.TSLiteralType;
          return validate(defs.literal, node, "literal", literal, 1), node;
        }, exports3.tSMappedType = exports3.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
          const node = { type: "TSMappedType", typeParameter, typeAnnotation, nameType }, defs = NODE_FIELDS.TSMappedType;
          return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.nameType, node, "nameType", nameType, 1), node;
        }, exports3.tSMethodSignature = exports3.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSMethodSignature;
          return validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSModuleBlock = exports3.tsModuleBlock = function(body) {
          const node = { type: "TSModuleBlock", body }, defs = NODE_FIELDS.TSModuleBlock;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports3.tSModuleDeclaration = exports3.tsModuleDeclaration = function(id, body) {
          const node = { type: "TSModuleDeclaration", id, body, kind: null }, defs = NODE_FIELDS.TSModuleDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.tSNamedTupleMember = exports3.tsNamedTupleMember = function(label, elementType, optional = false) {
          const node = { type: "TSNamedTupleMember", label, elementType, optional }, defs = NODE_FIELDS.TSNamedTupleMember;
          return validate(defs.label, node, "label", label, 1), validate(defs.elementType, node, "elementType", elementType, 1), validate(defs.optional, node, "optional", optional), node;
        }, exports3.tSNamespaceExportDeclaration = exports3.tsNamespaceExportDeclaration = function(id) {
          const node = { type: "TSNamespaceExportDeclaration", id }, defs = NODE_FIELDS.TSNamespaceExportDeclaration;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports3.tSNeverKeyword = exports3.tsNeverKeyword = function() {
          return { type: "TSNeverKeyword" };
        }, exports3.tSNonNullExpression = exports3.tsNonNullExpression = function(expression) {
          const node = { type: "TSNonNullExpression", expression }, defs = NODE_FIELDS.TSNonNullExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.tSNullKeyword = exports3.tsNullKeyword = function() {
          return { type: "TSNullKeyword" };
        }, exports3.tSNumberKeyword = exports3.tsNumberKeyword = function() {
          return { type: "TSNumberKeyword" };
        }, exports3.tSObjectKeyword = exports3.tsObjectKeyword = function() {
          return { type: "TSObjectKeyword" };
        }, exports3.tSOptionalType = exports3.tsOptionalType = function(typeAnnotation) {
          const node = { type: "TSOptionalType", typeAnnotation }, defs = NODE_FIELDS.TSOptionalType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSParameterProperty = exports3.tsParameterProperty = function(parameter) {
          const node = { type: "TSParameterProperty", parameter }, defs = NODE_FIELDS.TSParameterProperty;
          return validate(defs.parameter, node, "parameter", parameter, 1), node;
        }, exports3.tSParenthesizedType = exports3.tsParenthesizedType = function(typeAnnotation) {
          const node = { type: "TSParenthesizedType", typeAnnotation }, defs = NODE_FIELDS.TSParenthesizedType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSPropertySignature = exports3.tsPropertySignature = function(key, typeAnnotation = null) {
          const node = { type: "TSPropertySignature", key, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSPropertySignature;
          return validate(defs.key, node, "key", key, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSQualifiedName = exports3.tsQualifiedName = function(left, right) {
          const node = { type: "TSQualifiedName", left, right }, defs = NODE_FIELDS.TSQualifiedName;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.tSRestType = exports3.tsRestType = function(typeAnnotation) {
          const node = { type: "TSRestType", typeAnnotation }, defs = NODE_FIELDS.TSRestType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSSatisfiesExpression = exports3.tsSatisfiesExpression = function(expression, typeAnnotation) {
          const node = { type: "TSSatisfiesExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSSatisfiesExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSStringKeyword = exports3.tsStringKeyword = function() {
          return { type: "TSStringKeyword" };
        }, exports3.tSSymbolKeyword = exports3.tsSymbolKeyword = function() {
          return { type: "TSSymbolKeyword" };
        }, exports3.tSThisType = exports3.tsThisType = function() {
          return { type: "TSThisType" };
        }, exports3.tSTupleType = exports3.tsTupleType = function(elementTypes) {
          const node = { type: "TSTupleType", elementTypes }, defs = NODE_FIELDS.TSTupleType;
          return validate(defs.elementTypes, node, "elementTypes", elementTypes, 1), node;
        }, exports3.tSTypeAliasDeclaration = exports3.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
          const node = { type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation }, defs = NODE_FIELDS.TSTypeAliasDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSTypeAnnotation = exports3.tsTypeAnnotation = function(typeAnnotation) {
          const node = { type: "TSTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TSTypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSTypeAssertion = exports3.tsTypeAssertion = function(typeAnnotation, expression) {
          const node = { type: "TSTypeAssertion", typeAnnotation, expression }, defs = NODE_FIELDS.TSTypeAssertion;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.expression, node, "expression", expression, 1), node;
        }, exports3.tSTypeLiteral = exports3.tsTypeLiteral = function(members) {
          const node = { type: "TSTypeLiteral", members }, defs = NODE_FIELDS.TSTypeLiteral;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports3.tSTypeOperator = exports3.tsTypeOperator = function(typeAnnotation) {
          const node = { type: "TSTypeOperator", typeAnnotation, operator: null }, defs = NODE_FIELDS.TSTypeOperator;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.tSTypeParameter = exports3.tsTypeParameter = function(constraint = null, _default = null, name) {
          const node = { type: "TSTypeParameter", constraint, default: _default, name }, defs = NODE_FIELDS.TSTypeParameter;
          return validate(defs.constraint, node, "constraint", constraint, 1), validate(defs.default, node, "default", _default, 1), validate(defs.name, node, "name", name), node;
        }, exports3.tSTypeParameterDeclaration = exports3.tsTypeParameterDeclaration = function(params) {
          const node = { type: "TSTypeParameterDeclaration", params }, defs = NODE_FIELDS.TSTypeParameterDeclaration;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports3.tSTypeParameterInstantiation = exports3.tsTypeParameterInstantiation = function(params) {
          const node = { type: "TSTypeParameterInstantiation", params }, defs = NODE_FIELDS.TSTypeParameterInstantiation;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports3.tSTypePredicate = exports3.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
          const node = { type: "TSTypePredicate", parameterName, typeAnnotation, asserts }, defs = NODE_FIELDS.TSTypePredicate;
          return validate(defs.parameterName, node, "parameterName", parameterName, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.asserts, node, "asserts", asserts), node;
        }, exports3.tSTypeQuery = exports3.tsTypeQuery = function(exprName, typeParameters = null) {
          const node = { type: "TSTypeQuery", exprName, typeParameters }, defs = NODE_FIELDS.TSTypeQuery;
          return validate(defs.exprName, node, "exprName", exprName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.tSTypeReference = exports3.tsTypeReference = function(typeName, typeParameters = null) {
          const node = { type: "TSTypeReference", typeName, typeParameters }, defs = NODE_FIELDS.TSTypeReference;
          return validate(defs.typeName, node, "typeName", typeName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports3.tSUndefinedKeyword = exports3.tsUndefinedKeyword = function() {
          return { type: "TSUndefinedKeyword" };
        }, exports3.tSUnionType = exports3.tsUnionType = function(types) {
          const node = { type: "TSUnionType", types }, defs = NODE_FIELDS.TSUnionType;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports3.tSUnknownKeyword = exports3.tsUnknownKeyword = function() {
          return { type: "TSUnknownKeyword" };
        }, exports3.tSVoidKeyword = exports3.tsVoidKeyword = function() {
          return { type: "TSVoidKeyword" };
        }, exports3.tupleExpression = function(elements = []) {
          const node = { type: "TupleExpression", elements }, defs = NODE_FIELDS.TupleExpression;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports3.tupleTypeAnnotation = function(types) {
          const node = { type: "TupleTypeAnnotation", types }, defs = NODE_FIELDS.TupleTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports3.typeAlias = function(id, typeParameters = null, right) {
          const node = { type: "TypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.TypeAlias;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports3.typeAnnotation = function(typeAnnotation) {
          const node = { type: "TypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.typeCastExpression = function(expression, typeAnnotation) {
          const node = { type: "TypeCastExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TypeCastExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports3.typeParameter = function(bound = null, _default = null, variance = null) {
          const node = { type: "TypeParameter", bound, default: _default, variance, name: null }, defs = NODE_FIELDS.TypeParameter;
          return validate(defs.bound, node, "bound", bound, 1), validate(defs.default, node, "default", _default, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports3.typeParameterDeclaration = function(params) {
          const node = { type: "TypeParameterDeclaration", params }, defs = NODE_FIELDS.TypeParameterDeclaration;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports3.typeParameterInstantiation = function(params) {
          const node = { type: "TypeParameterInstantiation", params }, defs = NODE_FIELDS.TypeParameterInstantiation;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports3.typeofTypeAnnotation = function(argument) {
          const node = { type: "TypeofTypeAnnotation", argument }, defs = NODE_FIELDS.TypeofTypeAnnotation;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports3.unaryExpression = function(operator, argument, prefix = true) {
          const node = { type: "UnaryExpression", operator, argument, prefix }, defs = NODE_FIELDS.UnaryExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
        }, exports3.unionTypeAnnotation = function(types) {
          const node = { type: "UnionTypeAnnotation", types }, defs = NODE_FIELDS.UnionTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports3.updateExpression = function(operator, argument, prefix = false) {
          const node = { type: "UpdateExpression", operator, argument, prefix }, defs = NODE_FIELDS.UpdateExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
        }, exports3.v8IntrinsicIdentifier = function(name) {
          const node = { type: "V8IntrinsicIdentifier", name }, defs = NODE_FIELDS.V8IntrinsicIdentifier;
          return validate(defs.name, node, "name", name), node;
        }, exports3.variableDeclaration = function(kind, declarations) {
          const node = { type: "VariableDeclaration", kind, declarations }, defs = NODE_FIELDS.VariableDeclaration;
          return validate(defs.kind, node, "kind", kind), validate(defs.declarations, node, "declarations", declarations, 1), node;
        }, exports3.variableDeclarator = function(id, init = null) {
          const node = { type: "VariableDeclarator", id, init }, defs = NODE_FIELDS.VariableDeclarator;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports3.variance = function(kind) {
          const node = { type: "Variance", kind }, defs = NODE_FIELDS.Variance;
          return validate(defs.kind, node, "kind", kind), node;
        }, exports3.voidTypeAnnotation = function() {
          return { type: "VoidTypeAnnotation" };
        }, exports3.whileStatement = function(test, body) {
          const node = { type: "WhileStatement", test, body }, defs = NODE_FIELDS.WhileStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.withStatement = function(object, body) {
          const node = { type: "WithStatement", object, body }, defs = NODE_FIELDS.WithStatement;
          return validate(defs.object, node, "object", object, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports3.yieldExpression = function(argument = null, delegate = false) {
          const node = { type: "YieldExpression", argument, delegate }, defs = NODE_FIELDS.YieldExpression;
          return validate(defs.argument, node, "argument", argument, 1), validate(defs.delegate, node, "delegate", delegate), node;
        };
        var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js"), utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const { validateInternal: validate } = _validate, { NODE_FIELDS } = utils;
        function numericLiteral(value2) {
          const node = { type: "NumericLiteral", value: value2 }, defs = NODE_FIELDS.NumericLiteral;
          return validate(defs.value, node, "value", value2), node;
        }
        function regExpLiteral(pattern, flags = "") {
          const node = { type: "RegExpLiteral", pattern, flags }, defs = NODE_FIELDS.RegExpLiteral;
          return validate(defs.pattern, node, "pattern", pattern), validate(defs.flags, node, "flags", flags), node;
        }
        function restElement(argument) {
          const node = { type: "RestElement", argument }, defs = NODE_FIELDS.RestElement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }
        function spreadElement(argument) {
          const node = { type: "SpreadElement", argument }, defs = NODE_FIELDS.SpreadElement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "AnyTypeAnnotation", { enumerable: true, get: function() {
          return _index.anyTypeAnnotation;
        } }), Object.defineProperty(exports3, "ArgumentPlaceholder", { enumerable: true, get: function() {
          return _index.argumentPlaceholder;
        } }), Object.defineProperty(exports3, "ArrayExpression", { enumerable: true, get: function() {
          return _index.arrayExpression;
        } }), Object.defineProperty(exports3, "ArrayPattern", { enumerable: true, get: function() {
          return _index.arrayPattern;
        } }), Object.defineProperty(exports3, "ArrayTypeAnnotation", { enumerable: true, get: function() {
          return _index.arrayTypeAnnotation;
        } }), Object.defineProperty(exports3, "ArrowFunctionExpression", { enumerable: true, get: function() {
          return _index.arrowFunctionExpression;
        } }), Object.defineProperty(exports3, "AssignmentExpression", { enumerable: true, get: function() {
          return _index.assignmentExpression;
        } }), Object.defineProperty(exports3, "AssignmentPattern", { enumerable: true, get: function() {
          return _index.assignmentPattern;
        } }), Object.defineProperty(exports3, "AwaitExpression", { enumerable: true, get: function() {
          return _index.awaitExpression;
        } }), Object.defineProperty(exports3, "BigIntLiteral", { enumerable: true, get: function() {
          return _index.bigIntLiteral;
        } }), Object.defineProperty(exports3, "BinaryExpression", { enumerable: true, get: function() {
          return _index.binaryExpression;
        } }), Object.defineProperty(exports3, "BindExpression", { enumerable: true, get: function() {
          return _index.bindExpression;
        } }), Object.defineProperty(exports3, "BlockStatement", { enumerable: true, get: function() {
          return _index.blockStatement;
        } }), Object.defineProperty(exports3, "BooleanLiteral", { enumerable: true, get: function() {
          return _index.booleanLiteral;
        } }), Object.defineProperty(exports3, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "BooleanTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanTypeAnnotation;
        } }), Object.defineProperty(exports3, "BreakStatement", { enumerable: true, get: function() {
          return _index.breakStatement;
        } }), Object.defineProperty(exports3, "CallExpression", { enumerable: true, get: function() {
          return _index.callExpression;
        } }), Object.defineProperty(exports3, "CatchClause", { enumerable: true, get: function() {
          return _index.catchClause;
        } }), Object.defineProperty(exports3, "ClassAccessorProperty", { enumerable: true, get: function() {
          return _index.classAccessorProperty;
        } }), Object.defineProperty(exports3, "ClassBody", { enumerable: true, get: function() {
          return _index.classBody;
        } }), Object.defineProperty(exports3, "ClassDeclaration", { enumerable: true, get: function() {
          return _index.classDeclaration;
        } }), Object.defineProperty(exports3, "ClassExpression", { enumerable: true, get: function() {
          return _index.classExpression;
        } }), Object.defineProperty(exports3, "ClassImplements", { enumerable: true, get: function() {
          return _index.classImplements;
        } }), Object.defineProperty(exports3, "ClassMethod", { enumerable: true, get: function() {
          return _index.classMethod;
        } }), Object.defineProperty(exports3, "ClassPrivateMethod", { enumerable: true, get: function() {
          return _index.classPrivateMethod;
        } }), Object.defineProperty(exports3, "ClassPrivateProperty", { enumerable: true, get: function() {
          return _index.classPrivateProperty;
        } }), Object.defineProperty(exports3, "ClassProperty", { enumerable: true, get: function() {
          return _index.classProperty;
        } }), Object.defineProperty(exports3, "ConditionalExpression", { enumerable: true, get: function() {
          return _index.conditionalExpression;
        } }), Object.defineProperty(exports3, "ContinueStatement", { enumerable: true, get: function() {
          return _index.continueStatement;
        } }), Object.defineProperty(exports3, "DebuggerStatement", { enumerable: true, get: function() {
          return _index.debuggerStatement;
        } }), Object.defineProperty(exports3, "DecimalLiteral", { enumerable: true, get: function() {
          return _index.decimalLiteral;
        } }), Object.defineProperty(exports3, "DeclareClass", { enumerable: true, get: function() {
          return _index.declareClass;
        } }), Object.defineProperty(exports3, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
          return _index.declareExportAllDeclaration;
        } }), Object.defineProperty(exports3, "DeclareExportDeclaration", { enumerable: true, get: function() {
          return _index.declareExportDeclaration;
        } }), Object.defineProperty(exports3, "DeclareFunction", { enumerable: true, get: function() {
          return _index.declareFunction;
        } }), Object.defineProperty(exports3, "DeclareInterface", { enumerable: true, get: function() {
          return _index.declareInterface;
        } }), Object.defineProperty(exports3, "DeclareModule", { enumerable: true, get: function() {
          return _index.declareModule;
        } }), Object.defineProperty(exports3, "DeclareModuleExports", { enumerable: true, get: function() {
          return _index.declareModuleExports;
        } }), Object.defineProperty(exports3, "DeclareOpaqueType", { enumerable: true, get: function() {
          return _index.declareOpaqueType;
        } }), Object.defineProperty(exports3, "DeclareTypeAlias", { enumerable: true, get: function() {
          return _index.declareTypeAlias;
        } }), Object.defineProperty(exports3, "DeclareVariable", { enumerable: true, get: function() {
          return _index.declareVariable;
        } }), Object.defineProperty(exports3, "DeclaredPredicate", { enumerable: true, get: function() {
          return _index.declaredPredicate;
        } }), Object.defineProperty(exports3, "Decorator", { enumerable: true, get: function() {
          return _index.decorator;
        } }), Object.defineProperty(exports3, "Directive", { enumerable: true, get: function() {
          return _index.directive;
        } }), Object.defineProperty(exports3, "DirectiveLiteral", { enumerable: true, get: function() {
          return _index.directiveLiteral;
        } }), Object.defineProperty(exports3, "DoExpression", { enumerable: true, get: function() {
          return _index.doExpression;
        } }), Object.defineProperty(exports3, "DoWhileStatement", { enumerable: true, get: function() {
          return _index.doWhileStatement;
        } }), Object.defineProperty(exports3, "EmptyStatement", { enumerable: true, get: function() {
          return _index.emptyStatement;
        } }), Object.defineProperty(exports3, "EmptyTypeAnnotation", { enumerable: true, get: function() {
          return _index.emptyTypeAnnotation;
        } }), Object.defineProperty(exports3, "EnumBooleanBody", { enumerable: true, get: function() {
          return _index.enumBooleanBody;
        } }), Object.defineProperty(exports3, "EnumBooleanMember", { enumerable: true, get: function() {
          return _index.enumBooleanMember;
        } }), Object.defineProperty(exports3, "EnumDeclaration", { enumerable: true, get: function() {
          return _index.enumDeclaration;
        } }), Object.defineProperty(exports3, "EnumDefaultedMember", { enumerable: true, get: function() {
          return _index.enumDefaultedMember;
        } }), Object.defineProperty(exports3, "EnumNumberBody", { enumerable: true, get: function() {
          return _index.enumNumberBody;
        } }), Object.defineProperty(exports3, "EnumNumberMember", { enumerable: true, get: function() {
          return _index.enumNumberMember;
        } }), Object.defineProperty(exports3, "EnumStringBody", { enumerable: true, get: function() {
          return _index.enumStringBody;
        } }), Object.defineProperty(exports3, "EnumStringMember", { enumerable: true, get: function() {
          return _index.enumStringMember;
        } }), Object.defineProperty(exports3, "EnumSymbolBody", { enumerable: true, get: function() {
          return _index.enumSymbolBody;
        } }), Object.defineProperty(exports3, "ExistsTypeAnnotation", { enumerable: true, get: function() {
          return _index.existsTypeAnnotation;
        } }), Object.defineProperty(exports3, "ExportAllDeclaration", { enumerable: true, get: function() {
          return _index.exportAllDeclaration;
        } }), Object.defineProperty(exports3, "ExportDefaultDeclaration", { enumerable: true, get: function() {
          return _index.exportDefaultDeclaration;
        } }), Object.defineProperty(exports3, "ExportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.exportDefaultSpecifier;
        } }), Object.defineProperty(exports3, "ExportNamedDeclaration", { enumerable: true, get: function() {
          return _index.exportNamedDeclaration;
        } }), Object.defineProperty(exports3, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.exportNamespaceSpecifier;
        } }), Object.defineProperty(exports3, "ExportSpecifier", { enumerable: true, get: function() {
          return _index.exportSpecifier;
        } }), Object.defineProperty(exports3, "ExpressionStatement", { enumerable: true, get: function() {
          return _index.expressionStatement;
        } }), Object.defineProperty(exports3, "File", { enumerable: true, get: function() {
          return _index.file;
        } }), Object.defineProperty(exports3, "ForInStatement", { enumerable: true, get: function() {
          return _index.forInStatement;
        } }), Object.defineProperty(exports3, "ForOfStatement", { enumerable: true, get: function() {
          return _index.forOfStatement;
        } }), Object.defineProperty(exports3, "ForStatement", { enumerable: true, get: function() {
          return _index.forStatement;
        } }), Object.defineProperty(exports3, "FunctionDeclaration", { enumerable: true, get: function() {
          return _index.functionDeclaration;
        } }), Object.defineProperty(exports3, "FunctionExpression", { enumerable: true, get: function() {
          return _index.functionExpression;
        } }), Object.defineProperty(exports3, "FunctionTypeAnnotation", { enumerable: true, get: function() {
          return _index.functionTypeAnnotation;
        } }), Object.defineProperty(exports3, "FunctionTypeParam", { enumerable: true, get: function() {
          return _index.functionTypeParam;
        } }), Object.defineProperty(exports3, "GenericTypeAnnotation", { enumerable: true, get: function() {
          return _index.genericTypeAnnotation;
        } }), Object.defineProperty(exports3, "Identifier", { enumerable: true, get: function() {
          return _index.identifier;
        } }), Object.defineProperty(exports3, "IfStatement", { enumerable: true, get: function() {
          return _index.ifStatement;
        } }), Object.defineProperty(exports3, "Import", { enumerable: true, get: function() {
          return _index.import;
        } }), Object.defineProperty(exports3, "ImportAttribute", { enumerable: true, get: function() {
          return _index.importAttribute;
        } }), Object.defineProperty(exports3, "ImportDeclaration", { enumerable: true, get: function() {
          return _index.importDeclaration;
        } }), Object.defineProperty(exports3, "ImportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.importDefaultSpecifier;
        } }), Object.defineProperty(exports3, "ImportExpression", { enumerable: true, get: function() {
          return _index.importExpression;
        } }), Object.defineProperty(exports3, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.importNamespaceSpecifier;
        } }), Object.defineProperty(exports3, "ImportSpecifier", { enumerable: true, get: function() {
          return _index.importSpecifier;
        } }), Object.defineProperty(exports3, "IndexedAccessType", { enumerable: true, get: function() {
          return _index.indexedAccessType;
        } }), Object.defineProperty(exports3, "InferredPredicate", { enumerable: true, get: function() {
          return _index.inferredPredicate;
        } }), Object.defineProperty(exports3, "InterfaceDeclaration", { enumerable: true, get: function() {
          return _index.interfaceDeclaration;
        } }), Object.defineProperty(exports3, "InterfaceExtends", { enumerable: true, get: function() {
          return _index.interfaceExtends;
        } }), Object.defineProperty(exports3, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
          return _index.interfaceTypeAnnotation;
        } }), Object.defineProperty(exports3, "InterpreterDirective", { enumerable: true, get: function() {
          return _index.interpreterDirective;
        } }), Object.defineProperty(exports3, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
          return _index.intersectionTypeAnnotation;
        } }), Object.defineProperty(exports3, "JSXAttribute", { enumerable: true, get: function() {
          return _index.jsxAttribute;
        } }), Object.defineProperty(exports3, "JSXClosingElement", { enumerable: true, get: function() {
          return _index.jsxClosingElement;
        } }), Object.defineProperty(exports3, "JSXClosingFragment", { enumerable: true, get: function() {
          return _index.jsxClosingFragment;
        } }), Object.defineProperty(exports3, "JSXElement", { enumerable: true, get: function() {
          return _index.jsxElement;
        } }), Object.defineProperty(exports3, "JSXEmptyExpression", { enumerable: true, get: function() {
          return _index.jsxEmptyExpression;
        } }), Object.defineProperty(exports3, "JSXExpressionContainer", { enumerable: true, get: function() {
          return _index.jsxExpressionContainer;
        } }), Object.defineProperty(exports3, "JSXFragment", { enumerable: true, get: function() {
          return _index.jsxFragment;
        } }), Object.defineProperty(exports3, "JSXIdentifier", { enumerable: true, get: function() {
          return _index.jsxIdentifier;
        } }), Object.defineProperty(exports3, "JSXMemberExpression", { enumerable: true, get: function() {
          return _index.jsxMemberExpression;
        } }), Object.defineProperty(exports3, "JSXNamespacedName", { enumerable: true, get: function() {
          return _index.jsxNamespacedName;
        } }), Object.defineProperty(exports3, "JSXOpeningElement", { enumerable: true, get: function() {
          return _index.jsxOpeningElement;
        } }), Object.defineProperty(exports3, "JSXOpeningFragment", { enumerable: true, get: function() {
          return _index.jsxOpeningFragment;
        } }), Object.defineProperty(exports3, "JSXSpreadAttribute", { enumerable: true, get: function() {
          return _index.jsxSpreadAttribute;
        } }), Object.defineProperty(exports3, "JSXSpreadChild", { enumerable: true, get: function() {
          return _index.jsxSpreadChild;
        } }), Object.defineProperty(exports3, "JSXText", { enumerable: true, get: function() {
          return _index.jsxText;
        } }), Object.defineProperty(exports3, "LabeledStatement", { enumerable: true, get: function() {
          return _index.labeledStatement;
        } }), Object.defineProperty(exports3, "LogicalExpression", { enumerable: true, get: function() {
          return _index.logicalExpression;
        } }), Object.defineProperty(exports3, "MemberExpression", { enumerable: true, get: function() {
          return _index.memberExpression;
        } }), Object.defineProperty(exports3, "MetaProperty", { enumerable: true, get: function() {
          return _index.metaProperty;
        } }), Object.defineProperty(exports3, "MixedTypeAnnotation", { enumerable: true, get: function() {
          return _index.mixedTypeAnnotation;
        } }), Object.defineProperty(exports3, "ModuleExpression", { enumerable: true, get: function() {
          return _index.moduleExpression;
        } }), Object.defineProperty(exports3, "NewExpression", { enumerable: true, get: function() {
          return _index.newExpression;
        } }), Object.defineProperty(exports3, "Noop", { enumerable: true, get: function() {
          return _index.noop;
        } }), Object.defineProperty(exports3, "NullLiteral", { enumerable: true, get: function() {
          return _index.nullLiteral;
        } }), Object.defineProperty(exports3, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "NullableTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullableTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumberLiteral", { enumerable: true, get: function() {
          return _index.numberLiteral;
        } }), Object.defineProperty(exports3, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumberTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumericLiteral", { enumerable: true, get: function() {
          return _index.numericLiteral;
        } }), Object.defineProperty(exports3, "ObjectExpression", { enumerable: true, get: function() {
          return _index.objectExpression;
        } }), Object.defineProperty(exports3, "ObjectMethod", { enumerable: true, get: function() {
          return _index.objectMethod;
        } }), Object.defineProperty(exports3, "ObjectPattern", { enumerable: true, get: function() {
          return _index.objectPattern;
        } }), Object.defineProperty(exports3, "ObjectProperty", { enumerable: true, get: function() {
          return _index.objectProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeAnnotation", { enumerable: true, get: function() {
          return _index.objectTypeAnnotation;
        } }), Object.defineProperty(exports3, "ObjectTypeCallProperty", { enumerable: true, get: function() {
          return _index.objectTypeCallProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeIndexer", { enumerable: true, get: function() {
          return _index.objectTypeIndexer;
        } }), Object.defineProperty(exports3, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
          return _index.objectTypeInternalSlot;
        } }), Object.defineProperty(exports3, "ObjectTypeProperty", { enumerable: true, get: function() {
          return _index.objectTypeProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
          return _index.objectTypeSpreadProperty;
        } }), Object.defineProperty(exports3, "OpaqueType", { enumerable: true, get: function() {
          return _index.opaqueType;
        } }), Object.defineProperty(exports3, "OptionalCallExpression", { enumerable: true, get: function() {
          return _index.optionalCallExpression;
        } }), Object.defineProperty(exports3, "OptionalIndexedAccessType", { enumerable: true, get: function() {
          return _index.optionalIndexedAccessType;
        } }), Object.defineProperty(exports3, "OptionalMemberExpression", { enumerable: true, get: function() {
          return _index.optionalMemberExpression;
        } }), Object.defineProperty(exports3, "ParenthesizedExpression", { enumerable: true, get: function() {
          return _index.parenthesizedExpression;
        } }), Object.defineProperty(exports3, "PipelineBareFunction", { enumerable: true, get: function() {
          return _index.pipelineBareFunction;
        } }), Object.defineProperty(exports3, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
          return _index.pipelinePrimaryTopicReference;
        } }), Object.defineProperty(exports3, "PipelineTopicExpression", { enumerable: true, get: function() {
          return _index.pipelineTopicExpression;
        } }), Object.defineProperty(exports3, "Placeholder", { enumerable: true, get: function() {
          return _index.placeholder;
        } }), Object.defineProperty(exports3, "PrivateName", { enumerable: true, get: function() {
          return _index.privateName;
        } }), Object.defineProperty(exports3, "Program", { enumerable: true, get: function() {
          return _index.program;
        } }), Object.defineProperty(exports3, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
          return _index.qualifiedTypeIdentifier;
        } }), Object.defineProperty(exports3, "RecordExpression", { enumerable: true, get: function() {
          return _index.recordExpression;
        } }), Object.defineProperty(exports3, "RegExpLiteral", { enumerable: true, get: function() {
          return _index.regExpLiteral;
        } }), Object.defineProperty(exports3, "RegexLiteral", { enumerable: true, get: function() {
          return _index.regexLiteral;
        } }), Object.defineProperty(exports3, "RestElement", { enumerable: true, get: function() {
          return _index.restElement;
        } }), Object.defineProperty(exports3, "RestProperty", { enumerable: true, get: function() {
          return _index.restProperty;
        } }), Object.defineProperty(exports3, "ReturnStatement", { enumerable: true, get: function() {
          return _index.returnStatement;
        } }), Object.defineProperty(exports3, "SequenceExpression", { enumerable: true, get: function() {
          return _index.sequenceExpression;
        } }), Object.defineProperty(exports3, "SpreadElement", { enumerable: true, get: function() {
          return _index.spreadElement;
        } }), Object.defineProperty(exports3, "SpreadProperty", { enumerable: true, get: function() {
          return _index.spreadProperty;
        } }), Object.defineProperty(exports3, "StaticBlock", { enumerable: true, get: function() {
          return _index.staticBlock;
        } }), Object.defineProperty(exports3, "StringLiteral", { enumerable: true, get: function() {
          return _index.stringLiteral;
        } }), Object.defineProperty(exports3, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "StringTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringTypeAnnotation;
        } }), Object.defineProperty(exports3, "Super", { enumerable: true, get: function() {
          return _index.super;
        } }), Object.defineProperty(exports3, "SwitchCase", { enumerable: true, get: function() {
          return _index.switchCase;
        } }), Object.defineProperty(exports3, "SwitchStatement", { enumerable: true, get: function() {
          return _index.switchStatement;
        } }), Object.defineProperty(exports3, "SymbolTypeAnnotation", { enumerable: true, get: function() {
          return _index.symbolTypeAnnotation;
        } }), Object.defineProperty(exports3, "TSAnyKeyword", { enumerable: true, get: function() {
          return _index.tsAnyKeyword;
        } }), Object.defineProperty(exports3, "TSArrayType", { enumerable: true, get: function() {
          return _index.tsArrayType;
        } }), Object.defineProperty(exports3, "TSAsExpression", { enumerable: true, get: function() {
          return _index.tsAsExpression;
        } }), Object.defineProperty(exports3, "TSBigIntKeyword", { enumerable: true, get: function() {
          return _index.tsBigIntKeyword;
        } }), Object.defineProperty(exports3, "TSBooleanKeyword", { enumerable: true, get: function() {
          return _index.tsBooleanKeyword;
        } }), Object.defineProperty(exports3, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsCallSignatureDeclaration;
        } }), Object.defineProperty(exports3, "TSConditionalType", { enumerable: true, get: function() {
          return _index.tsConditionalType;
        } }), Object.defineProperty(exports3, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsConstructSignatureDeclaration;
        } }), Object.defineProperty(exports3, "TSConstructorType", { enumerable: true, get: function() {
          return _index.tsConstructorType;
        } }), Object.defineProperty(exports3, "TSDeclareFunction", { enumerable: true, get: function() {
          return _index.tsDeclareFunction;
        } }), Object.defineProperty(exports3, "TSDeclareMethod", { enumerable: true, get: function() {
          return _index.tsDeclareMethod;
        } }), Object.defineProperty(exports3, "TSEnumDeclaration", { enumerable: true, get: function() {
          return _index.tsEnumDeclaration;
        } }), Object.defineProperty(exports3, "TSEnumMember", { enumerable: true, get: function() {
          return _index.tsEnumMember;
        } }), Object.defineProperty(exports3, "TSExportAssignment", { enumerable: true, get: function() {
          return _index.tsExportAssignment;
        } }), Object.defineProperty(exports3, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
          return _index.tsExpressionWithTypeArguments;
        } }), Object.defineProperty(exports3, "TSExternalModuleReference", { enumerable: true, get: function() {
          return _index.tsExternalModuleReference;
        } }), Object.defineProperty(exports3, "TSFunctionType", { enumerable: true, get: function() {
          return _index.tsFunctionType;
        } }), Object.defineProperty(exports3, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
          return _index.tsImportEqualsDeclaration;
        } }), Object.defineProperty(exports3, "TSImportType", { enumerable: true, get: function() {
          return _index.tsImportType;
        } }), Object.defineProperty(exports3, "TSIndexSignature", { enumerable: true, get: function() {
          return _index.tsIndexSignature;
        } }), Object.defineProperty(exports3, "TSIndexedAccessType", { enumerable: true, get: function() {
          return _index.tsIndexedAccessType;
        } }), Object.defineProperty(exports3, "TSInferType", { enumerable: true, get: function() {
          return _index.tsInferType;
        } }), Object.defineProperty(exports3, "TSInstantiationExpression", { enumerable: true, get: function() {
          return _index.tsInstantiationExpression;
        } }), Object.defineProperty(exports3, "TSInterfaceBody", { enumerable: true, get: function() {
          return _index.tsInterfaceBody;
        } }), Object.defineProperty(exports3, "TSInterfaceDeclaration", { enumerable: true, get: function() {
          return _index.tsInterfaceDeclaration;
        } }), Object.defineProperty(exports3, "TSIntersectionType", { enumerable: true, get: function() {
          return _index.tsIntersectionType;
        } }), Object.defineProperty(exports3, "TSIntrinsicKeyword", { enumerable: true, get: function() {
          return _index.tsIntrinsicKeyword;
        } }), Object.defineProperty(exports3, "TSLiteralType", { enumerable: true, get: function() {
          return _index.tsLiteralType;
        } }), Object.defineProperty(exports3, "TSMappedType", { enumerable: true, get: function() {
          return _index.tsMappedType;
        } }), Object.defineProperty(exports3, "TSMethodSignature", { enumerable: true, get: function() {
          return _index.tsMethodSignature;
        } }), Object.defineProperty(exports3, "TSModuleBlock", { enumerable: true, get: function() {
          return _index.tsModuleBlock;
        } }), Object.defineProperty(exports3, "TSModuleDeclaration", { enumerable: true, get: function() {
          return _index.tsModuleDeclaration;
        } }), Object.defineProperty(exports3, "TSNamedTupleMember", { enumerable: true, get: function() {
          return _index.tsNamedTupleMember;
        } }), Object.defineProperty(exports3, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
          return _index.tsNamespaceExportDeclaration;
        } }), Object.defineProperty(exports3, "TSNeverKeyword", { enumerable: true, get: function() {
          return _index.tsNeverKeyword;
        } }), Object.defineProperty(exports3, "TSNonNullExpression", { enumerable: true, get: function() {
          return _index.tsNonNullExpression;
        } }), Object.defineProperty(exports3, "TSNullKeyword", { enumerable: true, get: function() {
          return _index.tsNullKeyword;
        } }), Object.defineProperty(exports3, "TSNumberKeyword", { enumerable: true, get: function() {
          return _index.tsNumberKeyword;
        } }), Object.defineProperty(exports3, "TSObjectKeyword", { enumerable: true, get: function() {
          return _index.tsObjectKeyword;
        } }), Object.defineProperty(exports3, "TSOptionalType", { enumerable: true, get: function() {
          return _index.tsOptionalType;
        } }), Object.defineProperty(exports3, "TSParameterProperty", { enumerable: true, get: function() {
          return _index.tsParameterProperty;
        } }), Object.defineProperty(exports3, "TSParenthesizedType", { enumerable: true, get: function() {
          return _index.tsParenthesizedType;
        } }), Object.defineProperty(exports3, "TSPropertySignature", { enumerable: true, get: function() {
          return _index.tsPropertySignature;
        } }), Object.defineProperty(exports3, "TSQualifiedName", { enumerable: true, get: function() {
          return _index.tsQualifiedName;
        } }), Object.defineProperty(exports3, "TSRestType", { enumerable: true, get: function() {
          return _index.tsRestType;
        } }), Object.defineProperty(exports3, "TSSatisfiesExpression", { enumerable: true, get: function() {
          return _index.tsSatisfiesExpression;
        } }), Object.defineProperty(exports3, "TSStringKeyword", { enumerable: true, get: function() {
          return _index.tsStringKeyword;
        } }), Object.defineProperty(exports3, "TSSymbolKeyword", { enumerable: true, get: function() {
          return _index.tsSymbolKeyword;
        } }), Object.defineProperty(exports3, "TSThisType", { enumerable: true, get: function() {
          return _index.tsThisType;
        } }), Object.defineProperty(exports3, "TSTupleType", { enumerable: true, get: function() {
          return _index.tsTupleType;
        } }), Object.defineProperty(exports3, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeAliasDeclaration;
        } }), Object.defineProperty(exports3, "TSTypeAnnotation", { enumerable: true, get: function() {
          return _index.tsTypeAnnotation;
        } }), Object.defineProperty(exports3, "TSTypeAssertion", { enumerable: true, get: function() {
          return _index.tsTypeAssertion;
        } }), Object.defineProperty(exports3, "TSTypeLiteral", { enumerable: true, get: function() {
          return _index.tsTypeLiteral;
        } }), Object.defineProperty(exports3, "TSTypeOperator", { enumerable: true, get: function() {
          return _index.tsTypeOperator;
        } }), Object.defineProperty(exports3, "TSTypeParameter", { enumerable: true, get: function() {
          return _index.tsTypeParameter;
        } }), Object.defineProperty(exports3, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeParameterDeclaration;
        } }), Object.defineProperty(exports3, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.tsTypeParameterInstantiation;
        } }), Object.defineProperty(exports3, "TSTypePredicate", { enumerable: true, get: function() {
          return _index.tsTypePredicate;
        } }), Object.defineProperty(exports3, "TSTypeQuery", { enumerable: true, get: function() {
          return _index.tsTypeQuery;
        } }), Object.defineProperty(exports3, "TSTypeReference", { enumerable: true, get: function() {
          return _index.tsTypeReference;
        } }), Object.defineProperty(exports3, "TSUndefinedKeyword", { enumerable: true, get: function() {
          return _index.tsUndefinedKeyword;
        } }), Object.defineProperty(exports3, "TSUnionType", { enumerable: true, get: function() {
          return _index.tsUnionType;
        } }), Object.defineProperty(exports3, "TSUnknownKeyword", { enumerable: true, get: function() {
          return _index.tsUnknownKeyword;
        } }), Object.defineProperty(exports3, "TSVoidKeyword", { enumerable: true, get: function() {
          return _index.tsVoidKeyword;
        } }), Object.defineProperty(exports3, "TaggedTemplateExpression", { enumerable: true, get: function() {
          return _index.taggedTemplateExpression;
        } }), Object.defineProperty(exports3, "TemplateElement", { enumerable: true, get: function() {
          return _index.templateElement;
        } }), Object.defineProperty(exports3, "TemplateLiteral", { enumerable: true, get: function() {
          return _index.templateLiteral;
        } }), Object.defineProperty(exports3, "ThisExpression", { enumerable: true, get: function() {
          return _index.thisExpression;
        } }), Object.defineProperty(exports3, "ThisTypeAnnotation", { enumerable: true, get: function() {
          return _index.thisTypeAnnotation;
        } }), Object.defineProperty(exports3, "ThrowStatement", { enumerable: true, get: function() {
          return _index.throwStatement;
        } }), Object.defineProperty(exports3, "TopicReference", { enumerable: true, get: function() {
          return _index.topicReference;
        } }), Object.defineProperty(exports3, "TryStatement", { enumerable: true, get: function() {
          return _index.tryStatement;
        } }), Object.defineProperty(exports3, "TupleExpression", { enumerable: true, get: function() {
          return _index.tupleExpression;
        } }), Object.defineProperty(exports3, "TupleTypeAnnotation", { enumerable: true, get: function() {
          return _index.tupleTypeAnnotation;
        } }), Object.defineProperty(exports3, "TypeAlias", { enumerable: true, get: function() {
          return _index.typeAlias;
        } }), Object.defineProperty(exports3, "TypeAnnotation", { enumerable: true, get: function() {
          return _index.typeAnnotation;
        } }), Object.defineProperty(exports3, "TypeCastExpression", { enumerable: true, get: function() {
          return _index.typeCastExpression;
        } }), Object.defineProperty(exports3, "TypeParameter", { enumerable: true, get: function() {
          return _index.typeParameter;
        } }), Object.defineProperty(exports3, "TypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.typeParameterDeclaration;
        } }), Object.defineProperty(exports3, "TypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.typeParameterInstantiation;
        } }), Object.defineProperty(exports3, "TypeofTypeAnnotation", { enumerable: true, get: function() {
          return _index.typeofTypeAnnotation;
        } }), Object.defineProperty(exports3, "UnaryExpression", { enumerable: true, get: function() {
          return _index.unaryExpression;
        } }), Object.defineProperty(exports3, "UnionTypeAnnotation", { enumerable: true, get: function() {
          return _index.unionTypeAnnotation;
        } }), Object.defineProperty(exports3, "UpdateExpression", { enumerable: true, get: function() {
          return _index.updateExpression;
        } }), Object.defineProperty(exports3, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
          return _index.v8IntrinsicIdentifier;
        } }), Object.defineProperty(exports3, "VariableDeclaration", { enumerable: true, get: function() {
          return _index.variableDeclaration;
        } }), Object.defineProperty(exports3, "VariableDeclarator", { enumerable: true, get: function() {
          return _index.variableDeclarator;
        } }), Object.defineProperty(exports3, "Variance", { enumerable: true, get: function() {
          return _index.variance;
        } }), Object.defineProperty(exports3, "VoidTypeAnnotation", { enumerable: true, get: function() {
          return _index.voidTypeAnnotation;
        } }), Object.defineProperty(exports3, "WhileStatement", { enumerable: true, get: function() {
          return _index.whileStatement;
        } }), Object.defineProperty(exports3, "WithStatement", { enumerable: true, get: function() {
          return _index.withStatement;
        } }), Object.defineProperty(exports3, "YieldExpression", { enumerable: true, get: function() {
          return _index.yieldExpression;
        } });
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildUndefinedNode = function() {
          return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          const elements = [];
          for (let i2 = 0; i2 < node.children.length; i2++) {
            let child = node.children[i2];
            (0, _index.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _index.isJSXExpressionContainer)(child) && (child = child.expression), (0, _index.isJSXEmptyExpression)(child) || elements.push(child));
          }
          return elements;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(typeAnnotations) {
          const types = typeAnnotations.map((type) => (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.tsUnionType)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, false);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, true, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, deep = true, withoutLoc = false) {
          return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        const { hasOwn } = { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };
        function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
          return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
        }
        function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
          return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
        }
        function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
          if (!node) return node;
          const { type } = node, newNode = { type: node.type };
          if ((0, _index2.isIdentifier)(node)) newNode.name = node.name, hasOwn(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), hasOwn(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation), hasOwn(node, "decorators") && (newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators);
          else {
            if (!hasOwn(_index.NODE_FIELDS, type)) throw new Error(`Unknown node type: "${type}"`);
            for (const field of Object.keys(_index.NODE_FIELDS[type])) hasOwn(node, field) && (newNode[field] = deep ? (0, _index2.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
          }
          return hasOwn(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), hasOwn(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), hasOwn(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
        }
        function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
          return comments && deep ? comments.map((comment) => {
            const cache = commentsCache.get(comment);
            if (cache) return cache;
            const { type, value: value2, loc } = comment, ret = { type, value: value2, loc };
            return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
          }) : comments;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, false, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, type, content, line) {
          return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
        };
        var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, type, comments) {
          if (!comments || !node) return node;
          const key = `${type}Comments`;
          node[key] ? "leading" === type ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
        };
        var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return _index.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          }), node;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.WHILE_TYPES = exports3.USERWHITESPACABLE_TYPES = exports3.UNARYLIKE_TYPES = exports3.TYPESCRIPT_TYPES = exports3.TSTYPE_TYPES = exports3.TSTYPEELEMENT_TYPES = exports3.TSENTITYNAME_TYPES = exports3.TSBASETYPE_TYPES = exports3.TERMINATORLESS_TYPES = exports3.STATEMENT_TYPES = exports3.STANDARDIZED_TYPES = exports3.SCOPABLE_TYPES = exports3.PUREISH_TYPES = exports3.PROPERTY_TYPES = exports3.PRIVATE_TYPES = exports3.PATTERN_TYPES = exports3.PATTERNLIKE_TYPES = exports3.OBJECTMEMBER_TYPES = exports3.MODULESPECIFIER_TYPES = exports3.MODULEDECLARATION_TYPES = exports3.MISCELLANEOUS_TYPES = exports3.METHOD_TYPES = exports3.LVAL_TYPES = exports3.LOOP_TYPES = exports3.LITERAL_TYPES = exports3.JSX_TYPES = exports3.IMPORTOREXPORTDECLARATION_TYPES = exports3.IMMUTABLE_TYPES = exports3.FUNCTION_TYPES = exports3.FUNCTIONPARENT_TYPES = exports3.FOR_TYPES = exports3.FORXSTATEMENT_TYPES = exports3.FLOW_TYPES = exports3.FLOWTYPE_TYPES = exports3.FLOWPREDICATE_TYPES = exports3.FLOWDECLARATION_TYPES = exports3.FLOWBASEANNOTATION_TYPES = exports3.EXPRESSION_TYPES = exports3.EXPRESSIONWRAPPER_TYPES = exports3.EXPORTDECLARATION_TYPES = exports3.ENUMMEMBER_TYPES = exports3.ENUMBODY_TYPES = exports3.DECLARATION_TYPES = exports3.CONDITIONAL_TYPES = exports3.COMPLETIONSTATEMENT_TYPES = exports3.CLASS_TYPES = exports3.BLOCK_TYPES = exports3.BLOCKPARENT_TYPES = exports3.BINARY_TYPES = exports3.ACCESSOR_TYPES = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        exports3.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS.Standardized, exports3.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS.Expression, exports3.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS.Binary, exports3.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Scopable, exports3.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.BlockParent, exports3.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS.Block, exports3.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.Statement, exports3.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS.Terminatorless, exports3.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.CompletionStatement, exports3.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Conditional, exports3.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS.Loop, exports3.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS.While, exports3.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS.ExpressionWrapper, exports3.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS.For, exports3.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.ForXStatement, exports3.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS.Function, exports3.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.FunctionParent, exports3.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS.Pureish, exports3.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.Declaration, exports3.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.PatternLike, exports3.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS.LVal, exports3.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS.TSEntityName, exports3.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Literal, exports3.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Immutable, exports3.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.UserWhitespacable, exports3.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS.Method, exports3.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.ObjectMember, exports3.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS.Property, exports3.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.UnaryLike, exports3.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS.Pattern, exports3.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS.Class;
        const IMPORTOREXPORTDECLARATION_TYPES = exports3.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
        exports3.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ExportDeclaration, exports3.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS.ModuleSpecifier, exports3.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS.Accessor, exports3.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS.Private, exports3.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS.Flow, exports3.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowType, exports3.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, exports3.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowDeclaration, exports3.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowPredicate, exports3.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumBody, exports3.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumMember, exports3.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS.JSX, exports3.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS.Miscellaneous, exports3.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS.TypeScript, exports3.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.TSTypeElement, exports3.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSType, exports3.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSBaseType, exports3.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.UPDATE_OPERATORS = exports3.UNARY_OPERATORS = exports3.STRING_UNARY_OPERATORS = exports3.STATEMENT_OR_BLOCK_KEYS = exports3.NUMBER_UNARY_OPERATORS = exports3.NUMBER_BINARY_OPERATORS = exports3.NOT_LOCAL_BINDING = exports3.LOGICAL_OPERATORS = exports3.INHERIT_KEYS = exports3.FOR_INIT_KEYS = exports3.FLATTENABLE_KEYS = exports3.EQUALITY_BINARY_OPERATORS = exports3.COMPARISON_BINARY_OPERATORS = exports3.COMMENT_KEYS = exports3.BOOLEAN_UNARY_OPERATORS = exports3.BOOLEAN_NUMBER_BINARY_OPERATORS = exports3.BOOLEAN_BINARY_OPERATORS = exports3.BLOCK_SCOPED_SYMBOL = exports3.BINARY_OPERATORS = exports3.ASSIGNMENT_OPERATORS = void 0;
        exports3.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"], exports3.FLATTENABLE_KEYS = ["body", "expressions"], exports3.FOR_INIT_KEYS = ["left", "init"], exports3.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
        const LOGICAL_OPERATORS = exports3.LOGICAL_OPERATORS = ["||", "&&", "??"], BOOLEAN_NUMBER_BINARY_OPERATORS = (exports3.UPDATE_OPERATORS = ["++", "--"], exports3.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="]), EQUALITY_BINARY_OPERATORS = exports3.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="], COMPARISON_BINARY_OPERATORS = exports3.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"], BOOLEAN_BINARY_OPERATORS = exports3.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS], NUMBER_BINARY_OPERATORS = exports3.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"], BOOLEAN_UNARY_OPERATORS = (exports3.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"], exports3.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")], exports3.BOOLEAN_UNARY_OPERATORS = ["delete", "!"]), NUMBER_UNARY_OPERATORS = exports3.NUMBER_UNARY_OPERATORS = ["+", "-", "~"], STRING_UNARY_OPERATORS = exports3.STRING_UNARY_OPERATORS = ["typeof"];
        exports3.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS], exports3.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] }, exports3.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), exports3.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key = "body") {
          const result = (0, _toBlock.default)(node[key], node);
          return node[key] = result, result;
        };
        var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function gatherSequenceExpressions(nodes, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes) if ((0, _index.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _index.isExpression)(node)) exprs.push(node);
          else if ((0, _index.isExpressionStatement)(node)) exprs.push(node.expression);
          else if ((0, _index.isVariableDeclaration)(node)) {
            if ("var" !== node.kind) return;
            for (const declar of node.declarations) {
              const bindings = (0, _getBindingIdentifiers.default)(declar);
              for (const key of Object.keys(bindings)) declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
              declar.init && exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if ((0, _index.isIfStatement)(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
            if (!consequent || !alternate) return;
            exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
          } else if ((0, _index.isBlockStatement)(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body) return;
            exprs.push(body);
          } else {
            if (!(0, _index.isEmptyStatement)(node)) return;
            0 === nodes.indexOf(node) && (ensureLastUndefined = true);
          }
          ensureLastUndefined && exprs.push((0, _productions.buildUndefinedNode)());
          return 1 === exprs.length ? exprs[0] : (0, _index2.sequenceExpression)(exprs);
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name) {
          "eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
          return name;
        };
        var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node)) return node;
          let blockNodes = [];
          (0, _index.isEmptyStatement)(node) ? blockNodes = [] : ((0, _index.isStatement)(node) || (node = (0, _index.isFunction)(parent) ? (0, _index2.returnStatement)(node) : (0, _index2.expressionStatement)(node)), blockNodes = [node]);
          return (0, _index2.blockStatement)(blockNodes);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key = node.key || node.property) {
          !node.computed && (0, _index.isIdentifier)(key) && (key = (0, _index2.stringLiteral)(key.name));
          return key;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        exports3.default = function(node) {
          (0, _index.isExpressionStatement)(node) && (node = node.expression);
          if ((0, _index.isExpression)(node)) return node;
          (0, _index.isClass)(node) ? node.type = "ClassExpression" : (0, _index.isFunction)(node) && (node.type = "FunctionExpression");
          if (!(0, _index.isExpression)(node)) throw new Error(`cannot turn ${node.type} to an expression`);
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(input) {
          input += "";
          let name = "";
          for (const c2 of input) name += (0, _helperValidatorIdentifier.isIdentifierChar)(c2.codePointAt(0)) ? c2 : "-";
          name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c2) {
            return c2 ? c2.toUpperCase() : "";
          }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
          return name || "_";
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = toKeyAlias;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
        function toKeyAlias(node, key = node.key) {
          let alias;
          return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _index.isIdentifier)(key) ? key.name : (0, _index.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
        }
        toKeyAlias.uid = 0, toKeyAlias.increment = function() {
          return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.default = function(nodes, scope) {
          if (null == nodes || !nodes.length) return;
          const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, declars);
          if (!result) return;
          for (const declar of declars) scope.push(declar);
          return result;
        };
        var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports3.default = function(node, ignore) {
          if ((0, _index.isStatement)(node)) return node;
          let newType, mustHaveId = false;
          if ((0, _index.isClass)(node)) mustHaveId = true, newType = "ClassDeclaration";
          else if ((0, _index.isFunction)(node)) mustHaveId = true, newType = "FunctionDeclaration";
          else if ((0, _index.isAssignmentExpression)(node)) return (0, _index2.expressionStatement)(node);
          mustHaveId && !node.id && (newType = false);
          if (!newType) {
            if (ignore) return false;
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
          return node.type = newType, node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports3.default = function valueToNode(value2) {
          if (void 0 === value2) return (0, _index.identifier)("undefined");
          if (true === value2 || false === value2) return (0, _index.booleanLiteral)(value2);
          if (null === value2) return (0, _index.nullLiteral)();
          if ("string" == typeof value2) return (0, _index.stringLiteral)(value2);
          if ("number" == typeof value2) {
            let result;
            if (Number.isFinite(value2)) result = (0, _index.numericLiteral)(Math.abs(value2));
            else {
              let numerator;
              numerator = Number.isNaN(value2) ? (0, _index.numericLiteral)(0) : (0, _index.numericLiteral)(1), result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
            }
            return (value2 < 0 || Object.is(value2, -0)) && (result = (0, _index.unaryExpression)("-", result)), result;
          }
          if (function(value3) {
            return "[object RegExp]" === objectToString2(value3);
          }(value2)) {
            const pattern = value2.source, flags = /\/([a-z]*)$/.exec(value2.toString())[1];
            return (0, _index.regExpLiteral)(pattern, flags);
          }
          if (Array.isArray(value2)) return (0, _index.arrayExpression)(value2.map(valueToNode));
          if (function(value3) {
            if ("object" != typeof value3 || null === value3 || "[object Object]" !== Object.prototype.toString.call(value3)) return false;
            const proto = Object.getPrototypeOf(value3);
            return null === proto || null === Object.getPrototypeOf(proto);
          }(value2)) {
            const props = [];
            for (const key of Object.keys(value2)) {
              let nodeKey;
              nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _index.identifier)(key) : (0, _index.stringLiteral)(key), props.push((0, _index.objectProperty)(nodeKey, valueToNode(value2[key])));
            }
            return (0, _index.objectExpression)(props);
          }
          throw new Error("don't know how to turn this value into a node");
        };
        const objectToString2 = Function.call.bind(Object.prototype.toString);
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.patternLikeCommon = exports3.importAttributes = exports3.functionTypeAnnotationCommon = exports3.functionDeclarationCommon = exports3.functionCommon = exports3.classMethodOrPropertyCommon = exports3.classMethodOrDeclareMethodCommon = void 0;
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Standardized");
        defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")), default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function() {
          const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
          return function(node, key, val) {
            ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
          };
        }(), { type: "string" }) : (0, _utils.assertValueType)("string") }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS) }, left: { validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(node, key, val) {
            ("in" === node.operator ? inOp : expression)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { builder: ["test", "body"], visitor: ["body", "test"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
        }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
        }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
        const functionCommon = () => ({ params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"), generator: { default: false }, async: { default: false } });
        exports3.functionCommon = functionCommon;
        const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
        exports3.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
        const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
        exports3.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() : void 0 }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
        const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
        exports3.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (!(0, _isValidIdentifier.default)(val, false)) throw new TypeError(`"${val}" is not a valid identifier name`);
        }, { type: "string" })) : (0, _utils.assertValueType)("string") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
          const match = /\.(\w+)$/.exec(key);
          if (!match) return;
          const [, parentKey] = match, nonComp = { computed: false };
          if ("property" === parentKey) {
            if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
          } else if ("key" === parentKey) {
            if ((0, _is.default)("Property", parent, nonComp)) return;
            if ((0, _is.default)("Method", parent, nonComp)) return;
          } else if ("exported" === parentKey) {
            if ((0, _is.default)("ExportSpecifier", parent)) return;
          } else if ("imported" === parentKey) {
            if ((0, _is.default)("ImportSpecifier", parent, { imported: node })) return;
          } else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node })) return;
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && "this" !== node.name) throw new TypeError(`"${node.name}" is not a valid identifier`);
        } : void 0 }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
          if (1 / val < 0 || !Number.isFinite(val)) {
            new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
          }
        }, { type: "number" })) } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }, { type: "string" })) : (0, _utils.assertValueType)("string"), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
        }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement") } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
        }() }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
        }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
          if (shorthand) {
            if (node.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
            if (!(0, _is.default)("Identifier", node.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
          };
        }() : void 0 }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match) throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index2] = match;
          if (parent[listKey].length > +index2 + 1) throw new TypeError(`RestElement must be last element of ${listKey}`);
        } : void 0 }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: (0, _utils.validateArrayOfType)("Expression") }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: (0, _utils.validateArrayOfType)("Statement") } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: (0, _utils.validateArrayOfType)("SwitchCase") } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
          if (!node.handler && !node.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, { oneOfNodeTypes: ["BlockStatement"] })) : (0, _utils.assertNodeType)("BlockStatement") }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using") }, declarations: (0, _utils.validateArrayOfType)("VariableDeclarator") }, validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
          const withoutInit = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            if ((0, _is.default)("ForXStatement", parent, { left: node })) {
              if (1 !== node.declarations.length) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
            } else node.declarations.forEach((decl) => {
              decl.init || withoutInit(decl, "id", decl.id);
            });
          };
        })() : void 0 }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") : (0, _utils.assertNodeType)("LVal") }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["typeParameters", "params", "returnType", "body"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock") } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() : void 0 });
        const importAttributes = exports3.importAttributes = { attributes: { optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") }, assertions: { deprecated: true, optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") } };
        defineType("ExportAllDeclaration", { builder: ["source"], visitor: ["source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, importAttributes) }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { builder: ["declaration", "specifiers", "source"], visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ declaration: { optional: true, validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
          if (val && node.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          if (val && node.source) throw new TypeError("Cannot export a declaration from a source");
        }, { oneOfNodeTypes: ["Declaration"] })) : (0, _utils.assertNodeType)("Declaration") } }, importAttributes, { specifiers: { default: [], validate: (0, _utils.arrayOf)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function(node, key, val) {
            (node.source ? sourced : sourceless)(node, key, val);
          }, { oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"] }) : sourced;
        }()) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }) }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return Object.assign(function(node, key, val) {
            (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
          }, { oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { builder: ["specifiers", "source"], visitor: ["specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"], fields: Object.assign({}, importAttributes, { module: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"), source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } }) }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["imported", "local"], builder: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportExpression", { visitor: ["source", "options"], aliases: ["Expression"], fields: { phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, source: { validate: (0, _utils.assertNodeType)("Expression") }, options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
          }
          if (!(0, _is.default)("Identifier", node.property, { name: property })) throw new TypeError("Unrecognised MetaProperty");
        }, { oneOfNodeTypes: ["Identifier"] })) : (0, _utils.assertNodeType)("Identifier") }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
        const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
        exports3.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
        const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"), kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
        exports3.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty") }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "typeParameters", "quasi"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
          const raw = node.value.raw;
          let unterminatedCalled = false;
          const error = () => {
            throw new Error("Internal @babel/types error.");
          }, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, { unterminated() {
            unterminatedCalled = true;
          }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node.value.cooked = firstInvalidLoc ? null : str;
        }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: (0, _utils.validateArrayOfType)("TemplateElement"), expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
          if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (val && !node.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier"] });
        }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"), optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.DEPRECATED_ALIASES = void 0;
        exports3.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement") } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
          const isDeclareClass = "DeclareClass" === name;
          defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")) }, isDeclareClass ? { mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")) } : {}, { body: (0, _utils.validateType)("ObjectTypeAnnotation") }) });
        };
        defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) }, _core.importAttributes) }), defineType("DeclareExportAllDeclaration", { visitor: ["source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, _core.importAttributes) }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validateArrayOfType)("FunctionTypeParam"), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value"], builder: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["variance", "id", "key", "value"], builder: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)("Identifier", "StringLiteral"), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["qualification", "id"], builder: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier") } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody") } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.ALIAS_KEYS;
        } }), Object.defineProperty(exports3, "BUILDER_KEYS", { enumerable: true, get: function() {
          return _utils.BUILDER_KEYS;
        } }), Object.defineProperty(exports3, "DEPRECATED_ALIASES", { enumerable: true, get: function() {
          return _deprecatedAliases.DEPRECATED_ALIASES;
        } }), Object.defineProperty(exports3, "DEPRECATED_KEYS", { enumerable: true, get: function() {
          return _utils.DEPRECATED_KEYS;
        } }), Object.defineProperty(exports3, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        } }), Object.defineProperty(exports3, "NODE_FIELDS", { enumerable: true, get: function() {
          return _utils.NODE_FIELDS;
        } }), Object.defineProperty(exports3, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        } }), exports3.TYPES = void 0, Object.defineProperty(exports3, "VISITOR_KEYS", { enumerable: true, get: function() {
          return _utils.VISITOR_KEYS;
        } }), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js");
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
        Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
          _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
        });
        exports3.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("JSX");
        defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"), typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js");
        const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
        defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: Object.assign({ name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } }, (0, _core.patternLikeCommon)()) }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.PLACEHOLDERS_FLIPPED_ALIAS = exports3.PLACEHOLDERS_ALIAS = exports3.PLACEHOLDERS = void 0;
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const PLACEHOLDERS = exports3.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"], PLACEHOLDERS_ALIAS = exports3.PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          null != alias && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
        }
        const PLACEHOLDERS_FLIPPED_ALIAS = exports3.PLACEHOLDERS_FLIPPED_ALIAS = {};
        Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js");
        const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
        defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
        const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
        defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
        const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
        defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
        const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
        for (const type of tsKeywordTypes) defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
        defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)("Identifier", "TSThisType"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember") } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
        const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
        defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "nameType", "typeAnnotation"], builder: ["typeParameter", "typeAnnotation", "nameType"], fields: Object.assign({}, { typeParameter: (0, _utils.validateType)("TSTypeParameter") }, { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") }) }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
          }
          return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
        }() } } });
        defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } });
        const TSTypeExpression = { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } };
        defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: Object.assign({ kind: { validate: (0, _utils.assertOneOf)("global", "module", "namespace") }, declare: (0, _utils.validateOptional)(bool) }, { global: (0, _utils.validateOptional)(bool) }, { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration") }) }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"), options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSType") } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSTypeParameter") } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, const: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.VISITOR_KEYS = exports3.NODE_PARENT_VALIDATIONS = exports3.NODE_FIELDS = exports3.FLIPPED_ALIAS_KEYS = exports3.DEPRECATED_KEYS = exports3.BUILDER_KEYS = exports3.ALIAS_KEYS = void 0, exports3.arrayOf = arrayOf, exports3.arrayOfType = arrayOfType, exports3.assertEach = assertEach, exports3.assertNodeOrValueType = function(...types) {
          function validate2(node, key, val) {
            for (const type of types) if (getType2(val) === type || (0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeOrValueTypes = types, validate2;
        }, exports3.assertNodeType = assertNodeType, exports3.assertOneOf = function(...values) {
          function validate2(node, key, val) {
            if (!values.includes(val)) throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
          }
          return validate2.oneOf = values, validate2;
        }, exports3.assertOptionalChainStart = function() {
          return function(node) {
            var _current;
            let current = node;
            for (; node; ) {
              const { type } = current;
              if ("OptionalCallExpression" !== type) {
                if ("OptionalMemberExpression" !== type) break;
                if (current.optional) return;
                current = current.object;
              } else {
                if (current.optional) return;
                current = current.callee;
              }
            }
            throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current) ? void 0 : _current.type}`);
          };
        }, exports3.assertShape = function(shape) {
          function validate2(node, key, val) {
            const errors = [];
            for (const property of Object.keys(shape)) try {
              (0, _validate.validateField)(node, property, val[property], shape[property]);
            } catch (error) {
              if (error instanceof TypeError) {
                errors.push(error.message);
                continue;
              }
              throw error;
            }
            if (errors.length) throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
          return validate2.shapeOf = shape, validate2;
        }, exports3.assertValueType = assertValueType, exports3.chain = chain, exports3.default = defineType, exports3.defineAliasedType = function(...aliases) {
          return (type, opts = {}) => {
            let defined = opts.aliases;
            var _store$opts$inherits$;
            defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), null != defined || (defined = []), opts.aliases = defined);
            const additional = aliases.filter((a2) => !defined.includes(a2));
            defined.unshift(...additional), defineType(type, opts);
          };
        }, exports3.validate = validate, exports3.validateArrayOfType = function(...typeNames) {
          return validate(arrayOfType(...typeNames));
        }, exports3.validateOptional = function(validate2) {
          return { validate: validate2, optional: true };
        }, exports3.validateOptionalType = function(...typeNames) {
          return { validate: assertNodeType(...typeNames), optional: true };
        }, exports3.validateType = function(...typeNames) {
          return validate(assertNodeType(...typeNames));
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js");
        const VISITOR_KEYS = exports3.VISITOR_KEYS = {}, ALIAS_KEYS = exports3.ALIAS_KEYS = {}, FLIPPED_ALIAS_KEYS = exports3.FLIPPED_ALIAS_KEYS = {}, NODE_FIELDS = exports3.NODE_FIELDS = {}, BUILDER_KEYS = exports3.BUILDER_KEYS = {}, DEPRECATED_KEYS = exports3.DEPRECATED_KEYS = {}, NODE_PARENT_VALIDATIONS = exports3.NODE_PARENT_VALIDATIONS = {};
        function getType2(val) {
          return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
        }
        function validate(validate2) {
          return { validate: validate2 };
        }
        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }
        function arrayOfType(...typeNames) {
          return arrayOf(assertNodeType(...typeNames));
        }
        function assertEach(callback) {
          const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {
          };
          function validator(node, key, val) {
            if (Array.isArray(val)) for (let i2 = 0; i2 < val.length; i2++) {
              const subkey = `${key}[${i2}]`, v2 = val[i2];
              callback(node, subkey, v2), childValidator(node, subkey, v2);
            }
          }
          return validator.each = callback, validator;
        }
        function assertNodeType(...types) {
          function validate2(node, key, val) {
            for (const type of types) if ((0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeTypes = types, validate2;
        }
        function assertValueType(type) {
          function validate2(node, key, val) {
            if (!(getType2(val) === type)) throw new TypeError(`Property ${key} expected type of ${type} but got ${getType2(val)}`);
          }
          return validate2.type = type, validate2;
        }
        function chain(...fns) {
          function validate2(...args) {
            for (const fn of fns) fn(...args);
          }
          if (validate2.chainOf = fns, fns.length >= 2 && "type" in fns[0] && "array" === fns[0].type && !("each" in fns[1])) throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
          return validate2;
        }
        const validTypeOpts = /* @__PURE__ */ new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]), validFieldKeys = /* @__PURE__ */ new Set(["default", "optional", "deprecated", "validate"]), store = {};
        function defineType(type, opts = {}) {
          const inherits = opts.inherits && store[opts.inherits] || {};
          let fields = opts.fields;
          if (!fields && (fields = {}, inherits.fields)) {
            const keys2 = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys2) {
              const field = inherits.fields[key], def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def) throw new Error("field defaults can only be primitives or empty arrays currently");
              fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, deprecated: field.deprecated, validate: field.validate };
            }
          }
          const visitor = opts.visitor || inherits.visitor || [], aliases = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
          for (const k of Object.keys(opts)) if (!validTypeOpts.has(k)) throw new Error(`Unknown type option "${k}" on ${type}`);
          opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
          for (const key of visitor.concat(builder)) fields[key] = fields[key] || {};
          for (const key of Object.keys(fields)) {
            const field = fields[key];
            void 0 === field.default || builder.includes(key) || (field.optional = true), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType2(field.default)));
            for (const k of Object.keys(field)) if (!validFieldKeys.has(k)) throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
          }
          VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases, aliases.forEach((alias) => {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
          }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getAssignmentIdentifiers: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, getFunctionName: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true, __internal__deprecationWarning: true };
        Object.defineProperty(exports3, "__internal__deprecationWarning", { enumerable: true, get: function() {
          return _deprecationWarning.default;
        } }), Object.defineProperty(exports3, "addComment", { enumerable: true, get: function() {
          return _addComment.default;
        } }), Object.defineProperty(exports3, "addComments", { enumerable: true, get: function() {
          return _addComments.default;
        } }), Object.defineProperty(exports3, "appendToMemberExpression", { enumerable: true, get: function() {
          return _appendToMemberExpression.default;
        } }), Object.defineProperty(exports3, "assertNode", { enumerable: true, get: function() {
          return _assertNode.default;
        } }), Object.defineProperty(exports3, "buildMatchMemberExpression", { enumerable: true, get: function() {
          return _buildMatchMemberExpression.default;
        } }), Object.defineProperty(exports3, "clone", { enumerable: true, get: function() {
          return _clone.default;
        } }), Object.defineProperty(exports3, "cloneDeep", { enumerable: true, get: function() {
          return _cloneDeep.default;
        } }), Object.defineProperty(exports3, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
          return _cloneDeepWithoutLoc.default;
        } }), Object.defineProperty(exports3, "cloneNode", { enumerable: true, get: function() {
          return _cloneNode.default;
        } }), Object.defineProperty(exports3, "cloneWithoutLoc", { enumerable: true, get: function() {
          return _cloneWithoutLoc.default;
        } }), Object.defineProperty(exports3, "createFlowUnionType", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports3, "createTSUnionType", { enumerable: true, get: function() {
          return _createTSUnionType.default;
        } }), Object.defineProperty(exports3, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        } }), Object.defineProperty(exports3, "createUnionTypeAnnotation", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports3, "ensureBlock", { enumerable: true, get: function() {
          return _ensureBlock.default;
        } }), Object.defineProperty(exports3, "getAssignmentIdentifiers", { enumerable: true, get: function() {
          return _getAssignmentIdentifiers.default;
        } }), Object.defineProperty(exports3, "getBindingIdentifiers", { enumerable: true, get: function() {
          return _getBindingIdentifiers.default;
        } }), Object.defineProperty(exports3, "getFunctionName", { enumerable: true, get: function() {
          return _getFunctionName.default;
        } }), Object.defineProperty(exports3, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
          return _getOuterBindingIdentifiers.default;
        } }), Object.defineProperty(exports3, "inheritInnerComments", { enumerable: true, get: function() {
          return _inheritInnerComments.default;
        } }), Object.defineProperty(exports3, "inheritLeadingComments", { enumerable: true, get: function() {
          return _inheritLeadingComments.default;
        } }), Object.defineProperty(exports3, "inheritTrailingComments", { enumerable: true, get: function() {
          return _inheritTrailingComments.default;
        } }), Object.defineProperty(exports3, "inherits", { enumerable: true, get: function() {
          return _inherits.default;
        } }), Object.defineProperty(exports3, "inheritsComments", { enumerable: true, get: function() {
          return _inheritsComments.default;
        } }), Object.defineProperty(exports3, "is", { enumerable: true, get: function() {
          return _is.default;
        } }), Object.defineProperty(exports3, "isBinding", { enumerable: true, get: function() {
          return _isBinding.default;
        } }), Object.defineProperty(exports3, "isBlockScoped", { enumerable: true, get: function() {
          return _isBlockScoped.default;
        } }), Object.defineProperty(exports3, "isImmutable", { enumerable: true, get: function() {
          return _isImmutable.default;
        } }), Object.defineProperty(exports3, "isLet", { enumerable: true, get: function() {
          return _isLet.default;
        } }), Object.defineProperty(exports3, "isNode", { enumerable: true, get: function() {
          return _isNode.default;
        } }), Object.defineProperty(exports3, "isNodesEquivalent", { enumerable: true, get: function() {
          return _isNodesEquivalent.default;
        } }), Object.defineProperty(exports3, "isPlaceholderType", { enumerable: true, get: function() {
          return _isPlaceholderType.default;
        } }), Object.defineProperty(exports3, "isReferenced", { enumerable: true, get: function() {
          return _isReferenced.default;
        } }), Object.defineProperty(exports3, "isScope", { enumerable: true, get: function() {
          return _isScope.default;
        } }), Object.defineProperty(exports3, "isSpecifierDefault", { enumerable: true, get: function() {
          return _isSpecifierDefault.default;
        } }), Object.defineProperty(exports3, "isType", { enumerable: true, get: function() {
          return _isType.default;
        } }), Object.defineProperty(exports3, "isValidES3Identifier", { enumerable: true, get: function() {
          return _isValidES3Identifier.default;
        } }), Object.defineProperty(exports3, "isValidIdentifier", { enumerable: true, get: function() {
          return _isValidIdentifier.default;
        } }), Object.defineProperty(exports3, "isVar", { enumerable: true, get: function() {
          return _isVar.default;
        } }), Object.defineProperty(exports3, "matchesPattern", { enumerable: true, get: function() {
          return _matchesPattern.default;
        } }), Object.defineProperty(exports3, "prependToMemberExpression", { enumerable: true, get: function() {
          return _prependToMemberExpression.default;
        } }), exports3.react = void 0, Object.defineProperty(exports3, "removeComments", { enumerable: true, get: function() {
          return _removeComments.default;
        } }), Object.defineProperty(exports3, "removeProperties", { enumerable: true, get: function() {
          return _removeProperties.default;
        } }), Object.defineProperty(exports3, "removePropertiesDeep", { enumerable: true, get: function() {
          return _removePropertiesDeep.default;
        } }), Object.defineProperty(exports3, "removeTypeDuplicates", { enumerable: true, get: function() {
          return _removeTypeDuplicates.default;
        } }), Object.defineProperty(exports3, "shallowEqual", { enumerable: true, get: function() {
          return _shallowEqual.default;
        } }), Object.defineProperty(exports3, "toBindingIdentifierName", { enumerable: true, get: function() {
          return _toBindingIdentifierName.default;
        } }), Object.defineProperty(exports3, "toBlock", { enumerable: true, get: function() {
          return _toBlock.default;
        } }), Object.defineProperty(exports3, "toComputedKey", { enumerable: true, get: function() {
          return _toComputedKey.default;
        } }), Object.defineProperty(exports3, "toExpression", { enumerable: true, get: function() {
          return _toExpression.default;
        } }), Object.defineProperty(exports3, "toIdentifier", { enumerable: true, get: function() {
          return _toIdentifier.default;
        } }), Object.defineProperty(exports3, "toKeyAlias", { enumerable: true, get: function() {
          return _toKeyAlias.default;
        } }), Object.defineProperty(exports3, "toStatement", { enumerable: true, get: function() {
          return _toStatement.default;
        } }), Object.defineProperty(exports3, "traverse", { enumerable: true, get: function() {
          return _traverse.default;
        } }), Object.defineProperty(exports3, "traverseFast", { enumerable: true, get: function() {
          return _traverseFast.default;
        } }), Object.defineProperty(exports3, "validate", { enumerable: true, get: function() {
          return _validate.default;
        } }), Object.defineProperty(exports3, "valueToNode", { enumerable: true, get: function() {
          return _valueToNode.default;
        } });
        var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js");
        Object.keys(_index).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index[key];
          } }));
        });
        var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        Object.keys(_index2).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index2[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index2[key];
          } }));
        });
        var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");
        Object.keys(_uppercase).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _uppercase[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _uppercase[key];
          } }));
        });
        var _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js");
        Object.keys(_productions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _productions[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _productions[key];
          } }));
        });
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js"), _index3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js");
        Object.keys(_index3).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index3[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index3[key];
          } }));
        });
        var _index4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
        Object.keys(_index4).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index4[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index4[key];
          } }));
        });
        var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js"), _index5 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        Object.keys(_index5).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index5[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index5[key];
          } }));
        });
        var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getAssignmentIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _getFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js");
        Object.keys(_traverse).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _traverse[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _traverse[key];
          } }));
        });
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _index6 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        Object.keys(_index6).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index6[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index6[key];
          } }));
        });
        var _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        exports3.react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
        exports3.toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js").default, process.env.BABEL_TYPES_8_BREAKING && console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, append, computed = false) {
          return member.object = (0, _index.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            if (node && !types.includes(node)) {
              if ((0, _index.isAnyTypeAnnotation)(node)) return [node];
              if ((0, _index.isFlowBaseAnnotation)(node)) bases.set(node.type, node);
              else if ((0, _index.isUnionTypeAnnotation)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isGenericTypeAnnotation)(node)) {
                const name = getQualifiedName(node.id);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          if (!child || !parent) return child;
          for (const key of _index.INHERIT_KEYS.optional) null == child[key] && (child[key] = parent[key]);
          for (const key of Object.keys(parent)) "_" === key[0] && "__clone" !== key && (child[key] = parent[key]);
          for (const key of _index.INHERIT_KEYS.force) child[key] = parent[key];
          return (0, _inheritsComments.default)(child, parent), child;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, prepend) {
          if ((0, _index2.isSuper)(member.object)) throw new Error("Cannot prepend node to super property access (`super.foo`).");
          return member.object = (0, _index.memberExpression)(prepend, member.object), member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, opts = {}) {
          const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
          for (const key of map) null != node[key] && (node[key] = void 0);
          for (const key of Object.keys(node)) "_" === key[0] && null != node[key] && (node[key] = void 0);
          const symbols = Object.getOwnPropertySymbols(node);
          for (const sym of symbols) node[sym] = null;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(tree, opts) {
          return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
        };
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            if (node && !types.includes(node)) {
              if ((0, _index.isTSAnyKeyword)(node)) return [node];
              if ((0, _index.isTSBaseType)(node)) bases.set(node.type, node);
              else if ((0, _index.isTSUnionType)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
                const name = getQualifiedName(node.typeName);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.pop();
            if (id) switch (id.type) {
              case "ArrayPattern":
                search.push(...id.elements);
                break;
              case "AssignmentExpression":
              case "AssignmentPattern":
              case "ForInStatement":
              case "ForOfStatement":
                search.push(id.left);
                break;
              case "ObjectPattern":
                search.push(...id.properties);
                break;
              case "ObjectProperty":
                search.push(id.value);
                break;
              case "RestElement":
              case "UpdateExpression":
                search.push(id.argument);
                break;
              case "UnaryExpression":
                "delete" === id.operator && search.push(id.argument);
                break;
              case "Identifier":
                ids[id.name] = id;
            }
          }
          return ids;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = getBindingIdentifiers;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) continue;
            if ((0, _index.isIdentifier)(id)) {
              if (duplicates) {
                (ids[id.name] = ids[id.name] || []).push(id);
              } else ids[id.name] = id;
              continue;
            }
            if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
              (0, _index.isDeclaration)(id.declaration) && search.push(id.declaration);
              continue;
            }
            if (outerOnly) {
              if ((0, _index.isFunctionDeclaration)(id)) {
                search.push(id.id);
                continue;
              }
              if ((0, _index.isFunctionExpression)(id)) continue;
            }
            const keys2 = getBindingIdentifiers.keys[id.type];
            if (keys2) for (let i2 = 0; i2 < keys2.length; i2++) {
              const nodes = id[keys2[i2]];
              nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
            }
          }
          return ids;
        }
        getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent) {
          if ("id" in node && node.id) return { name: node.id.name, originalNode: node.id };
          let id, prefix = "";
          (0, _index.isObjectProperty)(parent, { value: node }) ? id = getObjectMemberKey(parent) : (0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node) ? (id = getObjectMemberKey(node), "get" === node.kind ? prefix = "get " : "set" === node.kind && (prefix = "set ")) : (0, _index.isVariableDeclarator)(parent, { init: node }) ? id = parent.id : (0, _index.isAssignmentExpression)(parent, { operator: "=", right: node }) && (id = parent.left);
          if (!id) return null;
          const name = (0, _index.isLiteral)(id) ? function(id2) {
            if ((0, _index.isNullLiteral)(id2)) return "null";
            if ((0, _index.isRegExpLiteral)(id2)) return `/${id2.pattern}/${id2.flags}`;
            if ((0, _index.isTemplateLiteral)(id2)) return id2.quasis.map((quasi) => quasi.value.raw).join("");
            if (void 0 !== id2.value) return String(id2.value);
            return null;
          }(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
          return null == name ? null : { name: prefix + name, originalNode: id };
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getObjectMemberKey(node) {
          if (!node.computed || (0, _index.isLiteral)(node.key)) return node.key;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
        exports3.default = function(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, handlers, state) {
          "function" == typeof handlers && (handlers = { enter: handlers });
          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys2 = _index.VISITOR_KEYS[node.type];
          if (keys2) {
            enter && enter(node, ancestors, state);
            for (const key of keys2) {
              const subNode = node[key];
              if (Array.isArray(subNode)) for (let i2 = 0; i2 < subNode.length; i2++) {
                const child = subNode[i2];
                child && (ancestors.push({ node, key, index: i2 }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
              }
              else subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
            }
            exit && exit(node, ancestors, state);
          }
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function traverseFast(node, enter, opts) {
          if (!node) return;
          const keys2 = _index.VISITOR_KEYS[node.type];
          if (!keys2) return;
          enter(node, opts = opts || {});
          for (const key of keys2) {
            const subNode = node[key];
            if (Array.isArray(subNode)) for (const node2 of subNode) traverseFast(node2, enter, opts);
            else traverseFast(subNode, enter, opts);
          }
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(oldName, newName, prefix = "") {
          if (warnings.has(oldName)) return;
          warnings.add(oldName);
          const { internal: internal2, trace } = function(skip, length) {
            const { stackTraceLimit, prepareStackTrace } = Error;
            let stackTrace;
            if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
              stackTrace = stack;
            }, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace) return { internal: false, trace: "" };
            const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
            return { internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()), trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n") };
          }(1, 2);
          if (internal2) return;
          console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
        };
        const warnings = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(key, child, parent) {
          child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;
          for (let i2 = 0; i2 < lines.length; i2++) /[^ \t]/.exec(lines[i2]) && (lastNonEmptyLine = i2);
          let str = "";
          for (let i2 = 0; i2 < lines.length; i2++) {
            const line = lines[i2], isFirstLine = 0 === i2, isLastLine = i2 === lines.length - 1, isLastNonEmptyLine = i2 === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");
            isFirstLine || (trimmedLine = trimmedLine.replace(/^ +/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/ +$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
          }
          str && args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(actual, expected) {
          const keys2 = Object.keys(expected);
          for (const key of keys2) if (actual[key] !== expected[key]) return false;
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(match, allowPartial) {
          const parts = match.split(".");
          return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
        };
        var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isAccessor = function(node, opts) {
          if (!node) return false;
          if ("ClassAccessorProperty" !== node.type) return false;
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isAnyTypeAnnotation = function(node, opts) {
          return !!node && ("AnyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArgumentPlaceholder = function(node, opts) {
          return !!node && ("ArgumentPlaceholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayExpression = function(node, opts) {
          return !!node && ("ArrayExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayPattern = function(node, opts) {
          return !!node && ("ArrayPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayTypeAnnotation = function(node, opts) {
          return !!node && ("ArrayTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrowFunctionExpression = function(node, opts) {
          return !!node && ("ArrowFunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAssignmentExpression = function(node, opts) {
          return !!node && ("AssignmentExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAssignmentPattern = function(node, opts) {
          return !!node && ("AssignmentPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAwaitExpression = function(node, opts) {
          return !!node && ("AwaitExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBigIntLiteral = function(node, opts) {
          return !!node && ("BigIntLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBinary = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BinaryExpression":
            case "LogicalExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBinaryExpression = function(node, opts) {
          return !!node && ("BinaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBindExpression = function(node, opts) {
          return !!node && ("BindExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBlock = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "Program":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBlockParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBlockStatement = function(node, opts) {
          return !!node && ("BlockStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanLiteral = function(node, opts) {
          return !!node && ("BooleanLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBreakStatement = function(node, opts) {
          return !!node && ("BreakStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCallExpression = function(node, opts) {
          return !!node && ("CallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCatchClause = function(node, opts) {
          return !!node && ("CatchClause" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClass = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassExpression":
            case "ClassDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isClassAccessorProperty = function(node, opts) {
          return !!node && ("ClassAccessorProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassBody = function(node, opts) {
          return !!node && ("ClassBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassDeclaration = function(node, opts) {
          return !!node && ("ClassDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassExpression = function(node, opts) {
          return !!node && ("ClassExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassImplements = function(node, opts) {
          return !!node && ("ClassImplements" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassMethod = function(node, opts) {
          return !!node && ("ClassMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassPrivateMethod = function(node, opts) {
          return !!node && ("ClassPrivateMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassPrivateProperty = function(node, opts) {
          return !!node && ("ClassPrivateProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassProperty = function(node, opts) {
          return !!node && ("ClassProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCompletionStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isConditional = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ConditionalExpression":
            case "IfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isConditionalExpression = function(node, opts) {
          return !!node && ("ConditionalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isContinueStatement = function(node, opts) {
          return !!node && ("ContinueStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDebuggerStatement = function(node, opts) {
          return !!node && ("DebuggerStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDecimalLiteral = function(node, opts) {
          return !!node && ("DecimalLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "VariableDeclaration":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
              break;
            case "Placeholder":
              if ("Declaration" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isDeclareClass = function(node, opts) {
          return !!node && ("DeclareClass" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareExportAllDeclaration = function(node, opts) {
          return !!node && ("DeclareExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareExportDeclaration = function(node, opts) {
          return !!node && ("DeclareExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareFunction = function(node, opts) {
          return !!node && ("DeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareInterface = function(node, opts) {
          return !!node && ("DeclareInterface" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareModule = function(node, opts) {
          return !!node && ("DeclareModule" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareModuleExports = function(node, opts) {
          return !!node && ("DeclareModuleExports" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareOpaqueType = function(node, opts) {
          return !!node && ("DeclareOpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareTypeAlias = function(node, opts) {
          return !!node && ("DeclareTypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareVariable = function(node, opts) {
          return !!node && ("DeclareVariable" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclaredPredicate = function(node, opts) {
          return !!node && ("DeclaredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDecorator = function(node, opts) {
          return !!node && ("Decorator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDirective = function(node, opts) {
          return !!node && ("Directive" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDirectiveLiteral = function(node, opts) {
          return !!node && ("DirectiveLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDoExpression = function(node, opts) {
          return !!node && ("DoExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDoWhileStatement = function(node, opts) {
          return !!node && ("DoWhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEmptyStatement = function(node, opts) {
          return !!node && ("EmptyStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEmptyTypeAnnotation = function(node, opts) {
          return !!node && ("EmptyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumBody = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isEnumBooleanBody = function(node, opts) {
          return !!node && ("EnumBooleanBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumBooleanMember = function(node, opts) {
          return !!node && ("EnumBooleanMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumDeclaration = function(node, opts) {
          return !!node && ("EnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumDefaultedMember = function(node, opts) {
          return !!node && ("EnumDefaultedMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isEnumNumberBody = function(node, opts) {
          return !!node && ("EnumNumberBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumNumberMember = function(node, opts) {
          return !!node && ("EnumNumberMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumStringBody = function(node, opts) {
          return !!node && ("EnumStringBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumStringMember = function(node, opts) {
          return !!node && ("EnumStringMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumSymbolBody = function(node, opts) {
          return !!node && ("EnumSymbolBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExistsTypeAnnotation = function(node, opts) {
          return !!node && ("ExistsTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportAllDeclaration = function(node, opts) {
          return !!node && ("ExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isExportDefaultDeclaration = function(node, opts) {
          return !!node && ("ExportDefaultDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportDefaultSpecifier = function(node, opts) {
          return !!node && ("ExportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportNamedDeclaration = function(node, opts) {
          return !!node && ("ExportNamedDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ExportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportSpecifier = function(node, opts) {
          return !!node && ("ExportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExpression = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "CallExpression":
            case "ConditionalExpression":
            case "FunctionExpression":
            case "Identifier":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "ObjectExpression":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "ThisExpression":
            case "UnaryExpression":
            case "UpdateExpression":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ImportExpression":
            case "MetaProperty":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "TypeCastExpression":
            case "JSXElement":
            case "JSXFragment":
            case "BindExpression":
            case "DoExpression":
            case "RecordExpression":
            case "TupleExpression":
            case "DecimalLiteral":
            case "ModuleExpression":
            case "TopicReference":
            case "PipelineTopicExpression":
            case "PipelineBareFunction":
            case "PipelinePrimaryTopicReference":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Expression":
                case "Identifier":
                case "StringLiteral":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isExpressionStatement = function(node, opts) {
          return !!node && ("ExpressionStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExpressionWrapper = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExpressionStatement":
            case "ParenthesizedExpression":
            case "TypeCastExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFile = function(node, opts) {
          return !!node && ("File" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFlow = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ClassImplements":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "DeclaredPredicate":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "FunctionTypeParam":
            case "GenericTypeAnnotation":
            case "InferredPredicate":
            case "InterfaceExtends":
            case "InterfaceDeclaration":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
            case "OpaqueType":
            case "QualifiedTypeIdentifier":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "TypeAlias":
            case "TypeAnnotation":
            case "TypeCastExpression":
            case "TypeParameter":
            case "TypeParameterDeclaration":
            case "TypeParameterInstantiation":
            case "UnionTypeAnnotation":
            case "Variance":
            case "VoidTypeAnnotation":
            case "EnumDeclaration":
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowBaseAnnotation = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NumberTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "VoidTypeAnnotation":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowPredicate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclaredPredicate":
            case "InferredPredicate":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "GenericTypeAnnotation":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "UnionTypeAnnotation":
            case "VoidTypeAnnotation":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFor = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isForInStatement = function(node, opts) {
          return !!node && ("ForInStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForOfStatement = function(node, opts) {
          return !!node && ("ForOfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForStatement = function(node, opts) {
          return !!node && ("ForStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForXStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunction = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunctionDeclaration = function(node, opts) {
          return !!node && ("FunctionDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionExpression = function(node, opts) {
          return !!node && ("FunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunctionTypeAnnotation = function(node, opts) {
          return !!node && ("FunctionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionTypeParam = function(node, opts) {
          return !!node && ("FunctionTypeParam" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isGenericTypeAnnotation = function(node, opts) {
          return !!node && ("GenericTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIdentifier = function(node, opts) {
          return !!node && ("Identifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIfStatement = function(node, opts) {
          return !!node && ("IfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImmutable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "BigIntLiteral":
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXOpeningElement":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isImport = function(node, opts) {
          return !!node && ("Import" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportAttribute = function(node, opts) {
          return !!node && ("ImportAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportDeclaration = function(node, opts) {
          return !!node && ("ImportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportDefaultSpecifier = function(node, opts) {
          return !!node && ("ImportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportExpression = function(node, opts) {
          return !!node && ("ImportExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ImportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportOrExportDeclaration = isImportOrExportDeclaration, exports3.isImportSpecifier = function(node, opts) {
          return !!node && ("ImportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIndexedAccessType = function(node, opts) {
          return !!node && ("IndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInferredPredicate = function(node, opts) {
          return !!node && ("InferredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceDeclaration = function(node, opts) {
          return !!node && ("InterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceExtends = function(node, opts) {
          return !!node && ("InterfaceExtends" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceTypeAnnotation = function(node, opts) {
          return !!node && ("InterfaceTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterpreterDirective = function(node, opts) {
          return !!node && ("InterpreterDirective" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIntersectionTypeAnnotation = function(node, opts) {
          return !!node && ("IntersectionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSX = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXEmptyExpression":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXIdentifier":
            case "JSXMemberExpression":
            case "JSXNamespacedName":
            case "JSXOpeningElement":
            case "JSXSpreadAttribute":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isJSXAttribute = function(node, opts) {
          return !!node && ("JSXAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXClosingElement = function(node, opts) {
          return !!node && ("JSXClosingElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXClosingFragment = function(node, opts) {
          return !!node && ("JSXClosingFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXElement = function(node, opts) {
          return !!node && ("JSXElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXEmptyExpression = function(node, opts) {
          return !!node && ("JSXEmptyExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXExpressionContainer = function(node, opts) {
          return !!node && ("JSXExpressionContainer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXFragment = function(node, opts) {
          return !!node && ("JSXFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXIdentifier = function(node, opts) {
          return !!node && ("JSXIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXMemberExpression = function(node, opts) {
          return !!node && ("JSXMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXNamespacedName = function(node, opts) {
          return !!node && ("JSXNamespacedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXOpeningElement = function(node, opts) {
          return !!node && ("JSXOpeningElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXOpeningFragment = function(node, opts) {
          return !!node && ("JSXOpeningFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXSpreadAttribute = function(node, opts) {
          return !!node && ("JSXSpreadAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXSpreadChild = function(node, opts) {
          return !!node && ("JSXSpreadChild" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXText = function(node, opts) {
          return !!node && ("JSXText" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLVal = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "MemberExpression":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSParameterProperty":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isLabeledStatement = function(node, opts) {
          return !!node && ("LabeledStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLiteral = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "TemplateLiteral":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isLogicalExpression = function(node, opts) {
          return !!node && ("LogicalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLoop = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "WhileStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMemberExpression = function(node, opts) {
          return !!node && ("MemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isMetaProperty = function(node, opts) {
          return !!node && ("MetaProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isMethod = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMiscellaneous = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Noop":
            case "Placeholder":
            case "V8IntrinsicIdentifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMixedTypeAnnotation = function(node, opts) {
          return !!node && ("MixedTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isModuleDeclaration = function(node, opts) {
          return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
        }, exports3.isModuleExpression = function(node, opts) {
          return !!node && ("ModuleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isModuleSpecifier = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isNewExpression = function(node, opts) {
          return !!node && ("NewExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNoop = function(node, opts) {
          return !!node && ("Noop" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullLiteral = function(node, opts) {
          return !!node && ("NullLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NullLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullableTypeAnnotation = function(node, opts) {
          return !!node && ("NullableTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !!node && ("NumberLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NumberLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberTypeAnnotation = function(node, opts) {
          return !!node && ("NumberTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumericLiteral = function(node, opts) {
          return !!node && ("NumericLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectExpression = function(node, opts) {
          return !!node && ("ObjectExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isObjectMethod = function(node, opts) {
          return !!node && ("ObjectMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectPattern = function(node, opts) {
          return !!node && ("ObjectPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectProperty = function(node, opts) {
          return !!node && ("ObjectProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeAnnotation = function(node, opts) {
          return !!node && ("ObjectTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeCallProperty = function(node, opts) {
          return !!node && ("ObjectTypeCallProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeIndexer = function(node, opts) {
          return !!node && ("ObjectTypeIndexer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeInternalSlot = function(node, opts) {
          return !!node && ("ObjectTypeInternalSlot" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeProperty = function(node, opts) {
          return !!node && ("ObjectTypeProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeSpreadProperty = function(node, opts) {
          return !!node && ("ObjectTypeSpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOpaqueType = function(node, opts) {
          return !!node && ("OpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalCallExpression = function(node, opts) {
          return !!node && ("OptionalCallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalIndexedAccessType = function(node, opts) {
          return !!node && ("OptionalIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalMemberExpression = function(node, opts) {
          return !!node && ("OptionalMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isParenthesizedExpression = function(node, opts) {
          return !!node && ("ParenthesizedExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPattern = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
              break;
            case "Placeholder":
              if ("Pattern" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPatternLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPipelineBareFunction = function(node, opts) {
          return !!node && ("PipelineBareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPipelinePrimaryTopicReference = function(node, opts) {
          return !!node && ("PipelinePrimaryTopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPipelineTopicExpression = function(node, opts) {
          return !!node && ("PipelineTopicExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPlaceholder = function(node, opts) {
          return !!node && ("Placeholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPrivate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPrivateName = function(node, opts) {
          return !!node && ("PrivateName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isProgram = function(node, opts) {
          return !!node && ("Program" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isProperty = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectProperty":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPureish = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "ArrowFunctionExpression":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isQualifiedTypeIdentifier = function(node, opts) {
          return !!node && ("QualifiedTypeIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRecordExpression = function(node, opts) {
          return !!node && ("RecordExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRegExpLiteral = function(node, opts) {
          return !!node && ("RegExpLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRegexLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !!node && ("RegexLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRestElement = function(node, opts) {
          return !!node && ("RestElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRestProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !!node && ("RestProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isReturnStatement = function(node, opts) {
          return !!node && ("ReturnStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isScopable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isSequenceExpression = function(node, opts) {
          return !!node && ("SequenceExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSpreadElement = function(node, opts) {
          return !!node && ("SpreadElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSpreadProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !!node && ("SpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStandardized = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "InterpreterDirective":
            case "Directive":
            case "DirectiveLiteral":
            case "BlockStatement":
            case "BreakStatement":
            case "CallExpression":
            case "CatchClause":
            case "ConditionalExpression":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "File":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Identifier":
            case "IfStatement":
            case "LabeledStatement":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "Program":
            case "ObjectExpression":
            case "ObjectMethod":
            case "ObjectProperty":
            case "RestElement":
            case "ReturnStatement":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "SwitchCase":
            case "SwitchStatement":
            case "ThisExpression":
            case "ThrowStatement":
            case "TryStatement":
            case "UnaryExpression":
            case "UpdateExpression":
            case "VariableDeclaration":
            case "VariableDeclarator":
            case "WhileStatement":
            case "WithStatement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ArrowFunctionExpression":
            case "ClassBody":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ExportSpecifier":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportExpression":
            case "MetaProperty":
            case "ClassMethod":
            case "ObjectPattern":
            case "SpreadElement":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateElement":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "ExportNamespaceSpecifier":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
            case "StaticBlock":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Identifier":
                case "StringLiteral":
                case "BlockStatement":
                case "ClassBody":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "BreakStatement":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "IfStatement":
            case "LabeledStatement":
            case "ReturnStatement":
            case "SwitchStatement":
            case "ThrowStatement":
            case "TryStatement":
            case "VariableDeclaration":
            case "WhileStatement":
            case "WithStatement":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
            case "TSImportEqualsDeclaration":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Statement":
                case "Declaration":
                case "BlockStatement":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isStaticBlock = function(node, opts) {
          return !!node && ("StaticBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringLiteral = function(node, opts) {
          return !!node && ("StringLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("StringLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringTypeAnnotation = function(node, opts) {
          return !!node && ("StringTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSuper = function(node, opts) {
          return !!node && ("Super" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSwitchCase = function(node, opts) {
          return !!node && ("SwitchCase" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSwitchStatement = function(node, opts) {
          return !!node && ("SwitchStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSymbolTypeAnnotation = function(node, opts) {
          return !!node && ("SymbolTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSAnyKeyword = function(node, opts) {
          return !!node && ("TSAnyKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSArrayType = function(node, opts) {
          return !!node && ("TSArrayType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSAsExpression = function(node, opts) {
          return !!node && ("TSAsExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSBaseType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSLiteralType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSBigIntKeyword = function(node, opts) {
          return !!node && ("TSBigIntKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSBooleanKeyword = function(node, opts) {
          return !!node && ("TSBooleanKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSCallSignatureDeclaration = function(node, opts) {
          return !!node && ("TSCallSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConditionalType = function(node, opts) {
          return !!node && ("TSConditionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConstructSignatureDeclaration = function(node, opts) {
          return !!node && ("TSConstructSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConstructorType = function(node, opts) {
          return !!node && ("TSConstructorType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSDeclareFunction = function(node, opts) {
          return !!node && ("TSDeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSDeclareMethod = function(node, opts) {
          return !!node && ("TSDeclareMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSEntityName = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "TSQualifiedName":
              break;
            case "Placeholder":
              if ("Identifier" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSEnumDeclaration = function(node, opts) {
          return !!node && ("TSEnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSEnumMember = function(node, opts) {
          return !!node && ("TSEnumMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExportAssignment = function(node, opts) {
          return !!node && ("TSExportAssignment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExpressionWithTypeArguments = function(node, opts) {
          return !!node && ("TSExpressionWithTypeArguments" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExternalModuleReference = function(node, opts) {
          return !!node && ("TSExternalModuleReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSFunctionType = function(node, opts) {
          return !!node && ("TSFunctionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSImportEqualsDeclaration = function(node, opts) {
          return !!node && ("TSImportEqualsDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSImportType = function(node, opts) {
          return !!node && ("TSImportType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIndexSignature = function(node, opts) {
          return !!node && ("TSIndexSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIndexedAccessType = function(node, opts) {
          return !!node && ("TSIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInferType = function(node, opts) {
          return !!node && ("TSInferType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInstantiationExpression = function(node, opts) {
          return !!node && ("TSInstantiationExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInterfaceBody = function(node, opts) {
          return !!node && ("TSInterfaceBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInterfaceDeclaration = function(node, opts) {
          return !!node && ("TSInterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIntersectionType = function(node, opts) {
          return !!node && ("TSIntersectionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIntrinsicKeyword = function(node, opts) {
          return !!node && ("TSIntrinsicKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSLiteralType = function(node, opts) {
          return !!node && ("TSLiteralType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSMappedType = function(node, opts) {
          return !!node && ("TSMappedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSMethodSignature = function(node, opts) {
          return !!node && ("TSMethodSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSModuleBlock = function(node, opts) {
          return !!node && ("TSModuleBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSModuleDeclaration = function(node, opts) {
          return !!node && ("TSModuleDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNamedTupleMember = function(node, opts) {
          return !!node && ("TSNamedTupleMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNamespaceExportDeclaration = function(node, opts) {
          return !!node && ("TSNamespaceExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNeverKeyword = function(node, opts) {
          return !!node && ("TSNeverKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNonNullExpression = function(node, opts) {
          return !!node && ("TSNonNullExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNullKeyword = function(node, opts) {
          return !!node && ("TSNullKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNumberKeyword = function(node, opts) {
          return !!node && ("TSNumberKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSObjectKeyword = function(node, opts) {
          return !!node && ("TSObjectKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSOptionalType = function(node, opts) {
          return !!node && ("TSOptionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSParameterProperty = function(node, opts) {
          return !!node && ("TSParameterProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSParenthesizedType = function(node, opts) {
          return !!node && ("TSParenthesizedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSPropertySignature = function(node, opts) {
          return !!node && ("TSPropertySignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSQualifiedName = function(node, opts) {
          return !!node && ("TSQualifiedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSRestType = function(node, opts) {
          return !!node && ("TSRestType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSSatisfiesExpression = function(node, opts) {
          return !!node && ("TSSatisfiesExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSStringKeyword = function(node, opts) {
          return !!node && ("TSStringKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSSymbolKeyword = function(node, opts) {
          return !!node && ("TSSymbolKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSThisType = function(node, opts) {
          return !!node && ("TSThisType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTupleType = function(node, opts) {
          return !!node && ("TSTupleType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSImportType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSTypeAliasDeclaration = function(node, opts) {
          return !!node && ("TSTypeAliasDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeAnnotation = function(node, opts) {
          return !!node && ("TSTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeAssertion = function(node, opts) {
          return !!node && ("TSTypeAssertion" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeElement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSTypeLiteral = function(node, opts) {
          return !!node && ("TSTypeLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeOperator = function(node, opts) {
          return !!node && ("TSTypeOperator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameter = function(node, opts) {
          return !!node && ("TSTypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TSTypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TSTypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypePredicate = function(node, opts) {
          return !!node && ("TSTypePredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeQuery = function(node, opts) {
          return !!node && ("TSTypeQuery" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeReference = function(node, opts) {
          return !!node && ("TSTypeReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUndefinedKeyword = function(node, opts) {
          return !!node && ("TSUndefinedKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUnionType = function(node, opts) {
          return !!node && ("TSUnionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUnknownKeyword = function(node, opts) {
          return !!node && ("TSUnknownKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSVoidKeyword = function(node, opts) {
          return !!node && ("TSVoidKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTaggedTemplateExpression = function(node, opts) {
          return !!node && ("TaggedTemplateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTemplateElement = function(node, opts) {
          return !!node && ("TemplateElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTemplateLiteral = function(node, opts) {
          return !!node && ("TemplateLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTerminatorless = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
            case "YieldExpression":
            case "AwaitExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isThisExpression = function(node, opts) {
          return !!node && ("ThisExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isThisTypeAnnotation = function(node, opts) {
          return !!node && ("ThisTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isThrowStatement = function(node, opts) {
          return !!node && ("ThrowStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTopicReference = function(node, opts) {
          return !!node && ("TopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTryStatement = function(node, opts) {
          return !!node && ("TryStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTupleExpression = function(node, opts) {
          return !!node && ("TupleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTupleTypeAnnotation = function(node, opts) {
          return !!node && ("TupleTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeAlias = function(node, opts) {
          return !!node && ("TypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeAnnotation = function(node, opts) {
          return !!node && ("TypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeCastExpression = function(node, opts) {
          return !!node && ("TypeCastExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameter = function(node, opts) {
          return !!node && ("TypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeScript = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSParameterProperty":
            case "TSDeclareFunction":
            case "TSDeclareMethod":
            case "TSQualifiedName":
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSNamedTupleMember":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSInterfaceDeclaration":
            case "TSInterfaceBody":
            case "TSTypeAliasDeclaration":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSEnumDeclaration":
            case "TSEnumMember":
            case "TSModuleDeclaration":
            case "TSModuleBlock":
            case "TSImportType":
            case "TSImportEqualsDeclaration":
            case "TSExternalModuleReference":
            case "TSNonNullExpression":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
            case "TSTypeAnnotation":
            case "TSTypeParameterInstantiation":
            case "TSTypeParameterDeclaration":
            case "TSTypeParameter":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTypeofTypeAnnotation = function(node, opts) {
          return !!node && ("TypeofTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUnaryExpression = function(node, opts) {
          return !!node && ("UnaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUnaryLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "UnaryExpression":
            case "SpreadElement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isUnionTypeAnnotation = function(node, opts) {
          return !!node && ("UnionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUpdateExpression = function(node, opts) {
          return !!node && ("UpdateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUserWhitespacable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isV8IntrinsicIdentifier = function(node, opts) {
          return !!node && ("V8IntrinsicIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariableDeclaration = function(node, opts) {
          return !!node && ("VariableDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariableDeclarator = function(node, opts) {
          return !!node && ("VariableDeclarator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariance = function(node, opts) {
          return !!node && ("Variance" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVoidTypeAnnotation = function(node, opts) {
          return !!node && ("VoidTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isWhile = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "WhileStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isWhileStatement = function(node, opts) {
          return !!node && ("WhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isWithStatement = function(node, opts) {
          return !!node && ("WithStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isYieldExpression = function(node, opts) {
          return !!node && ("YieldExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function isImportOrExportDeclaration(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(type, node, opts) {
          if (!node) return false;
          if (!(0, _isType.default)(node.type, type)) return !opts && "Placeholder" === node.type && type in _index.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
          return void 0 === opts || (0, _shallowEqual.default)(node, opts);
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent, grandparent) {
          if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type) return false;
          const keys2 = _getBindingIdentifiers.default.keys[parent.type];
          if (keys2) for (let i2 = 0; i2 < keys2.length; i2++) {
            const val = parent[keys2[i2]];
            if (Array.isArray(val)) {
              if (val.includes(node)) return true;
            } else if (val === node) return true;
          }
          return false;
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if ((0, _isType.default)(node.type, "Immutable")) return true;
          if ((0, _index.isIdentifier)(node)) return "undefined" === node.name;
          return false;
        };
        var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isVariableDeclaration)(node) && ("var" !== node.kind || node[_index2.BLOCK_SCOPED_SYMBOL]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return !(!node || !_index.VISITOR_KEYS[node.type]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function isNodesEquivalent(a2, b) {
          if ("object" != typeof a2 || "object" != typeof b || null == a2 || null == b) return a2 === b;
          if (a2.type !== b.type) return false;
          const fields = Object.keys(_index.NODE_FIELDS[a2.type] || a2.type), visitorKeys = _index.VISITOR_KEYS[a2.type];
          for (const field of fields) {
            const val_a = a2[field], val_b = b[field];
            if (typeof val_a != typeof val_b) return false;
            if (null != val_a || null != val_b) {
              if (null == val_a || null == val_b) return false;
              if (Array.isArray(val_a)) {
                if (!Array.isArray(val_b)) return false;
                if (val_a.length !== val_b.length) return false;
                for (let i2 = 0; i2 < val_a.length; i2++) if (!isNodesEquivalent(val_a[i2], val_b[i2])) return false;
              } else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
                if (!isNodesEquivalent(val_a, val_b)) return false;
              } else for (const key of Object.keys(val_a)) if (val_a[key] !== val_b[key]) return false;
            }
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(placeholderType, targetType) {
          if (placeholderType === targetType) return true;
          const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
          if (aliases) {
            for (const alias of aliases) if (targetType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "OptionalMemberExpression":
              return parent.property === node ? !!parent.computed : parent.object === node;
            case "JSXMemberExpression":
              return parent.object === node;
            case "VariableDeclarator":
              return parent.init === node;
            case "ArrowFunctionExpression":
              return parent.body === node;
            case "PrivateName":
            case "LabeledStatement":
            case "CatchClause":
            case "RestElement":
            case "BreakStatement":
            case "ContinueStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportAttribute":
            case "JSXAttribute":
            case "ObjectPattern":
            case "ArrayPattern":
            case "MetaProperty":
              return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              return parent.key === node && !!parent.computed;
            case "ObjectProperty":
              return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "TSPropertySignature":
              return parent.key !== node || !!parent.computed;
            case "ClassPrivateProperty":
            case "ObjectTypeProperty":
              return parent.key !== node;
            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;
            case "AssignmentExpression":
            case "AssignmentPattern":
              return parent.right === node;
            case "ExportSpecifier":
              return (null == grandparent || !grandparent.source) && parent.local === node;
            case "TSEnumMember":
              return parent.id !== node;
          }
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return false;
          if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return true;
          return (0, _index.isScopable)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(specifier) {
          return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(nodeType, targetType) {
          if (nodeType === targetType) return true;
          if (null == nodeType) return false;
          if (_index.ALIAS_KEYS[targetType]) return false;
          const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
          if (aliases) {
            if (aliases[0] === nodeType) return true;
            for (const alias of aliases) if (nodeType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name) {
          return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
        const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name, reserved = true) {
          if ("string" != typeof name) return false;
          if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true))) return false;
          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        };
        var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isVariableDeclaration)(node, { kind: "var" }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, match, allowPartial) {
          if (!(0, _index.isMemberExpression)(member)) return false;
          const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
          let node;
          for (node = member; (0, _index.isMemberExpression)(node); node = node.object) nodes.push(node.property);
          if (nodes.push(node), nodes.length < parts.length) return false;
          if (!allowPartial && nodes.length > parts.length) return false;
          for (let i2 = 0, j = nodes.length - 1; i2 < parts.length; i2++, j--) {
            const node2 = nodes[j];
            let value2;
            if ((0, _index.isIdentifier)(node2)) value2 = node2.name;
            else if ((0, _index.isStringLiteral)(node2)) value2 = node2.value;
            else {
              if (!(0, _index.isThisExpression)(node2)) return false;
              value2 = "this";
            }
            if (parts[i2] !== value2) return false;
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        const isReactComponent = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
        exports3.default = isReactComponent;
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key, val) {
          if (!node) return;
          const fields = _index.NODE_FIELDS[node.type];
          if (!fields) return;
          const field = fields[key];
          validateField(node, key, val, field), validateChild(node, key, val);
        }, exports3.validateChild = validateChild, exports3.validateField = validateField, exports3.validateInternal = function(field, node, key, val, maybeNode) {
          if (null == field || !field.validate) return;
          if (field.optional && null == val) return;
          if (field.validate(node, key, val), maybeNode) {
            var _NODE_PARENT_VALIDATI;
            const type = val.type;
            if (null == type) return;
            null == (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
          }
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        function validateField(node, key, val, field) {
          null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
        }
        function validateChild(node, key, val) {
          var _NODE_PARENT_VALIDATI2;
          const type = null == val ? void 0 : val.type;
          null != type && (null == (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val));
        }
      }, "./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
        var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c3) => "string" == typeof c3 && unicode.Space_Separator.test(c3), isIdStartChar: (c3) => "string" == typeof c3 && (c3 >= "a" && c3 <= "z" || c3 >= "A" && c3 <= "Z" || "$" === c3 || "_" === c3 || unicode.ID_Start.test(c3)), isIdContinueChar: (c3) => "string" == typeof c3 && (c3 >= "a" && c3 <= "z" || c3 >= "A" && c3 <= "Z" || c3 >= "0" && c3 <= "9" || "$" === c3 || "_" === c3 || "‌" === c3 || "‍" === c3 || unicode.ID_Continue.test(c3)), isDigit: (c3) => "string" == typeof c3 && /[0-9]/.test(c3), isHexDigit: (c3) => "string" == typeof c3 && /[0-9A-Fa-f]/.test(c3) };
        let source, parseState, stack, pos, line, column, token, key, root2;
        function internalize(holder, name, reviver) {
          const value2 = holder[name];
          if (null != value2 && "object" == typeof value2) if (Array.isArray(value2)) for (let i2 = 0; i2 < value2.length; i2++) {
            const key2 = String(i2), replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          else for (const key2 in value2) {
            const replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          return reviver.call(holder, name, value2);
        }
        let lexState, buffer, doubleQuote, sign, c2;
        function lex() {
          for (lexState = "default", buffer = "", doubleQuote = false, sign = 1; ; ) {
            c2 = peek();
            const token2 = lexStates[lexState]();
            if (token2) return token2;
          }
        }
        function peek() {
          if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
        }
        function read2() {
          const c3 = peek();
          return "\n" === c3 ? (line++, column = 0) : c3 ? column += c3.length : column++, c3 && (pos += c3.length), c3;
        }
        const lexStates = { default() {
          switch (c2) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case " ":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return void read2();
            case "/":
              return read2(), void (lexState = "comment");
            case void 0:
              return read2(), newToken("eof");
          }
          if (!util.isSpaceSeparator(c2)) return lexStates[parseState]();
          read2();
        }, comment() {
          switch (c2) {
            case "*":
              return read2(), void (lexState = "multiLineComment");
            case "/":
              return read2(), void (lexState = "singleLineComment");
          }
          throw invalidChar(read2());
        }, multiLineComment() {
          switch (c2) {
            case "*":
              return read2(), void (lexState = "multiLineCommentAsterisk");
            case void 0:
              throw invalidChar(read2());
          }
          read2();
        }, multiLineCommentAsterisk() {
          switch (c2) {
            case "*":
              return void read2();
            case "/":
              return read2(), void (lexState = "default");
            case void 0:
              throw invalidChar(read2());
          }
          read2(), lexState = "multiLineComment";
        }, singleLineComment() {
          switch (c2) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return read2(), void (lexState = "default");
            case void 0:
              return read2(), newToken("eof");
          }
          read2();
        }, value() {
          switch (c2) {
            case "{":
            case "[":
              return newToken("punctuator", read2());
            case "n":
              return read2(), literal("ull"), newToken("null", null);
            case "t":
              return read2(), literal("rue"), newToken("boolean", true);
            case "f":
              return read2(), literal("alse"), newToken("boolean", false);
            case "-":
            case "+":
              return "-" === read2() && (sign = -1), void (lexState = "sign");
            case ".":
              return buffer = read2(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read2(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read2(), void (lexState = "decimalInteger");
            case "I":
              return read2(), literal("nfinity"), newToken("numeric", 1 / 0);
            case "N":
              return read2(), literal("aN"), newToken("numeric", NaN);
            case '"':
            case "'":
              return doubleQuote = '"' === read2(), buffer = "", void (lexState = "string");
          }
          throw invalidChar(read2());
        }, identifierNameStartEscape() {
          if ("u" !== c2) throw invalidChar(read2());
          read2();
          const u2 = unicodeEscape();
          switch (u2) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u2)) throw invalidIdentifier();
          }
          buffer += u2, lexState = "identifierName";
        }, identifierName() {
          switch (c2) {
            case "$":
            case "_":
            case "‌":
            case "‍":
              return void (buffer += read2());
            case "\\":
              return read2(), void (lexState = "identifierNameEscape");
          }
          if (!util.isIdContinueChar(c2)) return newToken("identifier", buffer);
          buffer += read2();
        }, identifierNameEscape() {
          if ("u" !== c2) throw invalidChar(read2());
          read2();
          const u2 = unicodeEscape();
          switch (u2) {
            case "$":
            case "_":
            case "‌":
            case "‍":
              break;
            default:
              if (!util.isIdContinueChar(u2)) throw invalidIdentifier();
          }
          buffer += u2, lexState = "identifierName";
        }, sign() {
          switch (c2) {
            case ".":
              return buffer = read2(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read2(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read2(), void (lexState = "decimalInteger");
            case "I":
              return read2(), literal("nfinity"), newToken("numeric", sign * (1 / 0));
            case "N":
              return read2(), literal("aN"), newToken("numeric", NaN);
          }
          throw invalidChar(read2());
        }, zero() {
          switch (c2) {
            case ".":
              return buffer += read2(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
            case "x":
            case "X":
              return buffer += read2(), void (lexState = "hexadecimal");
          }
          return newToken("numeric", 0 * sign);
        }, decimalInteger() {
          switch (c2) {
            case ".":
              return buffer += read2(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c2)) return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, decimalPointLeading() {
          if (util.isDigit(c2)) return buffer += read2(), void (lexState = "decimalFraction");
          throw invalidChar(read2());
        }, decimalPoint() {
          switch (c2) {
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          return util.isDigit(c2) ? (buffer += read2(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
        }, decimalFraction() {
          switch (c2) {
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c2)) return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, decimalExponent() {
          switch (c2) {
            case "+":
            case "-":
              return buffer += read2(), void (lexState = "decimalExponentSign");
          }
          if (util.isDigit(c2)) return buffer += read2(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read2());
        }, decimalExponentSign() {
          if (util.isDigit(c2)) return buffer += read2(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read2());
        }, decimalExponentInteger() {
          if (!util.isDigit(c2)) return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, hexadecimal() {
          if (util.isHexDigit(c2)) return buffer += read2(), void (lexState = "hexadecimalInteger");
          throw invalidChar(read2());
        }, hexadecimalInteger() {
          if (!util.isHexDigit(c2)) return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, string() {
          switch (c2) {
            case "\\":
              return read2(), void (buffer += function() {
                switch (peek()) {
                  case "b":
                    return read2(), "\b";
                  case "f":
                    return read2(), "\f";
                  case "n":
                    return read2(), "\n";
                  case "r":
                    return read2(), "\r";
                  case "t":
                    return read2(), "	";
                  case "v":
                    return read2(), "\v";
                  case "0":
                    if (read2(), util.isDigit(peek())) throw invalidChar(read2());
                    return "\0";
                  case "x":
                    return read2(), function() {
                      let buffer2 = "", c3 = peek();
                      if (!util.isHexDigit(c3)) throw invalidChar(read2());
                      if (buffer2 += read2(), c3 = peek(), !util.isHexDigit(c3)) throw invalidChar(read2());
                      return buffer2 += read2(), String.fromCodePoint(parseInt(buffer2, 16));
                    }();
                  case "u":
                    return read2(), unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    return read2(), "";
                  case "\r":
                    return read2(), "\n" === peek() && read2(), "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                  case void 0:
                    throw invalidChar(read2());
                }
                return read2();
              }());
            case '"':
              return doubleQuote ? (read2(), newToken("string", buffer)) : void (buffer += read2());
            case "'":
              return doubleQuote ? void (buffer += read2()) : (read2(), newToken("string", buffer));
            case "\n":
            case "\r":
              throw invalidChar(read2());
            case "\u2028":
            case "\u2029":
              !function(c3) {
                console.warn(`JSON5: '${formatChar(c3)}' in strings is not valid ECMAScript; consider escaping`);
              }(c2);
              break;
            case void 0:
              throw invalidChar(read2());
          }
          buffer += read2();
        }, start() {
          switch (c2) {
            case "{":
            case "[":
              return newToken("punctuator", read2());
          }
          lexState = "value";
        }, beforePropertyName() {
          switch (c2) {
            case "$":
            case "_":
              return buffer = read2(), void (lexState = "identifierName");
            case "\\":
              return read2(), void (lexState = "identifierNameStartEscape");
            case "}":
              return newToken("punctuator", read2());
            case '"':
            case "'":
              return doubleQuote = '"' === read2(), void (lexState = "string");
          }
          if (util.isIdStartChar(c2)) return buffer += read2(), void (lexState = "identifierName");
          throw invalidChar(read2());
        }, afterPropertyName() {
          if (":" === c2) return newToken("punctuator", read2());
          throw invalidChar(read2());
        }, beforePropertyValue() {
          lexState = "value";
        }, afterPropertyValue() {
          switch (c2) {
            case ",":
            case "}":
              return newToken("punctuator", read2());
          }
          throw invalidChar(read2());
        }, beforeArrayValue() {
          if ("]" === c2) return newToken("punctuator", read2());
          lexState = "value";
        }, afterArrayValue() {
          switch (c2) {
            case ",":
            case "]":
              return newToken("punctuator", read2());
          }
          throw invalidChar(read2());
        }, end() {
          throw invalidChar(read2());
        } };
        function newToken(type, value2) {
          return { type, value: value2, line, column };
        }
        function literal(s2) {
          for (const c3 of s2) {
            if (peek() !== c3) throw invalidChar(read2());
            read2();
          }
        }
        function unicodeEscape() {
          let buffer2 = "", count = 4;
          for (; count-- > 0; ) {
            const c3 = peek();
            if (!util.isHexDigit(c3)) throw invalidChar(read2());
            buffer2 += read2();
          }
          return String.fromCodePoint(parseInt(buffer2, 16));
        }
        const parseStates = { start() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              return key = token.value, void (parseState = "afterPropertyName");
            case "punctuator":
              return void pop();
            case "eof":
              throw invalidEOF();
          }
        }, afterPropertyName() {
          if ("eof" === token.type) throw invalidEOF();
          parseState = "beforePropertyValue";
        }, beforePropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforeArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          "punctuator" !== token.type || "]" !== token.value ? push() : pop();
        }, afterPropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforePropertyName");
            case "}":
              pop();
          }
        }, afterArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforeArrayValue");
            case "]":
              pop();
          }
        }, end() {
        } };
        function push() {
          let value2;
          switch (token.type) {
            case "punctuator":
              switch (token.value) {
                case "{":
                  value2 = {};
                  break;
                case "[":
                  value2 = [];
              }
              break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
              value2 = token.value;
          }
          if (void 0 === root2) root2 = value2;
          else {
            const parent = stack[stack.length - 1];
            Array.isArray(parent) ? parent.push(value2) : Object.defineProperty(parent, key, { value: value2, writable: true, enumerable: true, configurable: true });
          }
          if (null !== value2 && "object" == typeof value2) stack.push(value2), parseState = Array.isArray(value2) ? "beforeArrayValue" : "beforePropertyName";
          else {
            const current = stack[stack.length - 1];
            parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
          }
        }
        function pop() {
          stack.pop();
          const current = stack[stack.length - 1];
          parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
        }
        function invalidChar(c3) {
          return syntaxError(void 0 === c3 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c3)}' at ${line}:${column}`);
        }
        function invalidEOF() {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
        }
        function invalidIdentifier() {
          return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
        }
        function formatChar(c3) {
          const replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          if (replacements[c3]) return replacements[c3];
          if (c3 < " ") {
            const hexString = c3.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
          }
          return c3;
        }
        function syntaxError(message) {
          const err = new SyntaxError(message);
          return err.lineNumber = line, err.columnNumber = column, err;
        }
        const JSON5 = { parse: function(text, reviver) {
          source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root2 = void 0;
          do {
            token = lex(), parseStates[parseState]();
          } while ("eof" !== token.type);
          return "function" == typeof reviver ? internalize({ "": root2 }, "", reviver) : root2;
        }, stringify: function(value2, replacer, space) {
          const stack2 = [];
          let propertyList, replacerFunc, quote, indent = "", gap = "";
          if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer) replacerFunc = replacer;
          else if (Array.isArray(replacer)) {
            propertyList = [];
            for (const v2 of replacer) {
              let item;
              "string" == typeof v2 ? item = v2 : ("number" == typeof v2 || v2 instanceof String || v2 instanceof Number) && (item = String(v2)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
            }
          }
          return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value2 });
          function serializeProperty(key2, holder) {
            let value3 = holder[key2];
            switch (null != value3 && ("function" == typeof value3.toJSON5 ? value3 = value3.toJSON5(key2) : "function" == typeof value3.toJSON && (value3 = value3.toJSON(key2))), replacerFunc && (value3 = replacerFunc.call(holder, key2, value3)), value3 instanceof Number ? value3 = Number(value3) : value3 instanceof String ? value3 = String(value3) : value3 instanceof Boolean && (value3 = value3.valueOf()), value3) {
              case null:
                return "null";
              case true:
                return "true";
              case false:
                return "false";
            }
            return "string" == typeof value3 ? quoteString(value3) : "number" == typeof value3 ? String(value3) : "object" == typeof value3 ? Array.isArray(value3) ? function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, partial = [];
              for (let i2 = 0; i2 < value4.length; i2++) {
                const propertyString = serializeProperty(String(i2), value4);
                partial.push(void 0 !== propertyString ? propertyString : "null");
              }
              if (0 === partial.length) final = "[]";
              else if ("" === gap) {
                final = "[" + partial.join(",") + "]";
              } else {
                let separator = ",\n" + indent, properties = partial.join(separator);
                final = "[\n" + indent + properties + ",\n" + stepback + "]";
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, keys2 = propertyList || Object.keys(value4), partial = [];
              for (const key3 of keys2) {
                const propertyString = serializeProperty(key3, value4);
                if (void 0 !== propertyString) {
                  let member = serializeKey(key3) + ":";
                  "" !== gap && (member += " "), member += propertyString, partial.push(member);
                }
              }
              if (0 === partial.length) final = "{}";
              else {
                let properties;
                if ("" === gap) properties = partial.join(","), final = "{" + properties + "}";
                else {
                  let separator = ",\n" + indent;
                  properties = partial.join(separator), final = "{\n" + indent + properties + ",\n" + stepback + "}";
                }
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : void 0;
          }
          function quoteString(value3) {
            const quotes = { "'": 0.1, '"': 0.2 }, replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
            let product = "";
            for (let i2 = 0; i2 < value3.length; i2++) {
              const c3 = value3[i2];
              switch (c3) {
                case "'":
                case '"':
                  quotes[c3]++, product += c3;
                  continue;
                case "\0":
                  if (util.isDigit(value3[i2 + 1])) {
                    product += "\\x00";
                    continue;
                  }
              }
              if (replacements[c3]) product += replacements[c3];
              else if (c3 < " ") {
                let hexString = c3.charCodeAt(0).toString(16);
                product += "\\x" + ("00" + hexString).substring(hexString.length);
              } else product += c3;
            }
            const quoteChar = quote || Object.keys(quotes).reduce((a2, b) => quotes[a2] < quotes[b] ? a2 : b);
            return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
          }
          function serializeKey(key2) {
            if (0 === key2.length) return quoteString(key2);
            const firstChar = String.fromCodePoint(key2.codePointAt(0));
            if (!util.isIdStartChar(firstChar)) return quoteString(key2);
            for (let i2 = firstChar.length; i2 < key2.length; i2++) if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) return quoteString(key2);
            return key2;
          }
        } };
        const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
      }, "./stubs/babel-codeframe.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function codeFrameColumns() {
          return "";
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
      }, "./stubs/helper-compilation-targets.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function getTargets() {
          return {};
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json": (module4) => {
        "use strict";
        module4.exports = JSON.parse('{"name":"@babel/preset-typescript","version":"7.26.0","description":"Babel preset for TypeScript.","repository":{"type":"git","url":"https://github.com/babel/babel.git","directory":"packages/babel-preset-typescript"},"license":"MIT","publishConfig":{"access":"public"},"main":"./lib/index.js","keywords":["babel-preset","typescript"],"dependencies":{"@babel/helper-plugin-utils":"^7.25.9","@babel/helper-validator-option":"^7.25.9","@babel/plugin-syntax-jsx":"^7.25.9","@babel/plugin-transform-modules-commonjs":"^7.25.9","@babel/plugin-transform-typescript":"^7.25.9"},"peerDependencies":{"@babel/core":"^7.0.0-0"},"devDependencies":{"@babel/core":"^7.26.0","@babel/helper-plugin-test-runner":"^7.25.9"},"homepage":"https://babel.dev/docs/en/next/babel-preset-typescript","bugs":"https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen","engines":{"node":">=6.9.0"},"author":"The Babel Team (https://babel.dev/team)","type":"commonjs"}');
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module4) => {
        "use strict";
        module4.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module4 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId].call(module4.exports, module4, module4.exports, __webpack_require__), module4.exports;
      }
      __webpack_require__.n = (module4) => {
        var getter = module4 && module4.__esModule ? () => module4.default : () => module4;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports3, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports3, key) && Object.defineProperty(exports3, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports3) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports3, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => transform2 });
        var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), plugin_proposal_decorators_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), plugin_syntax_class_properties_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js"), plugin_syntax_import_assertions_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"), plugin_syntax_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), plugin_transform_export_namespace_from_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js"), plugin_transform_react_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js"), plugin_transform_typescript_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js"), babel_plugin_parameter_decorator_lib = __webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js"), babel_plugin_parameter_decorator_lib_default = __webpack_require__.n(babel_plugin_parameter_decorator_lib), helper_plugin_utils_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        function createParamDecorator(paramIndex, decoratorExpression, isConstructor = false) {
          return lib.types.decorator(lib.types.functionExpression(null, [lib.types.identifier("target"), lib.types.identifier("key")], lib.types.blockStatement([lib.types.returnStatement(lib.types.callExpression(decoratorExpression, [lib.types.identifier("target"), lib.types.identifier(isConstructor ? "undefined" : "key"), lib.types.numericLiteral(paramIndex)]))])));
        }
        function parameterVisitor(classPath, path2) {
          if ("ClassMethod" !== path2.type) return;
          if ("ClassMethod" !== path2.node.type) return;
          if ("Identifier" !== path2.node.key.type) return;
          const methodPath = path2, params = methodPath.get("params") || [];
          for (const param of params) {
            if (null == ("Identifier" === param.node.type || "ObjectPattern" === param.node.type ? param.node : "TSParameterProperty" === param.node.type && "Identifier" === param.node.parameter.type ? param.node.parameter : null)) continue;
            let resultantDecorator;
            for (const decorator of param.node.decorators || []) "constructor" === methodPath.node.kind ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, true), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, false), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
            resultantDecorator && (param.node.decorators = null);
          }
        }
        function createVoidZero() {
          return lib.types.unaryExpression("void", lib.types.numericLiteral(0));
        }
        function getTypedNode(param) {
          return null == param ? null : "ClassProperty" === param.type || "Identifier" === param.type || "ObjectPattern" === param.type ? param : "AssignmentPattern" === param.type && "Identifier" === param.left.type ? param.left : "TSParameterProperty" === param.type ? getTypedNode(param.parameter) : null;
        }
        function serializeType(classPath, param) {
          const node = getTypedNode(param);
          if (null == node) return createVoidZero();
          if (!node.typeAnnotation || "TSTypeAnnotation" !== node.typeAnnotation.type) return createVoidZero();
          const annotation = node.typeAnnotation.typeAnnotation;
          return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
        }
        function serializeTypeReferenceNode(className, node) {
          const reference = serializeReference(node.typeName);
          return isClassType(className, reference) ? lib.types.identifier("Object") : lib.types.conditionalExpression(lib.types.binaryExpression("===", lib.types.unaryExpression("typeof", reference), lib.types.stringLiteral("undefined")), lib.types.identifier("Object"), lib.types.cloneDeep(reference));
        }
        function isClassType(className, node) {
          switch (node.type) {
            case "Identifier":
              return node.name === className;
            case "MemberExpression":
              return isClassType(className, node.object);
            default:
              throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
          }
        }
        function serializeReference(typeName) {
          return "Identifier" === typeName.type ? lib.types.identifier(typeName.name) : lib.types.memberExpression(serializeReference(typeName.left), typeName.right);
        }
        function serializeTypeNode(className, node) {
          if (void 0 === node) return lib.types.identifier("Object");
          switch (node.type) {
            case "TSVoidKeyword":
            case "TSUndefinedKeyword":
            case "TSNullKeyword":
            case "TSNeverKeyword":
              return createVoidZero();
            case "TSParenthesizedType":
              return serializeTypeNode(className, node.typeAnnotation);
            case "TSFunctionType":
            case "TSConstructorType":
              return lib.types.identifier("Function");
            case "TSArrayType":
            case "TSTupleType":
              return lib.types.identifier("Array");
            case "TSTypePredicate":
            case "TSBooleanKeyword":
              return lib.types.identifier("Boolean");
            case "TSStringKeyword":
              return lib.types.identifier("String");
            case "TSObjectKeyword":
              return lib.types.identifier("Object");
            case "TSLiteralType":
              switch (node.literal.type) {
                case "StringLiteral":
                  return lib.types.identifier("String");
                case "NumericLiteral":
                  return lib.types.identifier("Number");
                case "BooleanLiteral":
                  return lib.types.identifier("Boolean");
                default:
                  throw new Error("Bad type for decorator" + node.literal);
              }
            case "TSNumberKeyword":
            case "TSBigIntKeyword":
              return lib.types.identifier("Number");
            case "TSSymbolKeyword":
              return lib.types.identifier("Symbol");
            case "TSTypeReference":
              return serializeTypeReferenceNode(className, node);
            case "TSIntersectionType":
            case "TSUnionType":
              return serializeTypeList(className, node.types);
            case "TSConditionalType":
              return serializeTypeList(className, [node.trueType, node.falseType]);
            case "TSTypeQuery":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSTypeLiteral":
            case "TSAnyKeyword":
            case "TSUnknownKeyword":
            case "TSThisType":
              break;
            default:
              throw new Error("Bad type for decorator");
          }
          return lib.types.identifier("Object");
        }
        function serializeTypeList(className, types2) {
          let serializedUnion;
          for (let typeNode of types2) {
            for (; "TSParenthesizedType" === typeNode.type; ) typeNode = typeNode.typeAnnotation;
            if ("TSNeverKeyword" === typeNode.type) continue;
            if ("TSNullKeyword" === typeNode.type || "TSUndefinedKeyword" === typeNode.type) continue;
            const serializedIndividual = serializeTypeNode(className, typeNode);
            if (lib.types.isIdentifier(serializedIndividual) && "Object" === serializedIndividual.name) return serializedIndividual;
            if (serializedUnion) {
              if (!lib.types.isIdentifier(serializedUnion) || !lib.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name) return lib.types.identifier("Object");
            } else serializedUnion = serializedIndividual;
          }
          return serializedUnion || createVoidZero();
        }
        function createMetadataDesignDecorator(design, typeArg) {
          return lib.types.decorator(lib.types.logicalExpression("||", lib.types.optionalCallExpression(lib.types.memberExpression(lib.types.identifier("Reflect"), lib.types.identifier("metadata")), [lib.types.stringLiteral(design), typeArg], true), lib.types.arrowFunctionExpression([lib.types.identifier("t")], lib.types.identifier("t"))));
        }
        function metadataVisitor(classPath, path2) {
          const field = path2.node, classNode = classPath.node;
          switch (field.type) {
            case "ClassMethod": {
              const decorators = "constructor" === field.kind ? classNode.decorators : field.decorators;
              if (!decorators || 0 === decorators.length) return;
              decorators.push(createMetadataDesignDecorator("design:type", lib.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", lib.types.arrayExpression(field.params.map((param) => serializeType(classPath, param)))));
              break;
            }
            case "ClassProperty":
              if (!field.decorators || 0 === field.decorators.length) return;
              if (!field.typeAnnotation || "TSTypeAnnotation" !== field.typeAnnotation.type) return;
              field.decorators.push(createMetadataDesignDecorator("design:type", serializeType(classPath, field)));
          }
        }
        const babel_plugin_transform_typescript_metadata = (0, helper_plugin_utils_lib.declare)((api) => (api.assertVersion(7), { visitor: { Program(programPath) {
          programPath.traverse({ ClassDeclaration(path2) {
            for (const field of path2.get("body").get("body")) "ClassMethod" !== field.type && "ClassProperty" !== field.type || (parameterVisitor(path2, field), metadataVisitor(path2, field));
            path2.parentPath.scope.crawl();
          } });
        } } }));
        function importMetaEnvPlugin({ template: template3, types: types2 }) {
          return { name: "@import-meta-env/babel", visitor: { Identifier(path2) {
            if (!types2.isIdentifier(path2)) return;
            if (!types2.isMemberExpression(path2.parentPath) && !types2.isOptionalMemberExpression(path2.parentPath)) return;
            if (!types2.isMemberExpression(path2.parentPath.node)) return;
            const parentNode = path2.parentPath.node;
            if (!types2.isMetaProperty(parentNode.object)) return;
            const parentNodeObjMeta = parentNode.object;
            "import" === parentNodeObjMeta.meta.name && "meta" === parentNodeObjMeta.property.name && "env" === parentNode.property.name && path2.parentPath.replaceWith(template3.expression.ast("process.env"));
          } } };
        }
        function importMetaResolvePlugin(_ctx) {
          return { name: "import-meta-resolve", visitor: { Program(path2) {
            const metas = [];
            if (path2.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              "MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "resolve" === node.property.name && metas.push(memberExpPath);
            } }), 0 !== metas.length) for (const meta of metas) meta.replaceWith({ type: "ExpressionStatement", expression: { type: "Identifier", name: "jitiESMResolve" } });
          } } };
        }
        var template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
        function normalizeWindowsPath(input = "") {
          return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r2) => r2.toUpperCase()) : input;
        }
        const _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/;
        const pathe_ff20891b_isAbsolute = function(p2) {
          return _IS_ABSOLUTE_RE.test(p2);
        }, pathe_ff20891b_dirname = function(p2) {
          const segments = normalizeWindowsPath(p2).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (pathe_ff20891b_isAbsolute(p2) ? "/" : ".");
        };
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･]");
        function isInAstralSet(code, set) {
          for (var pos = 65536, i3 = 0; i3 < set.length; i3 += 2) {
            if ((pos += set[i3]) > code) return false;
            if ((pos += set[i3 + 1]) >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : false !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
        }
        var TokenType = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
        function kw(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
        }
        var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i3 = from; i3 < end; i3++) {
            var next = code.charCodeAt(i3);
            if (isNewLine(next)) return i3 < end - 1 && 13 === next && 10 === code.charCodeAt(i3 + 1) ? i3 + 2 : i3 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray2 = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        }, regexpCache = /* @__PURE__ */ Object.create(null);
        function wordsRegexp(words) {
          return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
        }
        function codePointToString(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
          this.line = line, this.column = col;
        };
        Position.prototype.offset = function(n2) {
          return new Position(this.line, this.column + n2);
        };
        var SourceLocation = function(p2, start, end) {
          this.start = start, this.end = end, null !== p2.sourceFile && (this.source = p2.sourceFile);
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset);
            if (nextBreak < 0) return new Position(line, offset - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray2(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray2(options.onComment) && (options.onComment = /* @__PURE__ */ function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        function functionFlags(async, generator) {
          return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
        }
        var Parser = function(options, input, startPos) {
          this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors.inFunction.get = function() {
          return (2 & this.currentVarScope().flags) > 0;
        }, prototypeAccessors.inGenerator.get = function() {
          return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.inAsync.get = function() {
          return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.canAwait.get = function() {
          for (var i3 = this.scopeStack.length - 1; i3 >= 0; i3--) {
            var scope = this.scopeStack[i3];
            if (scope.inClassFieldInit || 256 & scope.flags) return false;
            if (2 & scope.flags) return (4 & scope.flags) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors.allowNewDotTarget.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (258 & flags) > 0 || inClassFieldInit;
        }, prototypeAccessors.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser.extend = function() {
          for (var plugins = [], len = arguments.length; len--; ) plugins[len] = arguments[len];
          for (var cls = this, i3 = 0; i3 < plugins.length; i3++) cls = plugins[i3](cls);
          return cls;
        }, Parser.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp$9 = Parser.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
        pp$9.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5) return false;
          for (; ; ) {
            skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match) return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$9.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$9.isContextual = function(name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc;
        }, pp$9.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$9.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$9.canInsertSemicolon = function() {
          return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$9.insertSemicolon = function() {
          if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$9.semicolon = function() {
          this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$9.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$9.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$9.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$9.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$9.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$8 = Parser.prototype;
        pp$8.parseTopLevel = function(node) {
          var exports3 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$1.eof; ) {
            var stmt = this.parseStatement(null, true, exports3);
            node.body.push(stmt);
          }
          if (this.inModule) for (var i3 = 0, list2 = Object.keys(this.undefinedExports); i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$8.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh) return true;
          if (context) return false;
          if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
          if (isIdentifierStart(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); ) ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) return true;
          }
          return false;
        }, pp$8.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$8.parseStatement = function(context, topLevel, exports3) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
              return this.parseDebuggerStatement(node);
            case types$1._do:
              return this.parseDoStatement(node);
            case types$1._for:
              return this.parseForStatement(node);
            case types$1._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$1._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$1._if:
              return this.parseIfStatement(node);
            case types$1._return:
              return this.parseReturnStatement(node);
            case types$1._switch:
              return this.parseSwitchStatement(node);
            case types$1._throw:
              return this.parseThrowStatement(node);
            case types$1._try:
              return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$1._while:
              return this.parseWhileStatement(node);
            case types$1._with:
              return this.parseWithStatement(node);
            case types$1.braceL:
              return this.parseBlock(true, node);
            case types$1.semi:
              return this.parseEmptyStatement(node);
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports3);
            default:
              if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$1.name && "Identifier" === expr.type && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$8.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i3 = 0; i3 < this.labels.length; ++i3) {
            var lab = this.labels[i3];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
              if (node.label && isBreak) break;
            }
          }
          return i3 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$8.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$8.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$8.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors(), initPos = this.start, init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
          return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1._in && this.unexpected(awaitAt), node.await = true) : isForOf && this.options.ecmaVersion >= 8 && (init.start !== initPos || containsEsc || "Identifier" !== init.type || "async" !== init.name ? this.options.ecmaVersion >= 9 && (node.await = false) : this.unexpected()), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        }, pp$8.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$8.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$8.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$1.braceR; ) if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$8.parseThrowStatement = function(node) {
          return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$1 = [];
        pp$8.parseCatchClauseParam = function() {
          var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
          return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
        }, pp$8.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
            var clause = this.startNode();
            this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
          return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$8.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$8.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$8.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i3 = this.labels.length - 1; i3 >= 0; i3--) {
            var label$1 = this.labels[i3];
            if (label$1.statementStart !== node.start) break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$8.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$8.parseFor = function(node, init) {
          return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$8.parseForIn = function(node, init) {
          var isForIn = this.type === types$1._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma)) break;
          }
          return node;
        }, pp$8.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$8.parseFunctionParams = function(node) {
          this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$8.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$1.braceL); this.type !== types$1.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$8.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$1.semi)) return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || "method" !== kind || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else this.parseClassField(node);
          return node;
        }, pp$8.isClassElementNameStart = function() {
          return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
        }, pp$8.parseClassElementName = function(element) {
          this.type === types$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value2.params.length && this.raiseRecoverable(value2.start, "getter should have no params"), "set" === method.kind && 1 !== value2.params.length && this.raiseRecoverable(value2.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value2.params[0].type && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$8.parseClassField = function(field) {
          if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$8.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$8.parseClassId = function(node, isStatement) {
          this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$8.parseClassSuper = function(node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
        }, pp$8.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$8.exitClassBody = function() {
          var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
          if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i3 = 0; i3 < used.length; ++i3) {
            var id = used[i3];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$8.parseExportAllDeclaration = function(node, exports3) {
          return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports3, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
        }, pp$8.parseExport = function(node, exports3) {
          if (this.next(), this.eat(types$1.star)) return this.parseExportAllDeclaration(node, exports3);
          if (this.eat(types$1._default)) return this.checkExport(exports3, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
          if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports3, node.declaration.declarations) : this.checkExport(exports3, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports3), this.eatContextual("from")) this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
            else {
              for (var i3 = 0, list2 = node.specifiers; i3 < list2.length; i3 += 1) {
                var spec = list2[i3];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$8.parseExportDeclaration = function(node) {
          return this.parseStatement(null);
        }, pp$8.parseExportDefaultDeclaration = function() {
          var isAsync;
          if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
          }
          if (this.type === types$1._class) {
            var cNode = this.startNode();
            return this.parseClass(cNode, "nullableID");
          }
          var declaration = this.parseMaybeAssign();
          return this.semicolon(), declaration;
        }, pp$8.checkExport = function(exports3, name, pos) {
          exports3 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn(exports3, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports3[name] = true);
        }, pp$8.checkPatternExport = function(exports3, pat) {
          var type = pat.type;
          if ("Identifier" === type) this.checkExport(exports3, pat, pat.start);
          else if ("ObjectPattern" === type) for (var i3 = 0, list2 = pat.properties; i3 < list2.length; i3 += 1) {
            var prop = list2[i3];
            this.checkPatternExport(exports3, prop);
          }
          else if ("ArrayPattern" === type) for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports3, elt);
          }
          else "Property" === type ? this.checkPatternExport(exports3, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports3, pat.left) : "RestElement" === type && this.checkPatternExport(exports3, pat.argument);
        }, pp$8.checkVariableExport = function(exports3, decls) {
          if (exports3) for (var i3 = 0, list2 = decls; i3 < list2.length; i3 += 1) {
            var decl = list2[i3];
            this.checkPatternExport(exports3, decl.id);
          }
        }, pp$8.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$8.parseExportSpecifier = function(exports3) {
          var node = this.startNode();
          return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports3, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
        }, pp$8.parseExportSpecifiers = function(exports3) {
          var nodes = [], first = true;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseExportSpecifier(exports3));
          }
          return nodes;
        }, pp$8.parseImport = function(node) {
          return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$8.parseImportSpecifier = function() {
          var node = this.startNode();
          return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
        }, pp$8.parseImportDefaultSpecifier = function() {
          var node = this.startNode();
          return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
        }, pp$8.parseImportNamespaceSpecifier = function() {
          var node = this.startNode();
          return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
        }, pp$8.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma))) return nodes;
          if (this.type === types$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseImportSpecifier());
          }
          return nodes;
        }, pp$8.parseWithClause = function() {
          var nodes = [];
          if (!this.eat(types$1._with)) return nodes;
          this.expect(types$1.braceL);
          for (var attributeKeys = {}, first = true; !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            var attr = this.parseImportAttribute(), keyName = "Identifier" === attr.key.type ? attr.key.name : attr.key.value;
            hasOwn(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = true, nodes.push(attr);
          }
          return nodes;
        }, pp$8.parseImportAttribute = function() {
          var node = this.startNode();
          return node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved), this.expect(types$1.colon), this.type !== types$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
        }, pp$8.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$8.adaptDirectivePrologue = function(statements) {
          for (var i3 = 0; i3 < statements.length && this.isDirectiveCandidate(statements[i3]); ++i3) statements[i3].directive = statements[i3].expression.raw.slice(1, -1);
        }, pp$8.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$7 = Parser.prototype;
        pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
            case "Identifier":
              this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i3 = 0, list2 = node.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
          else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$7.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i3 = 0; i3 < end; i3++) {
            var elt = exprList[i3];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$7.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$7.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$7.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6) switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
          return this.parseIdent();
        }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
          for (var elts = [], first = true; !this.eat(close); ) if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma) elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close)) break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
          return elts;
        }, pp$7.parseAssignableListItem = function(allowModifiers) {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          return this.parseBindingListItem(elem), elem;
        }, pp$7.parseBindingListItem = function(param) {
          return param;
        }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i3 = 0, list2 = expr.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext = function(token, isExpr, preserveSpace, override, generator) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
        }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p2) {
          return p2.tryReadTemplateToken();
        }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
        pp$6.initialContext = function() {
          return [types.b_stat];
        }, pp$6.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$6.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$6.inGeneratorContext = function() {
          for (var i3 = this.context.length - 1; i3 >= 1; i3--) {
            var context = this.context[i3];
            if ("function" === context.token) return context.generator;
          }
          return false;
        }, pp$6.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$6.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else this.exprAllowed = true;
        }, types$1.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
        }, types$1.dollarBraceL.updateContext = function() {
          this.context.push(types.b_tmpl), this.exprAllowed = true;
        }, types$1.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
          this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
        }, types$1.incDec.updateContext = function() {
        }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
        }, types$1.colon.updateContext = function() {
          "function" === this.curContext().token && this.context.pop(), this.exprAllowed = true;
        }, types$1.backQuote.updateContext = function() {
          this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
        }, types$1.star.updateContext = function(prevType) {
          if (prevType === types$1._function) {
            var index2 = this.context.length - 1;
            this.context[index2] === types.f_expr ? this.context[index2] = types.f_expr_gen : this.context[index2] = types.f_gen;
          }
          this.exprAllowed = true;
        }, types$1.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$5 = Parser.prototype;
        function isLocalVariableAccess(node) {
          return "Identifier" === node.type || "ParenthesizedExpression" === node.type && isLocalVariableAccess(node.expression);
        }
        function isPrivateFieldAccess(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression) || "ParenthesizedExpression" === node.type && isPrivateFieldAccess(node.expression);
        }
        pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$1.comma); ) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$1._in) && prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
            coalesce && (prec = types$1.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$1.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$1.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
          return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$5.shouldParseAsyncArrow = function() {
          return !this.canInsertSemicolon() && this.eat(types$1.arrow);
        }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
        }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$1.bracketL);
          if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$1.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
          this.type === types$1.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$1._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$1._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$1.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1._function)) return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$1.regexp:
              var value2 = this.value;
              return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value);
            case types$1._null:
            case types$1._true:
            case types$1._false:
              return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$1.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$1.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$1.braceL:
              return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$1._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$1._class:
              return this.parseClass(this.startNode(), false);
            case types$1._new:
              return this.parseNew();
            case types$1.backQuote:
              return this.parseTemplate();
            case types$1._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
            default:
              return this.parseExprAtomDefault();
          }
        }, pp$5.parseExprAtomDefault = function() {
          this.unexpected();
        }, pp$5.parseExprImport = function(forNew) {
          var node = this.startNode();
          if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1.parenL && !forNew) return this.parseDynamicImport(node);
          if (this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
          }
          this.unexpected();
        }, pp$5.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16) this.eat(types$1.parenR) ? node.options = null : (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1.parenR) || (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) || this.unexpected())));
          else if (!this.eat(types$1.parenR)) {
            var errorPos = this.start;
            this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$5.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$5.parseLiteral = function(value2) {
          var node = this.startNode();
          return node.value = value2, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$5.parseParenExpression = function() {
          this.expect(types$1.parenL);
          var val = this.parseExpression();
          return this.expect(types$1.parenR), val;
        }, pp$5.shouldParseArrow = function(exprList) {
          return !this.canInsertSemicolon();
        }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1.parenR; ) {
              if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$1.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$5.parseParenItem = function(item) {
          return item;
        }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty = [];
        pp$5.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode();
          if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc;
          return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
        }, pp$5.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged, elem = this.startNode();
          return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value.replace(/\r\n?/g, "\n"), cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$5.parseTemplate = function(ref2) {
          void 0 === ref2 && (ref2 = {});
          var isTagged = ref2.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; ) this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$5.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$5.parseGetterSetter = function(prop) {
          prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
          var paramCount = "get" === prop.kind ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
          } else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
        }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          (isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
        }, pp$5.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL)) return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$5.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$5.isSimpleParamList = function(params) {
          for (var i3 = 0, list2 = params; i3 < list2.length; i3 += 1) {
            if ("Identifier" !== list2[i3].type) return false;
          }
          return true;
        }, pp$5.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i3 = 0, list2 = node.params; i3 < list2.length; i3 += 1) {
            var param = list2[i3];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
            var elt = void 0;
            allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$5.checkUnreserved = function(ref2) {
          var start = ref2.start, end = ref2.end, name = ref2.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$5.parseIdent = function(liberal) {
          var node = this.parseIdentNode();
          return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$5.parseIdentNode = function() {
          var node = this.startNode();
          return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
        }, pp$5.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
        }, pp$5.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$5.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
          if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
        };
        var pp$3 = Parser.prototype, Scope = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$3.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        }, pp$3.exitScope = function() {
          this.scopeStack.pop();
        }, pp$3.treatFunctionsAsVarInScope = function(scope) {
          return 2 & scope.flags || !this.inModule && 1 & scope.flags;
        }, pp$3.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else for (var i3 = this.scopeStack.length - 1; i3 >= 0; --i3) {
            var scope$3 = this.scopeStack[i3];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
          }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$3.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$3.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$3.currentVarScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags) return scope;
          }
        }, pp$3.currentThisScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags && !(16 & scope.flags)) return scope;
          }
        };
        var Node = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$2 = Parser.prototype;
        function finishNodeAt(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$2.startNode = function() {
          return new Node(this, this.start, this.startLoc);
        }, pp$2.startNodeAt = function(pos, loc) {
          return new Node(this, pos, loc);
        }, pp$2.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$2.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        }, pp$2.copyNode = function(node) {
          var newNode = new Node(this, node.start, this.startLoc);
          for (var prop in node) newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz" }, data = {};
        function buildUnicodeData(ecmaVersion) {
          var d2 = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
          d2.nonBinary.Script_Extensions = d2.nonBinary.Script, d2.nonBinary.gc = d2.nonBinary.General_Category, d2.nonBinary.sc = d2.nonBinary.Script, d2.nonBinary.scx = d2.nonBinary.Script_Extensions;
        }
        for (var i2 = 0, list = [9, 10, 11, 12, 13, 14]; i2 < list.length; i2 += 1) {
          buildUnicodeData(list[i2]);
        }
        var pp$1 = Parser.prototype, BranchID = function(parent, base) {
          this.parent = parent, this.base = base || this;
        };
        BranchID.prototype.separatedFrom = function(alt) {
          for (var self2 = this; self2; self2 = self2.parent) for (var other = alt; other; other = other.parent) if (self2.base === other.base && self2 !== other) return true;
          return false;
        }, BranchID.prototype.sibling = function() {
          return new BranchID(this.parent, this.base);
        };
        var RegExpValidationState = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = /* @__PURE__ */ Object.create(null), this.backReferenceNames = [], this.branchID = null;
        };
        function isRegularExpressionModifier(ch) {
          return 105 === ch || 109 === ch || 115 === ch;
        }
        function isSyntaxCharacter(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        RegExpValidationState.prototype.reset = function(start, pattern, flags) {
          var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
        }, RegExpValidationState.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState.prototype.at = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s2 = this.source, l2 = s2.length;
          if (i3 >= l2) return -1;
          var c2 = s2.charCodeAt(i3);
          if (!forceU && !this.switchU || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l2) return c2;
          var next = s2.charCodeAt(i3 + 1);
          return next >= 56320 && next <= 57343 ? (c2 << 10) + next - 56613888 : c2;
        }, RegExpValidationState.prototype.nextIndex = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s2 = this.source, l2 = s2.length;
          if (i3 >= l2) return l2;
          var next, c2 = s2.charCodeAt(i3);
          return !forceU && !this.switchU || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l2 || (next = s2.charCodeAt(i3 + 1)) < 56320 || next > 57343 ? i3 + 1 : i3 + 2;
        }, RegExpValidationState.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
          void 0 === forceU && (forceU = false);
          for (var pos = this.pos, i3 = 0, list2 = chs; i3 < list2.length; i3 += 1) {
            var ch = list2[i3], current = this.at(pos, forceU);
            if (-1 === current || current !== ch) return false;
            pos = this.nextIndex(pos, forceU);
          }
          return this.pos = pos, true;
        }, pp$1.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, u2 = false, v2 = false, i3 = 0; i3 < flags.length; i3++) {
            var flag = flags.charAt(i3);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i3 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u2 = true), "v" === flag && (v2 = true);
          }
          this.options.ecmaVersion >= 15 && u2 && v2 && this.raise(state.start, "Invalid regular expression flag");
        }, pp$1.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
            for (var _2 in obj) return true;
            return false;
          }(state.groupNames) && (state.switchN = true, this.regexp_pattern(state));
        }, pp$1.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = /* @__PURE__ */ Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i3 = 0, list2 = state.backReferenceNames; i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            state.groupNames[name] || state.raise("Invalid named capture referenced");
          }
        }, pp$1.regexp_disjunction = function(state) {
          var trackDisjunction = this.options.ecmaVersion >= 16;
          for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state); state.eat(124); ) trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
          trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$1.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); ) ;
        }, pp$1.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$1.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36)) return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$1.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63)) {
              if (this.options.ecmaVersion >= 16) {
                var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
                if (addModifiers || hasHyphen) {
                  for (var i3 = 0; i3 < addModifiers.length; i3++) {
                    var modifier = addModifiers.charAt(i3);
                    addModifiers.indexOf(modifier, i3 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
                  }
                  if (hasHyphen) {
                    var removeModifiers = this.regexp_eatModifiers(state);
                    addModifiers || removeModifiers || 58 !== state.current() || state.raise("Invalid regular expression modifiers");
                    for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {
                      var modifier$1 = removeModifiers.charAt(i$1);
                      (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
                    }
                  }
                }
              }
              if (state.eat(58)) {
                if (this.regexp_disjunction(state), state.eat(41)) return true;
                state.raise("Unterminated group");
              }
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$1.regexp_eatModifiers = function(state) {
          for (var modifiers = "", ch = 0; -1 !== (ch = state.current()) && isRegularExpressionModifier(ch); ) modifiers += codePointToString(ch), state.advance();
          return modifiers;
        }, pp$1.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$1.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch); ) state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$1.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            this.regexp_eatGroupName(state) || state.raise("Invalid group");
            var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
            if (known) if (trackDisjunction) for (var i3 = 0, list2 = known; i3 < list2.length; i3 += 1) {
              list2[i3].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
            }
            else state.raise("Duplicate capture group name");
            trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = true;
          }
        }, pp$1.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); ) state.lastStringValue += codePointToString(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$1.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n2 = state.lastIntValue;
            if (state.switchU) return n2 > state.maxBackReference && (state.maxBackReference = n2), true;
            if (n2 <= state.numCapturingParens) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$1.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$1.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$1.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$1.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111)) return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatIdentityEscape = function(state) {
          if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$1.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (/* @__PURE__ */ function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch)) return state.lastIntValue = -1, state.advance(), 1;
          var negate = false;
          if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
            var result;
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
            state.raise("Invalid property name");
          }
          return 0;
        }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value2 = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          }
          return 0;
        }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
          hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
        }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
        }, pp$1.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$1.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), true;
          }
          return false;
        }, pp$1.regexp_classContents = function(state) {
          return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
        }, pp$1.regexp_nonEmptyClassRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$1.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98)) return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45)) return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$1.regexp_classSetExpression = function(state) {
          var subResult, result = 1;
          if (this.regexp_eatClassSetRange(state)) ;
          else if (subResult = this.regexp_eatClassSetOperand(state)) {
            2 === subResult && (result = 2);
            for (var start = state.pos; state.eatChars([38, 38]); ) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
            for (; state.eatChars([45, 45]); ) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
          } else state.raise("Invalid character in character class");
          for (; ; ) if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
            2 === subResult && (result = 2);
          }
        }, pp$1.regexp_eatClassSetRange = function(state) {
          var start = state.pos;
          if (this.regexp_eatClassSetCharacter(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
              var right = state.lastIntValue;
              return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), true;
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatClassSetOperand = function(state) {
          return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
        }, pp$1.regexp_eatNestedClass = function(state) {
          var start = state.pos;
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
            state.pos = start;
          }
          if (state.eat(92)) {
            var result$1 = this.regexp_eatCharacterClassEscape(state);
            if (result$1) return result$1;
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_eatClassStringDisjunction = function(state) {
          var start = state.pos;
          if (state.eatChars([92, 113])) {
            if (state.eat(123)) {
              var result = this.regexp_classStringDisjunctionContents(state);
              if (state.eat(125)) return result;
            } else state.raise("Invalid escape");
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_classStringDisjunctionContents = function(state) {
          for (var result = this.regexp_classString(state); state.eat(124); ) 2 === this.regexp_classString(state) && (result = 2);
          return result;
        }, pp$1.regexp_classString = function(state) {
          for (var count = 0; this.regexp_eatClassSetCharacter(state); ) count++;
          return 1 === count ? 1 : 2;
        }, pp$1.regexp_eatClassSetCharacter = function(state) {
          var start = state.pos;
          if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
          var ch = state.current();
          return !(ch < 0 || ch === state.lookahead() && function(ch2) {
            return 33 === ch2 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || 46 === ch2 || ch2 >= 58 && ch2 <= 64 || 94 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch)) && (!function(ch2) {
            return 40 === ch2 || 41 === ch2 || 45 === ch2 || 47 === ch2 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
          }(ch) && (state.advance(), state.lastIntValue = ch, true));
        }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
          var ch = state.current();
          return !!function(ch2) {
            return 33 === ch2 || 35 === ch2 || 37 === ch2 || 38 === ch2 || 44 === ch2 || 45 === ch2 || ch2 >= 58 && ch2 <= 62 || 64 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit(ch = state.current()); ) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit(ch = state.current()); ) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$1.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i3 = 0; i3 < length; ++i3) {
            var ch = state.current();
            if (!isHexDigit(ch)) return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          }
          return true;
        };
        var Token = function(p2) {
          this.type = p2.type, this.value = p2.value, this.start = p2.start, this.end = p2.end, p2.options.locations && (this.loc = new SourceLocation(p2, p2.startLoc, p2.endLoc)), p2.options.ranges && (this.range = [p2.start, p2.end]);
        }, pp = Parser.prototype;
        function stringToBigInt(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp.getToken = function() {
          return this.next(), new Token(this);
        }, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$1.eof, value: token };
          } };
        }), pp.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp.readToken = function(code) {
          return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320) return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch); ) ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp.skipSpace = function() {
          loop: for (; this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
                ++this.pos;
            }
          }
        }, pp.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57) return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
        }, pp.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
        }, pp.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1.star : types$1.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(124 === code ? types$1.logicalOR : types$1.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(124 === code ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
        }, pp.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
        }, pp.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
        }, pp.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(61 === code ? types$1.eq : types$1.prefix, 1);
        }, pp.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57) return this.finishOp(types$1.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
              }
              return this.finishOp(types$1.coalesce, 2);
            }
          }
          return this.finishOp(types$1.question, 1);
        }, pp.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || 92 === code)) return this.finishToken(types$1.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$1.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$1.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$1.semi);
            case 44:
              return ++this.pos, this.finishToken(types$1.comma);
            case 91:
              return ++this.pos, this.finishToken(types$1.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$1.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$1.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$1.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$1.colon);
            case 96:
              if (this.options.ecmaVersion < 6) break;
              return ++this.pos, this.finishToken(types$1.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next) return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next) return this.readRadixNumber(8);
                if (98 === next || 66 === next) return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$1.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = false;
            else {
              if ("[" === ch) inClass = true;
              else if ("]" === ch && inClass) inClass = false;
              else if ("/" === ch && !inClass) break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value2 = null;
          try {
            value2 = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
        }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i3 = 0, e = null == len ? 1 / 0 : len; i3 < e; ++i3, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i3 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix) break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
        }, pp.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$1.num, val);
        }, pp.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else code = this.readHexChar(4);
          return code;
        }, pp.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
          this.raise(position, message);
        }, pp.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
            if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else ++this.pos;
          }
        }, pp.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if ("{" !== this.input[this.pos + 1]) break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              "\n" === this.input[this.pos + 1] && ++this.pos;
            case "\n":
            case "\u2028":
            case "\u2029":
              ++this.curLine, this.lineStart = this.pos + 1;
          }
          this.raise(this.start, "Unterminated template");
        }, pp.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
          }
        }, pp.readHexChar = function(len) {
          var codePos = this.pos, n2 = this.readInt(16, len);
          return null === n2 && this.invalidStringToken(codePos, "Bad character escape sequence"), n2;
        }, pp.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch) break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp.readWord = function() {
          var word = this.readWord1(), type = types$1.name;
          return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
        };
        Parser.acorn = { Parser, version: "8.14.0", defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
        const external_node_module_namespaceObject = require_node_module(), external_node_url_namespaceObject = (require_node_fs(), require_node_url()), external_node_assert_namespaceObject = require_node_assert(), external_node_v8_namespaceObject = (require_node_process(), require_node_path(), require_node_v8()), external_node_util_namespaceObject = require_node_util();
        new Set(external_node_module_namespaceObject.builtinModules);
        function normalizeSlash(path2) {
          return path2.replace(/\\/g, "/");
        }
        const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, constructor) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...parameters) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, parameters2, self2) {
                const message2 = messages.get(key2);
                if (external_node_assert_namespaceObject(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return external_node_assert_namespaceObject(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, parameters2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return external_node_assert_namespaceObject(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), 0 === parameters2.length ? message2 : (parameters2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, parameters2));
              }(key, parameters, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(constructor, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return false;
          } catch {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types2 = [], instances = [], other = [];
          for (const value2 of expected) external_node_assert_namespaceObject("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (external_node_assert_namespaceObject("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types2.indexOf("object");
            -1 !== pos && (types2.slice(pos, 1), instances.push("Object"));
          }
          return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
            let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path2, base, message) => `Invalid package config ${path2}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = void 0) => {
          const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_node_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path2, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path2}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path2) => `Unknown file extension "${extension}" for ${path2}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError);
        const captureLargerStackTrace = function(wrappedFunction) {
          const hidden = "__node_internal_" + wrappedFunction.name;
          return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes;
        /* @__PURE__ */ new Map();
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes;
        RegExp.prototype[Symbol.replace];
        const { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes;
        /* @__PURE__ */ new Set();
        function fileURLToPath4(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
        }
        function pathToFileURL2(id) {
          return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath4(id)).toString();
        }
        function importMetaPathsPlugin(_ctx, opts) {
          return { name: "import-meta-paths", visitor: { Program(path2) {
            const metaUrls = [], metaDirnames = [], metaFilenames = [];
            path2.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              if ("MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type) switch (node.property.name) {
                case "url":
                  metaUrls.push(memberExpPath);
                  break;
                case "dirname":
                  metaDirnames.push(memberExpPath);
                  break;
                case "filename":
                  metaFilenames.push(memberExpPath);
              }
            } });
            for (const meta of metaUrls) meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathToFileURL2(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
            for (const metaDirname of metaDirnames) metaDirname.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathe_ff20891b_dirname(fileURLToPath4(pathToFileURL2(opts.filename)))) : "__dirname"}`);
            for (const metaFilename of metaFilenames) metaFilename.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(fileURLToPath4(pathToFileURL2(opts.filename))) : "__filename"}`);
          } } };
        }
        var helper_module_imports_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), helper_module_transforms_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), helper_simple_access_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js");
        function transformDynamicImport(path2, noInterop, file) {
          path2.replaceWith((0, helper_module_transforms_lib.buildDynamicImport)(path2.node, true, false, (specifier) => ((source, file2, noInterop2) => {
            const exp = lib.template.expression.ast`jitiImport(${source})`;
            return noInterop2 ? exp : lib.types.callExpression(lib.types.memberExpression(exp, lib.types.identifier("then")), [lib.types.arrowFunctionExpression([lib.types.identifier("m")], lib.types.callExpression(file2.addHelper("interopRequireWildcard"), [lib.types.identifier("m")]))]);
          })(specifier, file, noInterop)));
        }
        const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
        function findMap(arr, cb) {
          if (arr) for (const el of arr) {
            const res = cb(el);
            if (null != res) return res;
          }
        }
        const transform_module = (0, helper_plugin_utils_lib.declare)((api, options) => {
          const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false, async = false } = options, constantReexports = api.assumption("constantReexports") ?? loose, enumerableModuleMeta = api.assumption("enumerableModuleMeta") ?? loose, noIncompleteNsImportDetection = api.assumption("noIncompleteNsImportDetection") ?? false;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace) throw new TypeError(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace) throw new TypeError(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => lib.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path2) {
            const localName = path2.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path2.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path2.parentPath.isObjectProperty({ value: path2.node }) && path2.parentPath.parentPath.isObjectPattern() || path2.parentPath.isAssignmentExpression({ left: path2.node }) || path2.isAssignmentExpression({ left: path2.node }) || path2.replaceWith(getAssertion(localName));
          }, UpdateExpression(path2) {
            const arg = path2.get("argument");
            if (!arg.isIdentifier()) return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path2.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path2.replaceWith(lib.types.assignmentExpression(path2.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path2) {
            const left = path2.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName) return;
              const localBinding = path2.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding) return;
              const right = path2.get("right");
              right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path2.scope.getBinding(localName2));
              if (localName) {
                const right = path2.get("right");
                right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && function(file, hook) {
              let hooks = file.get(commonJSHooksKey);
              hooks || file.set(commonJSHooksKey, hooks = []), hooks.push(hook);
            }(this.file, /* @__PURE__ */ ((lazy2) => ({ name: "babel-plugin-transform-modules-commonjs/lazy", version: "7.24.7", getWrapperPayload: (source, metadata) => (0, helper_module_transforms_lib.isSideEffectImport)(metadata) || metadata.reexportAll ? null : true === lazy2 ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy2) ? lazy2.includes(source) ? "lazy/function" : null : "function" == typeof lazy2 ? lazy2(source) ? "lazy/function" : null : void 0, buildRequireWrapper(name, init, payload, referenced) {
              if ("lazy/function" === payload) return !!referenced && lib.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
            }, wrapReference(ref2, payload) {
              if ("lazy/function" === payload) return lib.types.callExpression(ref2, []);
            } }))(lazy));
          }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path2) {
            if (path2.isCallExpression() && !lib.types.isImport(path2.node.callee)) return;
            let { scope } = path2;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            transformDynamicImport(path2, noInterop, this.file);
          }, Program: { exit(path2, state) {
            if (!(0, helper_module_imports_lib.isModule)(path2)) return;
            path2.scope.rename("exports"), path2.scope.rename("module"), path2.scope.rename("require"), path2.scope.rename("__filename"), path2.scope.rename("__dirname"), allowCommonJSExports || (process.env.BABEL_8_BREAKING ? (0, helper_simple_access_lib.A)(path2, /* @__PURE__ */ new Set(["module", "exports"])) : (0, helper_simple_access_lib.A)(path2, /* @__PURE__ */ new Set(["module", "exports"]), false), path2.traverse(moduleExportsVisitor, { scope: path2.scope }));
            let moduleName = (0, helper_module_transforms_lib.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = lib.types.stringLiteral(moduleName));
            const hooks = function(file) {
              const hooks2 = file.get(commonJSHooksKey);
              return { getWrapperPayload: (...args) => findMap(hooks2, (hook) => {
                var _a7;
                return (_a7 = hook.getWrapperPayload) == null ? void 0 : _a7.call(hook, ...args);
              }), wrapReference: (...args) => findMap(hooks2, (hook) => {
                var _a7;
                return (_a7 = hook.wrapReference) == null ? void 0 : _a7.call(hook, ...args);
              }), buildRequireWrapper: (...args) => findMap(hooks2, (hook) => {
                var _a7;
                return (_a7 = hook.buildRequireWrapper) == null ? void 0 : _a7.call(hook, ...args);
              }) };
            }(this.file), { meta, headers } = (0, helper_module_transforms_lib.rewriteModuleStatementsAndPrepareHeader)(path2, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = async ? lib.types.awaitExpression(lib.types.callExpression(lib.types.identifier("jitiImport"), [lib.types.stringLiteral(source)])) : lib.types.callExpression(lib.types.identifier("require"), [lib.types.stringLiteral(source)]);
              let header;
              if ((0, helper_module_transforms_lib.isSideEffectImport)(metadata)) {
                if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
                header = lib.types.expressionStatement(loadExpr);
              } else {
                const init = (0, helper_module_transforms_lib.wrapInterop)(path2, loadExpr, metadata.interop) || loadExpr;
                if (metadata.wrap) {
                  const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                  if (false === res) continue;
                  header = res;
                }
                header ?? (header = lib.template.statement.ast`
                var ${metadata.name} = ${init};
              `);
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, helper_module_transforms_lib.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
            }
            (0, helper_module_transforms_lib.ensureStatementsHoisted)(headers), path2.unshiftContainer("body", headers), path2.get("body").forEach((path3) => {
              headers.includes(path3.node) && path3.isVariableDeclaration() && path3.scope.registerDeclaration(path3);
            });
          } } } };
        });
        function transform2(opts) {
          var _a7, _b5, _c, _d, _e, _f;
          const _opts = { babelrc: false, configFile: false, compact: false, retainLines: "boolean" != typeof opts.retainLines || opts.retainLines, filename: "", cwd: "/", ...opts.babel, plugins: [[transform_module, { allowTopLevelThis: true, noInterop: !opts.interopDefault, async: opts.async }], [importMetaPathsPlugin, { filename: opts.filename }], [importMetaEnvPlugin], [importMetaResolvePlugin], [plugin_syntax_class_properties_lib.A], [plugin_transform_export_namespace_from_lib.A]] };
          opts.jsx && _opts.plugins.push([plugin_syntax_jsx_lib.default], [plugin_transform_react_jsx_lib.A, Object.assign({}, opts.jsx)]), opts.ts && (_opts.plugins.push([plugin_transform_typescript_lib.default, { allowDeclareFields: true, isTSX: opts.jsx && /\.[cm]?tsx$/.test(opts.filename || "") }]), _opts.plugins.unshift([babel_plugin_transform_typescript_metadata], [plugin_proposal_decorators_lib.A, { legacy: true }]), _opts.plugins.push(babel_plugin_parameter_decorator_lib_default()), _opts.plugins.push(plugin_syntax_import_assertions_lib.A)), opts.babel && Array.isArray(opts.babel.plugins) && ((_a7 = _opts.plugins) == null ? void 0 : _a7.push(...opts.babel.plugins));
          try {
            return { code: ((_b5 = (0, lib.transformSync)(opts.source, _opts)) == null ? void 0 : _b5.code) || "" };
          } catch (error) {
            return { error, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: ((_c = error.loc) == null ? void 0 : _c.line) || 0, column: ((_d = error.loc) == null ? void 0 : _d.column) || 0, code: (_e = error.code) == null ? void 0 : _e.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: (_f = error.message) == null ? void 0 : _f.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
          }
        }
      })(), module3.exports = __webpack_exports__.default;
    })();
  }
});

// browser-external:node:events
var require_node_events = __commonJS({
  "browser-external:node:events"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:events" has been externalized for browser compatibility. Cannot access "node:events.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:stream/promises
var require_promises2 = __commonJS({
  "browser-external:node:stream/promises"(exports2, module3) {
    module3.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:stream/promises" has been externalized for browser compatibility. Cannot access "node:stream/promises.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS({
  "node_modules/fast-glob/out/utils/array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitWhen = exports2.flatten = void 0;
    function flatten(items) {
      return items.reduce((collection, item) => [].concat(collection, item), []);
    }
    exports2.flatten = flatten;
    function splitWhen(items, predicate) {
      const result = [[]];
      let groupIndex = 0;
      for (const item of items) {
        if (predicate(item)) {
          groupIndex++;
          result[groupIndex] = [];
        } else {
          result[groupIndex].push(item);
        }
      }
      return result;
    }
    exports2.splitWhen = splitWhen;
  }
});

// node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS({
  "node_modules/fast-glob/out/utils/errno.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEnoentCodeError = void 0;
    function isEnoentCodeError(error) {
      return error.code === "ENOENT";
    }
    exports2.isEnoentCodeError = isEnoentCodeError;
  }
});

// node_modules/fast-glob/out/utils/fs.js
var require_fs2 = __commonJS({
  "node_modules/fast-glob/out/utils/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports2.createDirentFromStats = createDirentFromStats;
  }
});

// node_modules/fast-glob/out/utils/path.js
var require_path2 = __commonJS({
  "node_modules/fast-glob/out/utils/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertPosixPathToPattern = exports2.convertWindowsPathToPattern = exports2.convertPathToPattern = exports2.escapePosixPath = exports2.escapeWindowsPath = exports2.escape = exports2.removeLeadingDotSegment = exports2.makeAbsolute = exports2.unixify = void 0;
    var os = require_os();
    var path2 = require_path();
    var IS_WINDOWS_PLATFORM = os.platform() === "win32";
    var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
    var POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
    var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
    var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
    var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
    function unixify(filepath) {
      return filepath.replace(/\\/g, "/");
    }
    exports2.unixify = unixify;
    function makeAbsolute(cwd, filepath) {
      return path2.resolve(cwd, filepath);
    }
    exports2.makeAbsolute = makeAbsolute;
    function removeLeadingDotSegment(entry) {
      if (entry.charAt(0) === ".") {
        const secondCharactery = entry.charAt(1);
        if (secondCharactery === "/" || secondCharactery === "\\") {
          return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
        }
      }
      return entry;
    }
    exports2.removeLeadingDotSegment = removeLeadingDotSegment;
    exports2.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
    function escapeWindowsPath(pattern) {
      return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports2.escapeWindowsPath = escapeWindowsPath;
    function escapePosixPath(pattern) {
      return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports2.escapePosixPath = escapePosixPath;
    exports2.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
    function convertWindowsPathToPattern(filepath) {
      return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
    }
    exports2.convertWindowsPathToPattern = convertWindowsPathToPattern;
    function convertPosixPathToPattern(filepath) {
      return escapePosixPath(filepath);
    }
    exports2.convertPosixPathToPattern = convertPosixPathToPattern;
  }
});

// node_modules/is-extglob/index.js
var require_is_extglob = __commonJS({
  "node_modules/is-extglob/index.js"(exports2, module3) {
    module3.exports = function isExtglob(str) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      var match;
      while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
        if (match[2]) return true;
        str = str.slice(match.index + match[0].length);
      }
      return false;
    };
  }
});

// node_modules/is-glob/index.js
var require_is_glob = __commonJS({
  "node_modules/is-glob/index.js"(exports2, module3) {
    var isExtglob = require_is_extglob();
    var chars = { "{": "}", "(": ")", "[": "]" };
    var strictCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index2 = 0;
      var pipeIndex = -2;
      var closeSquareIndex = -2;
      var closeCurlyIndex = -2;
      var closeParenIndex = -2;
      var backSlashIndex = -2;
      while (index2 < str.length) {
        if (str[index2] === "*") {
          return true;
        }
        if (str[index2 + 1] === "?" && /[\].+)]/.test(str[index2])) {
          return true;
        }
        if (closeSquareIndex !== -1 && str[index2] === "[" && str[index2 + 1] !== "]") {
          if (closeSquareIndex < index2) {
            closeSquareIndex = str.indexOf("]", index2);
          }
          if (closeSquareIndex > index2) {
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
          }
        }
        if (closeCurlyIndex !== -1 && str[index2] === "{" && str[index2 + 1] !== "}") {
          closeCurlyIndex = str.indexOf("}", index2);
          if (closeCurlyIndex > index2) {
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
              return true;
            }
          }
        }
        if (closeParenIndex !== -1 && str[index2] === "(" && str[index2 + 1] === "?" && /[:!=]/.test(str[index2 + 2]) && str[index2 + 3] !== ")") {
          closeParenIndex = str.indexOf(")", index2);
          if (closeParenIndex > index2) {
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
        if (pipeIndex !== -1 && str[index2] === "(" && str[index2 + 1] !== "|") {
          if (pipeIndex < index2) {
            pipeIndex = str.indexOf("|", index2);
          }
          if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
            closeParenIndex = str.indexOf(")", pipeIndex);
            if (closeParenIndex > pipeIndex) {
              backSlashIndex = str.indexOf("\\", pipeIndex);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
        }
        if (str[index2] === "\\") {
          var open = str[index2 + 1];
          index2 += 2;
          var close = chars[open];
          if (close) {
            var n2 = str.indexOf(close, index2);
            if (n2 !== -1) {
              index2 = n2 + 1;
            }
          }
          if (str[index2] === "!") {
            return true;
          }
        } else {
          index2++;
        }
      }
      return false;
    };
    var relaxedCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index2 = 0;
      while (index2 < str.length) {
        if (/[*?{}()[\]]/.test(str[index2])) {
          return true;
        }
        if (str[index2] === "\\") {
          var open = str[index2 + 1];
          index2 += 2;
          var close = chars[open];
          if (close) {
            var n2 = str.indexOf(close, index2);
            if (n2 !== -1) {
              index2 = n2 + 1;
            }
          }
          if (str[index2] === "!") {
            return true;
          }
        } else {
          index2++;
        }
      }
      return false;
    };
    module3.exports = function isGlob(str, options) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      if (isExtglob(str)) {
        return true;
      }
      var check = strictCheck;
      if (options && options.strict === false) {
        check = relaxedCheck;
      }
      return check(str);
    };
  }
});

// node_modules/glob-parent/index.js
var require_glob_parent = __commonJS({
  "node_modules/glob-parent/index.js"(exports2, module3) {
    "use strict";
    var isGlob = require_is_glob();
    var pathPosixDirname = require_path().posix.dirname;
    var isWin32 = require_os().platform() === "win32";
    var slash2 = "/";
    var backslash = /\\/g;
    var enclosure = /[\{\[].*[\}\]]$/;
    var globby2 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
    var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
    module3.exports = function globParent(str, opts) {
      var options = Object.assign({ flipBackslashes: true }, opts);
      if (options.flipBackslashes && isWin32 && str.indexOf(slash2) < 0) {
        str = str.replace(backslash, slash2);
      }
      if (enclosure.test(str)) {
        str += slash2;
      }
      str += "a";
      do {
        str = pathPosixDirname(str);
      } while (isGlob(str) || globby2.test(str));
      return str.replace(escaped, "$1");
    };
  }
});

// node_modules/braces/lib/utils.js
var require_utils = __commonJS({
  "node_modules/braces/lib/utils.js"(exports2) {
    "use strict";
    exports2.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports2.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports2.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false) return false;
      if (!exports2.isInteger(min) || !exports2.isInteger(max)) return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports2.escapeNode = (block, n2 = 0, type) => {
      const node = block.nodes[n2];
      if (!node) return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports2.encloseBrace = (node) => {
      if (node.type !== "brace") return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports2.isInvalidBrace = (block) => {
      if (block.type !== "brace") return false;
      if (block.invalid === true || block.dollar) return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports2.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports2.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text") acc.push(node.value);
      if (node.type === "range") node.type = "text";
      return acc;
    }, []);
    exports2.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i2 = 0; i2 < arr.length; i2++) {
          const ele = arr[i2];
          if (Array.isArray(ele)) {
            flat(ele);
            continue;
          }
          if (ele !== void 0) {
            result.push(ele);
          }
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// node_modules/braces/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/braces/lib/stringify.js"(exports2, module3) {
    "use strict";
    var utils = require_utils();
    module3.exports = (ast, options = {}) => {
      const stringify = (node, parent = {}) => {
        const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        const invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (const child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// node_modules/is-number/index.js
var require_is_number = __commonJS({
  "node_modules/is-number/index.js"(exports2, module3) {
    "use strict";
    module3.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({
  "node_modules/to-regex-range/index.js"(exports2, module3) {
    "use strict";
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a2 = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a2 - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a: a2, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a2 < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a2), state, opts);
        a2 = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a2, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = /* @__PURE__ */ new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i2 = 0; i2 < digits; i2++) {
        let [startDigit, stopDigit] = zipped[i2];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i2 = 0; i2 < ranges.length; i2++) {
        let max2 = ranges[i2];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a2, b) {
      let arr = [];
      for (let i2 = 0; i2 < a2.length; i2++) arr.push([a2[i2], b[i2]]);
      return arr;
    }
    function compare(a2, b) {
      return a2 > b ? 1 : b > a2 ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a2, b, options) {
      return `[${a2}${b - a2 === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value2, tok, options) {
      if (!tok.isPadded) {
        return value2;
      }
      let diff2 = Math.abs(tok.maxLen - String(value2).length);
      let relax = options.relaxZeros !== false;
      switch (diff2) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff2}}` : `0{${diff2}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module3.exports = toRegexRange;
  }
});

// node_modules/fill-range/index.js
var require_fill_range = __commonJS({
  "node_modules/fill-range/index.js"(exports2, module3) {
    "use strict";
    var util = require_util();
    var toRegexRange = require_to_regex_range();
    var isObject3 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform2 = (toNumber) => {
      return (value2) => toNumber === true ? Number(value2) : String(value2);
    };
    var isValidValue = (value2) => {
      return typeof value2 === "number" || typeof value2 === "string" && value2 !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value2 = `${input}`;
      let index2 = -1;
      if (value2[0] === "-") value2 = value2.slice(1);
      if (value2 === "0") return false;
      while (value2[++index2] === "0") ;
      return index2 > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash) input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength) input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options, maxLen) => {
      parts.negatives.sort((a2, b) => a2 < b ? -1 : a2 > b ? 1 : 0);
      parts.positives.sort((a2, b) => a2 < b ? -1 : a2 > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.map((v2) => toMaxLen(String(v2), maxLen)).join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.map((v2) => toMaxLen(String(v2), maxLen)).join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a2, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a2, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a2);
      if (a2 === b) return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true) throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a2 = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a2) || !Number.isInteger(b)) {
        if (options.strictRanges === true) throw rangeError([start, end]);
        return [];
      }
      if (a2 === 0) a2 = 0;
      if (b === 0) b = 0;
      let descending = a2 > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format = options.transform || transform2(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index2 = 0;
      while (descending ? a2 >= b : a2 <= b) {
        if (options.toRegex === true && step > 1) {
          push(a2);
        } else {
          range.push(pad(format(a2, index2), maxLen, toNumber));
        }
        a2 = descending ? a2 - step : a2 + step;
        index2++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format = options.transform || ((val) => String.fromCharCode(val));
      let a2 = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a2 > b;
      let min = Math.min(a2, b);
      let max = Math.max(a2, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index2 = 0;
      while (descending ? a2 >= b : a2 <= b) {
        range.push(format(a2, index2));
        a2 = descending ? a2 - step : a2 + step;
        index2++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill(start, end, 1, { transform: step });
      }
      if (isObject3(step)) {
        return fill(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true) opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject3(step)) return invalidStep(step, opts);
        return fill(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module3.exports = fill;
  }
});

// node_modules/braces/lib/compile.js
var require_compile = __commonJS({
  "node_modules/braces/lib/compile.js"(exports2, module3) {
    "use strict";
    var fill = require_fill_range();
    var utils = require_utils();
    var compile = (ast, options = {}) => {
      const walk = (node, parent = {}) => {
        const invalidBlock = utils.isInvalidBrace(parent);
        const invalidNode = node.invalid === true && options.escapeInvalid === true;
        const invalid = invalidBlock === true || invalidNode === true;
        const prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          console.log("node.isClose", prefix, node.value);
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          const args = utils.reduce(node.nodes);
          const range = fill(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (const child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module3.exports = compile;
  }
});

// node_modules/braces/lib/expand.js
var require_expand = __commonJS({
  "node_modules/braces/lib/expand.js"(exports2, module3) {
    "use strict";
    var fill = require_fill_range();
    var stringify = require_stringify();
    var utils = require_utils();
    var append = (queue = "", stash = "", enclose = false) => {
      const result = [];
      queue = [].concat(queue);
      stash = [].concat(stash);
      if (!stash.length) return queue;
      if (!queue.length) {
        return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (const item of queue) {
        if (Array.isArray(item)) {
          for (const value2 of item) {
            result.push(append(value2, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils.flatten(result);
    };
    var expand = (ast, options = {}) => {
      const rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      const walk = (node, parent = {}) => {
        node.queue = [];
        let p2 = parent;
        let q = parent.queue;
        while (p2.type !== "brace" && p2.type !== "root" && p2.parent) {
          p2 = p2.parent;
          q = p2.queue;
        }
        if (node.invalid || node.dollar) {
          q.push(append(q.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q.push(append(q.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          const args = utils.reduce(node.nodes);
          if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q.push(append(q.pop(), range));
          node.nodes = [];
          return;
        }
        const enclose = utils.encloseBrace(node);
        let queue = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue = block.queue;
        }
        for (let i2 = 0; i2 < node.nodes.length; i2++) {
          const child = node.nodes[i2];
          if (child.type === "comma" && node.type === "brace") {
            if (i2 === 1) queue.push("");
            queue.push("");
            continue;
          }
          if (child.type === "close") {
            q.push(append(q.pop(), queue, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue.push(append(queue.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue;
      };
      return utils.flatten(walk(ast));
    };
    module3.exports = expand;
  }
});

// node_modules/braces/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/braces/lib/constants.js"(exports2, module3) {
    "use strict";
    module3.exports = {
      MAX_LENGTH: 1e4,
      // Digits
      CHAR_0: "0",
      /* 0 */
      CHAR_9: "9",
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: "A",
      /* A */
      CHAR_LOWERCASE_A: "a",
      /* a */
      CHAR_UPPERCASE_Z: "Z",
      /* Z */
      CHAR_LOWERCASE_Z: "z",
      /* z */
      CHAR_LEFT_PARENTHESES: "(",
      /* ( */
      CHAR_RIGHT_PARENTHESES: ")",
      /* ) */
      CHAR_ASTERISK: "*",
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: "&",
      /* & */
      CHAR_AT: "@",
      /* @ */
      CHAR_BACKSLASH: "\\",
      /* \ */
      CHAR_BACKTICK: "`",
      /* ` */
      CHAR_CARRIAGE_RETURN: "\r",
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: "^",
      /* ^ */
      CHAR_COLON: ":",
      /* : */
      CHAR_COMMA: ",",
      /* , */
      CHAR_DOLLAR: "$",
      /* . */
      CHAR_DOT: ".",
      /* . */
      CHAR_DOUBLE_QUOTE: '"',
      /* " */
      CHAR_EQUAL: "=",
      /* = */
      CHAR_EXCLAMATION_MARK: "!",
      /* ! */
      CHAR_FORM_FEED: "\f",
      /* \f */
      CHAR_FORWARD_SLASH: "/",
      /* / */
      CHAR_HASH: "#",
      /* # */
      CHAR_HYPHEN_MINUS: "-",
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: "<",
      /* < */
      CHAR_LEFT_CURLY_BRACE: "{",
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: "[",
      /* [ */
      CHAR_LINE_FEED: "\n",
      /* \n */
      CHAR_NO_BREAK_SPACE: " ",
      /* \u00A0 */
      CHAR_PERCENT: "%",
      /* % */
      CHAR_PLUS: "+",
      /* + */
      CHAR_QUESTION_MARK: "?",
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      /* > */
      CHAR_RIGHT_CURLY_BRACE: "}",
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      /* ] */
      CHAR_SEMICOLON: ";",
      /* ; */
      CHAR_SINGLE_QUOTE: "'",
      /* ' */
      CHAR_SPACE: " ",
      /*   */
      CHAR_TAB: "	",
      /* \t */
      CHAR_UNDERSCORE: "_",
      /* _ */
      CHAR_VERTICAL_LINE: "|",
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      /* \uFEFF */
    };
  }
});

// node_modules/braces/lib/parse.js
var require_parse = __commonJS({
  "node_modules/braces/lib/parse.js"(exports2, module3) {
    "use strict";
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      /* \ */
      CHAR_BACKTICK,
      /* ` */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_RIGHT_SQUARE_BRACKET,
      /* ] */
      CHAR_DOUBLE_QUOTE,
      /* " */
      CHAR_SINGLE_QUOTE,
      /* ' */
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants2();
    var parse3 = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      const opts = options || {};
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      const ast = { type: "root", input, nodes: [] };
      const stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      const length = input.length;
      let index2 = 0;
      let depth = 0;
      let value2;
      const advance = () => input[index2++];
      const push = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push({ type: "bos" });
      while (index2 < length) {
        block = stack[stack.length - 1];
        value2 = advance();
        if (value2 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value2 === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value2 === CHAR_BACKSLASH) {
          push({ type: "text", value: (options.keepEscaping ? value2 : "") + advance() });
          continue;
        }
        if (value2 === CHAR_RIGHT_SQUARE_BRACKET) {
          push({ type: "text", value: "\\" + value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let next;
          while (index2 < length && (next = advance())) {
            value2 += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value2 += advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_PARENTHESES) {
          block = push({ type: "paren", nodes: [] });
          stack.push(block);
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push({ type: "text", value: value2 });
            continue;
          }
          block = stack.pop();
          push({ type: "text", value: value2 });
          block = stack[stack.length - 1];
          continue;
        }
        if (value2 === CHAR_DOUBLE_QUOTE || value2 === CHAR_SINGLE_QUOTE || value2 === CHAR_BACKTICK) {
          const open = value2;
          let next;
          if (options.keepQuotes !== true) {
            value2 = "";
          }
          while (index2 < length && (next = advance())) {
            if (next === CHAR_BACKSLASH) {
              value2 += next + advance();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true) value2 += next;
              break;
            }
            value2 += next;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          const brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push(brace);
          stack.push(block);
          push({ type: "open", value: value2 });
          continue;
        }
        if (value2 === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push({ type: "text", value: value2 });
            continue;
          }
          const type = "close";
          block = stack.pop();
          block.close = true;
          push({ type, value: value2 });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value2 === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            const open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push({ type: "comma", value: value2 });
          block.commas++;
          continue;
        }
        if (value2 === CHAR_DOT && depth > 0 && block.commas === 0) {
          const siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push({ type: "text", value: value2 });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value2;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            const before = siblings[siblings.length - 1];
            before.value += prev.value + value2;
            prev = before;
            block.ranges--;
            continue;
          }
          push({ type: "dot", value: value2 });
          continue;
        }
        push({ type: "text", value: value2 });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open") node.isOpen = true;
              if (node.type === "close") node.isClose = true;
              if (!node.nodes) node.type = "text";
              node.invalid = true;
            }
          });
          const parent = stack[stack.length - 1];
          const index3 = parent.nodes.indexOf(block);
          parent.nodes.splice(index3, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push({ type: "eos" });
      return ast;
    };
    module3.exports = parse3;
  }
});

// node_modules/braces/index.js
var require_braces = __commonJS({
  "node_modules/braces/index.js"(exports2, module3) {
    "use strict";
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse3 = require_parse();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (const pattern of input) {
          const result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse3(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module3.exports = braces;
  }
});

// node_modules/picomatch/lib/constants.js
var require_constants3 = __commonJS({
  "node_modules/picomatch/lib/constants.js"(exports2, module3) {
    "use strict";
    var path2 = require_path();
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module3.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      SEP: path2.sep,
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/picomatch/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/picomatch/lib/utils.js"(exports2) {
    "use strict";
    var path2 = require_path();
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants3();
    exports2.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports2.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports2.isRegexChar = (str) => str.length === 1 && exports2.hasRegexChars(str);
    exports2.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports2.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports2.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports2.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports2.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path2.sep === "\\";
    };
    exports2.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1) return input;
      if (input[idx - 1] === "\\") return exports2.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports2.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports2.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "node_modules/picomatch/lib/scan.js"(exports2, module3) {
    "use strict";
    var utils = require_utils2();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH,
      /* \ */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH,
      /* / */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET
      /* ] */
    } = require_constants3();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index2 = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished2 = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index2 >= length;
      const peek = () => str.charCodeAt(index2 + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index2);
      };
      while (index2 < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished2 = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished2 = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished2 = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index2);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished2 === true) continue;
          if (prev === CHAR_DOT && index2 === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index2 + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished2 = true;
            if (code === CHAR_EXCLAMATION_MARK && index2 === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished2 = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished2 = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished2 = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished2 = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index2 === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished2 = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished2 = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob) glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n2 = prevIndex ? prevIndex + 1 : start;
          const i2 = slashes[idx];
          const value2 = input.slice(n2, i2);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value2;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value2 !== "") {
            parts.push(value2);
          }
          prevIndex = i2;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value2 = input.slice(prevIndex + 1);
          parts.push(value2);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value2;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module3.exports = scan;
  }
});

// node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/picomatch/lib/parse.js"(exports2, module3) {
    "use strict";
    var constants = require_constants3();
    var utils = require_utils2();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value2 = `[${args.join("-")}]`;
      try {
        new RegExp(value2);
      } catch (ex) {
        return args.map((v2) => utils.escapeRegex(v2)).join("..");
      }
      return value2;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse3 = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win32);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value2;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n2 = 1) => input[state.index + n2];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value3 = "", num = 0) => {
        state.consumed += value3;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output) append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value3) => {
        const token = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value3, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse3(rest, { ...options, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value: value2, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars, first, rest, index2) => {
          if (first === "\\") {
            backslashes = true;
            return m2;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index2 === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m2 : `\\${m2}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m2) => {
              return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value2 = advance();
        if (value2 === "\0") {
          continue;
        }
        if (value2 === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value2 += "\\";
            push({ type: "text", value: value2 });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value2 += "\\";
            }
          }
          if (opts.unescape === true) {
            value2 = advance();
          } else {
            value2 += advance();
          }
          if (state.brackets === 0) {
            push({ type: "text", value: value2 });
            continue;
          }
        }
        if (state.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value2 === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value2 === "[" && peek() !== ":" || value2 === "-" && peek() === "]") {
            value2 = `\\${value2}`;
          }
          if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
            value2 = `\\${value2}`;
          }
          if (opts.posix === true && value2 === "!" && prev.value === "[") {
            value2 = "^";
          }
          prev.value += value2;
          append({ value: value2 });
          continue;
        }
        if (state.quotes === 1 && value2 !== '"') {
          value2 = utils.escapeRegex(value2);
          prev.value += value2;
          append({ value: value2 });
          continue;
        }
        if (value2 === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value: value2 });
          }
          continue;
        }
        if (value2 === "(") {
          increment("parens");
          push({ type: "paren", value: value2 });
          continue;
        }
        if (value2 === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value: value2, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value2 === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value2 = `\\${value2}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value: value2 });
          continue;
        }
        if (value2 === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value2 = `/${value2}`;
          }
          prev.value += value2;
          append({ value: value2 });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value2 === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value: value2,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value2 === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value: value2, output: value2 });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i2 = arr.length - 1; i2 >= 0; i2--) {
              tokens.pop();
              if (arr[i2].type === "brace") {
                break;
              }
              if (arr[i2].type !== "dots") {
                range.unshift(arr[i2].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value2 = output = "\\}";
            state.output = out;
            for (const t2 of toks) {
              state.output += t2.output || t2.value;
            }
          }
          push({ type: "brace", value: value2, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value2 === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === ",") {
          let output = value2;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value: value2, output });
          continue;
        }
        if (value2 === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value: value2, output: SLASH_LITERAL });
          continue;
        }
        if (value2 === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".") prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value2;
            prev.value += value2;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value: value2, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value: value2, output: DOT_LITERAL });
          continue;
        }
        if (value2 === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value2);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value2;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value2}`;
            }
            push({ type: "text", value: value2, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value: value2, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value: value2, output: QMARK });
          continue;
        }
        if (value2 === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value2);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value2 === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value2);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value: value2, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value: value2 });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value2 === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value: value2, output: "" });
            continue;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 !== "*") {
          if (value2 === "$" || value2 === "^") {
            value2 = `\\${value2}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value2 += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value2;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value2);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value2);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value2);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value: value2, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value: value2, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value2;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value2;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value2;
          state.output += prev.output;
          state.globstar = true;
          consume(value2);
          continue;
        }
        const token = { type: "star", value: value2, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value2;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse3.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match) return;
            const source2 = create(match[1]);
            if (!source2) return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module3.exports = parse3;
  }
});

// node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "node_modules/picomatch/lib/picomatch.js"(exports2, module3) {
    "use strict";
    var path2 = require_path();
    var scan = require_scan();
    var parse3 = require_parse2();
    var utils = require_utils2();
    var constants = require_constants3();
    var isObject3 = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2) return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject3(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format = opts.format || (posix ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format ? format(input) : input;
      if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path2.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern)) return pattern.map((p2) => picomatch.parse(p2, options));
      return parse3(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse3.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse3(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true) throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module3.exports = picomatch;
  }
});

// node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "node_modules/picomatch/index.js"(exports2, module3) {
    "use strict";
    module3.exports = require_picomatch();
  }
});

// node_modules/micromatch/index.js
var require_micromatch = __commonJS({
  "node_modules/micromatch/index.js"(exports2, module3) {
    "use strict";
    var util = require_util();
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils = require_utils2();
    var isEmptyString = (v2) => v2 === "" || v2 === "./";
    var hasBraces = (v2) => {
      const index2 = v2.indexOf("{");
      return index2 > -1 && v2.indexOf("}", index2) > -1;
    };
    var micromatch = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = /* @__PURE__ */ new Set();
      let keep = /* @__PURE__ */ new Set();
      let items = /* @__PURE__ */ new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i2 = 0; i2 < patterns.length; i2++) {
        let isMatch = picomatch(String(patterns[i2]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated) negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match) continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches = result.filter((item) => !omit.has(item));
      if (options && matches.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p2) => p2.replace(/\\/g, "")) : patterns;
        }
      }
      return matches;
    };
    micromatch.match = micromatch;
    micromatch.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch.any = micromatch.isMatch;
    micromatch.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = /* @__PURE__ */ new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult) options.onResult(state);
        items.push(state.output);
      };
      let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
      for (let item of items) {
        if (!matches.has(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p2) => micromatch.contains(str, p2, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch.matchKeys = (obj, patterns, options) => {
      if (!utils.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys2 = micromatch(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys2) res[key] = obj[key];
      return res;
    };
    micromatch.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      return [].concat(patterns).every((p2) => picomatch(p2, options)(str));
    };
    micromatch.capture = (glob, input, options) => {
      let posix = utils.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v2) => v2 === void 0 ? "" : v2);
      }
    };
    micromatch.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch.scan = (...args) => picomatch.scan(...args);
    micromatch.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch.braces = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !hasBraces(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      return micromatch.braces(pattern, { ...options, expand: true });
    };
    micromatch.hasBraces = hasBraces;
    module3.exports = micromatch;
  }
});

// node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS({
  "node_modules/fast-glob/out/utils/pattern.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeDuplicateSlashes = exports2.matchAny = exports2.convertPatternsToRe = exports2.makeRe = exports2.getPatternParts = exports2.expandBraceExpansion = exports2.expandPatternsWithBraceExpansion = exports2.isAffectDepthOfReadingPattern = exports2.endsWithSlashGlobStar = exports2.hasGlobStar = exports2.getBaseDirectory = exports2.isPatternRelatedToParentDirectory = exports2.getPatternsOutsideCurrentDirectory = exports2.getPatternsInsideCurrentDirectory = exports2.getPositivePatterns = exports2.getNegativePatterns = exports2.isPositivePattern = exports2.isNegativePattern = exports2.convertToNegativePattern = exports2.convertToPositivePattern = exports2.isDynamicPattern = exports2.isStaticPattern = void 0;
    var path2 = require_path();
    var globParent = require_glob_parent();
    var micromatch = require_micromatch();
    var GLOBSTAR = "**";
    var ESCAPE_SYMBOL = "\\";
    var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
    var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
    var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
    var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
    var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
    var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
    function isStaticPattern(pattern, options = {}) {
      return !isDynamicPattern2(pattern, options);
    }
    exports2.isStaticPattern = isStaticPattern;
    function isDynamicPattern2(pattern, options = {}) {
      if (pattern === "") {
        return false;
      }
      if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
        return true;
      }
      if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
        return true;
      }
      return false;
    }
    exports2.isDynamicPattern = isDynamicPattern2;
    function hasBraceExpansion(pattern) {
      const openingBraceIndex = pattern.indexOf("{");
      if (openingBraceIndex === -1) {
        return false;
      }
      const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
      if (closingBraceIndex === -1) {
        return false;
      }
      const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
      return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
    }
    function convertToPositivePattern(pattern) {
      return isNegativePattern2(pattern) ? pattern.slice(1) : pattern;
    }
    exports2.convertToPositivePattern = convertToPositivePattern;
    function convertToNegativePattern(pattern) {
      return "!" + pattern;
    }
    exports2.convertToNegativePattern = convertToNegativePattern;
    function isNegativePattern2(pattern) {
      return pattern.startsWith("!") && pattern[1] !== "(";
    }
    exports2.isNegativePattern = isNegativePattern2;
    function isPositivePattern(pattern) {
      return !isNegativePattern2(pattern);
    }
    exports2.isPositivePattern = isPositivePattern;
    function getNegativePatterns(patterns) {
      return patterns.filter(isNegativePattern2);
    }
    exports2.getNegativePatterns = getNegativePatterns;
    function getPositivePatterns(patterns) {
      return patterns.filter(isPositivePattern);
    }
    exports2.getPositivePatterns = getPositivePatterns;
    function getPatternsInsideCurrentDirectory(patterns) {
      return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
    }
    exports2.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
    function getPatternsOutsideCurrentDirectory(patterns) {
      return patterns.filter(isPatternRelatedToParentDirectory);
    }
    exports2.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
    function isPatternRelatedToParentDirectory(pattern) {
      return pattern.startsWith("..") || pattern.startsWith("./..");
    }
    exports2.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
    function getBaseDirectory(pattern) {
      return globParent(pattern, { flipBackslashes: false });
    }
    exports2.getBaseDirectory = getBaseDirectory;
    function hasGlobStar(pattern) {
      return pattern.includes(GLOBSTAR);
    }
    exports2.hasGlobStar = hasGlobStar;
    function endsWithSlashGlobStar(pattern) {
      return pattern.endsWith("/" + GLOBSTAR);
    }
    exports2.endsWithSlashGlobStar = endsWithSlashGlobStar;
    function isAffectDepthOfReadingPattern(pattern) {
      const basename4 = path2.basename(pattern);
      return endsWithSlashGlobStar(pattern) || isStaticPattern(basename4);
    }
    exports2.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
    function expandPatternsWithBraceExpansion(patterns) {
      return patterns.reduce((collection, pattern) => {
        return collection.concat(expandBraceExpansion(pattern));
      }, []);
    }
    exports2.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
    function expandBraceExpansion(pattern) {
      const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
      patterns.sort((a2, b) => a2.length - b.length);
      return patterns.filter((pattern2) => pattern2 !== "");
    }
    exports2.expandBraceExpansion = expandBraceExpansion;
    function getPatternParts(pattern, options) {
      let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
      if (parts.length === 0) {
        parts = [pattern];
      }
      if (parts[0].startsWith("/")) {
        parts[0] = parts[0].slice(1);
        parts.unshift("");
      }
      return parts;
    }
    exports2.getPatternParts = getPatternParts;
    function makeRe(pattern, options) {
      return micromatch.makeRe(pattern, options);
    }
    exports2.makeRe = makeRe;
    function convertPatternsToRe(patterns, options) {
      return patterns.map((pattern) => makeRe(pattern, options));
    }
    exports2.convertPatternsToRe = convertPatternsToRe;
    function matchAny(entry, patternsRe) {
      return patternsRe.some((patternRe) => patternRe.test(entry));
    }
    exports2.matchAny = matchAny;
    function removeDuplicateSlashes(pattern) {
      return pattern.replace(DOUBLE_SLASH_RE, "/");
    }
    exports2.removeDuplicateSlashes = removeDuplicateSlashes;
  }
});

// node_modules/merge2/index.js
var require_merge2 = __commonJS({
  "node_modules/merge2/index.js"(exports2, module3) {
    "use strict";
    var Stream = require_stream();
    var PassThrough = Stream.PassThrough;
    var slice = Array.prototype.slice;
    module3.exports = merge2;
    function merge2() {
      const streamsQueue = [];
      const args = slice.call(arguments);
      let merging = false;
      let options = args[args.length - 1];
      if (options && !Array.isArray(options) && options.pipe == null) {
        args.pop();
      } else {
        options = {};
      }
      const doEnd = options.end !== false;
      const doPipeError = options.pipeError === true;
      if (options.objectMode == null) {
        options.objectMode = true;
      }
      if (options.highWaterMark == null) {
        options.highWaterMark = 64 * 1024;
      }
      const mergedStream = PassThrough(options);
      function addStream() {
        for (let i2 = 0, len = arguments.length; i2 < len; i2++) {
          streamsQueue.push(pauseStreams(arguments[i2], options));
        }
        mergeStream();
        return this;
      }
      function mergeStream() {
        if (merging) {
          return;
        }
        merging = true;
        let streams = streamsQueue.shift();
        if (!streams) {
          process.nextTick(endStream2);
          return;
        }
        if (!Array.isArray(streams)) {
          streams = [streams];
        }
        let pipesCount = streams.length + 1;
        function next() {
          if (--pipesCount > 0) {
            return;
          }
          merging = false;
          mergeStream();
        }
        function pipe(stream) {
          function onend() {
            stream.removeListener("merge2UnpipeEnd", onend);
            stream.removeListener("end", onend);
            if (doPipeError) {
              stream.removeListener("error", onerror);
            }
            next();
          }
          function onerror(err) {
            mergedStream.emit("error", err);
          }
          if (stream._readableState.endEmitted) {
            return next();
          }
          stream.on("merge2UnpipeEnd", onend);
          stream.on("end", onend);
          if (doPipeError) {
            stream.on("error", onerror);
          }
          stream.pipe(mergedStream, { end: false });
          stream.resume();
        }
        for (let i2 = 0; i2 < streams.length; i2++) {
          pipe(streams[i2]);
        }
        next();
      }
      function endStream2() {
        merging = false;
        mergedStream.emit("queueDrain");
        if (doEnd) {
          mergedStream.end();
        }
      }
      mergedStream.setMaxListeners(0);
      mergedStream.add = addStream;
      mergedStream.on("unpipe", function(stream) {
        stream.emit("merge2UnpipeEnd");
      });
      if (args.length) {
        addStream.apply(null, args);
      }
      return mergedStream;
    }
    function pauseStreams(streams, options) {
      if (!Array.isArray(streams)) {
        if (!streams._readableState && streams.pipe) {
          streams = streams.pipe(PassThrough(options));
        }
        if (!streams._readableState || !streams.pause || !streams.pipe) {
          throw new Error("Only readable stream can be merged.");
        }
        streams.pause();
      } else {
        for (let i2 = 0, len = streams.length; i2 < len; i2++) {
          streams[i2] = pauseStreams(streams[i2], options);
        }
      }
      return streams;
    }
  }
});

// node_modules/fast-glob/out/utils/stream.js
var require_stream2 = __commonJS({
  "node_modules/fast-glob/out/utils/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.merge = void 0;
    var merge2 = require_merge2();
    function merge(streams) {
      const mergedStream = merge2(streams);
      streams.forEach((stream) => {
        stream.once("error", (error) => mergedStream.emit("error", error));
      });
      mergedStream.once("close", () => propagateCloseEventToSources(streams));
      mergedStream.once("end", () => propagateCloseEventToSources(streams));
      return mergedStream;
    }
    exports2.merge = merge;
    function propagateCloseEventToSources(streams) {
      streams.forEach((stream) => stream.emit("close"));
    }
  }
});

// node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS({
  "node_modules/fast-glob/out/utils/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmpty = exports2.isString = void 0;
    function isString2(input) {
      return typeof input === "string";
    }
    exports2.isString = isString2;
    function isEmpty(input) {
      return input === "";
    }
    exports2.isEmpty = isEmpty;
  }
});

// node_modules/fast-glob/out/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/fast-glob/out/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.string = exports2.stream = exports2.pattern = exports2.path = exports2.fs = exports2.errno = exports2.array = void 0;
    var array = require_array();
    exports2.array = array;
    var errno = require_errno();
    exports2.errno = errno;
    var fs4 = require_fs2();
    exports2.fs = fs4;
    var path2 = require_path2();
    exports2.path = path2;
    var pattern = require_pattern();
    exports2.pattern = pattern;
    var stream = require_stream2();
    exports2.stream = stream;
    var string = require_string();
    exports2.string = string;
  }
});

// node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS({
  "node_modules/fast-glob/out/managers/tasks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertPatternGroupToTask = exports2.convertPatternGroupsToTasks = exports2.groupPatternsByBaseDirectory = exports2.getNegativePatternsAsPositive = exports2.getPositivePatterns = exports2.convertPatternsToTasks = exports2.generate = void 0;
    var utils = require_utils3();
    function generate2(input, settings) {
      const patterns = processPatterns(input, settings);
      const ignore = processPatterns(settings.ignore, settings);
      const positivePatterns = getPositivePatterns(patterns);
      const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
      const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
      const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
      const staticTasks = convertPatternsToTasks(
        staticPatterns,
        negativePatterns,
        /* dynamic */
        false
      );
      const dynamicTasks = convertPatternsToTasks(
        dynamicPatterns,
        negativePatterns,
        /* dynamic */
        true
      );
      return staticTasks.concat(dynamicTasks);
    }
    exports2.generate = generate2;
    function processPatterns(input, settings) {
      let patterns = input;
      if (settings.braceExpansion) {
        patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
      }
      if (settings.baseNameMatch) {
        patterns = patterns.map((pattern) => pattern.includes("/") ? pattern : `**/${pattern}`);
      }
      return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
    }
    function convertPatternsToTasks(positive, negative, dynamic) {
      const tasks = [];
      const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
      const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
      const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
      const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
      tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
      if ("." in insideCurrentDirectoryGroup) {
        tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
      } else {
        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
      }
      return tasks;
    }
    exports2.convertPatternsToTasks = convertPatternsToTasks;
    function getPositivePatterns(patterns) {
      return utils.pattern.getPositivePatterns(patterns);
    }
    exports2.getPositivePatterns = getPositivePatterns;
    function getNegativePatternsAsPositive(patterns, ignore) {
      const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
      const positive = negative.map(utils.pattern.convertToPositivePattern);
      return positive;
    }
    exports2.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
    function groupPatternsByBaseDirectory(patterns) {
      const group = {};
      return patterns.reduce((collection, pattern) => {
        const base = utils.pattern.getBaseDirectory(pattern);
        if (base in collection) {
          collection[base].push(pattern);
        } else {
          collection[base] = [pattern];
        }
        return collection;
      }, group);
    }
    exports2.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
    function convertPatternGroupsToTasks(positive, negative, dynamic) {
      return Object.keys(positive).map((base) => {
        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
      });
    }
    exports2.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
    function convertPatternGroupToTask(base, positive, negative, dynamic) {
      return {
        dynamic,
        positive,
        negative,
        base,
        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
      };
    }
    exports2.convertPatternGroupToTask = convertPatternGroupToTask;
  }
});

// node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS({
  "node_modules/@nodelib/fs.stat/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read2(path2, settings, callback) {
      settings.fs.lstat(path2, (lstatError, lstat) => {
        if (lstatError !== null) {
          callFailureCallback(callback, lstatError);
          return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          callSuccessCallback(callback, lstat);
          return;
        }
        settings.fs.stat(path2, (statError, stat) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              callFailureCallback(callback, statError);
              return;
            }
            callSuccessCallback(callback, lstat);
            return;
          }
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          callSuccessCallback(callback, stat);
        });
      });
    }
    exports2.read = read2;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS({
  "node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read2(path2, settings) {
      const lstat = settings.fs.lstatSync(path2);
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
      }
      try {
        const stat = settings.fs.statSync(path2);
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        return stat;
      } catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
          return lstat;
        }
        throw error;
      }
    }
    exports2.read = read2;
  }
});

// node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs3 = __commonJS({
  "node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = require_fs();
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      stat: fs4.stat,
      lstatSync: fs4.lstatSync,
      statSync: fs4.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS({
  "node_modules/@nodelib/fs.stat/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs4 = require_fs3();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs4.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS({
  "node_modules/@nodelib/fs.stat/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statSync = exports2.stat = exports2.Settings = void 0;
    var async = require_async();
    var sync = require_sync();
    var settings_1 = require_settings();
    exports2.Settings = settings_1.default;
    function stat(path2, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path2, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.stat = stat;
    function statSync(path2, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path2, settings);
    }
    exports2.statSync = statSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "node_modules/queue-microtask/index.js"(exports2, module3) {
    var promise;
    module3.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// node_modules/run-parallel/index.js
var require_run_parallel = __commonJS({
  "node_modules/run-parallel/index.js"(exports2, module3) {
    module3.exports = runParallel;
    var queueMicrotask2 = require_queue_microtask();
    function runParallel(tasks, cb) {
      let results, pending, keys2;
      let isSync = true;
      if (Array.isArray(tasks)) {
        results = [];
        pending = tasks.length;
      } else {
        keys2 = Object.keys(tasks);
        results = {};
        pending = keys2.length;
      }
      function done(err) {
        function end() {
          if (cb) cb(err, results);
          cb = null;
        }
        if (isSync) queueMicrotask2(end);
        else end();
      }
      function each(i2, err, result) {
        results[i2] = result;
        if (--pending === 0 || err) {
          done(err);
        }
      }
      if (!pending) {
        done(null);
      } else if (keys2) {
        keys2.forEach(function(key) {
          tasks[key](function(err, result) {
            each(key, err, result);
          });
        });
      } else {
        tasks.forEach(function(task, i2) {
          task(function(err, result) {
            each(i2, err, result);
          });
        });
      }
      isSync = false;
    }
  }
});

// node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants4 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
    var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
    if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
      throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
    }
    var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
    var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
    var SUPPORTED_MAJOR_VERSION = 10;
    var SUPPORTED_MINOR_VERSION = 10;
    var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
    var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  }
});

// node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs4 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports2.createDirentFromStats = createDirentFromStats;
  }
});

// node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils4 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fs = void 0;
    var fs4 = require_fs4();
    exports2.fs = fs4;
  }
});

// node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = void 0;
    function joinPathSegments(a2, b, separator) {
      if (a2.endsWith(separator)) {
        return a2 + b;
      }
      return a2 + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var rpl = require_run_parallel();
    var constants_1 = require_constants4();
    var utils = require_utils4();
    var common2 = require_common();
    function read2(directory, settings, callback) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
      }
      readdir2(directory, settings, callback);
    }
    exports2.read = read2;
    function readdirWithFileTypes(directory, settings, callback) {
      settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: common2.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
          callSuccessCallback(callback, entries);
          return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, rplEntries);
        });
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function makeRplTaskEntry(entry, settings) {
      return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
          done(null, entry);
          return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              done(statError);
              return;
            }
            done(null, entry);
            return;
          }
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          done(null, entry);
        });
      };
    }
    function readdir2(directory, settings, callback) {
      settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const tasks = names.map((name) => {
          const path2 = common2.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          return (done) => {
            fsStat.stat(path2, settings.fsStatSettings, (error, stats) => {
              if (error !== null) {
                done(error);
                return;
              }
              const entry = {
                name,
                path: path2,
                dirent: utils.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              done(null, entry);
            });
          };
        });
        rpl(tasks, (rplError, entries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, entries);
        });
      });
    }
    exports2.readdir = readdir2;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var constants_1 = require_constants4();
    var utils = require_utils4();
    var common2 = require_common();
    function read2(directory, settings) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
      }
      return readdir2(directory, settings);
    }
    exports2.read = read2;
    function readdirWithFileTypes(directory, settings) {
      const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
      return dirents.map((dirent) => {
        const entry = {
          dirent,
          name: dirent.name,
          path: common2.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
          try {
            const stats = settings.fs.statSync(entry.path);
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          } catch (error) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              throw error;
            }
          }
        }
        return entry;
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function readdir2(directory, settings) {
      const names = settings.fs.readdirSync(directory);
      return names.map((name) => {
        const entryPath = common2.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
          name,
          path: entryPath,
          dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
          entry.stats = stats;
        }
        return entry;
      });
    }
    exports2.readdir = readdir2;
  }
});

// node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs5 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = require_fs();
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      stat: fs4.stat,
      lstatSync: fs4.lstatSync,
      statSync: fs4.statSync,
      readdir: fs4.readdir,
      readdirSync: fs4.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path2 = require_path();
    var fsStat = require_out();
    var fs4 = require_fs5();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs4.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this.followSymbolicLinks,
          fs: this.fs,
          throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS({
  "node_modules/@nodelib/fs.scandir/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.scandirSync = exports2.scandir = void 0;
    var async = require_async2();
    var sync = require_sync2();
    var settings_1 = require_settings2();
    exports2.Settings = settings_1.default;
    function scandir(path2, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path2, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.scandir = scandir;
    function scandirSync(path2, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path2, settings);
    }
    exports2.scandirSync = scandirSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/reusify/reusify.js
var require_reusify = __commonJS({
  "node_modules/reusify/reusify.js"(exports2, module3) {
    "use strict";
    function reusify(Constructor) {
      var head = new Constructor();
      var tail = head;
      function get() {
        var current = head;
        if (current.next) {
          head = current.next;
        } else {
          head = new Constructor();
          tail = head;
        }
        current.next = null;
        return current;
      }
      function release(obj) {
        tail.next = obj;
        tail = obj;
      }
      return {
        get,
        release
      };
    }
    module3.exports = reusify;
  }
});

// node_modules/fastq/queue.js
var require_queue = __commonJS({
  "node_modules/fastq/queue.js"(exports2, module3) {
    "use strict";
    var reusify = require_reusify();
    function fastqueue(context, worker, _concurrency) {
      if (typeof context === "function") {
        _concurrency = worker;
        worker = context;
        context = null;
      }
      if (!(_concurrency >= 1)) {
        throw new Error("fastqueue concurrency must be equal to or greater than 1");
      }
      var cache = reusify(Task);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler = null;
      var self2 = {
        push,
        drain: noop2,
        saturated: noop2,
        pause,
        paused: false,
        get concurrency() {
          return _concurrency;
        },
        set concurrency(value2) {
          if (!(value2 >= 1)) {
            throw new Error("fastqueue concurrency must be equal to or greater than 1");
          }
          _concurrency = value2;
          if (self2.paused) return;
          for (; queueHead && _running < _concurrency; ) {
            _running++;
            release();
          }
        },
        running,
        resume,
        idle,
        length,
        getQueue,
        unshift,
        empty: noop2,
        kill,
        killAndDrain,
        error
      };
      return self2;
      function running() {
        return _running;
      }
      function pause() {
        self2.paused = true;
      }
      function length() {
        var current = queueHead;
        var counter = 0;
        while (current) {
          current = current.next;
          counter++;
        }
        return counter;
      }
      function getQueue() {
        var current = queueHead;
        var tasks = [];
        while (current) {
          tasks.push(current.value);
          current = current.next;
        }
        return tasks;
      }
      function resume() {
        if (!self2.paused) return;
        self2.paused = false;
        if (queueHead === null) {
          _running++;
          release();
          return;
        }
        for (; queueHead && _running < _concurrency; ) {
          _running++;
          release();
        }
      }
      function idle() {
        return _running === 0 && self2.length() === 0;
      }
      function push(value2, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value2;
        current.callback = done || noop2;
        current.errorHandler = errorHandler;
        if (_running >= _concurrency || self2.paused) {
          if (queueTail) {
            queueTail.next = current;
            queueTail = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function unshift(value2, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value2;
        current.callback = done || noop2;
        current.errorHandler = errorHandler;
        if (_running >= _concurrency || self2.paused) {
          if (queueHead) {
            current.next = queueHead;
            queueHead = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function release(holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next && _running <= _concurrency) {
          if (!self2.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context, next.value, next.worked);
            if (queueTail === null) {
              self2.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self2.drain();
        }
      }
      function kill() {
        queueHead = null;
        queueTail = null;
        self2.drain = noop2;
      }
      function killAndDrain() {
        queueHead = null;
        queueTail = null;
        self2.drain();
        self2.drain = noop2;
      }
      function error(handler) {
        errorHandler = handler;
      }
    }
    function noop2() {
    }
    function Task() {
      this.value = null;
      this.callback = noop2;
      this.next = null;
      this.release = noop2;
      this.context = null;
      this.errorHandler = null;
      var self2 = this;
      this.worked = function worked(err, result) {
        var callback = self2.callback;
        var errorHandler = self2.errorHandler;
        var val = self2.value;
        self2.value = null;
        self2.callback = noop2;
        if (self2.errorHandler) {
          errorHandler(err, val);
        }
        callback.call(self2.context, err, result);
        self2.release(self2);
      };
    }
    function queueAsPromised(context, worker, _concurrency) {
      if (typeof context === "function") {
        _concurrency = worker;
        worker = context;
        context = null;
      }
      function asyncWrapper(arg, cb) {
        worker.call(this, arg).then(function(res) {
          cb(null, res);
        }, cb);
      }
      var queue = fastqueue(context, asyncWrapper, _concurrency);
      var pushCb = queue.push;
      var unshiftCb = queue.unshift;
      queue.push = push;
      queue.unshift = unshift;
      queue.drained = drained;
      return queue;
      function push(value2) {
        var p2 = new Promise(function(resolve7, reject) {
          pushCb(value2, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve7(result);
          });
        });
        p2.catch(noop2);
        return p2;
      }
      function unshift(value2) {
        var p2 = new Promise(function(resolve7, reject) {
          unshiftCb(value2, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve7(result);
          });
        });
        p2.catch(noop2);
        return p2;
      }
      function drained() {
        var p2 = new Promise(function(resolve7) {
          process.nextTick(function() {
            if (queue.idle()) {
              resolve7();
            } else {
              var previousDrain = queue.drain;
              queue.drain = function() {
                if (typeof previousDrain === "function") previousDrain();
                resolve7();
                queue.drain = previousDrain;
              };
            }
          });
        });
        return p2;
      }
    }
    module3.exports = fastqueue;
    module3.exports.promise = queueAsPromised;
  }
});

// node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/readers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = exports2.replacePathSegmentSeparator = exports2.isAppliedFilter = exports2.isFatalError = void 0;
    function isFatalError(settings, error) {
      if (settings.errorFilter === null) {
        return true;
      }
      return !settings.errorFilter(error);
    }
    exports2.isFatalError = isFatalError;
    function isAppliedFilter(filter, value2) {
      return filter === null || filter(value2);
    }
    exports2.isAppliedFilter = isAppliedFilter;
    function replacePathSegmentSeparator(filepath, separator) {
      return filepath.split(/[/\\]/).join(separator);
    }
    exports2.replacePathSegmentSeparator = replacePathSegmentSeparator;
    function joinPathSegments(a2, b, separator) {
      if (a2 === "") {
        return b;
      }
      if (a2.endsWith(separator)) {
        return a2 + b;
      }
      return a2 + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS({
  "node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var common2 = require_common2();
    var Reader = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common2.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
      }
    };
    exports2.default = Reader;
  }
});

// node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/readers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var events_1 = require_events();
    var fsScandir = require_out2();
    var fastq = require_queue();
    var common2 = require_common2();
    var reader_1 = require_reader();
    var AsyncReader = class extends reader_1.default {
      constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
          if (!this._isFatalError) {
            this._emitter.emit("end");
          }
        };
      }
      read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
          this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed) {
          throw new Error("The reader is already destroyed");
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
      }
      onEntry(callback) {
        this._emitter.on("entry", callback);
      }
      onError(callback) {
        this._emitter.once("error", callback);
      }
      onEnd(callback) {
        this._emitter.once("end", callback);
      }
      _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
          if (error !== null) {
            this._handleError(error);
          }
        });
      }
      _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
          if (error !== null) {
            done(error, void 0);
            return;
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base);
          }
          done(null, void 0);
        });
      }
      _handleError(error) {
        if (this._isDestroyed || !common2.isFatalError(this._settings, error)) {
          return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit("error", error);
      }
      _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
          return;
        }
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common2.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common2.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _emitEntry(entry) {
        this._emitter.emit("entry", entry);
      }
    };
    exports2.default = AsyncReader;
  }
});

// node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var async_1 = require_async3();
    var AsyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
      }
      read(callback) {
        this._reader.onError((error) => {
          callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
          this._storage.push(entry);
        });
        this._reader.onEnd(() => {
          callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
      }
    };
    exports2.default = AsyncProvider;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, entries) {
      callback(null, entries);
    }
  }
});

// node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream3 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require_stream();
    var async_1 = require_async3();
    var StreamProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
          objectMode: true,
          read: () => {
          },
          destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          }
        });
      }
      read() {
        this._reader.onError((error) => {
          this._stream.emit("error", error);
        });
        this._reader.onEntry((entry) => {
          this._stream.push(entry);
        });
        this._reader.onEnd(() => {
          this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
      }
    };
    exports2.default = StreamProvider;
  }
});

// node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsScandir = require_out2();
    var common2 = require_common2();
    var reader_1 = require_reader();
    var SyncReader = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = /* @__PURE__ */ new Set();
      }
      read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
      }
      _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
      }
      _handleQueue() {
        for (const item of this._queue.values()) {
          this._handleDirectory(item.directory, item.base);
        }
      }
      _handleDirectory(directory, base) {
        try {
          const entries = this._scandir(directory, this._settings.fsScandirSettings);
          for (const entry of entries) {
            this._handleEntry(entry, base);
          }
        } catch (error) {
          this._handleError(error);
        }
      }
      _handleError(error) {
        if (!common2.isFatalError(this._settings, error)) {
          return;
        }
        throw error;
      }
      _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common2.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common2.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _pushToStorage(entry) {
        this._storage.push(entry);
      }
    };
    exports2.default = SyncReader;
  }
});

// node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var sync_1 = require_sync3();
    var SyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
      }
      read() {
        return this._reader.read();
      }
    };
    exports2.default = SyncProvider;
  }
});

// node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path2 = require_path();
    var fsScandir = require_out2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, void 0);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
        this.fsScandirSettings = new fsScandir.Settings({
          followSymbolicLinks: this._options.followSymbolicLinks,
          fs: this._options.fs,
          pathSegmentSeparator: this._options.pathSegmentSeparator,
          stats: this._options.stats,
          throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS({
  "node_modules/@nodelib/fs.walk/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.walkStream = exports2.walkSync = exports2.walk = void 0;
    var async_1 = require_async4();
    var stream_1 = require_stream3();
    var sync_1 = require_sync4();
    var settings_1 = require_settings3();
    exports2.Settings = settings_1.default;
    function walk(directory, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
      }
      new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
    }
    exports2.walk = walk;
    function walkSync(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new sync_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkSync = walkSync;
    function walkStream(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new stream_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkStream = walkStream;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/fast-glob/out/readers/reader.js
var require_reader2 = __commonJS({
  "node_modules/fast-glob/out/readers/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path2 = require_path();
    var fsStat = require_out();
    var utils = require_utils3();
    var Reader = class {
      constructor(_settings) {
        this._settings = _settings;
        this._fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
        });
      }
      _getFullEntryPath(filepath) {
        return path2.resolve(this._settings.cwd, filepath);
      }
      _makeEntry(stats, pattern) {
        const entry = {
          name: pattern,
          path: pattern,
          dirent: utils.fs.createDirentFromStats(pattern, stats)
        };
        if (this._settings.stats) {
          entry.stats = stats;
        }
        return entry;
      }
      _isFatalError(error) {
        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
      }
    };
    exports2.default = Reader;
  }
});

// node_modules/fast-glob/out/readers/stream.js
var require_stream4 = __commonJS({
  "node_modules/fast-glob/out/readers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require_stream();
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderStream = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkStream = fsWalk.walkStream;
        this._stat = fsStat.stat;
      }
      dynamic(root2, options) {
        return this._walkStream(root2, options);
      }
      static(patterns, options) {
        const filepaths = patterns.map(this._getFullEntryPath, this);
        const stream = new stream_1.PassThrough({ objectMode: true });
        stream._write = (index2, _enc, done) => {
          return this._getEntry(filepaths[index2], patterns[index2], options).then((entry) => {
            if (entry !== null && options.entryFilter(entry)) {
              stream.push(entry);
            }
            if (index2 === filepaths.length - 1) {
              stream.end();
            }
            done();
          }).catch(done);
        };
        for (let i2 = 0; i2 < filepaths.length; i2++) {
          stream.write(i2);
        }
        return stream;
      }
      _getEntry(filepath, pattern, options) {
        return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        });
      }
      _getStat(filepath) {
        return new Promise((resolve7, reject) => {
          this._stat(filepath, this._fsStatSettings, (error, stats) => {
            return error === null ? resolve7(stats) : reject(error);
          });
        });
      }
    };
    exports2.default = ReaderStream;
  }
});

// node_modules/fast-glob/out/readers/async.js
var require_async5 = __commonJS({
  "node_modules/fast-glob/out/readers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var stream_1 = require_stream4();
    var ReaderAsync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkAsync = fsWalk.walk;
        this._readerStream = new stream_1.default(this._settings);
      }
      dynamic(root2, options) {
        return new Promise((resolve7, reject) => {
          this._walkAsync(root2, options, (error, entries) => {
            if (error === null) {
              resolve7(entries);
            } else {
              reject(error);
            }
          });
        });
      }
      async static(patterns, options) {
        const entries = [];
        const stream = this._readerStream.static(patterns, options);
        return new Promise((resolve7, reject) => {
          stream.once("error", reject);
          stream.on("data", (entry) => entries.push(entry));
          stream.once("end", () => resolve7(entries));
        });
      }
    };
    exports2.default = ReaderAsync;
  }
});

// node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS({
  "node_modules/fast-glob/out/providers/matchers/matcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var Matcher = class {
      constructor(_patterns, _settings, _micromatchOptions) {
        this._patterns = _patterns;
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this._storage = [];
        this._fillStorage();
      }
      _fillStorage() {
        for (const pattern of this._patterns) {
          const segments = this._getPatternSegments(pattern);
          const sections = this._splitSegmentsIntoSections(segments);
          this._storage.push({
            complete: sections.length <= 1,
            pattern,
            segments,
            sections
          });
        }
      }
      _getPatternSegments(pattern) {
        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
        return parts.map((part) => {
          const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
          if (!dynamic) {
            return {
              dynamic: false,
              pattern: part
            };
          }
          return {
            dynamic: true,
            pattern: part,
            patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
          };
        });
      }
      _splitSegmentsIntoSections(segments) {
        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
      }
    };
    exports2.default = Matcher;
  }
});

// node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS({
  "node_modules/fast-glob/out/providers/matchers/partial.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var matcher_1 = require_matcher();
    var PartialMatcher = class extends matcher_1.default {
      match(filepath) {
        const parts = filepath.split("/");
        const levels = parts.length;
        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
        for (const pattern of patterns) {
          const section = pattern.sections[0];
          if (!pattern.complete && levels > section.length) {
            return true;
          }
          const match = parts.every((part, index2) => {
            const segment = pattern.segments[index2];
            if (segment.dynamic && segment.patternRe.test(part)) {
              return true;
            }
            if (!segment.dynamic && segment.pattern === part) {
              return true;
            }
            return false;
          });
          if (match) {
            return true;
          }
        }
        return false;
      }
    };
    exports2.default = PartialMatcher;
  }
});

// node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS({
  "node_modules/fast-glob/out/providers/filters/deep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var partial_1 = require_partial();
    var DeepFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
      }
      getFilter(basePath, positive, negative) {
        const matcher = this._getMatcher(positive);
        const negativeRe = this._getNegativePatternsRe(negative);
        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
      }
      _getMatcher(patterns) {
        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
      }
      _getNegativePatternsRe(patterns) {
        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
      }
      _filter(basePath, entry, matcher, negativeRe) {
        if (this._isSkippedByDeep(basePath, entry.path)) {
          return false;
        }
        if (this._isSkippedSymbolicLink(entry)) {
          return false;
        }
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
          return false;
        }
        return this._isSkippedByNegativePatterns(filepath, negativeRe);
      }
      _isSkippedByDeep(basePath, entryPath) {
        if (this._settings.deep === Infinity) {
          return false;
        }
        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
      }
      _getEntryLevel(basePath, entryPath) {
        const entryPathDepth = entryPath.split("/").length;
        if (basePath === "") {
          return entryPathDepth;
        }
        const basePathDepth = basePath.split("/").length;
        return entryPathDepth - basePathDepth;
      }
      _isSkippedSymbolicLink(entry) {
        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
      }
      _isSkippedByPositivePatterns(entryPath, matcher) {
        return !this._settings.baseNameMatch && !matcher.match(entryPath);
      }
      _isSkippedByNegativePatterns(entryPath, patternsRe) {
        return !utils.pattern.matchAny(entryPath, patternsRe);
      }
    };
    exports2.default = DeepFilter;
  }
});

// node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = __commonJS({
  "node_modules/fast-glob/out/providers/filters/entry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = /* @__PURE__ */ new Map();
      }
      getFilter(positive, negative) {
        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
        return (entry) => this._filter(entry, positiveRe, negativeRe);
      }
      _filter(entry, positiveRe, negativeRe) {
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._settings.unique && this._isDuplicateEntry(filepath)) {
          return false;
        }
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
          return false;
        }
        if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
          return false;
        }
        const isDirectory3 = entry.dirent.isDirectory();
        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory3) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory3);
        if (this._settings.unique && isMatched) {
          this._createIndexRecord(filepath);
        }
        return isMatched;
      }
      _isDuplicateEntry(filepath) {
        return this.index.has(filepath);
      }
      _createIndexRecord(filepath) {
        this.index.set(filepath, void 0);
      }
      _onlyFileFilter(entry) {
        return this._settings.onlyFiles && !entry.dirent.isFile();
      }
      _onlyDirectoryFilter(entry) {
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
      }
      _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
        if (!this._settings.absolute) {
          return false;
        }
        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils.pattern.matchAny(fullpath, patternsRe);
      }
      _isMatchToPatterns(filepath, patternsRe, isDirectory3) {
        const isMatched = utils.pattern.matchAny(filepath, patternsRe);
        if (!isMatched && isDirectory3) {
          return utils.pattern.matchAny(filepath + "/", patternsRe);
        }
        return isMatched;
      }
    };
    exports2.default = EntryFilter;
  }
});

// node_modules/fast-glob/out/providers/filters/error.js
var require_error = __commonJS({
  "node_modules/fast-glob/out/providers/filters/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var ErrorFilter = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getFilter() {
        return (error) => this._isNonFatalError(error);
      }
      _isNonFatalError(error) {
        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
      }
    };
    exports2.default = ErrorFilter;
  }
});

// node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = __commonJS({
  "node_modules/fast-glob/out/providers/transformers/entry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryTransformer = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getTransformer() {
        return (entry) => this._transform(entry);
      }
      _transform(entry) {
        let filepath = entry.path;
        if (this._settings.absolute) {
          filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
          filepath = utils.path.unixify(filepath);
        }
        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
          filepath += "/";
        }
        if (!this._settings.objectMode) {
          return filepath;
        }
        return Object.assign(Object.assign({}, entry), { path: filepath });
      }
    };
    exports2.default = EntryTransformer;
  }
});

// node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS({
  "node_modules/fast-glob/out/providers/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path2 = require_path();
    var deep_1 = require_deep();
    var entry_1 = require_entry();
    var error_1 = require_error();
    var entry_2 = require_entry2();
    var Provider = class {
      constructor(_settings) {
        this._settings = _settings;
        this.errorFilter = new error_1.default(this._settings);
        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
        this.entryTransformer = new entry_2.default(this._settings);
      }
      _getRootDirectory(task) {
        return path2.resolve(this._settings.cwd, task.base);
      }
      _getReaderOptions(task) {
        const basePath = task.base === "." ? "" : task.base;
        return {
          basePath,
          pathSegmentSeparator: "/",
          concurrency: this._settings.concurrency,
          deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
          entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
          errorFilter: this.errorFilter.getFilter(),
          followSymbolicLinks: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          stats: this._settings.stats,
          throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
          transform: this.entryTransformer.getTransformer()
        };
      }
      _getMicromatchOptions() {
        return {
          dot: this._settings.dot,
          matchBase: this._settings.baseNameMatch,
          nobrace: !this._settings.braceExpansion,
          nocase: !this._settings.caseSensitiveMatch,
          noext: !this._settings.extglob,
          noglobstar: !this._settings.globstar,
          posix: true,
          strictSlashes: false
        };
      }
    };
    exports2.default = Provider;
  }
});

// node_modules/fast-glob/out/providers/async.js
var require_async6 = __commonJS({
  "node_modules/fast-glob/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var async_1 = require_async5();
    var provider_1 = require_provider();
    var ProviderAsync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new async_1.default(this._settings);
      }
      async read(task) {
        const root2 = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = await this.api(root2, task, options);
        return entries.map((entry) => options.transform(entry));
      }
      api(root2, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root2, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderAsync;
  }
});

// node_modules/fast-glob/out/providers/stream.js
var require_stream5 = __commonJS({
  "node_modules/fast-glob/out/providers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require_stream();
    var stream_2 = require_stream4();
    var provider_1 = require_provider();
    var ProviderStream = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new stream_2.default(this._settings);
      }
      read(task) {
        const root2 = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const source = this.api(root2, task, options);
        const destination = new stream_1.Readable({ objectMode: true, read: () => {
        } });
        source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
        destination.once("close", () => source.destroy());
        return destination;
      }
      api(root2, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root2, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderStream;
  }
});

// node_modules/fast-glob/out/readers/sync.js
var require_sync5 = __commonJS({
  "node_modules/fast-glob/out/readers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderSync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkSync = fsWalk.walkSync;
        this._statSync = fsStat.statSync;
      }
      dynamic(root2, options) {
        return this._walkSync(root2, options);
      }
      static(patterns, options) {
        const entries = [];
        for (const pattern of patterns) {
          const filepath = this._getFullEntryPath(pattern);
          const entry = this._getEntry(filepath, pattern, options);
          if (entry === null || !options.entryFilter(entry)) {
            continue;
          }
          entries.push(entry);
        }
        return entries;
      }
      _getEntry(filepath, pattern, options) {
        try {
          const stats = this._getStat(filepath);
          return this._makeEntry(stats, pattern);
        } catch (error) {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        }
      }
      _getStat(filepath) {
        return this._statSync(filepath, this._fsStatSettings);
      }
    };
    exports2.default = ReaderSync;
  }
});

// node_modules/fast-glob/out/providers/sync.js
var require_sync6 = __commonJS({
  "node_modules/fast-glob/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var sync_1 = require_sync5();
    var provider_1 = require_provider();
    var ProviderSync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new sync_1.default(this._settings);
      }
      read(task) {
        const root2 = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = this.api(root2, task, options);
        return entries.map(options.transform);
      }
      api(root2, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root2, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderSync;
  }
});

// node_modules/fast-glob/out/settings.js
var require_settings4 = __commonJS({
  "node_modules/fast-glob/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = require_fs();
    var os = require_os();
    var CPU_COUNT = Math.max(os.cpus().length, 1);
    exports2.DEFAULT_FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      lstatSync: fs4.lstatSync,
      stat: fs4.stat,
      statSync: fs4.statSync,
      readdir: fs4.readdir,
      readdirSync: fs4.readdirSync
    };
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
          this.onlyFiles = false;
        }
        if (this.stats) {
          this.objectMode = true;
        }
        this.ignore = [].concat(this.ignore);
      }
      _getValue(option, value2) {
        return option === void 0 ? value2 : option;
      }
      _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports2.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
      }
    };
    exports2.default = Settings;
  }
});

// node_modules/fast-glob/out/index.js
var require_out4 = __commonJS({
  "node_modules/fast-glob/out/index.js"(exports2, module3) {
    "use strict";
    var taskManager = require_tasks();
    var async_1 = require_async6();
    var stream_1 = require_stream5();
    var sync_1 = require_sync6();
    var settings_1 = require_settings4();
    var utils = require_utils3();
    async function FastGlob(source, options) {
      assertPatternsInput2(source);
      const works = getWorks(source, async_1.default, options);
      const result = await Promise.all(works);
      return utils.array.flatten(result);
    }
    (function(FastGlob2) {
      FastGlob2.glob = FastGlob2;
      FastGlob2.globSync = sync;
      FastGlob2.globStream = stream;
      FastGlob2.async = FastGlob2;
      function sync(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, sync_1.default, options);
        return utils.array.flatten(works);
      }
      FastGlob2.sync = sync;
      function stream(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, stream_1.default, options);
        return utils.stream.merge(works);
      }
      FastGlob2.stream = stream;
      function generateTasks2(source, options) {
        assertPatternsInput2(source);
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        return taskManager.generate(patterns, settings);
      }
      FastGlob2.generateTasks = generateTasks2;
      function isDynamicPattern2(source, options) {
        assertPatternsInput2(source);
        const settings = new settings_1.default(options);
        return utils.pattern.isDynamicPattern(source, settings);
      }
      FastGlob2.isDynamicPattern = isDynamicPattern2;
      function escapePath(source) {
        assertPatternsInput2(source);
        return utils.path.escape(source);
      }
      FastGlob2.escapePath = escapePath;
      function convertPathToPattern2(source) {
        assertPatternsInput2(source);
        return utils.path.convertPathToPattern(source);
      }
      FastGlob2.convertPathToPattern = convertPathToPattern2;
      let posix;
      (function(posix2) {
        function escapePath2(source) {
          assertPatternsInput2(source);
          return utils.path.escapePosixPath(source);
        }
        posix2.escapePath = escapePath2;
        function convertPathToPattern3(source) {
          assertPatternsInput2(source);
          return utils.path.convertPosixPathToPattern(source);
        }
        posix2.convertPathToPattern = convertPathToPattern3;
      })(posix = FastGlob2.posix || (FastGlob2.posix = {}));
      let win32;
      (function(win322) {
        function escapePath2(source) {
          assertPatternsInput2(source);
          return utils.path.escapeWindowsPath(source);
        }
        win322.escapePath = escapePath2;
        function convertPathToPattern3(source) {
          assertPatternsInput2(source);
          return utils.path.convertWindowsPathToPattern(source);
        }
        win322.convertPathToPattern = convertPathToPattern3;
      })(win32 = FastGlob2.win32 || (FastGlob2.win32 = {}));
    })(FastGlob || (FastGlob = {}));
    function getWorks(source, _Provider, options) {
      const patterns = [].concat(source);
      const settings = new settings_1.default(options);
      const tasks = taskManager.generate(patterns, settings);
      const provider = new _Provider(settings);
      return tasks.map(provider.read, provider);
    }
    function assertPatternsInput2(input) {
      const source = [].concat(input);
      const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
      if (!isValidSource) {
        throw new TypeError("Patterns must be a string (non empty) or an array of strings");
      }
    }
    module3.exports = FastGlob;
  }
});

// node_modules/globby/node_modules/ignore/index.js
var require_ignore = __commonJS({
  "node_modules/globby/node_modules/ignore/index.js"(exports2, module3) {
    function makeArray2(subject) {
      return Array.isArray(subject) ? subject : [subject];
    }
    var EMPTY2 = "";
    var SPACE2 = " ";
    var ESCAPE2 = "\\";
    var REGEX_TEST_BLANK_LINE2 = /^\s+$/;
    var REGEX_INVALID_TRAILING_BACKSLASH2 = /(?:[^\\]|^)\\$/;
    var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION2 = /^\\!/;
    var REGEX_REPLACE_LEADING_EXCAPED_HASH2 = /^\\#/;
    var REGEX_SPLITALL_CRLF2 = /\r?\n/g;
    var REGEX_TEST_INVALID_PATH2 = /^\.*\/|^\.+$/;
    var SLASH2 = "/";
    var TMP_KEY_IGNORE2 = "node-ignore";
    if (typeof Symbol !== "undefined") {
      TMP_KEY_IGNORE2 = Symbol.for("node-ignore");
    }
    var KEY_IGNORE2 = TMP_KEY_IGNORE2;
    var define2 = (object, key, value2) => Object.defineProperty(object, key, { value: value2 });
    var REGEX_REGEXP_RANGE2 = /([0-z])-([0-z])/g;
    var RETURN_FALSE2 = () => false;
    var sanitizeRange2 = (range) => range.replace(
      REGEX_REGEXP_RANGE2,
      (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY2
    );
    var cleanRangeBackSlash2 = (slashes) => {
      const { length } = slashes;
      return slashes.slice(0, length - length % 2);
    };
    var REPLACERS2 = [
      [
        // remove BOM
        // TODO:
        // Other similar zero-width characters?
        /^\uFEFF/,
        () => EMPTY2
      ],
      // > Trailing spaces are ignored unless they are quoted with backslash ("\")
      [
        // (a\ ) -> (a )
        // (a  ) -> (a)
        // (a ) -> (a)
        // (a \ ) -> (a  )
        /((?:\\\\)*?)(\\?\s+)$/,
        (_2, m1, m2) => m1 + (m2.indexOf("\\") === 0 ? SPACE2 : EMPTY2)
      ],
      // replace (\ ) with ' '
      // (\ ) -> ' '
      // (\\ ) -> '\\ '
      // (\\\ ) -> '\\ '
      [
        /(\\+?)\s/g,
        (_2, m1) => {
          const { length } = m1;
          return m1.slice(0, length - length % 2) + SPACE2;
        }
      ],
      // Escape metacharacters
      // which is written down by users but means special for regular expressions.
      // > There are 12 characters with special meanings:
      // > - the backslash \,
      // > - the caret ^,
      // > - the dollar sign $,
      // > - the period or dot .,
      // > - the vertical bar or pipe symbol |,
      // > - the question mark ?,
      // > - the asterisk or star *,
      // > - the plus sign +,
      // > - the opening parenthesis (,
      // > - the closing parenthesis ),
      // > - and the opening square bracket [,
      // > - the opening curly brace {,
      // > These special characters are often called "metacharacters".
      [
        /[\\$.|*+(){^]/g,
        (match) => `\\${match}`
      ],
      [
        // > a question mark (?) matches a single character
        /(?!\\)\?/g,
        () => "[^/]"
      ],
      // leading slash
      [
        // > A leading slash matches the beginning of the pathname.
        // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
        // A leading slash matches the beginning of the pathname
        /^\//,
        () => "^"
      ],
      // replace special metacharacter slash after the leading slash
      [
        /\//g,
        () => "\\/"
      ],
      [
        // > A leading "**" followed by a slash means match in all directories.
        // > For example, "**/foo" matches file or directory "foo" anywhere,
        // > the same as pattern "foo".
        // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
        // >   under directory "foo".
        // Notice that the '*'s have been replaced as '\\*'
        /^\^*\\\*\\\*\\\//,
        // '**/foo' <-> 'foo'
        () => "^(?:.*\\/)?"
      ],
      // starting
      [
        // there will be no leading '/'
        //   (which has been replaced by section "leading slash")
        // If starts with '**', adding a '^' to the regular expression also works
        /^(?=[^^])/,
        function startingReplacer2() {
          return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
        }
      ],
      // two globstars
      [
        // Use lookahead assertions so that we could match more than one `'/**'`
        /\\\/\\\*\\\*(?=\\\/|$)/g,
        // Zero, one or several directories
        // should not use '*', or it will be replaced by the next replacer
        // Check if it is not the last `'/**'`
        (_2, index2, str) => index2 + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
      ],
      // normal intermediate wildcards
      [
        // Never replace escaped '*'
        // ignore rule '\*' will match the path '*'
        // 'abc.*/' -> go
        // 'abc.*'  -> skip this rule,
        //    coz trailing single wildcard will be handed by [trailing wildcard]
        /(^|[^\\]+)(\\\*)+(?=.+)/g,
        // '*.js' matches '.js'
        // '*.js' doesn't match 'abc'
        (_2, p1, p2) => {
          const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
          return p1 + unescaped;
        }
      ],
      [
        // unescape, revert step 3 except for back slash
        // For example, if a user escape a '\\*',
        // after step 3, the result will be '\\\\\\*'
        /\\\\\\(?=[$.|*+(){^])/g,
        () => ESCAPE2
      ],
      [
        // '\\\\' -> '\\'
        /\\\\/g,
        () => ESCAPE2
      ],
      [
        // > The range notation, e.g. [a-zA-Z],
        // > can be used to match one of the characters in a range.
        // `\` is escaped by step 3
        /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
        (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE2 ? `\\[${range}${cleanRangeBackSlash2(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange2(range)}${endEscape}]` : "[]" : "[]"
      ],
      // ending
      [
        // 'js' will not match 'js.'
        // 'ab' will not match 'abc'
        /(?:[^*])$/,
        // WTF!
        // https://git-scm.com/docs/gitignore
        // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
        // which re-fixes #24, #38
        // > If there is a separator at the end of the pattern then the pattern
        // > will only match directories, otherwise the pattern can match both
        // > files and directories.
        // 'js*' will not match 'a.js'
        // 'js/' will not match 'a.js'
        // 'js' will match 'a.js' and 'a.js/'
        (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
      ],
      // trailing wildcard
      [
        /(\^|\\\/)?\\\*$/,
        (_2, p1) => {
          const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
          return `${prefix}(?=$|\\/$)`;
        }
      ]
    ];
    var regexCache = /* @__PURE__ */ Object.create(null);
    var makeRegex = (pattern, ignoreCase) => {
      let source = regexCache[pattern];
      if (!source) {
        source = REPLACERS2.reduce(
          (prev, [matcher, replacer]) => prev.replace(matcher, replacer.bind(pattern)),
          pattern
        );
        regexCache[pattern] = source;
      }
      return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
    };
    var isString2 = (subject) => typeof subject === "string";
    var checkPattern2 = (pattern) => pattern && isString2(pattern) && !REGEX_TEST_BLANK_LINE2.test(pattern) && !REGEX_INVALID_TRAILING_BACKSLASH2.test(pattern) && pattern.indexOf("#") !== 0;
    var splitPattern2 = (pattern) => pattern.split(REGEX_SPLITALL_CRLF2);
    var IgnoreRule2 = class {
      constructor(origin, pattern, negative, regex) {
        this.origin = origin;
        this.pattern = pattern;
        this.negative = negative;
        this.regex = regex;
      }
    };
    var createRule2 = (pattern, ignoreCase) => {
      const origin = pattern;
      let negative = false;
      if (pattern.indexOf("!") === 0) {
        negative = true;
        pattern = pattern.substr(1);
      }
      pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION2, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH2, "#");
      const regex = makeRegex(pattern, ignoreCase);
      return new IgnoreRule2(
        origin,
        pattern,
        negative,
        regex
      );
    };
    var throwError2 = (message, Ctor) => {
      throw new Ctor(message);
    };
    var checkPath2 = (path2, originalPath, doThrow) => {
      if (!isString2(path2)) {
        return doThrow(
          `path must be a string, but got \`${originalPath}\``,
          TypeError
        );
      }
      if (!path2) {
        return doThrow(`path must not be empty`, TypeError);
      }
      if (checkPath2.isNotRelative(path2)) {
        const r2 = "`path.relative()`d";
        return doThrow(
          `path should be a ${r2} string, but got "${originalPath}"`,
          RangeError
        );
      }
      return true;
    };
    var isNotRelative2 = (path2) => REGEX_TEST_INVALID_PATH2.test(path2);
    checkPath2.isNotRelative = isNotRelative2;
    checkPath2.convert = (p2) => p2;
    var Ignore2 = class {
      constructor({
        ignorecase = true,
        ignoreCase = ignorecase,
        allowRelativePaths = false
      } = {}) {
        define2(this, KEY_IGNORE2, true);
        this._rules = [];
        this._ignoreCase = ignoreCase;
        this._allowRelativePaths = allowRelativePaths;
        this._initCache();
      }
      _initCache() {
        this._ignoreCache = /* @__PURE__ */ Object.create(null);
        this._testCache = /* @__PURE__ */ Object.create(null);
      }
      _addPattern(pattern) {
        if (pattern && pattern[KEY_IGNORE2]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return;
        }
        if (checkPattern2(pattern)) {
          const rule = createRule2(pattern, this._ignoreCase);
          this._added = true;
          this._rules.push(rule);
        }
      }
      // @param {Array<string> | string | Ignore} pattern
      add(pattern) {
        this._added = false;
        makeArray2(
          isString2(pattern) ? splitPattern2(pattern) : pattern
        ).forEach(this._addPattern, this);
        if (this._added) {
          this._initCache();
        }
        return this;
      }
      // legacy
      addPattern(pattern) {
        return this.add(pattern);
      }
      //          |           ignored : unignored
      // negative |   0:0   |   0:1   |   1:0   |   1:1
      // -------- | ------- | ------- | ------- | --------
      //     0    |  TEST   |  TEST   |  SKIP   |    X
      //     1    |  TESTIF |  SKIP   |  TEST   |    X
      // - SKIP: always skip
      // - TEST: always test
      // - TESTIF: only test if checkUnignored
      // - X: that never happen
      // @param {boolean} whether should check if the path is unignored,
      //   setting `checkUnignored` to `false` could reduce additional
      //   path matching.
      // @returns {TestResult} true if a file is ignored
      _testOne(path2, checkUnignored) {
        let ignored = false;
        let unignored = false;
        this._rules.forEach((rule) => {
          const { negative } = rule;
          if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
            return;
          }
          const matched = rule.regex.test(path2);
          if (matched) {
            ignored = !negative;
            unignored = negative;
          }
        });
        return {
          ignored,
          unignored
        };
      }
      // @returns {TestResult}
      _test(originalPath, cache, checkUnignored, slices) {
        const path2 = originalPath && checkPath2.convert(originalPath);
        checkPath2(
          path2,
          originalPath,
          this._allowRelativePaths ? RETURN_FALSE2 : throwError2
        );
        return this._t(path2, cache, checkUnignored, slices);
      }
      _t(path2, cache, checkUnignored, slices) {
        if (path2 in cache) {
          return cache[path2];
        }
        if (!slices) {
          slices = path2.split(SLASH2);
        }
        slices.pop();
        if (!slices.length) {
          return cache[path2] = this._testOne(path2, checkUnignored);
        }
        const parent = this._t(
          slices.join(SLASH2) + SLASH2,
          cache,
          checkUnignored,
          slices
        );
        return cache[path2] = parent.ignored ? parent : this._testOne(path2, checkUnignored);
      }
      ignores(path2) {
        return this._test(path2, this._ignoreCache, false).ignored;
      }
      createFilter() {
        return (path2) => !this.ignores(path2);
      }
      filter(paths) {
        return makeArray2(paths).filter(this.createFilter());
      }
      // @returns {TestResult}
      test(path2) {
        return this._test(path2, this._testCache, true);
      }
    };
    var factory2 = (options) => new Ignore2(options);
    var isPathValid2 = (path2) => checkPath2(path2 && checkPath2.convert(path2), path2, RETURN_FALSE2);
    factory2.isPathValid = isPathValid2;
    factory2.default = factory2;
    module3.exports = factory2;
    if (
      // Detect `process` so that it can run in browsers.
      typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")
    ) {
      const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
      checkPath2.convert = makePosix;
      const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
      checkPath2.isNotRelative = (path2) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path2) || isNotRelative2(path2);
    }
  }
});

// node_modules/dotenv/package.json
var require_package = __commonJS({
  "node_modules/dotenv/package.json"(exports2, module3) {
    module3.exports = {
      name: "dotenv",
      version: "16.4.7",
      description: "Loads environment variables from .env file",
      main: "lib/main.js",
      types: "lib/main.d.ts",
      exports: {
        ".": {
          types: "./lib/main.d.ts",
          require: "./lib/main.js",
          default: "./lib/main.js"
        },
        "./config": "./config.js",
        "./config.js": "./config.js",
        "./lib/env-options": "./lib/env-options.js",
        "./lib/env-options.js": "./lib/env-options.js",
        "./lib/cli-options": "./lib/cli-options.js",
        "./lib/cli-options.js": "./lib/cli-options.js",
        "./package.json": "./package.json"
      },
      scripts: {
        "dts-check": "tsc --project tests/types/tsconfig.json",
        lint: "standard",
        pretest: "npm run lint && npm run dts-check",
        test: "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
        "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",
        prerelease: "npm test",
        release: "standard-version"
      },
      repository: {
        type: "git",
        url: "git://github.com/motdotla/dotenv.git"
      },
      funding: "https://dotenvx.com",
      keywords: [
        "dotenv",
        "env",
        ".env",
        "environment",
        "variables",
        "config",
        "settings"
      ],
      readmeFilename: "README.md",
      license: "BSD-2-Clause",
      devDependencies: {
        "@types/node": "^18.11.3",
        decache: "^4.6.2",
        sinon: "^14.0.1",
        standard: "^17.0.0",
        "standard-version": "^9.5.0",
        tap: "^19.2.0",
        typescript: "^4.8.4"
      },
      engines: {
        node: ">=12"
      },
      browser: {
        fs: false
      }
    };
  }
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/dotenv/lib/main.js"(exports2, module3) {
    var fs4 = require_fs();
    var path2 = require_path();
    var os = require_os();
    var crypto = require_crypto();
    var packageJson = require_package();
    var version = packageJson.version;
    var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function parse3(src) {
      const obj = {};
      let lines = src.toString();
      lines = lines.replace(/\r\n?/mg, "\n");
      let match;
      while ((match = LINE.exec(lines)) != null) {
        const key = match[1];
        let value2 = match[2] || "";
        value2 = value2.trim();
        const maybeQuote = value2[0];
        value2 = value2.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        if (maybeQuote === '"') {
          value2 = value2.replace(/\\n/g, "\n");
          value2 = value2.replace(/\\r/g, "\r");
        }
        obj[key] = value2;
      }
      return obj;
    }
    function _parseVault(options) {
      const vaultPath = _vaultPath(options);
      const result = DotenvModule.configDotenv({ path: vaultPath });
      if (!result.parsed) {
        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
        err.code = "MISSING_DATA";
        throw err;
      }
      const keys2 = _dotenvKey(options).split(",");
      const length = keys2.length;
      let decrypted;
      for (let i2 = 0; i2 < length; i2++) {
        try {
          const key = keys2[i2].trim();
          const attrs = _instructions(result, key);
          decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
          break;
        } catch (error) {
          if (i2 + 1 >= length) {
            throw error;
          }
        }
      }
      return DotenvModule.parse(decrypted);
    }
    function _log(message) {
      console.log(`[dotenv@${version}][INFO] ${message}`);
    }
    function _warn(message) {
      console.log(`[dotenv@${version}][WARN] ${message}`);
    }
    function _debug(message) {
      console.log(`[dotenv@${version}][DEBUG] ${message}`);
    }
    function _dotenvKey(options) {
      if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
        return options.DOTENV_KEY;
      }
      if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
        return process.env.DOTENV_KEY;
      }
      return "";
    }
    function _instructions(result, dotenvKey) {
      let uri;
      try {
        uri = new URL(dotenvKey);
      } catch (error) {
        if (error.code === "ERR_INVALID_URL") {
          const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        throw error;
      }
      const key = uri.password;
      if (!key) {
        const err = new Error("INVALID_DOTENV_KEY: Missing key part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environment = uri.searchParams.get("environment");
      if (!environment) {
        const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
      const ciphertext = result.parsed[environmentKey];
      if (!ciphertext) {
        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
        err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
        throw err;
      }
      return { ciphertext, key };
    }
    function _vaultPath(options) {
      let possibleVaultPath = null;
      if (options && options.path && options.path.length > 0) {
        if (Array.isArray(options.path)) {
          for (const filepath of options.path) {
            if (fs4.existsSync(filepath)) {
              possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
            }
          }
        } else {
          possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
        }
      } else {
        possibleVaultPath = path2.resolve(process.cwd(), ".env.vault");
      }
      if (fs4.existsSync(possibleVaultPath)) {
        return possibleVaultPath;
      }
      return null;
    }
    function _resolveHome(envPath) {
      return envPath[0] === "~" ? path2.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function _configVault(options) {
      _log("Loading env from encrypted .env.vault");
      const parsed = DotenvModule._parseVault(options);
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsed, options);
      return { parsed };
    }
    function configDotenv(options) {
      const dotenvPath = path2.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      const debug = Boolean(options && options.debug);
      if (options && options.encoding) {
        encoding = options.encoding;
      } else {
        if (debug) {
          _debug("No encoding is specified. UTF-8 is used by default");
        }
      }
      let optionPaths = [dotenvPath];
      if (options && options.path) {
        if (!Array.isArray(options.path)) {
          optionPaths = [_resolveHome(options.path)];
        } else {
          optionPaths = [];
          for (const filepath of options.path) {
            optionPaths.push(_resolveHome(filepath));
          }
        }
      }
      let lastError;
      const parsedAll = {};
      for (const path3 of optionPaths) {
        try {
          const parsed = DotenvModule.parse(fs4.readFileSync(path3, { encoding }));
          DotenvModule.populate(parsedAll, parsed, options);
        } catch (e) {
          if (debug) {
            _debug(`Failed to load ${path3} ${e.message}`);
          }
          lastError = e;
        }
      }
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsedAll, options);
      if (lastError) {
        return { parsed: parsedAll, error: lastError };
      } else {
        return { parsed: parsedAll };
      }
    }
    function config(options) {
      if (_dotenvKey(options).length === 0) {
        return DotenvModule.configDotenv(options);
      }
      const vaultPath = _vaultPath(options);
      if (!vaultPath) {
        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
        return DotenvModule.configDotenv(options);
      }
      return DotenvModule._configVault(options);
    }
    function decrypt(encrypted, keyStr) {
      const key = Buffer.from(keyStr.slice(-64), "hex");
      let ciphertext = Buffer.from(encrypted, "base64");
      const nonce = ciphertext.subarray(0, 12);
      const authTag = ciphertext.subarray(-16);
      ciphertext = ciphertext.subarray(12, -16);
      try {
        const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
        aesgcm.setAuthTag(authTag);
        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
      } catch (error) {
        const isRange = error instanceof RangeError;
        const invalidKeyLength = error.message === "Invalid key length";
        const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
        if (isRange || invalidKeyLength) {
          const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        } else if (decryptionFailed) {
          const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
          err.code = "DECRYPTION_FAILED";
          throw err;
        } else {
          throw error;
        }
      }
    }
    function populate(processEnv, parsed, options = {}) {
      const debug = Boolean(options && options.debug);
      const override = Boolean(options && options.override);
      if (typeof parsed !== "object") {
        const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        err.code = "OBJECT_REQUIRED";
        throw err;
      }
      for (const key of Object.keys(parsed)) {
        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
          if (override === true) {
            processEnv[key] = parsed[key];
          }
          if (debug) {
            if (override === true) {
              _debug(`"${key}" is already defined and WAS overwritten`);
            } else {
              _debug(`"${key}" is already defined and was NOT overwritten`);
            }
          }
        } else {
          processEnv[key] = parsed[key];
        }
      }
    }
    var DotenvModule = {
      configDotenv,
      _configVault,
      _parseVault,
      config,
      decrypt,
      parse: parse3,
      populate
    };
    module3.exports.configDotenv = DotenvModule.configDotenv;
    module3.exports._configVault = DotenvModule._configVault;
    module3.exports._parseVault = DotenvModule._parseVault;
    module3.exports.config = DotenvModule.config;
    module3.exports.decrypt = DotenvModule.decrypt;
    module3.exports.parse = DotenvModule.parse;
    module3.exports.populate = DotenvModule.populate;
    module3.exports = DotenvModule;
  }
});

// node_modules/semver/functions/parse.js
var require_parse3 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports2, module3) {
    var SemVer = require_semver();
    var parse3 = (version, options, throwErrors = false) => {
      if (version instanceof SemVer) {
        return version;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module3.exports = parse3;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports2, module3) {
    var parse3 = require_parse3();
    var valid = (version, options) => {
      const v2 = parse3(version, options);
      return v2 ? v2.version : null;
    };
    module3.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports2, module3) {
    var parse3 = require_parse3();
    var clean = (version, options) => {
      const s2 = parse3(version.trim().replace(/^[=v]+/, ""), options);
      return s2 ? s2.version : null;
    };
    module3.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports2, module3) {
    var SemVer = require_semver();
    var inc = (version, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version instanceof SemVer ? version.version : version,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module3.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports2, module3) {
    var parse3 = require_parse3();
    var diff2 = (version1, version2) => {
      const v1 = parse3(version1, null, true);
      const v2 = parse3(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module3.exports = diff2;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports2, module3) {
    var SemVer = require_semver();
    var major = (a2, loose) => new SemVer(a2, loose).major;
    module3.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports2, module3) {
    var SemVer = require_semver();
    var minor = (a2, loose) => new SemVer(a2, loose).minor;
    module3.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports2, module3) {
    var SemVer = require_semver();
    var patch = (a2, loose) => new SemVer(a2, loose).patch;
    module3.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports2, module3) {
    var parse3 = require_parse3();
    var prerelease = (version, options) => {
      const parsed = parse3(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module3.exports = prerelease;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports2, module3) {
    var compare = require_compare();
    var rcompare = (a2, b, loose) => compare(b, a2, loose);
    module3.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports2, module3) {
    var compare = require_compare();
    var compareLoose = (a2, b) => compare(a2, b, true);
    module3.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports2, module3) {
    var SemVer = require_semver();
    var compareBuild = (a2, b, loose) => {
      const versionA = new SemVer(a2, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module3.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports2, module3) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a2, b) => compareBuild(a2, b, loose));
    module3.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports2, module3) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a2, b) => compareBuild(b, a2, loose));
    module3.exports = rsort;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports2, module3) {
    var SemVer = require_semver();
    var parse3 = require_parse3();
    var { safeRe: re, t: t2 } = require_re();
    var coerce = (version, options) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version.match(options.includePrerelease ? re[t2.COERCEFULL] : re[t2.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t2.COERCERTLFULL] : re[t2.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build2 = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse3(`${major}.${minor}.${patch}${prerelease}${build2}`, options);
    };
    module3.exports = coerce;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports2, module3) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c2) => c2.value).join(" ").trim().split(" "));
    module3.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports2, module3) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v2) => {
        if (rangeObj.test(v2)) {
          if (!max || maxSV.compare(v2) === -1) {
            max = v2;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module3.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports2, module3) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v2) => {
        if (rangeObj.test(v2)) {
          if (!min || minSV.compare(v2) === 1) {
            min = v2;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module3.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports2, module3) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i2 = 0; i2 < range.set.length; ++i2) {
        const comparators = range.set[i2];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module3.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports2, module3) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module3.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports2, module3) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies2 = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte2 = require_gte();
    var outside = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte2;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies2(version, range, options)) {
        return false;
      }
      for (let i2 = 0; i2 < range.set.length; ++i2) {
        const comparators = range.set[i2];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module3.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports2, module3) {
    var outside = require_outside();
    var gtr = (version, range, options) => outside(version, range, ">", options);
    module3.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports2, module3) {
    var outside = require_outside();
    var ltr = (version, range, options) => outside(version, range, "<", options);
    module3.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports2, module3) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module3.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports2, module3) {
    var satisfies2 = require_satisfies();
    var compare = require_compare();
    module3.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v2 = versions.sort((a2, b) => compare(a2, b, options));
      for (const version of v2) {
        const included = satisfies2(version, range, options);
        if (included) {
          prev = version;
          if (!first) {
            first = version;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v2[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v2[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports2, module3) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies2 = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c2 of sub) {
        if (c2.operator === ">" || c2.operator === ">=") {
          gt = higherGT(gt, c2, options);
        } else if (c2.operator === "<" || c2.operator === "<=") {
          lt = lowerLT(lt, c2, options);
        } else {
          eqSet.add(c2.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq2 of eqSet) {
        if (gt && !satisfies2(eq2, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies2(eq2, String(lt), options)) {
          return null;
        }
        for (const c2 of dom) {
          if (!satisfies2(eq2, String(c2), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c2 of dom) {
        hasDomGT = hasDomGT || c2.operator === ">" || c2.operator === ">=";
        hasDomLT = hasDomLT || c2.operator === "<" || c2.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c2.semver.prerelease && c2.semver.prerelease.length && c2.semver.major === needDomGTPre.major && c2.semver.minor === needDomGTPre.minor && c2.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c2.operator === ">" || c2.operator === ">=") {
            higher = higherGT(gt, c2, options);
            if (higher === c2 && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies2(gt.semver, String(c2), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c2.semver.prerelease && c2.semver.prerelease.length && c2.semver.major === needDomLTPre.major && c2.semver.minor === needDomLTPre.minor && c2.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c2.operator === "<" || c2.operator === "<=") {
            lower = lowerLT(lt, c2, options);
            if (lower === c2 && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies2(lt.semver, String(c2), options)) {
            return false;
          }
        }
        if (!c2.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a2, b, options) => {
      if (!a2) {
        return b;
      }
      const comp = compare(a2.semver, b.semver, options);
      return comp > 0 ? a2 : comp < 0 ? b : b.operator === ">" && a2.operator === ">=" ? b : a2;
    };
    var lowerLT = (a2, b, options) => {
      if (!a2) {
        return b;
      }
      const comp = compare(a2.semver, b.semver, options);
      return comp < 0 ? a2 : comp > 0 ? b : b.operator === "<" && a2.operator === "<=" ? b : a2;
    };
    module3.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports2, module3) {
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse3 = require_parse3();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff2 = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq2 = require_eq();
    var neq = require_neq();
    var gte2 = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies2 = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module3.exports = {
      parse: parse3,
      valid,
      clean,
      inc,
      diff: diff2,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq: eq2,
      neq,
      gte: gte2,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies: satisfies2,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/@nuxt/kit/dist/index.mjs
var import_node_fs7 = __toESM(require_node_fs(), 1);
var import_node_perf_hooks = __toESM(require_node_perf_hooks(), 1);
import defu$1, { defu as defu4 } from "defu";

// node_modules/untyped/dist/shared/untyped.Br_uXjZG.mjs
function defineUntypedSchema(options) {
  return options;
}
function getType(val) {
  const type = typeof val;
  if (type === "undefined" || val === null) {
    return void 0;
  }
  if (Array.isArray(val)) {
    return "array";
  }
  return type;
}
function isObject(val) {
  return val !== null && !Array.isArray(val) && typeof val === "object";
}
function nonEmpty(arr) {
  return arr.filter(Boolean);
}
function unique(arr) {
  return [...new Set(arr)];
}
function joinPath(a2, b = "", sep = ".") {
  return a2 ? a2 + sep + b : b;
}
function setValue(obj, path2, val) {
  const keys2 = path2.split(".");
  const _key = keys2.pop();
  for (const key of keys2) {
    if (!obj || typeof obj !== "object") {
      return;
    }
    if (!(key in obj)) {
      obj[key] = {};
    }
    obj = obj[key];
  }
  if (_key) {
    if (!obj || typeof obj !== "object") {
      return;
    }
    obj[_key] = val;
  }
}
function getValue(obj, path2) {
  for (const key of path2.split(".")) {
    if (!obj || typeof obj !== "object" || !(key in obj)) {
      return;
    }
    obj = obj[key];
  }
  return obj;
}

// node_modules/untyped/dist/shared/untyped.BTwOq8Jl.mjs
async function resolveSchema(obj, defaults3, options = {}) {
  const schema = await _resolveSchema(obj, "", {
    root: obj,
    defaults: defaults3,
    resolveCache: {},
    ignoreDefaults: !!options.ignoreDefaults
  });
  return schema;
}
async function _resolveSchema(input, id, ctx) {
  if (id in ctx.resolveCache) {
    return ctx.resolveCache[id];
  }
  const schemaId = "#" + id.replace(/\./g, "/");
  if (!isObject(input)) {
    const safeInput = Array.isArray(input) ? [...input] : input;
    const schema2 = {
      type: getType(input),
      id: schemaId,
      default: ctx.ignoreDefaults ? void 0 : safeInput
    };
    normalizeSchema(schema2, { ignoreDefaults: ctx.ignoreDefaults });
    ctx.resolveCache[id] = schema2;
    if (ctx.defaults && getValue(ctx.defaults, id) === void 0) {
      setValue(ctx.defaults, id, schema2.default);
    }
    return schema2;
  }
  const node = { ...input };
  const schema = ctx.resolveCache[id] = {
    ...node.$schema,
    id: schemaId
  };
  for (const key in node) {
    if (key === "$resolve" || key === "$schema" || key === "$default") {
      continue;
    }
    schema.properties = schema.properties || {};
    if (!schema.properties[key]) {
      const child = schema.properties[key] = await _resolveSchema(
        node[key],
        joinPath(id, key),
        ctx
      );
      if (Array.isArray(child.tags) && child.tags.includes("@required")) {
        schema.required = schema.required || [];
        if (!schema.required.includes(key)) {
          schema.required.push(key);
        }
      }
    }
  }
  if (!ctx.ignoreDefaults) {
    if (ctx.defaults) {
      schema.default = getValue(ctx.defaults, id);
    }
    if (schema.default === void 0 && "$default" in node) {
      schema.default = node.$default;
    }
    if (typeof node.$resolve === "function") {
      schema.default = await node.$resolve(schema.default, async (key) => {
        return (await _resolveSchema(getValue(ctx.root, key), key, ctx)).default;
      });
    }
  }
  if (ctx.defaults) {
    setValue(ctx.defaults, id, schema.default);
  }
  if (!schema.type) {
    schema.type = getType(schema.default) || (schema.properties ? "object" : "any");
  }
  normalizeSchema(schema, { ignoreDefaults: ctx.ignoreDefaults });
  if (ctx.defaults && getValue(ctx.defaults, id) === void 0) {
    setValue(ctx.defaults, id, schema.default);
  }
  return schema;
}
async function applyDefaults(ref, input) {
  await resolveSchema(ref, input);
  return input;
}
function normalizeSchema(schema, options) {
  if (schema.type === "array" && !("items" in schema)) {
    schema.items = {
      type: nonEmpty(unique(schema.default.map((i2) => getType(i2))))
    };
    if (schema.items.type) {
      if (schema.items.type.length === 0) {
        schema.items.type = "any";
      } else if (schema.items.type.length === 1) {
        schema.items.type = schema.items.type[0];
      }
    }
  }
  if (!options.ignoreDefaults && schema.default === void 0 && ("properties" in schema || schema.type === "object" || schema.type === "any")) {
    const propsWithDefaults = Object.entries(schema.properties || {}).filter(([, prop]) => "default" in prop).map(([key, value2]) => [key, value2.default]);
    schema.default = Object.fromEntries(propsWithDefaults);
  }
}

// node_modules/knitwork/dist/index.mjs
function genString(input, options = {}) {
  const str = JSON.stringify(input);
  if (!options.singleQuotes) {
    return str;
  }
  return `'${escapeString(str).slice(1, -1)}'`;
}
var NEEDS_ESCAPE_RE = /[\n\r'\\\u2028\u2029]/;
var QUOTE_NEWLINE_RE = /([\n\r'\u2028\u2029])/g;
var BACKSLASH_RE = /\\/g;
function escapeString(id) {
  if (!NEEDS_ESCAPE_RE.test(id)) {
    return id;
  }
  return id.replace(BACKSLASH_RE, "\\\\").replace(QUOTE_NEWLINE_RE, "\\$1");
}
function genSafeVariableName(name) {
  if (reservedNames.has(name)) {
    return `_${name}`;
  }
  return name.replace(/^\d/, (r2) => `_${r2}`).replace(/\W/g, (r2) => "_" + r2.charCodeAt(0));
}
var reservedNames = /* @__PURE__ */ new Set([
  "Infinity",
  "NaN",
  "arguments",
  "await",
  "break",
  "case",
  "catch",
  "class",
  "const",
  "continue",
  "debugger",
  "default",
  "delete",
  "do",
  "else",
  "enum",
  "eval",
  "export",
  "extends",
  "false",
  "finally",
  "for",
  "function",
  "if",
  "implements",
  "import",
  "in",
  "instanceof",
  "interface",
  "let",
  "new",
  "null",
  "package",
  "private",
  "protected",
  "public",
  "return",
  "static",
  "super",
  "switch",
  "this",
  "throw",
  "true",
  "try",
  "typeof",
  "undefined",
  "var",
  "void",
  "while",
  "with",
  "yield"
]);
function _genStatement(type, specifier, names, options = {}) {
  const specifierString = genString(specifier, options);
  if (!names) {
    return `${type} ${specifierString};`;
  }
  const nameArray = Array.isArray(names);
  const _names = (nameArray ? names : [names]).map((index2) => {
    if (typeof index2 === "string") {
      return { name: index2 };
    }
    if (index2.name === index2.as) {
      index2 = { name: index2.name };
    }
    return index2;
  });
  const namesString = _names.map((index2) => index2.as ? `${index2.name} as ${index2.as}` : index2.name).join(", ");
  if (nameArray) {
    return `${type} { ${namesString} } from ${genString(
      specifier,
      options
    )}${_genImportAttributes(type, options)};`;
  }
  return `${type} ${namesString} from ${genString(
    specifier,
    options
  )}${_genImportAttributes(type, options)};`;
}
function _genImportAttributes(type, options) {
  var _a7, _b5;
  if (type === "import type" || type === "export type") {
    return "";
  }
  if (typeof ((_a7 = options.attributes) == null ? void 0 : _a7.type) === "string") {
    return ` with { type: ${genString(options.attributes.type)} }`;
  }
  if (typeof ((_b5 = options.assert) == null ? void 0 : _b5.type) === "string") {
    return ` assert { type: ${genString(options.assert.type)} }`;
  }
  return "";
}
function genImport(specifier, imports, options = {}) {
  return _genStatement("import", specifier, imports, options);
}
function genDynamicImport(specifier, options = {}) {
  const commentString = options.comment ? ` /* ${options.comment} */` : "";
  const wrapperString = options.wrapper === false ? "" : "() => ";
  const ineropString = options.interopDefault ? ".then(m => m.default || m)" : "";
  const optionsString = _genDynamicImportAttributes(options);
  return `${wrapperString}import(${genString(
    specifier,
    options
  )}${commentString}${optionsString})${ineropString}`;
}
function _genDynamicImportAttributes(options = {}) {
  var _a7, _b5;
  if (typeof ((_a7 = options.assert) == null ? void 0 : _a7.type) === "string") {
    return `, { assert: { type: ${genString(options.assert.type)} } }`;
  }
  if (typeof ((_b5 = options.attributes) == null ? void 0 : _b5.type) === "string") {
    return `, { with: { type: ${genString(options.attributes.type)} } }`;
  }
  return "";
}

// node_modules/@nuxt/kit/dist/index.mjs
var import_satisfies = __toESM(require_satisfies(), 1);
import { dirname as dirname2, relative as relative2, join as join3, resolve as resolve5, normalize, isAbsolute, basename as basename3, parse as parse2 } from "pathe";
import { consola as consola2 } from "consola";
import { getContext } from "unctx";
var import_node_url2 = __toESM(require_node_url(), 1);

// node_modules/jiti/lib/jiti.mjs
var import_node_module = __toESM(require_node_module(), 1);
var import_jiti = __toESM(require_jiti(), 1);
var import_babel = __toESM(require_babel(), 1);

// node_modules/@nuxt/kit/dist/index.mjs
import { isRelative, withTrailingSlash } from "ufo";

// node_modules/globby/index.js
var import_node_process2 = __toESM(require_node_process());
var import_node_fs2 = __toESM(require_node_fs());
var import_node_path2 = __toESM(require_node_path());

// node_modules/@sindresorhus/merge-streams/index.js
var import_node_events = __toESM(require_node_events());
var import_node_stream = __toESM(require_node_stream());
var import_promises = __toESM(require_promises2());
function mergeStreams(streams) {
  if (!Array.isArray(streams)) {
    throw new TypeError(`Expected an array, got \`${typeof streams}\`.`);
  }
  for (const stream of streams) {
    validateStream(stream);
  }
  const objectMode = streams.some(({ readableObjectMode }) => readableObjectMode);
  const highWaterMark = getHighWaterMark(streams, objectMode);
  const passThroughStream = new MergedStream({
    objectMode,
    writableHighWaterMark: highWaterMark,
    readableHighWaterMark: highWaterMark
  });
  for (const stream of streams) {
    passThroughStream.add(stream);
  }
  if (streams.length === 0) {
    endStream(passThroughStream);
  }
  return passThroughStream;
}
var getHighWaterMark = (streams, objectMode) => {
  if (streams.length === 0) {
    return 16384;
  }
  const highWaterMarks = streams.filter(({ readableObjectMode }) => readableObjectMode === objectMode).map(({ readableHighWaterMark }) => readableHighWaterMark);
  return Math.max(...highWaterMarks);
};
var _streams, _ended, _aborted, _onFinished;
var MergedStream = class extends import_node_stream.PassThrough {
  constructor() {
    super(...arguments);
    __privateAdd(this, _streams, /* @__PURE__ */ new Set([]));
    __privateAdd(this, _ended, /* @__PURE__ */ new Set([]));
    __privateAdd(this, _aborted, /* @__PURE__ */ new Set([]));
    __privateAdd(this, _onFinished);
  }
  add(stream) {
    validateStream(stream);
    if (__privateGet(this, _streams).has(stream)) {
      return;
    }
    __privateGet(this, _streams).add(stream);
    __privateGet(this, _onFinished) ?? __privateSet(this, _onFinished, onMergedStreamFinished(this, __privateGet(this, _streams)));
    endWhenStreamsDone({
      passThroughStream: this,
      stream,
      streams: __privateGet(this, _streams),
      ended: __privateGet(this, _ended),
      aborted: __privateGet(this, _aborted),
      onFinished: __privateGet(this, _onFinished)
    });
    stream.pipe(this, { end: false });
  }
  remove(stream) {
    validateStream(stream);
    if (!__privateGet(this, _streams).has(stream)) {
      return false;
    }
    stream.unpipe(this);
    return true;
  }
};
_streams = new WeakMap();
_ended = new WeakMap();
_aborted = new WeakMap();
_onFinished = new WeakMap();
var onMergedStreamFinished = async (passThroughStream, streams) => {
  updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);
  const controller = new AbortController();
  try {
    await Promise.race([
      onMergedStreamEnd(passThroughStream, controller),
      onInputStreamsUnpipe(passThroughStream, streams, controller)
    ]);
  } finally {
    controller.abort();
    updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);
  }
};
var onMergedStreamEnd = async (passThroughStream, { signal }) => {
  await (0, import_promises.finished)(passThroughStream, { signal, cleanup: true });
};
var onInputStreamsUnpipe = async (passThroughStream, streams, { signal }) => {
  for await (const [unpipedStream] of (0, import_node_events.on)(passThroughStream, "unpipe", { signal })) {
    if (streams.has(unpipedStream)) {
      unpipedStream.emit(unpipeEvent);
    }
  }
};
var validateStream = (stream) => {
  if (typeof (stream == null ? void 0 : stream.pipe) !== "function") {
    throw new TypeError(`Expected a readable stream, got: \`${typeof stream}\`.`);
  }
};
var endWhenStreamsDone = async ({ passThroughStream, stream, streams, ended, aborted, onFinished }) => {
  updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);
  const controller = new AbortController();
  try {
    await Promise.race([
      afterMergedStreamFinished(onFinished, stream),
      onInputStreamEnd({ passThroughStream, stream, streams, ended, aborted, controller }),
      onInputStreamUnpipe({ stream, streams, ended, aborted, controller })
    ]);
  } finally {
    controller.abort();
    updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);
  }
  if (streams.size === ended.size + aborted.size) {
    if (ended.size === 0 && aborted.size > 0) {
      abortStream(passThroughStream);
    } else {
      endStream(passThroughStream);
    }
  }
};
var isAbortError = (error) => (error == null ? void 0 : error.code) === "ERR_STREAM_PREMATURE_CLOSE";
var afterMergedStreamFinished = async (onFinished, stream) => {
  try {
    await onFinished;
    abortStream(stream);
  } catch (error) {
    if (isAbortError(error)) {
      abortStream(stream);
    } else {
      errorStream(stream, error);
    }
  }
};
var onInputStreamEnd = async ({ passThroughStream, stream, streams, ended, aborted, controller: { signal } }) => {
  try {
    await (0, import_promises.finished)(stream, { signal, cleanup: true, readable: true, writable: false });
    if (streams.has(stream)) {
      ended.add(stream);
    }
  } catch (error) {
    if (signal.aborted || !streams.has(stream)) {
      return;
    }
    if (isAbortError(error)) {
      aborted.add(stream);
    } else {
      errorStream(passThroughStream, error);
    }
  }
};
var onInputStreamUnpipe = async ({ stream, streams, ended, aborted, controller: { signal } }) => {
  await (0, import_node_events.once)(stream, unpipeEvent, { signal });
  streams.delete(stream);
  ended.delete(stream);
  aborted.delete(stream);
};
var unpipeEvent = Symbol("unpipe");
var endStream = (stream) => {
  if (stream.writable) {
    stream.end();
  }
};
var abortStream = (stream) => {
  if (stream.readable || stream.writable) {
    stream.destroy();
  }
};
var errorStream = (stream, error) => {
  if (!stream.destroyed) {
    stream.once("error", noop);
    stream.destroy(error);
  }
};
var noop = () => {
};
var updateMaxListeners = (passThroughStream, increment) => {
  const maxListeners = passThroughStream.getMaxListeners();
  if (maxListeners !== 0 && maxListeners !== Number.POSITIVE_INFINITY) {
    passThroughStream.setMaxListeners(maxListeners + increment);
  }
};
var PASSTHROUGH_LISTENERS_COUNT = 2;
var PASSTHROUGH_LISTENERS_PER_STREAM = 1;

// node_modules/globby/index.js
var import_fast_glob2 = __toESM(require_out4());

// node_modules/path-type/index.js
var import_fs = __toESM(require_fs());
async function isType(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== "string") {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }
  try {
    const stats = await import_fs.promises[fsStatType](filePath);
    return stats[statsMethodName]();
  } catch (error) {
    if (error.code === "ENOENT") {
      return false;
    }
    throw error;
  }
}
function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== "string") {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }
  try {
    return import_fs.default[fsStatType](filePath)[statsMethodName]();
  } catch (error) {
    if (error.code === "ENOENT") {
      return false;
    }
    throw error;
  }
}
var isFile = isType.bind(null, "stat", "isFile");
var isDirectory = isType.bind(null, "stat", "isDirectory");
var isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
var isFileSync = isTypeSync.bind(null, "statSync", "isFile");
var isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
var isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");

// node_modules/unicorn-magic/default.js
var import_node_url = __toESM(require_node_url());
function toPath(urlOrPath) {
  return urlOrPath instanceof URL ? (0, import_node_url.fileURLToPath)(urlOrPath) : urlOrPath;
}

// node_modules/globby/ignore.js
var import_node_process = __toESM(require_node_process(), 1);
var import_node_fs = __toESM(require_node_fs(), 1);
var import_promises2 = __toESM(require_promises(), 1);
var import_node_path = __toESM(require_node_path(), 1);
var import_fast_glob = __toESM(require_out4(), 1);
var import_ignore = __toESM(require_ignore(), 1);

// node_modules/slash/index.js
function slash(path2) {
  const isExtendedLengthPath = path2.startsWith("\\\\?\\");
  if (isExtendedLengthPath) {
    return path2;
  }
  return path2.replace(/\\/g, "/");
}

// node_modules/globby/utilities.js
var isNegativePattern = (pattern) => pattern[0] === "!";

// node_modules/globby/ignore.js
var defaultIgnoredDirectories = [
  "**/node_modules",
  "**/flow-typed",
  "**/coverage",
  "**/.git"
];
var ignoreFilesGlobOptions = {
  absolute: true,
  dot: true
};
var GITIGNORE_FILES_PATTERN = "**/.gitignore";
var applyBaseToPattern = (pattern, base) => isNegativePattern(pattern) ? "!" + import_node_path.default.posix.join(base, pattern.slice(1)) : import_node_path.default.posix.join(base, pattern);
var parseIgnoreFile = (file, cwd) => {
  const base = slash(import_node_path.default.relative(cwd, import_node_path.default.dirname(file.filePath)));
  return file.content.split(/\r?\n/).filter((line) => line && !line.startsWith("#")).map((pattern) => applyBaseToPattern(pattern, base));
};
var toRelativePath = (fileOrDirectory, cwd) => {
  cwd = slash(cwd);
  if (import_node_path.default.isAbsolute(fileOrDirectory)) {
    if (slash(fileOrDirectory).startsWith(cwd)) {
      return import_node_path.default.relative(cwd, fileOrDirectory);
    }
    throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);
  }
  return fileOrDirectory;
};
var getIsIgnoredPredicate = (files, cwd) => {
  const patterns = files.flatMap((file) => parseIgnoreFile(file, cwd));
  const ignores = (0, import_ignore.default)().add(patterns);
  return (fileOrDirectory) => {
    fileOrDirectory = toPath(fileOrDirectory);
    fileOrDirectory = toRelativePath(fileOrDirectory, cwd);
    return fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;
  };
};
var normalizeOptions = (options = {}) => ({
  cwd: toPath(options.cwd) ?? import_node_process.default.cwd(),
  suppressErrors: Boolean(options.suppressErrors),
  deep: typeof options.deep === "number" ? options.deep : Number.POSITIVE_INFINITY,
  ignore: [...options.ignore ?? [], ...defaultIgnoredDirectories]
});
var isIgnoredByIgnoreFiles = async (patterns, options) => {
  const { cwd, suppressErrors, deep, ignore } = normalizeOptions(options);
  const paths = await (0, import_fast_glob.default)(patterns, {
    cwd,
    suppressErrors,
    deep,
    ignore,
    ...ignoreFilesGlobOptions
  });
  const files = await Promise.all(
    paths.map(async (filePath) => ({
      filePath,
      content: await import_promises2.default.readFile(filePath, "utf8")
    }))
  );
  return getIsIgnoredPredicate(files, cwd);
};
var isIgnoredByIgnoreFilesSync = (patterns, options) => {
  const { cwd, suppressErrors, deep, ignore } = normalizeOptions(options);
  const paths = import_fast_glob.default.sync(patterns, {
    cwd,
    suppressErrors,
    deep,
    ignore,
    ...ignoreFilesGlobOptions
  });
  const files = paths.map((filePath) => ({
    filePath,
    content: import_node_fs.default.readFileSync(filePath, "utf8")
  }));
  return getIsIgnoredPredicate(files, cwd);
};

// node_modules/globby/index.js
var assertPatternsInput = (patterns) => {
  if (patterns.some((pattern) => typeof pattern !== "string")) {
    throw new TypeError("Patterns must be a string or an array of strings");
  }
};
var normalizePathForDirectoryGlob = (filePath, cwd) => {
  const path2 = isNegativePattern(filePath) ? filePath.slice(1) : filePath;
  return import_node_path2.default.isAbsolute(path2) ? path2 : import_node_path2.default.join(cwd, path2);
};
var getDirectoryGlob = ({ directoryPath, files, extensions }) => {
  const extensionGlob = (extensions == null ? void 0 : extensions.length) > 0 ? `.${extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0]}` : "";
  return files ? files.map((file) => import_node_path2.default.posix.join(directoryPath, `**/${import_node_path2.default.extname(file) ? file : `${file}${extensionGlob}`}`)) : [import_node_path2.default.posix.join(directoryPath, `**${extensionGlob ? `/*${extensionGlob}` : ""}`)];
};
var directoryToGlob = async (directoryPaths, {
  cwd = import_node_process2.default.cwd(),
  files,
  extensions
} = {}) => {
  const globs = await Promise.all(
    directoryPaths.map(async (directoryPath) => await isDirectory(normalizePathForDirectoryGlob(directoryPath, cwd)) ? getDirectoryGlob({ directoryPath, files, extensions }) : directoryPath)
  );
  return globs.flat();
};
var directoryToGlobSync = (directoryPaths, {
  cwd = import_node_process2.default.cwd(),
  files,
  extensions
} = {}) => directoryPaths.flatMap((directoryPath) => isDirectorySync(normalizePathForDirectoryGlob(directoryPath, cwd)) ? getDirectoryGlob({ directoryPath, files, extensions }) : directoryPath);
var toPatternsArray = (patterns) => {
  patterns = [...new Set([patterns].flat())];
  assertPatternsInput(patterns);
  return patterns;
};
var checkCwdOption = (cwd) => {
  if (!cwd) {
    return;
  }
  let stat;
  try {
    stat = import_node_fs2.default.statSync(cwd);
  } catch {
    return;
  }
  if (!stat.isDirectory()) {
    throw new Error("The `cwd` option must be a path to a directory");
  }
};
var normalizeOptions2 = (options = {}) => {
  options = {
    ...options,
    ignore: options.ignore ?? [],
    expandDirectories: options.expandDirectories ?? true,
    cwd: toPath(options.cwd)
  };
  checkCwdOption(options.cwd);
  return options;
};
var normalizeArguments = (function_) => async (patterns, options) => function_(toPatternsArray(patterns), normalizeOptions2(options));
var normalizeArgumentsSync = (function_) => (patterns, options) => function_(toPatternsArray(patterns), normalizeOptions2(options));
var getIgnoreFilesPatterns = (options) => {
  const { ignoreFiles, gitignore } = options;
  const patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];
  if (gitignore) {
    patterns.push(GITIGNORE_FILES_PATTERN);
  }
  return patterns;
};
var getFilter = async (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && await isIgnoredByIgnoreFiles(ignoreFilesPatterns, options)
  );
};
var getFilterSync = (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, options)
  );
};
var createFilterFunction = (isIgnored) => {
  const seen = /* @__PURE__ */ new Set();
  return (fastGlobResult) => {
    const pathKey = import_node_path2.default.normalize(fastGlobResult.path ?? fastGlobResult);
    if (seen.has(pathKey) || isIgnored && isIgnored(pathKey)) {
      return false;
    }
    seen.add(pathKey);
    return true;
  };
};
var unionFastGlobResults = (results, filter) => results.flat().filter((fastGlobResult) => filter(fastGlobResult));
var convertNegativePatterns = (patterns, options) => {
  const tasks = [];
  while (patterns.length > 0) {
    const index2 = patterns.findIndex((pattern) => isNegativePattern(pattern));
    if (index2 === -1) {
      tasks.push({ patterns, options });
      break;
    }
    const ignorePattern = patterns[index2].slice(1);
    for (const task of tasks) {
      task.options.ignore.push(ignorePattern);
    }
    if (index2 !== 0) {
      tasks.push({
        patterns: patterns.slice(0, index2),
        options: {
          ...options,
          ignore: [
            ...options.ignore,
            ignorePattern
          ]
        }
      });
    }
    patterns = patterns.slice(index2 + 1);
  }
  return tasks;
};
var normalizeExpandDirectoriesOption = (options, cwd) => ({
  ...cwd ? { cwd } : {},
  ...Array.isArray(options) ? { files: options } : options
});
var generateTasks = async (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const directoryToGlobOptions = normalizeExpandDirectoriesOption(expandDirectories, cwd);
  return Promise.all(
    globTasks.map(async (task) => {
      let { patterns: patterns2, options: options2 } = task;
      [
        patterns2,
        options2.ignore
      ] = await Promise.all([
        directoryToGlob(patterns2, directoryToGlobOptions),
        directoryToGlob(options2.ignore, { cwd })
      ]);
      return { patterns: patterns2, options: options2 };
    })
  );
};
var generateTasksSync = (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const directoryToGlobSyncOptions = normalizeExpandDirectoriesOption(expandDirectories, cwd);
  return globTasks.map((task) => {
    let { patterns: patterns2, options: options2 } = task;
    patterns2 = directoryToGlobSync(patterns2, directoryToGlobSyncOptions);
    options2.ignore = directoryToGlobSync(options2.ignore, { cwd });
    return { patterns: patterns2, options: options2 };
  });
};
var globby = normalizeArguments(async (patterns, options) => {
  const [
    tasks,
    filter
  ] = await Promise.all([
    generateTasks(patterns, options),
    getFilter(options)
  ]);
  const results = await Promise.all(tasks.map((task) => (0, import_fast_glob2.default)(task.patterns, task.options)));
  return unionFastGlobResults(results, filter);
});
var globbySync = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const results = tasks.map((task) => import_fast_glob2.default.sync(task.patterns, task.options));
  return unionFastGlobResults(results, filter);
});
var globbyStream = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const streams = tasks.map((task) => import_fast_glob2.default.stream(task.patterns, task.options));
  const stream = mergeStreams(streams).filter((fastGlobResult) => filter(fastGlobResult));
  return stream;
});
var isDynamicPattern = normalizeArgumentsSync(
  (patterns, options) => patterns.some((pattern) => import_fast_glob2.default.isDynamicPattern(pattern, options))
);
var generateGlobTasks = normalizeArguments(generateTasks);
var generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);
var { convertPathToPattern } = import_fast_glob2.default;

// node_modules/@nuxt/kit/dist/index.mjs
import { resolveAlias as resolveAlias$1 } from "pathe/utils";

// node_modules/ignore/index.mjs
function makeArray(subject) {
  return Array.isArray(subject) ? subject : [subject];
}
var UNDEFINED = void 0;
var EMPTY = "";
var SPACE = " ";
var ESCAPE = "\\";
var REGEX_TEST_BLANK_LINE = /^\s+$/;
var REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
var REGEX_SPLITALL_CRLF = /\r?\n/g;
var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
var REGEX_TEST_TRAILING_SLASH = /\/$/;
var SLASH = "/";
var TMP_KEY_IGNORE = "node-ignore";
if (typeof Symbol !== "undefined") {
  TMP_KEY_IGNORE = Symbol.for("node-ignore");
}
var KEY_IGNORE = TMP_KEY_IGNORE;
var define = (object, key, value2) => {
  Object.defineProperty(object, key, { value: value2 });
  return value2;
};
var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
var RETURN_FALSE = () => false;
var sanitizeRange = (range) => range.replace(
  REGEX_REGEXP_RANGE,
  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
);
var cleanRangeBackSlash = (slashes) => {
  const { length } = slashes;
  return slashes.slice(0, length - length % 2);
};
var REPLACERS = [
  [
    // Remove BOM
    // TODO:
    // Other similar zero-width characters?
    /^\uFEFF/,
    () => EMPTY
  ],
  // > Trailing spaces are ignored unless they are quoted with backslash ("\")
  [
    // (a\ ) -> (a )
    // (a  ) -> (a)
    // (a ) -> (a)
    // (a \ ) -> (a  )
    /((?:\\\\)*?)(\\?\s+)$/,
    (_2, m1, m2) => m1 + (m2.indexOf("\\") === 0 ? SPACE : EMPTY)
  ],
  // Replace (\ ) with ' '
  // (\ ) -> ' '
  // (\\ ) -> '\\ '
  // (\\\ ) -> '\\ '
  [
    /(\\+?)\s/g,
    (_2, m1) => {
      const { length } = m1;
      return m1.slice(0, length - length % 2) + SPACE;
    }
  ],
  // Escape metacharacters
  // which is written down by users but means special for regular expressions.
  // > There are 12 characters with special meanings:
  // > - the backslash \,
  // > - the caret ^,
  // > - the dollar sign $,
  // > - the period or dot .,
  // > - the vertical bar or pipe symbol |,
  // > - the question mark ?,
  // > - the asterisk or star *,
  // > - the plus sign +,
  // > - the opening parenthesis (,
  // > - the closing parenthesis ),
  // > - and the opening square bracket [,
  // > - the opening curly brace {,
  // > These special characters are often called "metacharacters".
  [
    /[\\$.|*+(){^]/g,
    (match) => `\\${match}`
  ],
  [
    // > a question mark (?) matches a single character
    /(?!\\)\?/g,
    () => "[^/]"
  ],
  // leading slash
  [
    // > A leading slash matches the beginning of the pathname.
    // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
    // A leading slash matches the beginning of the pathname
    /^\//,
    () => "^"
  ],
  // replace special metacharacter slash after the leading slash
  [
    /\//g,
    () => "\\/"
  ],
  [
    // > A leading "**" followed by a slash means match in all directories.
    // > For example, "**/foo" matches file or directory "foo" anywhere,
    // > the same as pattern "foo".
    // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
    // >   under directory "foo".
    // Notice that the '*'s have been replaced as '\\*'
    /^\^*\\\*\\\*\\\//,
    // '**/foo' <-> 'foo'
    () => "^(?:.*\\/)?"
  ],
  // starting
  [
    // there will be no leading '/'
    //   (which has been replaced by section "leading slash")
    // If starts with '**', adding a '^' to the regular expression also works
    /^(?=[^^])/,
    function startingReplacer() {
      return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
    }
  ],
  // two globstars
  [
    // Use lookahead assertions so that we could match more than one `'/**'`
    /\\\/\\\*\\\*(?=\\\/|$)/g,
    // Zero, one or several directories
    // should not use '*', or it will be replaced by the next replacer
    // Check if it is not the last `'/**'`
    (_2, index2, str) => index2 + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
  ],
  // normal intermediate wildcards
  [
    // Never replace escaped '*'
    // ignore rule '\*' will match the path '*'
    // 'abc.*/' -> go
    // 'abc.*'  -> skip this rule,
    //    coz trailing single wildcard will be handed by [trailing wildcard]
    /(^|[^\\]+)(\\\*)+(?=.+)/g,
    // '*.js' matches '.js'
    // '*.js' doesn't match 'abc'
    (_2, p1, p2) => {
      const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
      return p1 + unescaped;
    }
  ],
  [
    // unescape, revert step 3 except for back slash
    // For example, if a user escape a '\\*',
    // after step 3, the result will be '\\\\\\*'
    /\\\\\\(?=[$.|*+(){^])/g,
    () => ESCAPE
  ],
  [
    // '\\\\' -> '\\'
    /\\\\/g,
    () => ESCAPE
  ],
  [
    // > The range notation, e.g. [a-zA-Z],
    // > can be used to match one of the characters in a range.
    // `\` is escaped by step 3
    /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
  ],
  // ending
  [
    // 'js' will not match 'js.'
    // 'ab' will not match 'abc'
    /(?:[^*])$/,
    // WTF!
    // https://git-scm.com/docs/gitignore
    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
    // which re-fixes #24, #38
    // > If there is a separator at the end of the pattern then the pattern
    // > will only match directories, otherwise the pattern can match both
    // > files and directories.
    // 'js*' will not match 'a.js'
    // 'js/' will not match 'a.js'
    // 'js' will match 'a.js' and 'a.js/'
    (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
  ]
];
var REGEX_REPLACE_TRAILING_WILDCARD = /(^|\\\/)?\\\*$/;
var MODE_IGNORE = "regex";
var MODE_CHECK_IGNORE = "checkRegex";
var UNDERSCORE = "_";
var TRAILING_WILD_CARD_REPLACERS = {
  [MODE_IGNORE](_2, p1) {
    const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
    return `${prefix}(?=$|\\/$)`;
  },
  [MODE_CHECK_IGNORE](_2, p1) {
    const prefix = p1 ? `${p1}[^/]*` : "[^/]*";
    return `${prefix}(?=$|\\/$)`;
  }
};
var makeRegexPrefix = (pattern) => REPLACERS.reduce(
  (prev, [matcher, replacer]) => prev.replace(matcher, replacer.bind(pattern)),
  pattern
);
var isString = (subject) => typeof subject === "string";
var checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern) && pattern.indexOf("#") !== 0;
var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF).filter(Boolean);
var IgnoreRule = class {
  constructor(pattern, mark, body, ignoreCase, negative, prefix) {
    this.pattern = pattern;
    this.mark = mark;
    this.negative = negative;
    define(this, "body", body);
    define(this, "ignoreCase", ignoreCase);
    define(this, "regexPrefix", prefix);
  }
  get regex() {
    const key = UNDERSCORE + MODE_IGNORE;
    if (this[key]) {
      return this[key];
    }
    return this._make(MODE_IGNORE, key);
  }
  get checkRegex() {
    const key = UNDERSCORE + MODE_CHECK_IGNORE;
    if (this[key]) {
      return this[key];
    }
    return this._make(MODE_CHECK_IGNORE, key);
  }
  _make(mode, key) {
    const str = this.regexPrefix.replace(
      REGEX_REPLACE_TRAILING_WILDCARD,
      // It does not need to bind pattern
      TRAILING_WILD_CARD_REPLACERS[mode]
    );
    const regex = this.ignoreCase ? new RegExp(str, "i") : new RegExp(str);
    return define(this, key, regex);
  }
};
var createRule = ({
  pattern,
  mark
}, ignoreCase) => {
  let negative = false;
  let body = pattern;
  if (body.indexOf("!") === 0) {
    negative = true;
    body = body.substr(1);
  }
  body = body.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
  const regexPrefix = makeRegexPrefix(body);
  return new IgnoreRule(
    pattern,
    mark,
    body,
    ignoreCase,
    negative,
    regexPrefix
  );
};
var RuleManager = class {
  constructor(ignoreCase) {
    this._ignoreCase = ignoreCase;
    this._rules = [];
  }
  _add(pattern) {
    if (pattern && pattern[KEY_IGNORE]) {
      this._rules = this._rules.concat(pattern._rules._rules);
      this._added = true;
      return;
    }
    if (isString(pattern)) {
      pattern = {
        pattern
      };
    }
    if (checkPattern(pattern.pattern)) {
      const rule = createRule(pattern, this._ignoreCase);
      this._added = true;
      this._rules.push(rule);
    }
  }
  // @param {Array<string> | string | Ignore} pattern
  add(pattern) {
    this._added = false;
    makeArray(
      isString(pattern) ? splitPattern(pattern) : pattern
    ).forEach(this._add, this);
    return this._added;
  }
  // Test one single path without recursively checking parent directories
  //
  // - checkUnignored `boolean` whether should check if the path is unignored,
  //   setting `checkUnignored` to `false` could reduce additional
  //   path matching.
  // - check `string` either `MODE_IGNORE` or `MODE_CHECK_IGNORE`
  // @returns {TestResult} true if a file is ignored
  test(path2, checkUnignored, mode) {
    let ignored = false;
    let unignored = false;
    let matchedRule;
    this._rules.forEach((rule) => {
      const { negative } = rule;
      if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
        return;
      }
      const matched = rule[mode].test(path2);
      if (!matched) {
        return;
      }
      ignored = !negative;
      unignored = negative;
      matchedRule = negative ? UNDEFINED : rule;
    });
    const ret = {
      ignored,
      unignored
    };
    if (matchedRule) {
      ret.rule = matchedRule;
    }
    return ret;
  }
};
var throwError = (message, Ctor) => {
  throw new Ctor(message);
};
var checkPath = (path2, originalPath, doThrow) => {
  if (!isString(path2)) {
    return doThrow(
      `path must be a string, but got \`${originalPath}\``,
      TypeError
    );
  }
  if (!path2) {
    return doThrow(`path must not be empty`, TypeError);
  }
  if (checkPath.isNotRelative(path2)) {
    const r2 = "`path.relative()`d";
    return doThrow(
      `path should be a ${r2} string, but got "${originalPath}"`,
      RangeError
    );
  }
  return true;
};
var isNotRelative = (path2) => REGEX_TEST_INVALID_PATH.test(path2);
checkPath.isNotRelative = isNotRelative;
checkPath.convert = (p2) => p2;
var Ignore = class {
  constructor({
    ignorecase = true,
    ignoreCase = ignorecase,
    allowRelativePaths = false
  } = {}) {
    define(this, KEY_IGNORE, true);
    this._rules = new RuleManager(ignoreCase);
    this._strictPathCheck = !allowRelativePaths;
    this._initCache();
  }
  _initCache() {
    this._ignoreCache = /* @__PURE__ */ Object.create(null);
    this._testCache = /* @__PURE__ */ Object.create(null);
  }
  add(pattern) {
    if (this._rules.add(pattern)) {
      this._initCache();
    }
    return this;
  }
  // legacy
  addPattern(pattern) {
    return this.add(pattern);
  }
  // @returns {TestResult}
  _test(originalPath, cache, checkUnignored, slices) {
    const path2 = originalPath && checkPath.convert(originalPath);
    checkPath(
      path2,
      originalPath,
      this._strictPathCheck ? throwError : RETURN_FALSE
    );
    return this._t(path2, cache, checkUnignored, slices);
  }
  checkIgnore(path2) {
    if (!REGEX_TEST_TRAILING_SLASH.test(path2)) {
      return this.test(path2);
    }
    const slices = path2.split(SLASH).filter(Boolean);
    slices.pop();
    if (slices.length) {
      const parent = this._t(
        slices.join(SLASH) + SLASH,
        this._testCache,
        true,
        slices
      );
      if (parent.ignored) {
        return parent;
      }
    }
    return this._rules.test(path2, false, MODE_CHECK_IGNORE);
  }
  _t(path2, cache, checkUnignored, slices) {
    if (path2 in cache) {
      return cache[path2];
    }
    if (!slices) {
      slices = path2.split(SLASH).filter(Boolean);
    }
    slices.pop();
    if (!slices.length) {
      return cache[path2] = this._rules.test(path2, checkUnignored, MODE_IGNORE);
    }
    const parent = this._t(
      slices.join(SLASH) + SLASH,
      cache,
      checkUnignored,
      slices
    );
    return cache[path2] = parent.ignored ? parent : this._rules.test(path2, checkUnignored, MODE_IGNORE);
  }
  ignores(path2) {
    return this._test(path2, this._ignoreCache, false).ignored;
  }
  createFilter() {
    return (path2) => !this.ignores(path2);
  }
  filter(paths) {
    return makeArray(paths).filter(this.createFilter());
  }
  // @returns {TestResult}
  test(path2) {
    return this._test(path2, this._testCache, true);
  }
};
var factory = (options) => new Ignore(options);
var isPathValid = (path2) => checkPath(path2 && checkPath.convert(path2), path2, RETURN_FALSE);
factory.isPathValid = isPathValid;
if (
  // Detect `process` so that it can run in browsers.
  typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")
) {
  const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
  checkPath.convert = makePosix;
  const REGEX_TEST_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
  checkPath.isNotRelative = (path2) => REGEX_TEST_WINDOWS_PATH_ABSOLUTE.test(path2) || isNotRelative(path2);
}

// node_modules/c12/dist/shared/c12.B4fc1S0C.mjs
var import_node_fs4 = __toESM(require_node_fs(), 1);
var import_promises3 = __toESM(require_promises(), 1);
var import_node_os2 = __toESM(require_node_os(), 1);
import { resolve as resolve2, join, dirname, basename, extname } from "pathe";

// node_modules/rc9/dist/index.mjs
var import_node_fs3 = __toESM(require_node_fs(), 1);
var import_node_path3 = __toESM(require_node_path(), 1);
var import_node_os = __toESM(require_node_os(), 1);
import { defu } from "defu";
var defaults = {
  name: ".conf",
  dir: process.cwd(),
  flat: false
};

// node_modules/c12/dist/shared/c12.B4fc1S0C.mjs
import { defu as defu2 } from "defu";

// node_modules/ohash/dist/index.mjs
var defaults2 = Object.freeze({
  ignoreUnknown: false,
  respectType: false,
  respectFunctionNames: false,
  respectFunctionProperties: false,
  unorderedObjects: true,
  unorderedArrays: false,
  unorderedSets: false,
  excludeKeys: void 0,
  excludeValues: void 0,
  replacer: void 0
});
var defaultPrototypesKeys = Object.freeze([
  "prototype",
  "__proto__",
  "constructor"
]);
var nativeFunc = "[native code] }";
var nativeFuncLength = nativeFunc.length;

// node_modules/c12/dist/shared/c12.B4fc1S0C.mjs
var dotenv = __toESM(require_main(), 1);

// node_modules/c12/dist/index.mjs
import { resolve as resolve3 } from "pathe";
var import_node_fs5 = __toESM(require_node_fs(), 1);
var import_promises4 = __toESM(require_promises(), 1);
var import_node_os3 = __toESM(require_node_os(), 1);
import "defu";
var import_dotenv = __toESM(require_main(), 1);

// node_modules/@nuxt/schema/dist/index.mjs
import { defu as defu3 } from "defu";
import { resolve as resolve4, join as join2, basename as basename2, relative } from "pathe";

// node_modules/std-env/dist/index.mjs
var r = /* @__PURE__ */ Object.create(null);
var i = (e) => {
  var _a7, _b5;
  return ((_a7 = globalThis.process) == null ? void 0 : _a7.env) || import.meta.env || ((_b5 = globalThis.Deno) == null ? void 0 : _b5.env.toObject()) || globalThis.__env__ || (e ? r : globalThis);
};
var s = new Proxy(r, { get(e, o) {
  return i()[o] ?? r[o];
}, has(e, o) {
  const E = i();
  return o in E || o in r;
}, set(e, o, E) {
  const b = i(true);
  return b[o] = E, true;
}, deleteProperty(e, o) {
  if (!o) return false;
  const E = i(true);
  return delete E[o], true;
}, ownKeys() {
  const e = i(true);
  return Object.keys(e);
} });
var t = typeof process < "u" && process.env && "development" || "";
var B = [["APPVEYOR"], ["AWS_AMPLIFY", "AWS_APP_ID", { ci: true }], ["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"], ["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"], ["APPCIRCLE", "AC_APPCIRCLE"], ["BAMBOO", "bamboo_planKey"], ["BITBUCKET", "BITBUCKET_COMMIT"], ["BITRISE", "BITRISE_IO"], ["BUDDY", "BUDDY_WORKSPACE_ID"], ["BUILDKITE"], ["CIRCLE", "CIRCLECI"], ["CIRRUS", "CIRRUS_CI"], ["CLOUDFLARE_PAGES", "CF_PAGES", { ci: true }], ["CODEBUILD", "CODEBUILD_BUILD_ARN"], ["CODEFRESH", "CF_BUILD_ID"], ["DRONE"], ["DRONE", "DRONE_BUILD_EVENT"], ["DSARI"], ["GITHUB_ACTIONS"], ["GITLAB", "GITLAB_CI"], ["GITLAB", "CI_MERGE_REQUEST_ID"], ["GOCD", "GO_PIPELINE_LABEL"], ["LAYERCI"], ["HUDSON", "HUDSON_URL"], ["JENKINS", "JENKINS_URL"], ["MAGNUM"], ["NETLIFY"], ["NETLIFY", "NETLIFY_LOCAL", { ci: false }], ["NEVERCODE"], ["RENDER"], ["SAIL", "SAILCI"], ["SEMAPHORE"], ["SCREWDRIVER"], ["SHIPPABLE"], ["SOLANO", "TDDIUM"], ["STRIDER"], ["TEAMCITY", "TEAMCITY_VERSION"], ["TRAVIS"], ["VERCEL", "NOW_BUILDER"], ["VERCEL", "VERCEL", { ci: false }], ["VERCEL", "VERCEL_ENV", { ci: false }], ["APPCENTER", "APPCENTER_BUILD_ID"], ["CODESANDBOX", "CODESANDBOX_SSE", { ci: false }], ["STACKBLITZ"], ["STORMKIT"], ["CLEAVR"], ["ZEABUR"], ["CODESPHERE", "CODESPHERE_APP_ID", { ci: true }], ["RAILWAY", "RAILWAY_PROJECT_ID"], ["RAILWAY", "RAILWAY_SERVICE_ID"], ["DENO-DEPLOY", "DENO_DEPLOYMENT_ID"], ["FIREBASE_APP_HOSTING", "FIREBASE_APP_HOSTING", { ci: true }]];
function p() {
  var _a7, _b5, _c, _d, _e, _f;
  if ((_a7 = globalThis.process) == null ? void 0 : _a7.env) for (const e of B) {
    const o = e[1] || e[0];
    if ((_b5 = globalThis.process) == null ? void 0 : _b5.env[o]) return { name: e[0].toLowerCase(), ...e[2] };
  }
  return ((_d = (_c = globalThis.process) == null ? void 0 : _c.env) == null ? void 0 : _d.SHELL) === "/bin/jsh" && ((_f = (_e = globalThis.process) == null ? void 0 : _e.versions) == null ? void 0 : _f.webcontainer) ? { name: "stackblitz", ci: false } : { name: "", ci: false };
}
var l = p();
var d = l.name;
function n(e) {
  return e ? e !== "false" : false;
}
var _a;
var I = ((_a = globalThis.process) == null ? void 0 : _a.platform) || "";
var T = n(s.CI) || l.ci !== false;
var _a2, _b;
var R = n(((_a2 = globalThis.process) == null ? void 0 : _a2.stdout) && ((_b = globalThis.process) == null ? void 0 : _b.stdout.isTTY));
var U = n(s.DEBUG);
var A = t === "test" || n(s.TEST);
var f = t === "dev" || t === "development";
var v = n(s.MINIMAL) || T || A || !R;
var _ = /^win/i.test(I);
var M = /^linux/i.test(I);
var m = /^darwin/i.test(I);
var Y = !n(s.NO_COLOR) && (n(s.FORCE_COLOR) || (R || _) && s.TERM !== "dumb" || T);
var _a3, _b2;
var C = (((_b2 = (_a3 = globalThis.process) == null ? void 0 : _a3.versions) == null ? void 0 : _b2.node) || "").replace(/^v/, "") || null;
var V = Number(C == null ? void 0 : C.split(".")[0]) || null;
var y = globalThis.process || /* @__PURE__ */ Object.create(null);
var c = { versions: {} };
var W = new Proxy(y, { get(e, o) {
  if (o === "env") return s;
  if (o in e) return e[o];
  if (o in c) return c[o];
} });
var _a4, _b3;
var L = ((_b3 = (_a4 = globalThis.process) == null ? void 0 : _a4.release) == null ? void 0 : _b3.name) === "node";
var _a5, _b4;
var a = !!globalThis.Bun || !!((_b4 = (_a5 = globalThis.process) == null ? void 0 : _a5.versions) == null ? void 0 : _b4.bun);
var D = !!globalThis.Deno;
var O = !!globalThis.fastly;
var S = !!globalThis.Netlify;
var N = !!globalThis.EdgeRuntime;
var _a6;
var P = ((_a6 = globalThis.navigator) == null ? void 0 : _a6.userAgent) === "Cloudflare-Workers";
var F = [[S, "netlify"], [N, "edge-light"], [P, "workerd"], [O, "fastly"], [D, "deno"], [a, "bun"], [L, "node"]];
function G() {
  const e = F.find((o) => o[0]);
  if (e) return { name: e[1] };
}
var u = G();
var w = (u == null ? void 0 : u.name) || "";

// node_modules/@nuxt/schema/dist/index.mjs
var import_node_fs6 = __toESM(require_node_fs(), 1);
var import_promises5 = __toESM(require_promises(), 1);
import { consola } from "consola";

// node_modules/uncrypto/dist/crypto.web.mjs
var webCrypto = globalThis.crypto;
var subtle = webCrypto.subtle;
var randomUUID = () => {
  return webCrypto.randomUUID();
};

// node_modules/@nuxt/schema/dist/index.mjs
import { withoutLeadingSlash } from "ufo";
var adhoc = defineUntypedSchema({
  /**
   * Configure Nuxt component auto-registration.
   *
   * Any components in the directories configured here can be used throughout your
   * pages, layouts (and other components) without needing to explicitly import them.
   * @see [`components/` directory documentation](https://nuxt.com/docs/guide/directory-structure/components)
   * @type {boolean | typeof import('../src/types/components').ComponentsOptions | typeof import('../src/types/components').ComponentsOptions['dirs']}
   */
  components: {
    $resolve: (val) => {
      if (Array.isArray(val)) {
        return { dirs: val };
      }
      if (val === void 0 || val === true) {
        return { dirs: [{ path: "~/components/global", global: true }, "~/components"] };
      }
      return val;
    }
  },
  /**
   * Configure how Nuxt auto-imports composables into your application.
   * @see [Nuxt documentation](https://nuxt.com/docs/guide/directory-structure/composables)
   * @type {typeof import('../src/types/imports').ImportsOptions}
   */
  imports: {
    global: false,
    /**
     * Whether to scan your `composables/` and `utils/` directories for composables to auto-import.
     * Auto-imports registered by Nuxt or other modules, such as imports from `vue` or `nuxt`, will still be enabled.
     */
    scan: true,
    /**
     * An array of custom directories that will be auto-imported.
     * Note that this option will not override the default directories (~/composables, ~/utils).
     * @example
     * ```js
     * imports: {
     *   // Auto-import pinia stores defined in `~/stores`
     *   dirs: ['stores']
     * }
     * ```
     */
    dirs: []
  },
  /**
   * Whether to use the vue-router integration in Nuxt 3. If you do not provide a value it will be
   * enabled if you have a `pages/` directory in your source folder.
   * @type {boolean}
   */
  pages: void 0,
  /**
   * Manually disable nuxt telemetry.
   * @see [Nuxt Telemetry](https://github.com/nuxt/telemetry) for more information.
   * @type {boolean | Record<string, any>}
   */
  telemetry: void 0,
  /**
   * Enable Nuxt DevTools for development.
   *
   * Breaking changes for devtools might not reflect on the version of Nuxt.
   * @see  [Nuxt DevTools](https://devtools.nuxt.com/) for more information.
   * @type { { enabled: boolean, [key: string]: any } }
   */
  devtools: {}
});
var app = defineUntypedSchema({
  /**
   * Vue.js config
   */
  vue: {
    /** @type {typeof import('@vue/compiler-sfc').AssetURLTagConfig} */
    transformAssetUrls: {
      video: ["src", "poster"],
      source: ["src"],
      img: ["src"],
      image: ["xlink:href", "href"],
      use: ["xlink:href", "href"]
    },
    /**
     * Options for the Vue compiler that will be passed at build time.
     * @see [Vue documentation](https://vuejs.org/api/application.html#app-config-compileroptions)
     * @type {typeof import('@vue/compiler-core').CompilerOptions}
     */
    compilerOptions: {},
    /**
     * Include Vue compiler in runtime bundle.
     */
    runtimeCompiler: {
      $resolve: async (val, get) => val ?? await get("experimental.runtimeVueCompiler") ?? false
    },
    /**
     * Enable reactive destructure for `defineProps`
     * @type {boolean}
     */
    propsDestructure: true,
    /**
     * It is possible to pass configure the Vue app globally. Only serializable options
     * may be set in your `nuxt.config`. All other options should be set at runtime in a Nuxt plugin..
     * @see [Vue app config documentation](https://vuejs.org/api/application.html#app-config)
     */
    config: void 0
  },
  /**
   * Nuxt App configuration.
   */
  app: {
    /**
     * The base path of your Nuxt application.
     *
     * For example:
     * @example
     * ```ts
     * export default defineNuxtConfig({
     *   app: {
     *     baseURL: '/prefix/'
     *   }
     * })
     * ```
     *
     * This can also be set at runtime by setting the NUXT_APP_BASE_URL environment variable.
     * @example
     * ```bash
     * NUXT_APP_BASE_URL=/prefix/ node .output/server/index.mjs
     * ```
     */
    baseURL: {
      $resolve: (val) => val || process.env.NUXT_APP_BASE_URL || "/"
    },
    /** The folder name for the built site assets, relative to `baseURL` (or `cdnURL` if set). This is set at build time and should not be customized at runtime. */
    buildAssetsDir: {
      $resolve: (val) => val || process.env.NUXT_APP_BUILD_ASSETS_DIR || "/_nuxt/"
    },
    /**
     * An absolute URL to serve the public folder from (production-only).
     *
     * For example:
     * @example
     * ```ts
     * export default defineNuxtConfig({
     *   app: {
     *     cdnURL: 'https://mycdn.org/'
     *   }
     * })
     * ```
     *
     * This can be set to a different value at runtime by setting the `NUXT_APP_CDN_URL` environment variable.
     * @example
     * ```bash
     * NUXT_APP_CDN_URL=https://mycdn.org/ node .output/server/index.mjs
     * ```
     */
    cdnURL: {
      $resolve: async (val, get) => await get("dev") ? "" : (process.env.NUXT_APP_CDN_URL ?? val) || ""
    },
    /**
     * Set default configuration for `<head>` on every page.
     * @example
     * ```js
     * app: {
     *   head: {
     *     meta: [
     *       // <meta name="viewport" content="width=device-width, initial-scale=1">
     *       { name: 'viewport', content: 'width=device-width, initial-scale=1' }
     *     ],
     *     script: [
     *       // <script src="https://myawesome-lib.js"><\/script>
     *       { src: 'https://awesome-lib.js' }
     *     ],
     *     link: [
     *       // <link rel="stylesheet" href="https://myawesome-lib.css">
     *       { rel: 'stylesheet', href: 'https://awesome-lib.css' }
     *     ],
     *     // please note that this is an area that is likely to change
     *     style: [
     *       // <style type="text/css">:root { color: red }</style>
     *       { children: ':root { color: red }', type: 'text/css' }
     *     ],
     *     noscript: [
     *       // <noscript>JavaScript is required</noscript>
     *       { children: 'JavaScript is required' }
     *     ]
     *   }
     * }
     * ```
     * @type {typeof import('../src/types/config').NuxtAppConfig['head']}
     */
    head: {
      $resolve: async (val, get) => {
        var _a7, _b5;
        const resolved = defu3(val, await get("meta"), {
          meta: [],
          link: [],
          style: [],
          script: [],
          noscript: []
        });
        if (!((_a7 = resolved.meta.find((m2) => m2.charset)) == null ? void 0 : _a7.charset)) {
          resolved.meta.unshift({ charset: resolved.charset || "utf-8" });
        }
        if (!((_b5 = resolved.meta.find((m2) => m2.name === "viewport")) == null ? void 0 : _b5.content)) {
          resolved.meta.unshift({ name: "viewport", content: resolved.viewport || "width=device-width, initial-scale=1" });
        }
        resolved.meta = resolved.meta.filter(Boolean);
        resolved.link = resolved.link.filter(Boolean);
        resolved.style = resolved.style.filter(Boolean);
        resolved.script = resolved.script.filter(Boolean);
        resolved.noscript = resolved.noscript.filter(Boolean);
        return resolved;
      }
    },
    /**
     * Default values for layout transitions.
     *
     * This can be overridden with `definePageMeta` on an individual page.
     * Only JSON-serializable values are allowed.
     * @see [Vue Transition docs](https://vuejs.org/api/built-in-components.html#transition)
     * @type {typeof import('../src/types/config').NuxtAppConfig['layoutTransition']}
     */
    layoutTransition: false,
    /**
     * Default values for page transitions.
     *
     * This can be overridden with `definePageMeta` on an individual page.
     * Only JSON-serializable values are allowed.
     * @see [Vue Transition docs](https://vuejs.org/api/built-in-components.html#transition)
     * @type {typeof import('../src/types/config').NuxtAppConfig['pageTransition']}
     */
    pageTransition: false,
    /**
     * Default values for view transitions.
     *
     * This only has an effect when **experimental** support for View Transitions is
     * [enabled in your nuxt.config file](/docs/getting-started/transitions#view-transitions-api-experimental).
     *
     * This can be overridden with `definePageMeta` on an individual page.
     * @see [Nuxt View Transition API docs](https://nuxt.com/docs/getting-started/transitions#view-transitions-api-experimental)
     * @type {typeof import('../src/types/config').NuxtAppConfig['viewTransition']}
     */
    viewTransition: {
      $resolve: async (val, get) => val ?? await get("experimental").then(
        (e) => e == null ? void 0 : e.viewTransition
      ) ?? false
    },
    /**
     * Default values for KeepAlive configuration between pages.
     *
     * This can be overridden with `definePageMeta` on an individual page.
     * Only JSON-serializable values are allowed.
     * @see [Vue KeepAlive](https://vuejs.org/api/built-in-components.html#keepalive)
     * @type {typeof import('../src/types/config').NuxtAppConfig['keepalive']}
     */
    keepalive: false,
    /**
     * Customize Nuxt root element id.
     * @type {string | false}
     * @deprecated Prefer `rootAttrs.id` instead
     */
    rootId: {
      $resolve: (val) => val === false ? false : val || "__nuxt"
    },
    /**
     * Customize Nuxt root element tag.
     */
    rootTag: {
      $resolve: (val) => val || "div"
    },
    /**
     * Customize Nuxt root element id.
     * @type {typeof import('@unhead/schema').HtmlAttributes}
     */
    rootAttrs: {
      $resolve: async (val, get) => {
        const rootId = await get("app.rootId");
        return defu3(val, {
          id: rootId === false ? void 0 : rootId || "__nuxt"
        });
      }
    },
    /**
     * Customize Nuxt Teleport element tag.
     */
    teleportTag: {
      $resolve: (val) => val || "div"
    },
    /**
     * Customize Nuxt Teleport element id.
     * @type {string | false}
     * @deprecated Prefer `teleportAttrs.id` instead
     */
    teleportId: {
      $resolve: (val) => val === false ? false : val || "teleports"
    },
    /**
     * Customize Nuxt Teleport element attributes.
     * @type {typeof import('@unhead/schema').HtmlAttributes}
     */
    teleportAttrs: {
      $resolve: async (val, get) => {
        const teleportId = await get("app.teleportId");
        return defu3(val, {
          id: teleportId === false ? void 0 : teleportId || "teleports"
        });
      }
    },
    /**
     * Customize Nuxt SpaLoader element tag.
     */
    spaLoaderTag: {
      $resolve: (val) => val || "div"
    },
    /**
     * Customize Nuxt Nuxt SpaLoader element attributes.
     * @type {typeof import('@unhead/schema').HtmlAttributes}
     */
    spaLoaderAttrs: {
      id: "__nuxt-loader"
    }
  },
  /**
   * Boolean or a path to an HTML file with the contents of which will be inserted into any HTML page
   * rendered with `ssr: false`.
   *
   * - If it is unset, it will use `~/app/spa-loading-template.html` file in one of your layers, if it exists.
   * - If it is false, no SPA loading indicator will be loaded.
   * - If true, Nuxt will look for `~/app/spa-loading-template.html` file in one of your layers, or a
   *   default Nuxt image will be used.
   *
   * Some good sources for spinners are [SpinKit](https://github.com/tobiasahlin/SpinKit) or [SVG Spinners](https://icones.js.org/collection/svg-spinners).
   * @example ~/app/spa-loading-template.html
   * ```html
   * <!-- https://github.com/barelyhuman/snips/blob/dev/pages/css-loader.md -->
   * <div class="loader"></div>
   * <style>
   * .loader {
   *   display: block;
   *   position: fixed;
   *   z-index: 1031;
   *   top: 50%;
   *   left: 50%;
   *   transform: translate(-50%, -50%);
   *   width: 18px;
   *   height: 18px;
   *   box-sizing: border-box;
   *   border: solid 2px transparent;
   *   border-top-color: #000;
   *   border-left-color: #000;
   *   border-bottom-color: #efefef;
   *   border-right-color: #efefef;
   *   border-radius: 50%;
   *   -webkit-animation: loader 400ms linear infinite;
   *   animation: loader 400ms linear infinite;
   * }
   *
   * \@-webkit-keyframes loader {
   *   0% {
   *     -webkit-transform: translate(-50%, -50%) rotate(0deg);
   *   }
   *   100% {
   *     -webkit-transform: translate(-50%, -50%) rotate(360deg);
   *   }
   * }
   * \@keyframes loader {
   *   0% {
   *     transform: translate(-50%, -50%) rotate(0deg);
   *   }
   *   100% {
   *     transform: translate(-50%, -50%) rotate(360deg);
   *   }
   * }
   * </style>
   * ```
   * @type {string | boolean}
   */
  spaLoadingTemplate: {
    $resolve: async (val, get) => typeof val === "string" ? resolve4(await get("srcDir"), val) : val ?? null
  },
  /**
   * An array of nuxt app plugins.
   *
   * Each plugin can be a string (which can be an absolute or relative path to a file).
   * If it ends with `.client` or `.server` then it will be automatically loaded only
   * in the appropriate context.
   *
   * It can also be an object with `src` and `mode` keys.
   * @note Plugins are also auto-registered from the `~/plugins` directory
   * and these plugins do not need to be listed in `nuxt.config` unless you
   * need to customize their order. All plugins are deduplicated by their src path.
   * @see [`plugins/` directory documentation](https://nuxt.com/docs/guide/directory-structure/plugins)
   * @example
   * ```js
   * plugins: [
   *   '~/plugins/foo.client.js', // only in client side
   *   '~/plugins/bar.server.js', // only in server side
   *   '~/plugins/baz.js', // both client & server
   *   { src: '~/plugins/both-sides.js' },
   *   { src: '~/plugins/client-only.js', mode: 'client' }, // only on client side
   *   { src: '~/plugins/server-only.js', mode: 'server' } // only on server side
   * ]
   * ```
   * @type {(typeof import('../src/types/nuxt').NuxtPlugin | string)[]}
   */
  plugins: [],
  /**
   * You can define the CSS files/modules/libraries you want to set globally
   * (included in every page).
   *
   * Nuxt will automatically guess the file type by its extension and use the
   * appropriate pre-processor. You will still need to install the required
   * loader if you need to use them.
   * @example
   * ```js
   * css: [
   *   // Load a Node.js module directly (here it's a Sass file).
   *   'bulma',
   *   // CSS file in the project
   *   '~/assets/css/main.css',
   *   // SCSS file in the project
   *   '~/assets/css/main.scss'
   * ]
   * ```
   * @type {string[]}
   */
  css: {
    $resolve: (val) => (val ?? []).map((c2) => c2.src || c2)
  },
  /**
   * An object that allows us to configure the `unhead` nuxt module.
   */
  unhead: {
    /**
     * An object that will be passed to `renderSSRHead` to customize the output.
     *
     * @see [`unhead` options documentation](https://unhead.unjs.io/setup/ssr/installation#options)
     *
     * @example
     * ```ts
     * export default defineNuxtConfig({
     *  unhead: {
     *   renderSSRHeadOptions: {
     *    omitLineBreaks: true
     *   }
     * })
     * ```
     * @type {typeof import('@unhead/schema').RenderSSRHeadOptions}
     */
    renderSSRHeadOptions: {
      $resolve: async (val, get) => {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        return defu3(val, {
          omitLineBreaks: isV4
        });
      }
    }
  }
});
var build = defineUntypedSchema({
  /**
   * The builder to use for bundling the Vue part of your application.
   * @type {'vite' | 'webpack' | 'rspack' | { bundle: (nuxt: typeof import('../src/types/nuxt').Nuxt) => Promise<void> }}
   */
  builder: {
    $resolve: async (val = "vite", get) => {
      if (typeof val === "object") {
        return val;
      }
      const map = {
        rspack: "@nuxt/rspack-builder",
        vite: "@nuxt/vite-builder",
        webpack: "@nuxt/webpack-builder"
      };
      return map[val] || val || (await get("vite") === false ? map.webpack : map.vite);
    }
  },
  /**
   * Configures whether and how sourcemaps are generated for server and/or client bundles.
   *
   * If set to a single boolean, that value applies to both server and client.
   * Additionally, the `'hidden'` option is also available for both server and client.
   *
   * Available options for both client and server:
   * - `true`: Generates sourcemaps and includes source references in the final bundle.
   * - `false`: Does not generate any sourcemaps.
   * - `'hidden'`: Generates sourcemaps but does not include references in the final bundle.
   *
   * @type {boolean | { server?: boolean | 'hidden', client?: boolean | 'hidden' }}
   */
  sourcemap: {
    $resolve: async (val, get) => {
      if (typeof val === "boolean") {
        return { server: val, client: val };
      }
      return defu3(val, {
        server: true,
        client: await get("dev")
      });
    }
  },
  /**
   * Log level when building logs.
   *
   * Defaults to 'silent' when running in CI or when a TTY is not available.
   * This option is then used as 'silent' in Vite and 'none' in Webpack
   * @type {'silent' | 'info' | 'verbose'}
   */
  logLevel: {
    $resolve: (val) => {
      if (val && !["silent", "info", "verbose"].includes(val)) {
        consola.warn(`Invalid \`logLevel\` option: \`${val}\`. Must be one of: \`silent\`, \`info\`, \`verbose\`.`);
      }
      return val ?? (A ? "silent" : "info");
    }
  },
  /**
   * Shared build configuration.
   */
  build: {
    /**
     * If you want to transpile specific dependencies with Babel, you can add them here.
     * Each item in transpile can be a package name, a function, a string or regex object matching the
     * dependency's file name.
     *
     * You can also use a function to conditionally transpile. The function will receive an object ({ isDev, isServer, isClient, isModern, isLegacy }).
     * @example
     * ```js
     * transpile: [({ isLegacy }) => isLegacy && 'ky']
     * ```
     * @type {Array<string | RegExp | ((ctx: { isClient?: boolean; isServer?: boolean; isDev: boolean }) => string | RegExp | false)>}
     */
    transpile: {
      $resolve: (val) => (val || []).filter(Boolean)
    },
    /**
     * You can provide your own templates which will be rendered based
     * on Nuxt configuration. This feature is specially useful for using with modules.
     *
     * Templates are rendered using [`lodash/template`](https://lodash.com/docs/4.17.15#template).
     * @example
     * ```js
     * templates: [
     *   {
     *     src: '~/modules/support/plugin.js', // `src` can be absolute or relative
     *     dst: 'support.js', // `dst` is relative to project `.nuxt` dir
     *     options: {
     *       // Options are provided to template as `options` key
     *       live_chat: false
     *     }
     *   }
     * ]
     * ```
     * @type {typeof import('../src/types/nuxt').NuxtTemplate<any>[]}
     */
    templates: [],
    /**
     * Nuxt allows visualizing your bundles and how to optimize them.
     *
     * Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).
     * @example
     * ```js
     * analyze: {
     *   analyzerMode: 'static'
     * }
     * ```
     * @type {boolean | { enabled?: boolean } & ((0 extends 1 & typeof import('webpack-bundle-analyzer').BundleAnalyzerPlugin.Options ? {} : typeof import('webpack-bundle-analyzer').BundleAnalyzerPlugin.Options) | typeof import('rollup-plugin-visualizer').PluginVisualizerOptions)}
     */
    analyze: {
      $resolve: async (val, get) => {
        const [rootDir, analyzeDir] = await Promise.all([get("rootDir"), get("analyzeDir")]);
        return defu3(typeof val === "boolean" ? { enabled: val } : val, {
          template: "treemap",
          projectRoot: rootDir,
          filename: join2(analyzeDir, "{name}.html")
        });
      }
    }
  },
  /**
   * Build time optimization configuration.
   */
  optimization: {
    /**
     * Functions to inject a key for.
     *
     * As long as the number of arguments passed to the function is less than `argumentLength`, an
     * additional magic string will be injected that can be used to deduplicate requests between server
     * and client. You will need to take steps to handle this additional key.
     *
     * The key will be unique based on the location of the function being invoked within the file.
     * @type {Array<{ name: string, source?: string | RegExp, argumentLength: number }>}
     */
    keyedComposables: {
      $resolve: (val) => [
        { name: "callOnce", argumentLength: 3 },
        { name: "defineNuxtComponent", argumentLength: 2 },
        { name: "useState", argumentLength: 2 },
        { name: "useFetch", argumentLength: 3 },
        { name: "useAsyncData", argumentLength: 3 },
        { name: "useLazyAsyncData", argumentLength: 3 },
        { name: "useLazyFetch", argumentLength: 3 },
        ...val || []
      ].filter(Boolean)
    },
    /**
     * Tree shake code from specific builds.
     */
    treeShake: {
      /**
       * Tree shake composables from the server or client builds.
       * @example
       * ```js
       * treeShake: { client: { myPackage: ['useServerOnlyComposable'] } }
       * ```
       */
      composables: {
        server: {
          $resolve: async (val, get) => defu3(
            val || {},
            await get("dev") ? {} : {
              "vue": ["onMounted", "onUpdated", "onUnmounted", "onBeforeMount", "onBeforeUpdate", "onBeforeUnmount", "onRenderTracked", "onRenderTriggered", "onActivated", "onDeactivated"],
              "#app": ["definePayloadReviver", "definePageMeta"]
            }
          )
        },
        client: {
          $resolve: async (val, get) => defu3(
            val || {},
            await get("dev") ? {} : {
              "vue": ["onRenderTracked", "onRenderTriggered", "onServerPrefetch"],
              "#app": ["definePayloadReducer", "definePageMeta", "onPrehydrate"]
            }
          )
        }
      }
    },
    /**
     * Options passed directly to the transformer from `unctx` that preserves async context
     * after `await`.
     * @type {typeof import('unctx/transform').TransformerOptions}
     */
    asyncTransforms: {
      asyncFunctions: ["defineNuxtPlugin", "defineNuxtRouteMiddleware"],
      objectDefinitions: {
        defineNuxtComponent: ["asyncData", "setup"],
        defineNuxtPlugin: ["setup"],
        definePageMeta: ["middleware", "validate"]
      }
    }
  }
});
var common = defineUntypedSchema({
  /**
   * Extend project from multiple local or remote sources.
   *
   * Value should be either a string or array of strings pointing to source directories or config path relative to current config.
   *
   * You can use `github:`, `gh:` `gitlab:` or `bitbucket:`
   * @see [`c12` docs on extending config layers](https://github.com/unjs/c12#extending-config-layer-from-remote-sources)
   * @see [`giget` documentation](https://github.com/unjs/giget)
   * @type {string | [string, typeof import('c12').SourceOptions?] | (string | [string, typeof import('c12').SourceOptions?])[]}
   */
  extends: null,
  /**
   * Specify a compatibility date for your app.
   *
   * This is used to control the behavior of presets in Nitro, Nuxt Image
   * and other modules that may change behavior without a major version bump.
   *
   * We plan to improve the tooling around this feature in the future.
   *
   * @type {typeof import('compatx').CompatibilityDateSpec}
   */
  compatibilityDate: void 0,
  /**
   * Extend project from a local or remote source.
   *
   * Value should be a string pointing to source directory or config path relative to current config.
   *
   * You can use `github:`, `gitlab:`, `bitbucket:` or `https://` to extend from a remote git repository.
   * @type {string}
   */
  theme: null,
  /**
   * Define the root directory of your application.
   *
   * This property can be overwritten (for example, running `nuxt ./my-app/`
   * will set the `rootDir` to the absolute path of `./my-app/` from the
   * current/working directory.
   *
   * It is normally not needed to configure this option.
   */
  rootDir: {
    $resolve: (val) => typeof val === "string" ? resolve4(val) : process.cwd()
  },
  /**
   * Define the workspace directory of your application.
   *
   * Often this is used when in a monorepo setup. Nuxt will attempt to detect
   * your workspace directory automatically, but you can override it here.
   *
   * It is normally not needed to configure this option.
   */
  workspaceDir: {
    $resolve: async (val, get) => {
      const rootDir = await get("rootDir");
      return val ? resolve4(rootDir, val) : await findWorkspaceDir(rootDir).catch(() => rootDir);
    }
  },
  /**
   * Define the source directory of your Nuxt application.
   *
   * If a relative path is specified, it will be relative to the `rootDir`.
   * @example
   * ```js
   * export default {
   *   srcDir: 'src/'
   * }
   * ```
   * This would work with the following folder structure:
   * ```bash
   * -| app/
   * ---| node_modules/
   * ---| nuxt.config.js
   * ---| package.json
   * ---| src/
   * ------| assets/
   * ------| components/
   * ------| layouts/
   * ------| middleware/
   * ------| pages/
   * ------| plugins/
   * ------| public/
   * ------| store/
   * ------| server/
   * ------| app.config.ts
   * ------| app.vue
   * ------| error.vue
   * ```
   */
  srcDir: {
    $resolve: async (val, get) => {
      if (val) {
        return resolve4(await get("rootDir"), val);
      }
      const [rootDir, isV4] = await Promise.all([
        get("rootDir"),
        get("future").then((r2) => r2.compatibilityVersion === 4)
      ]);
      if (!isV4) {
        return rootDir;
      }
      const srcDir = resolve4(rootDir, "app");
      if (!(0, import_node_fs6.existsSync)(srcDir)) {
        return rootDir;
      }
      const srcDirFiles = /* @__PURE__ */ new Set();
      const files = await (0, import_promises5.readdir)(srcDir).catch(() => []);
      for (const file of files) {
        if (file !== "spa-loading-template.html" && !file.startsWith("router.options")) {
          srcDirFiles.add(file);
        }
      }
      if (srcDirFiles.size === 0) {
        for (const file of ["app.vue", "App.vue"]) {
          if ((0, import_node_fs6.existsSync)(resolve4(rootDir, file))) {
            return rootDir;
          }
        }
        const keys2 = ["assets", "layouts", "middleware", "pages", "plugins"];
        const dirs = await Promise.all(keys2.map((key) => get(`dir.${key}`)));
        for (const dir of dirs) {
          if ((0, import_node_fs6.existsSync)(resolve4(rootDir, dir))) {
            return rootDir;
          }
        }
      }
      return srcDir;
    }
  },
  /**
   * Define the server directory of your Nuxt application, where Nitro
   * routes, middleware and plugins are kept.
   *
   * If a relative path is specified, it will be relative to your `rootDir`.
   *
   */
  serverDir: {
    $resolve: async (val, get) => {
      if (val) {
        const rootDir = await get("rootDir");
        return resolve4(rootDir, val);
      }
      const isV4 = (await get("future")).compatibilityVersion === 4;
      return join2(isV4 ? await get("rootDir") : await get("srcDir"), "server");
    }
  },
  /**
   * Define the directory where your built Nuxt files will be placed.
   *
   * Many tools assume that `.nuxt` is a hidden directory (because it starts
   * with a `.`). If that is a problem, you can use this option to prevent that.
   * @example
   * ```js
   * export default {
   *   buildDir: 'nuxt-build'
   * }
   * ```
   */
  buildDir: {
    $resolve: async (val, get) => resolve4(await get("rootDir"), val || ".nuxt")
  },
  /**
   * For multi-app projects, the unique id of the Nuxt application.
   *
   * Defaults to `nuxt-app`.
   */
  appId: {
    $resolve: (val) => val ?? "nuxt-app"
  },
  /**
   * A unique identifier matching the build. This may contain the hash of the current state of the project.
   */
  buildId: {
    $resolve: async (val, get) => {
      if (typeof val === "string") {
        return val;
      }
      const [isDev, isTest2] = await Promise.all([get("dev"), get("test")]);
      return isDev ? "dev" : isTest2 ? "test" : randomUUID();
    }
  },
  /**
   * Used to set the modules directories for path resolving (for example, webpack's
   * `resolveLoading`, `nodeExternals` and `postcss`).
   *
   * The configuration path is relative to `options.rootDir` (default is current working directory).
   *
   * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
   * @example
   * ```js
   * export default {
   *   modulesDir: ['../../node_modules']
   * }
   * ```
   */
  modulesDir: {
    $default: ["node_modules"],
    $resolve: async (val, get) => {
      const rootDir = await get("rootDir");
      return [.../* @__PURE__ */ new Set([
        ...(val || []).map((dir) => resolve4(rootDir, dir)),
        resolve4(rootDir, "node_modules")
      ])];
    }
  },
  /**
   * The directory where Nuxt will store the generated files when running `nuxt analyze`.
   *
   * If a relative path is specified, it will be relative to your `rootDir`.
   */
  analyzeDir: {
    $resolve: async (val, get) => val ? resolve4(await get("rootDir"), val) : resolve4(await get("buildDir"), "analyze")
  },
  /**
   * Whether Nuxt is running in development mode.
   *
   * Normally, you should not need to set this.
   */
  dev: Boolean(f),
  /**
   * Whether your app is being unit tested.
   */
  test: Boolean(A),
  /**
   * Set to `true` to enable debug mode.
   *
   * At the moment, it prints out hook names and timings on the server, and
   * logs hook arguments as well in the browser.
   *
   */
  debug: {
    $resolve: (val) => val ?? U
  },
  /**
   * Whether to enable rendering of HTML - either dynamically (in server mode) or at generate time.
   * If set to `false` generated pages will have no content.
   */
  ssr: {
    $resolve: (val) => val ?? true
  },
  /**
   * Modules are Nuxt extensions which can extend its core functionality and add endless integrations.
   *
   * Each module is either a string (which can refer to a package, or be a path to a file), a
   * tuple with the module as first string and the options as a second object, or an inline module function.
   *
   * Nuxt tries to resolve each item in the modules array using node require path
   * (in `node_modules`) and then will be resolved from project `srcDir` if `~` alias is used.
   * @note Modules are executed sequentially so the order is important. First, the modules defined in `nuxt.config.ts` are loaded. Then, modules found in the `modules/`
   * directory are executed, and they load in alphabetical order.
   * @example
   * ```js
   * modules: [
   *   // Using package name
   *   '@nuxtjs/axios',
   *   // Relative to your project srcDir
   *   '~/modules/awesome.js',
   *   // Providing options
   *   ['@nuxtjs/google-analytics', { ua: 'X1234567' }],
   *   // Inline definition
   *   function () {}
   * ]
   * ```
   * @type {(typeof import('../src/types/module').NuxtModule<any> | string | [typeof import('../src/types/module').NuxtModule | string, Record<string, any>] | undefined | null | false)[]}
   */
  modules: {
    $resolve: (val) => (val || []).filter(Boolean)
  },
  /**
   * Customize default directory structure used by Nuxt.
   *
   * It is better to stick with defaults unless needed.
   */
  dir: {
    app: {
      $resolve: async (val, get) => {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4) {
          const [srcDir, rootDir] = await Promise.all([get("srcDir"), get("rootDir")]);
          return resolve4(await get("srcDir"), val || (srcDir === rootDir ? "app" : "."));
        }
        return val || "app";
      }
    },
    /**
     * The assets directory (aliased as `~assets` in your build).
     */
    assets: "assets",
    /**
     * The layouts directory, each file of which will be auto-registered as a Nuxt layout.
     */
    layouts: "layouts",
    /**
     * The middleware directory, each file of which will be auto-registered as a Nuxt middleware.
     */
    middleware: "middleware",
    /**
     * The modules directory, each file in which will be auto-registered as a Nuxt module.
     */
    modules: {
      $resolve: async (val, get) => {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4) {
          return resolve4(await get("rootDir"), val || "modules");
        }
        return val || "modules";
      }
    },
    /**
     * The directory which will be processed to auto-generate your application page routes.
     */
    pages: "pages",
    /**
     * The plugins directory, each file of which will be auto-registered as a Nuxt plugin.
     */
    plugins: "plugins",
    /**
     * The shared directory. This directory is shared between the app and the server.
     */
    shared: "shared",
    /**
     * The directory containing your static files, which will be directly accessible via the Nuxt server
     * and copied across into your `dist` folder when your app is generated.
     */
    public: {
      $resolve: async (val, get) => {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4) {
          return resolve4(await get("rootDir"), val || await get("dir.static") || "public");
        }
        return val || await get("dir.static") || "public";
      }
    },
    static: {
      $schema: { deprecated: "use `dir.public` option instead" },
      $resolve: async (val, get) => val || await get("dir.public") || "public"
    }
  },
  /**
   * The extensions that should be resolved by the Nuxt resolver.
   */
  extensions: {
    $resolve: (val) => [".js", ".jsx", ".mjs", ".ts", ".tsx", ".vue", ...val || []].filter(Boolean)
  },
  /**
   * You can improve your DX by defining additional aliases to access custom directories
   * within your JavaScript and CSS.
   * @note Within a webpack context (image sources, CSS - but not JavaScript) you _must_ access
   * your alias by prefixing it with `~`.
   * @note These aliases will be automatically added to the generated `.nuxt/tsconfig.json` so you can get full
   * type support and path auto-complete. In case you need to extend options provided by `./.nuxt/tsconfig.json`
   * further, make sure to add them here or within the `typescript.tsConfig` property in `nuxt.config`.
   * @example
   * ```js
   * export default {
   *   alias: {
   *     'images': fileURLToPath(new URL('./assets/images', import.meta.url)),
   *     'style': fileURLToPath(new URL('./assets/style', import.meta.url)),
   *     'data': fileURLToPath(new URL('./assets/other/data', import.meta.url))
   *   }
   * }
   * ```
   *
   * ```html
   * <template>
   *   <img src="~images/main-bg.jpg">
   * </template>
   *
   * <script>
   * import data from 'data/test.json'
   * <\/script>
   *
   * <style>
   * // Uncomment the below
   * //@import '~style/variables.scss';
   * //@import '~style/utils.scss';
   * //@import '~style/base.scss';
   * body {
   *   background-image: url('~images/main-bg.jpg');
   * }
   * </style>
   * ```
   * @type {Record<string, string>}
   */
  alias: {
    $resolve: async (val, get) => {
      const [srcDir, rootDir, assetsDir, publicDir, buildDir, sharedDir] = await Promise.all([get("srcDir"), get("rootDir"), get("dir.assets"), get("dir.public"), get("buildDir"), get("dir.shared")]);
      return {
        "~": srcDir,
        "@": srcDir,
        "~~": rootDir,
        "@@": rootDir,
        "#shared": resolve4(rootDir, sharedDir),
        [basename2(assetsDir)]: resolve4(srcDir, assetsDir),
        [basename2(publicDir)]: resolve4(srcDir, publicDir),
        "#build": buildDir,
        "#internal/nuxt/paths": resolve4(buildDir, "paths.mjs"),
        ...val
      };
    }
  },
  /**
   * Pass options directly to `node-ignore` (which is used by Nuxt to ignore files).
   * @see [node-ignore](https://github.com/kaelzhang/node-ignore)
   * @example
   * ```js
   * ignoreOptions: {
   *   ignorecase: false
   * }
   * ```
   * @type {typeof import('ignore').Options}
   */
  ignoreOptions: void 0,
  /**
   * Any file in `pages/`, `layouts/`, `middleware/`, and `public/` directories will be ignored during
   * the build process if its filename starts with the prefix specified by `ignorePrefix`. This is intended to prevent
   * certain files from being processed or served in the built application.
   * By default, the `ignorePrefix` is set to '-', ignoring any files starting with '-'.
   */
  ignorePrefix: {
    $resolve: (val) => val ?? "-"
  },
  /**
   * More customizable than `ignorePrefix`: all files matching glob patterns specified
   * inside the `ignore` array will be ignored in building.
   */
  ignore: {
    $resolve: async (val, get) => {
      const [rootDir, ignorePrefix, analyzeDir, buildDir] = await Promise.all([get("rootDir"), get("ignorePrefix"), get("analyzeDir"), get("buildDir")]);
      return [
        "**/*.stories.{js,cts,mts,ts,jsx,tsx}",
        // ignore storybook files
        "**/*.{spec,test}.{js,cts,mts,ts,jsx,tsx}",
        // ignore tests
        "**/*.d.{cts,mts,ts}",
        // ignore type declarations
        "**/.{pnpm-store,vercel,netlify,output,git,cache,data}",
        relative(rootDir, analyzeDir),
        relative(rootDir, buildDir),
        ignorePrefix && `**/${ignorePrefix}*.*`,
        ...val || []
      ].filter(Boolean);
    }
  },
  /**
   * The watch property lets you define patterns that will restart the Nuxt dev server when changed.
   *
   * It is an array of strings or regular expressions. Strings should be either absolute paths or
   * relative to the `srcDir` (and the `srcDir` of any layers). Regular expressions will be matched
   * against the path relative to the project `srcDir` (and the `srcDir` of any layers).
   * @type {Array<string | RegExp>}
   */
  watch: {
    $resolve: (val) => {
      return (val || []).filter((b) => typeof b === "string" || b instanceof RegExp);
    }
  },
  /**
   * The watchers property lets you overwrite watchers configuration in your `nuxt.config`.
   */
  watchers: {
    /** An array of event types, which, when received, will cause the watcher to restart. */
    rewatchOnRawEvents: void 0,
    /**
     * `watchOptions` to pass directly to webpack.
     * @see [webpack@4 watch options](https://v4.webpack.js.org/configuration/watch/#watchoptions).
     */
    webpack: {
      aggregateTimeout: 1e3
    },
    /**
     * Options to pass directly to `chokidar`.
     * @see [chokidar](https://github.com/paulmillr/chokidar#api)
     */
    chokidar: {
      ignoreInitial: true
    }
  },
  /**
   * Hooks are listeners to Nuxt events that are typically used in modules,
   * but are also available in `nuxt.config`.
   *
   * Internally, hooks follow a naming pattern using colons (e.g., build:done).
   *
   * For ease of configuration, you can also structure them as an hierarchical
   * object in `nuxt.config` (as below).
   * @example
   * ```js
   * import fs from 'node:fs'
   * import path from 'node:path'
   * export default {
   *   hooks: {
   *     build: {
   *       done(builder) {
   *         const extraFilePath = path.join(
   *           builder.nuxt.options.buildDir,
   *           'extra-file'
   *         )
   *         fs.writeFileSync(extraFilePath, 'Something extra')
   *       }
   *     }
   *   }
   * }
   * ```
   * @type {typeof import('../src/types/hooks').NuxtHooks}
   */
  hooks: null,
  /**
   * Runtime config allows passing dynamic config and environment variables to the Nuxt app context.
   *
   * The value of this object is accessible from server only using `useRuntimeConfig`.
   *
   * It mainly should hold _private_ configuration which is not exposed on the frontend.
   * This could include a reference to your API secret tokens.
   *
   * Anything under `public` and `app` will be exposed to the frontend as well.
   *
   * Values are automatically replaced by matching env variables at runtime, e.g. setting an environment
   * variable `NUXT_API_KEY=my-api-key NUXT_PUBLIC_BASE_URL=/foo/` would overwrite the two values in the example below.
   * @example
   * ```js
   * export default {
   *  runtimeConfig: {
   *     apiKey: '', // Default to an empty string, automatically set at runtime using process.env.NUXT_API_KEY
   *     public: {
   *        baseURL: '' // Exposed to the frontend as well.
   *     }
   *   }
   * }
   * ```
   * @type {typeof import('../src/types/config').RuntimeConfig}
   */
  runtimeConfig: {
    $resolve: async (val, get) => {
      const [app2, buildId] = await Promise.all([get("app"), get("buildId")]);
      provideFallbackValues(val);
      return defu3(val, {
        public: {},
        app: {
          buildId,
          baseURL: app2.baseURL,
          buildAssetsDir: app2.buildAssetsDir,
          cdnURL: app2.cdnURL
        }
      });
    }
  },
  /**
   * Additional app configuration
   *
   * For programmatic usage and type support, you can directly provide app config with this option.
   * It will be merged with `app.config` file as default value.
   * @type {typeof import('../src/types/config').AppConfig}
   */
  appConfig: {
    nuxt: {}
  },
  $schema: {}
});
function provideFallbackValues(obj) {
  for (const key in obj) {
    if (typeof obj[key] === "undefined" || obj[key] === null) {
      obj[key] = "";
    } else if (typeof obj[key] === "object") {
      provideFallbackValues(obj[key]);
    }
  }
}
var _messages = { "appName": "Nuxt", "version": "", "loading": "Loading" };
var template = (messages) => {
  messages = { ..._messages, ...messages };
  return '<!DOCTYPE html><html lang="en"><head><title>' + messages.loading + " | " + messages.appName + '</title><meta charset="utf-8"><meta content="width=device-width,initial-scale=1.0,minimum-scale=1.0" name="viewport"><style>.nuxt-loader-bar{animation:gradient 2s infinite;animation-fill-mode:forwards;animation-timing-function:linear;background:repeating-linear-gradient(90deg,#36e4da 0,#1de0b1 25%,#00dc82 50%,#1de0b1 75%,#36e4da);background-position:0 0;background-size:200% auto;bottom:0;height:100px;height:5px;left:0;position:fixed;right:0}.visual-effects .nuxt-loader-bar{bottom:-50px;filter:blur(100px);height:100px;left:-50px;right:-50px}.visual-effects .mouse-gradient{background:repeating-linear-gradient(90deg,#00dc82 0,#1de0b1 50%,#36e4da);filter:blur(100px);opacity:.5}#animation-toggle{opacity:0;padding:10px;position:fixed;right:0;top:0;transition:opacity .4s ease-in}#animation-toggle:hover{opacity:.8}@keyframes gradient{0%{background-position:0 0}to{background-position:-200% 0}}@media (prefers-color-scheme:dark){body,html{color:#fff;color-scheme:dark}.nuxt-loader-bar{opacity:.5}}*,:after,:before{border-color:var(--un-default-border-color,#e5e7eb);border-style:solid;border-width:0;box-sizing:border-box}:after,:before{--un-content:""}html{line-height:1.5;-webkit-text-size-adjust:100%;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;-moz-tab-size:4;tab-size:4;-webkit-tap-highlight-color:transparent}body{line-height:inherit;margin:0}a{text-decoration:inherit}a,button{color:inherit}button{font-family:inherit;font-feature-settings:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;line-height:inherit;margin:0;padding:0;text-transform:none}[type=button],button{-webkit-appearance:button;background-color:transparent;background-image:none}button{cursor:pointer}svg{display:block;vertical-align:middle}*,:after,:before{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 transparent;--un-ring-shadow:0 0 transparent;--un-shadow-inset: ;--un-shadow:0 0 transparent;--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgba(147,197,253,.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: }.absolute{position:absolute}.relative{position:relative}.top-0{top:0}.z-20{z-index:20}.h-\\[200px\\]{height:200px}.min-h-screen{min-height:100vh}.w-\\[200px\\]{width:200px}.flex{display:flex}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-center{justify-content:center}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:9999px}.bg-white{--un-bg-opacity:1;background-color:rgb(255 255 255/var(--un-bg-opacity))}.text-center{text-align:center}.transition-opacity{transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}@media (prefers-color-scheme:dark){.dark\\:bg-black{--un-bg-opacity:1;background-color:rgb(0 0 0/var(--un-bg-opacity))}}</style><script>!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll(\'link[rel="modulepreload"]\'))r(e);new MutationObserver((e=>{for(const o of e)if("childList"===o.type)for(const e of o.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&r(e)})).observe(document,{childList:!0,subtree:!0})}function r(e){if(e.ep)return;e.ep=!0;const r=function(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?r.credentials="include":"anonymous"===e.crossOrigin?r.credentials="omit":r.credentials="same-origin",r}(e);fetch(e.href,r)}}();<\/script></head><body class="bg-white dark:bg-black flex flex-col items-center justify-center min-h-screen overflow-hidden relative text-center visual-effects"><div id="mouseLight" class="absolute h-[200px] mouse-gradient rounded-full top-0 transition-opacity w-[200px]"></div><a href="https://nuxt.com" target="_blank" rel="noopener" class="nuxt-logo z-20" aria-label="Nuxt"> <svg xmlns="http://www.w3.org/2000/svg" width="214" height="53" fill="none" class="nuxt-img" viewBox="0 0 800 200"><path fill="#00DC82" d="M168.303 200h111.522c3.543 0 7.022-.924 10.09-2.679A20.1 20.1 0 0 0 297.3 190a19.86 19.86 0 0 0 2.7-10.001 19.86 19.86 0 0 0-2.709-9.998L222.396 41.429a20.1 20.1 0 0 0-7.384-7.32 20.3 20.3 0 0 0-10.088-2.679c-3.541 0-7.02.925-10.087 2.68a20.1 20.1 0 0 0-7.384 7.32l-19.15 32.896L130.86 9.998a20.1 20.1 0 0 0-7.387-7.32A20.3 20.3 0 0 0 113.384 0c-3.542 0-7.022.924-10.09 2.679a20.1 20.1 0 0 0-7.387 7.319L2.709 170A19.85 19.85 0 0 0 0 179.999c-.002 3.511.93 6.96 2.7 10.001a20.1 20.1 0 0 0 7.385 7.321A20.3 20.3 0 0 0 20.175 200h70.004c27.737 0 48.192-12.075 62.266-35.633l34.171-58.652 18.303-31.389 54.93 94.285h-73.233zm-79.265-31.421-48.854-.011 73.232-125.706 36.541 62.853-24.466 42.01c-9.347 15.285-19.965 20.854-36.453 20.854"/><path fill="currentColor" d="M377 200a4 4 0 0 0 4-4v-93s5.244 8.286 15 25l38.707 66.961c1.789 3.119 5.084 5.039 8.649 5.039H470V50h-27a4 4 0 0 0-4 4v94l-17-30-36.588-62.98c-1.792-3.108-5.081-5.02-8.639-5.02H350v150zm299.203-56.143L710.551 92h-25.73a9.97 9.97 0 0 0-8.333 4.522L660.757 120.5l-15.731-23.978A9.97 9.97 0 0 0 636.693 92h-25.527l34.348 51.643L608.524 200h24.966a9.97 9.97 0 0 0 8.29-4.458l19.18-28.756 18.981 28.72a9.97 9.97 0 0 0 8.313 4.494h24.736zM724.598 92h19.714V60.071h28.251V92H800v24.857h-27.437V159.5c0 10.5 5.284 15.429 14.43 15.429H800V200h-16.869c-23.576 0-38.819-14.143-38.819-39.214v-43.929h-19.714zM590 92h-15c-3.489 0-6.218.145-8.5 2.523-2.282 2.246-2.5 3.63-2.5 7.066v52.486c0 8.058-.376 12.962-4 16.925-3.624 3.831-8.619 5-16 5-7.247 0-12.376-1.169-16-5-3.624-3.963-4-8.867-4-16.925v-52.486c0-3.435-.218-4.82-2.5-7.066C519.218 92.145 516.489 92 513 92h-15v62.422q0 21.006 11.676 33.292C517.594 195.905 529.103 200 544 200s26.204-4.095 34.123-12.286Q590 175.428 590 154.422z"/></svg> </a><button id="animation-toggle" type="button">Animation Enabled</button><div class="nuxt-loader-bar"></div><script>const ANIMATION_KEY="nuxt-loading-enable-animation",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);let isLowPerformance=checkIsLowPerformance(),enableAnimation="false"!==localStorage.getItem(ANIMATION_KEY)&&("true"===localStorage.getItem(ANIMATION_KEY)||!isLowPerformance);const mouseLight=window.document.getElementById("mouseLight"),nuxtImg=window.document.querySelector(".nuxt-img"),animationToggle=window.document.getElementById("animation-toggle"),body=window.document.body;let bodyRect;function checkIsLowPerformance(){return window.matchMedia("(prefers-reduced-motion: reduce)").matches||navigator.hardwareConcurrency<2||navigator.deviceMemory<1||isSafari}function calculateDistance(e,t,n){return Math.floor(Math.sqrt(Math.pow(t-(e.x+e.width/2),2)+Math.pow(n-(e.top+e.height/2),2)))}function onFocusOut(){enableAnimation&&(mouseLight.style.opacity=0,nuxtImg.style.opacity=.7)}function onMouseMove(e){if(!enableAnimation)return;const t=nuxtImg.getBoundingClientRect();bodyRect||(bodyRect=body.getBoundingClientRect());const n=calculateDistance(t,e.pageX,e.pageY),o=Math.max((1e3-n)/2/100,1);mouseLight.style.top=e.clientY-bodyRect.y-mouseLight.clientHeight/2+"px",mouseLight.style.left=e.clientX-mouseLight.clientWidth/2+"px",mouseLight.style.width=mouseLight.style.height=`${Math.max(Math.round(100*o),300)}px`,mouseLight.style.filter=`blur(${Math.min(Math.max(50*o,100),160)}px)`,mouseLight.style.opacity=Math.min(Math.max(o/4,.6),1);const i=`radial-gradient(circle at ${e.pageX-t.left}px ${e.pageY-t.top}px, black 75%, transparent 100%)`;nuxtImg.style["-webkit-mask-image"]=i,nuxtImg.style["mask-image"]=i,nuxtImg.style.opacity=Math.min(Math.max(o/4,.7),1)}function toggleAnimation(e=!enableAnimation){enableAnimation=e,document.body.classList.toggle("visual-effects",enableAnimation),e?(onFocusOut(),animationToggle.innerText="Animation Enabled"):(mouseLight.style.opacity=0,nuxtImg.style.opacity=1,nuxtImg.style["mask-image"]="",nuxtImg.style["-webkit-mask-image"]="",animationToggle.innerText="Animation Disabled"),localStorage.setItem(ANIMATION_KEY,enableAnimation?"true":"false")}if(animationToggle.addEventListener("click",(()=>toggleAnimation()),{passive:!0}),body.addEventListener("mousemove",onMouseMove,{passive:!0}),body.addEventListener("mouseleave",onFocusOut,{passive:!0}),toggleAnimation(enableAnimation),void 0===window.fetch)setTimeout((()=>window.location.reload()),1e3);else{const e=async()=>{try{if(!(await window.fetch(window.location.href).then((e=>e.text()))).includes("__NUXT_LOADING__"))return window.location.reload()}catch{}setTimeout(e,1e3)};e()}<\/script><script>function whatHemisphere(){let e=new Date;if(null==e.getTimezoneOffset)return null;e=e.getFullYear();let t=-new Date(e,0,1,0,0,0,0).getTimezoneOffset()- -new Date(e,6,1,0,0,0,0).getTimezoneOffset();return t<0?"N":t>0?"S":null}const months={N:[10,11,0],S:[4,5,6]},hemisphere=whatHemisphere();if(hemisphere&&months[hemisphere].includes((new Date).getMonth())){const e=document.createElement("canvas");e.style="position: fixed; inset: 0; z-index: -10; pointer-events: none; opacity: 0; transition: opacity 2s ease-in; filter: blur(4px);",document.body.appendChild(e),e.style.opacity=1;const t=25e-5,n={current:0,maxCurrent:4,force:.1,target:.1,min:.1,max:.4,easing:.01},r=1.25;let a=!1;function resize(){e.width=window.innerWidth,e.height=window.innerHeight,a=!0}function mod(e,t){return(e%t+t)%t}window.addEventListener("resize",resize),resize();let i=[],o=Date.now();const h=e.getContext("2d");function draw(){if(h.clearRect(0,0,e.width,e.height),!enableAnimation)return requestAnimationFrame(draw);a&&(i=Array.from({length:Math.floor(e.width*e.height*t)},(()=>({x:Math.random()*e.width,y:Math.random()*e.height,vx:1+Math.random(),vy:1+Math.random(),vsin:10*Math.random(),rangle:2*Math.random()*Math.PI,rsin:10*Math.random(),color:`rgba(255, 255, 255, ${.1+.15*Math.random()})`,size:5*Math.random()*4*(e.height/1e3)}))),a=!1);const m=Date.now(),s=m-o;o=m,n.force+=(n.target-n.force)*n.easing,n.current+=n.force*(.05*s),n.current=Math.max(-n.maxCurrent,Math.min(n.current,n.maxCurrent)),Math.random()>.995&&(n.target=(n.min+Math.random()*(n.max-n.min))*(Math.random()>.5?-1:1));const d=.2*s;i.forEach((t=>{t.x=mod(t.x+d+n.current*t.vx,e.width),t.y=mod(t.y+d*t.vy*r,e.height),t.x+=Math.sin(d*t.vsin)*t.rsin*.5,t.rangle+=.01*d,h.fillStyle=t.color,h.beginPath(),h.ellipse(t.x,t.y,t.size,.66*t.size,t.rangle,0,2*Math.PI),h.fill()})),requestAnimationFrame(draw)}draw()}<\/script></body></html>';
};
var dev = defineUntypedSchema({
  devServer: {
    /**
     * Whether to enable HTTPS.
     * @example
     * ```ts
     * export default defineNuxtConfig({
     *   devServer: {
     *     https: {
     *       key: './server.key',
     *       cert: './server.crt'
     *     }
     *   }
     * })
     * ```
     * @type {boolean | { key: string; cert: string }}
     */
    https: false,
    /** Dev server listening port */
    port: process.env.NUXT_PORT || process.env.NITRO_PORT || process.env.PORT || 3e3,
    /** Dev server listening host */
    host: process.env.NUXT_HOST || process.env.NITRO_HOST || process.env.HOST || void 0,
    /**
     * Listening dev server URL.
     *
     * This should not be set directly as it will always be overridden by the
     * dev server with the full URL (for module and internal use).
     */
    url: "http://localhost:3000",
    /**
     * Template to show a loading screen
     * @type {(data: { loading?: string }) => string}
     */
    loadingTemplate: template
  }
});
var experimental = defineUntypedSchema({
  /**
   * `future` is for early opting-in to new features that will become default in a future
   * (possibly major) version of the framework.
   */
  future: {
    /**
     * Enable early access to Nuxt v4 features or flags.
     *
     * Setting `compatibilityVersion` to `4` changes defaults throughout your
     * Nuxt configuration, but you can granularly re-enable Nuxt v3 behaviour
     * when testing (see example). Please file issues if so, so that we can
     * address in Nuxt or in the ecosystem.
     *
     * @example
     * ```ts
     * export default defineNuxtConfig({
     *   future: {
     *     compatibilityVersion: 4,
     *   },
     *   // To re-enable _all_ Nuxt v3 behaviour, set the following options:
     *   srcDir: '.',
     *   dir: {
     *     app: 'app'
     *   },
     *   experimental: {
     *     compileTemplate: true,
     *     templateUtils: true,
     *     relativeWatchPaths: true,
     *     resetAsyncDataToUndefined: true,
     *     defaults: {
     *       useAsyncData: {
     *         deep: true
     *       }
     *     }
     *   },
     *   unhead: {
     *     renderSSRHeadOptions: {
     *       omitLineBreaks: false
     *     }
     *   }
     * })
     * ```
     * @type {3 | 4}
     */
    compatibilityVersion: 3,
    /**
     * This enables early access to the experimental multi-app support.
     * @see [Nuxt Issue #21635](https://github.com/nuxt/nuxt/issues/21635)
     */
    multiApp: false,
    /**
     * This enables 'Bundler' module resolution mode for TypeScript, which is the recommended setting
     * for frameworks like Nuxt and Vite.
     *
     * It improves type support when using modern libraries with `exports`.
     *
     * You can set it to false to use the legacy 'Node' mode, which is the default for TypeScript.
     *
     * @see [TypeScript PR implementing `bundler` module resolution](https://github.com/microsoft/TypeScript/pull/51669)
     */
    typescriptBundlerResolution: {
      async $resolve(val, get) {
        val = val ?? await get("experimental").then((e) => e == null ? void 0 : e.typescriptBundlerResolution);
        if (typeof val === "boolean") {
          return val;
        }
        const setting = await get("typescript.tsConfig.compilerOptions.moduleResolution");
        if (setting) {
          return setting.toLowerCase() === "bundler";
        }
        return true;
      }
    }
  },
  /**
   * Some features of Nuxt are available on an opt-in basis, or can be disabled based on your needs.
   */
  features: {
    /**
     * Inline styles when rendering HTML (currently vite only).
     *
     * You can also pass a function that receives the path of a Vue component
     * and returns a boolean indicating whether to inline the styles for that component.
     * @type {boolean | ((id?: string) => boolean)}
     */
    inlineStyles: {
      async $resolve(val, get) {
        val = val ?? await get("experimental").then((e) => e == null ? void 0 : e.inlineSSRStyles);
        if (val === false || await get("dev") || await get("ssr") === false || await get("builder") === "@nuxt/webpack-builder") {
          return false;
        }
        return val ?? ((await get("future")).compatibilityVersion === 4 ? (id) => id && id.includes(".vue") : true);
      }
    },
    /**
     * Stream server logs to the client as you are developing. These logs can
     * be handled in the `dev:ssr-logs` hook.
     *
     * If set to `silent`, the logs will not be printed to the browser console.
     * @type {boolean | 'silent'}
     */
    devLogs: {
      async $resolve(val, get) {
        if (val !== void 0) {
          return val;
        }
        const [isDev, isTest] = await Promise.all([get("dev"), get("test")]);
        return isDev && !isTest;
      }
    },
    /**
     * Turn off rendering of Nuxt scripts and JS resource hints.
     * You can also disable scripts more granularly within `routeRules`.
     */
    noScripts: {
      async $resolve(val, get) {
        return val ?? await get("experimental").then((e) => e == null ? void 0 : e.noScripts) ?? false;
      }
    }
  },
  experimental: {
    /**
     * Set to true to generate an async entry point for the Vue bundle (for module federation support).
     */
    asyncEntry: {
      $resolve: (val) => val ?? false
    },
    // TODO: Remove when nitro has support for mocking traced dependencies
    // https://github.com/nitrojs/nitro/issues/1118
    /**
     * Externalize `vue`, `@vue/*` and `vue-router` when building.
     * @see [Nuxt Issue #13632](https://github.com/nuxt/nuxt/issues/13632)
     */
    externalVue: true,
    /**
     * Tree shakes contents of client-only components from server bundle.
     * @see [Nuxt PR #5750](https://github.com/nuxt/framework/pull/5750)
     * @deprecated This option will no longer be configurable in Nuxt v4
     */
    treeshakeClientOnly: {
      async $resolve(val, get) {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4 && val === false) {
          console.warn("Enabling `experimental.treeshakeClientOnly` in v4 compatibility mode as it will no longer be configurable in Nuxt v4.");
          return true;
        }
        return val ?? true;
      }
    },
    /**
     * Emit `app:chunkError` hook when there is an error loading vite/webpack
     * chunks.
     *
     * By default, Nuxt will also perform a reload of the new route
     * when a chunk fails to load when navigating to a new route (`automatic`).
     *
     * Setting `automatic-immediate` will lead Nuxt to perform a reload of the current route
     * right when a chunk fails to load (instead of waiting for navigation).
     *
     * You can disable automatic handling by setting this to `false`, or handle
     * chunk errors manually by setting it to `manual`.
     * @see [Nuxt PR #19038](https://github.com/nuxt/nuxt/pull/19038)
     * @type {false | 'manual' | 'automatic' | 'automatic-immediate'}
     */
    emitRouteChunkError: {
      $resolve: (val) => {
        if (val === true) {
          return "manual";
        }
        if (val === "reload") {
          return "automatic";
        }
        return val ?? "automatic";
      }
    },
    /**
     * By default the route object returned by the auto-imported `useRoute()` composable
     * is kept in sync with the current page in view in `<NuxtPage>`. This is not true for
     * `vue-router`'s exported `useRoute` or for the default `$route` object available in your
     * Vue templates.
     *
     * By enabling this option a mixin will be injected to keep the `$route` template object
     * in sync with Nuxt's managed `useRoute()`.
     */
    templateRouteInjection: true,
    /**
     * Whether to restore Nuxt app state from `sessionStorage` when reloading the page
     * after a chunk error or manual `reloadNuxtApp()` call.
     *
     * To avoid hydration errors, it will be applied only after the Vue app has been mounted,
     * meaning there may be a flicker on initial load.
     *
     * Consider carefully before enabling this as it can cause unexpected behavior, and
     * consider providing explicit keys to `useState` as auto-generated keys may not match
     * across builds.
     * @type {boolean}
     */
    restoreState: false,
    /** Render JSON payloads with support for revivifying complex types. */
    renderJsonPayloads: true,
    /**
     * Disable vue server renderer endpoint within nitro.
     */
    noVueServer: false,
    /**
     * When this option is enabled (by default) payload of pages that are prerendered are extracted
     * @type {boolean | undefined}
     */
    payloadExtraction: true,
    /**
     * Whether to enable the experimental `<NuxtClientFallback>` component for rendering content on the client
     * if there's an error in SSR.
     */
    clientFallback: false,
    /** Enable cross-origin prefetch using the Speculation Rules API. */
    crossOriginPrefetch: false,
    /**
     * Enable View Transition API integration with client-side router.
     * @see [View Transitions API](https://developer.chrome.com/docs/web-platform/view-transitions)
     * @type {boolean | 'always'}
     */
    viewTransition: false,
    /**
     * Write early hints when using node server.
     * @note nginx does not support 103 Early hints in the current version.
     */
    writeEarlyHints: false,
    /**
     * Experimental component islands support with `<NuxtIsland>` and `.island.vue` files.
     *
     * By default it is set to 'auto', which means it will be enabled only when there are islands,
     * server components or server pages in your app.
     * @type {true | 'auto' | 'local' | 'local+remote' | Partial<{ remoteIsland: boolean, selectiveClient: boolean | 'deep' }> | false}
     */
    componentIslands: {
      $resolve: (val) => {
        if (val === "local+remote") {
          return { remoteIsland: true };
        }
        if (val === "local") {
          return true;
        }
        return val ?? "auto";
      }
    },
    /**
     * Config schema support
     * @see [Nuxt Issue #15592](https://github.com/nuxt/nuxt/issues/15592)
     * @deprecated This option will no longer be configurable in Nuxt v4
     */
    configSchema: {
      async $resolve(val, get) {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4 && val === false) {
          console.warn("Enabling `experimental.configSchema` in v4 compatibility mode as it will no longer be configurable in Nuxt v4.");
          return true;
        }
        return val ?? true;
      }
    },
    /**
     * Whether or not to add a compatibility layer for modules, plugins or user code relying on the old
     * `@vueuse/head` API.
     *
     * This is disabled to reduce the client-side bundle by ~0.5kb.
     * @deprecated This feature will be removed in Nuxt v4.
     */
    polyfillVueUseHead: {
      async $resolve(val, get) {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4 && val === true) {
          console.warn("Disabling `experimental.polyfillVueUseHead` in v4 compatibility mode as it will no longer be configurable in Nuxt v4.");
          return false;
        }
        return val ?? false;
      }
    },
    /**
     * Allow disabling Nuxt SSR responses by setting the `x-nuxt-no-ssr` header.
     * @deprecated This feature will be removed in Nuxt v4.
     */
    respectNoSSRHeader: {
      async $resolve(val, get) {
        const isV4 = (await get("future")).compatibilityVersion === 4;
        if (isV4 && val === true) {
          console.warn("Disabling `experimental.respectNoSSRHeader` in v4 compatibility mode as it will no longer be configurable in Nuxt v4.");
          return false;
        }
        return val ?? false;
      }
    },
    /** Resolve `~`, `~~`, `@` and `@@` aliases located within layers with respect to their layer source and root directories. */
    localLayerAliases: true,
    /** Enable the new experimental typed router using [unplugin-vue-router](https://github.com/posva/unplugin-vue-router). */
    typedPages: false,
    /**
     * Use app manifests to respect route rules on client-side.
     */
    appManifest: true,
    /**
     * Set the time interval (in ms) to check for new builds. Disabled when `experimental.appManifest` is `false`.
     *
     * Set to `false` to disable.
     * @type {number | false}
     */
    checkOutdatedBuildInterval: 1e3 * 60 * 60,
    /**
     * Set an alternative watcher that will be used as the watching service for Nuxt.
     *
     * Nuxt uses 'chokidar-granular' if your source directory is the same as your root
     * directory . This will ignore top-level directories (like `node_modules` and `.git`)
     * that are excluded from watching.
     *
     * You can set this instead to `parcel` to use `@parcel/watcher`, which may improve
     * performance in large projects or on Windows platforms.
     *
     * You can also set this to `chokidar` to watch all files in your source directory.
     * @see [chokidar](https://github.com/paulmillr/chokidar)
     * @see [@parcel/watcher](https://github.com/parcel-bundler/watcher)
     * @type {'chokidar' | 'parcel' | 'chokidar-granular'}
     */
    watcher: {
      $resolve: async (val, get) => {
        if (val) {
          return val;
        }
        const [srcDir, rootDir] = await Promise.all([get("srcDir"), get("rootDir")]);
        if (srcDir === rootDir) {
          return "chokidar-granular";
        }
        return "chokidar";
      }
    },
    /**
     * Enable native async context to be accessible for nested composables
     * @see [Nuxt PR #20918](https://github.com/nuxt/nuxt/pull/20918)
     */
    asyncContext: false,
    /**
     * Use new experimental head optimisations:
     *
     * - Add the capo.js head plugin in order to render tags in of the head in a more performant way.
     * - Uses the hash hydration plugin to reduce initial hydration
     *
     * @see [Nuxt Discussion #22632](https://github.com/nuxt/nuxt/discussions/22632)
     */
    headNext: true,
    /**
     * Allow defining `routeRules` directly within your `~/pages` directory using `defineRouteRules`.
     *
     * Rules are converted (based on the path) and applied for server requests. For example, a rule
     * defined in `~/pages/foo/bar.vue` will be applied to `/foo/bar` requests. A rule in `~/pages/foo/[id].vue`
     * will be applied to `/foo/**` requests.
     *
     * For more control, such as if you are using a custom `path` or `alias` set in the page's `definePageMeta`, you
     * should set `routeRules` directly within your `nuxt.config`.
     */
    inlineRouteRules: false,
    /**
     * Allow exposing some route metadata defined in `definePageMeta` at build-time to modules (alias, name, path, redirect).
     *
     * This only works with static or strings/arrays rather than variables or conditional assignment.
     *
     * @see [Nuxt Issues #24770](https://github.com/nuxt/nuxt/issues/24770)
     * @type {boolean | 'after-resolve'}
     */
    scanPageMeta: {
      async $resolve(val, get) {
        return val ?? ((await get("future")).compatibilityVersion === 4 ? "after-resolve" : true);
      }
    },
    /**
     * Configure additional keys to extract from the page metadata when using `scanPageMeta`.
     *
     * This allows modules to access additional metadata from the page metadata. It's recommended
     * to augment the NuxtPage types with your keys.
     *
     * @type {string[]}
     */
    extraPageMetaExtractionKeys: [],
    /**
     * Automatically share payload _data_ between pages that are prerendered. This can result in a significant
     * performance improvement when prerendering sites that use `useAsyncData` or `useFetch` and fetch the same
     * data in different pages.
     *
     * It is particularly important when enabling this feature to make sure that any unique key of your data
     * is always resolvable to the same data. For example, if you are using `useAsyncData` to fetch
     * data related to a particular page, you should provide a key that uniquely matches that data. (`useFetch`
     * should do this automatically for you.)
     * @example
     * ```ts
     * // This would be unsafe in a dynamic page (e.g. `[slug].vue`) because the route slug makes a difference
     * // to the data fetched, but Nuxt can't know that because it's not reflected in the key.
     * const route = useRoute()
     * const { data } = await useAsyncData(async () => {
     *   return await $fetch(`/api/my-page/${route.params.slug}`)
     * })
     * // Instead, you should use a key that uniquely identifies the data fetched.
     * const { data } = await useAsyncData(route.params.slug, async () => {
     *   return await $fetch(`/api/my-page/${route.params.slug}`)
     * })
     * ```
     */
    sharedPrerenderData: {
      async $resolve(val, get) {
        return val ?? (await get("future")).compatibilityVersion === 4;
      }
    },
    /**
     * Enables CookieStore support to listen for cookie updates (if supported by the browser) and refresh `useCookie` ref values.
     * @see [CookieStore](https://developer.mozilla.org/en-US/docs/Web/API/CookieStore)
     */
    cookieStore: true,
    /**
     * This allows specifying the default options for core Nuxt components and composables.
     *
     * These options will likely be moved elsewhere in the future, such as into `app.config` or into the
     * `app/` directory.
     */
    defaults: {
      /** @type {typeof import('nuxt/app')['NuxtLinkOptions']} */
      nuxtLink: {
        componentName: "NuxtLink",
        prefetch: true,
        prefetchOn: {
          visibility: true
        }
      },
      /**
       * Options that apply to `useAsyncData` (and also therefore `useFetch`)
       */
      useAsyncData: {
        /** @type {'undefined' | 'null'} */
        value: {
          async $resolve(val, get) {
            return val ?? ((await get("future")).compatibilityVersion === 4 ? "undefined" : "null");
          }
        },
        /** @type {'undefined' | 'null'} */
        errorValue: {
          async $resolve(val, get) {
            return val ?? ((await get("future")).compatibilityVersion === 4 ? "undefined" : "null");
          }
        },
        deep: {
          async $resolve(val, get) {
            return val ?? !((await get("future")).compatibilityVersion === 4);
          }
        }
      },
      /** @type {Pick<typeof import('ofetch')['FetchOptions'], 'timeout' | 'retry' | 'retryDelay' | 'retryStatusCodes'>} */
      useFetch: {}
    },
    /**
     * Automatically polyfill Node.js imports in the client build using `unenv`.
     * @see [unenv](https://github.com/unjs/unenv)
     *
     * **Note:** To make globals like `Buffer` work in the browser, you need to manually inject them.
     *
     * ```ts
     * import { Buffer } from 'node:buffer'
     *
     * globalThis.Buffer = globalThis.Buffer || Buffer
     * ```
     * @type {boolean}
     */
    clientNodeCompat: false,
    /**
     * Whether to use `lodash.template` to compile Nuxt templates.
     *
     * This flag will be removed with the release of v4 and exists only for
     * advance testing within Nuxt v3.12+ or in [the nightly release channel](/docs/guide/going-further/nightly-release-channel).
     */
    compileTemplate: {
      async $resolve(val, get) {
        return val ?? (await get("future")).compatibilityVersion !== 4;
      }
    },
    /**
     * Whether to provide a legacy `templateUtils` object (with `serialize`,
     * `importName` and `importSources`) when compiling Nuxt templates.
     *
     * This flag will be removed with the release of v4 and exists only for
     * advance testing within Nuxt v3.12+ or in [the nightly release channel](/docs/guide/going-further/nightly-release-channel).
     */
    templateUtils: {
      async $resolve(val, get) {
        return val ?? (await get("future")).compatibilityVersion !== 4;
      }
    },
    /**
     * Whether to provide relative paths in the `builder:watch` hook.
     *
     * This flag will be removed with the release of v4 and exists only for
     * advance testing within Nuxt v3.12+ or in [the nightly release channel](/docs/guide/going-further/nightly-release-channel).
     */
    relativeWatchPaths: {
      async $resolve(val, get) {
        return val ?? (await get("future")).compatibilityVersion !== 4;
      }
    },
    /**
     * Whether `clear` and `clearNuxtData` should reset async data to its _default_ value or update
     * it to `null`/`undefined`.
     */
    resetAsyncDataToUndefined: {
      async $resolve(val, get) {
        return val ?? (await get("future")).compatibilityVersion !== 4;
      }
    },
    /**
     * Wait for a single animation frame before navigation, which gives an opportunity
     * for the browser to repaint, acknowledging user interaction.
     *
     * It can reduce INP when navigating on prerendered routes.
     */
    navigationRepaint: true,
    /**
     * Cache Nuxt/Nitro build artifacts based on a hash of the configuration and source files.
     *
     * This only works for source files within `srcDir` and `serverDir` for the Vue/Nitro parts of your app.
     */
    buildCache: false,
    /**
     * Ensure that auto-generated Vue component names match the full component name
     * you would use to auto-import the component.
     */
    normalizeComponentNames: {
      $resolve: async (val, get) => {
        return val ?? (await get("future")).compatibilityVersion === 4;
      }
    },
    /**
     * Keep showing the spa-loading-template until suspense:resolve
     * @see [Nuxt Issues #24770](https://github.com/nuxt/nuxt/issues/21721)
     * @type {'body' | 'within'}
     */
    spaLoadingTemplateLocation: {
      $resolve: async (val, get) => {
        return val ?? ((await get("future")).compatibilityVersion === 4 ? "body" : "within");
      }
    },
    /**
     * Enable timings for Nuxt application hooks in the performance panel of Chromium-based browsers.
     *
     * @see [the Chrome DevTools extensibility API](https://developer.chrome.com/docs/devtools/performance/extension#tracks)
     */
    browserDevtoolsTiming: {
      $resolve: async (val, get) => val ?? await get("dev")
    }
  }
});
var generate = defineUntypedSchema({
  generate: {
    /**
     * The routes to generate.
     *
     * If you are using the crawler, this will be only the starting point for route generation.
     * This is often necessary when using dynamic routes.
     *
     * It is preferred to use `nitro.prerender.routes`.
     * @example
     * ```js
     * routes: ['/users/1', '/users/2', '/users/3']
     * ```
     * @type {string | string[]}
     */
    routes: [],
    /**
     * This option is no longer used. Instead, use `nitro.prerender.ignore`.
     * @deprecated
     */
    exclude: []
  }
});
var internal = defineUntypedSchema({
  /** @private */
  _majorVersion: 3,
  /** @private */
  _legacyGenerate: false,
  /** @private */
  _start: false,
  /** @private */
  _build: false,
  /** @private */
  _generate: false,
  /** @private */
  _prepare: false,
  /** @private */
  _cli: false,
  /** @private */
  _requiredModules: {},
  /** @private */
  _nuxtConfigFile: void 0,
  /** @private */
  _nuxtConfigFiles: [],
  /** @private */
  appDir: "",
  /**
   * @private
   * @type {Array<{ meta: ModuleMeta; timings?: Record<string, number | undefined>; entryPath?: string }>}
   */
  _installedModules: [],
  /** @private */
  _modules: []
});
var nitro = defineUntypedSchema({
  /**
   * Configuration for Nitro.
   * @see [Nitro configuration docs](https://nitro.unjs.io/config/)
   * @type {typeof import('nitropack')['NitroConfig']}
   */
  nitro: {
    runtimeConfig: {
      $resolve: async (val, get) => {
        const runtimeConfig = await get("runtimeConfig");
        return {
          ...runtimeConfig,
          app: {
            ...runtimeConfig.app,
            baseURL: runtimeConfig.app.baseURL.startsWith("./") ? runtimeConfig.app.baseURL.slice(1) : runtimeConfig.app.baseURL
          },
          nitro: {
            envPrefix: "NUXT_",
            ...runtimeConfig.nitro
          }
        };
      }
    },
    routeRules: {
      $resolve: async (val, get) => ({
        ...await get("routeRules"),
        ...val
      })
    }
  },
  /**
   * Global route options applied to matching server routes.
   * @experimental This is an experimental feature and API may change in the future.
   * @see [Nitro route rules documentation](https://nitro.unjs.io/config/#routerules)
   * @type {typeof import('nitropack')['NitroConfig']['routeRules']}
   */
  routeRules: {},
  /**
   * Nitro server handlers.
   *
   * Each handler accepts the following options:
   *
   * - handler: The path to the file defining the handler.
   * - route: The route under which the handler is available. This follows the conventions of [rou3](https://github.com/unjs/rou3).
   * - method: The HTTP method of requests that should be handled.
   * - middleware: Specifies whether it is a middleware handler.
   * - lazy: Specifies whether to use lazy loading to import the handler.
   *
   * @see [`server/` directory documentation](https://nuxt.com/docs/guide/directory-structure/server)
   * @note Files from `server/api`, `server/middleware` and `server/routes` will be automatically registered by Nuxt.
   * @example
   * ```js
   * serverHandlers: [
   *   { route: '/path/foo/**:name', handler: '~/server/foohandler.ts' }
   * ]
   * ```
   * @type {typeof import('nitropack')['NitroEventHandler'][]}
   */
  serverHandlers: [],
  /**
   * Nitro development-only server handlers.
   * @see [Nitro server routes documentation](https://nitro.unjs.io/guide/routing)
   * @type {typeof import('nitropack')['NitroDevEventHandler'][]}
   */
  devServerHandlers: []
});
var ensureItemIsLast = (item) => (arr) => {
  const index2 = arr.indexOf(item);
  if (index2 !== -1) {
    arr.splice(index2, 1);
    arr.push(item);
  }
  return arr;
};
var orderPresets = {
  cssnanoLast: ensureItemIsLast("cssnano"),
  autoprefixerLast: ensureItemIsLast("autoprefixer"),
  autoprefixerAndCssnanoLast(names) {
    return orderPresets.cssnanoLast(orderPresets.autoprefixerLast(names));
  }
};
var postcss = defineUntypedSchema({
  postcss: {
    /**
     * A strategy for ordering PostCSS plugins.
     *
     * @type {'cssnanoLast' | 'autoprefixerLast' | 'autoprefixerAndCssnanoLast' | string[] | ((names: string[]) => string[])}
     */
    order: {
      $resolve: (val) => {
        if (typeof val === "string") {
          if (!(val in orderPresets)) {
            throw new Error(`[nuxt] Unknown PostCSS order preset: ${val}`);
          }
          return orderPresets[val];
        }
        return val ?? orderPresets.autoprefixerAndCssnanoLast;
      }
    },
    /**
     * Options for configuring PostCSS plugins.
     *
     * @see [PostCSS docs](https://postcss.org/)
     * @type {Record<string, unknown> & { autoprefixer?: typeof import('autoprefixer').Options; cssnano?: typeof import('cssnano').Options }}
     */
    plugins: {
      /**
       * Plugin to parse CSS and add vendor prefixes to CSS rules.
       *
       * @see [`autoprefixer`](https://github.com/postcss/autoprefixer)
       */
      autoprefixer: {},
      /**
       * @see [`cssnano` configuration options](https://cssnano.github.io/cssnano/docs/config-file/#configuration-options)
       */
      cssnano: {
        $resolve: async (val, get) => {
          if (val || val === false) {
            return val;
          }
          if (await get("dev")) {
            return false;
          }
          return {};
        }
      }
    }
  }
});
var router = defineUntypedSchema({
  router: {
    /**
     * Additional router options passed to `vue-router`. On top of the options for `vue-router`,
     * Nuxt offers additional options to customize the router (see below).
     * @note Only JSON serializable options should be passed by Nuxt config.
     * For more control, you can use `app/router.options.ts` file.
     * @see [Vue Router documentation](https://router.vuejs.org/api/interfaces/routeroptions.html).
     * @type {typeof import('../src/types/router').RouterConfigSerializable}
     */
    options: {
      /**
       * You can enable hash history in SPA mode. In this mode, router uses a hash character (#) before
       * the actual URL that is internally passed. When enabled, the
       * **URL is never sent to the server** and **SSR is not supported**.
       * @type {typeof import('../src/types/router').RouterConfigSerializable['hashMode']}
       * @default false
       */
      hashMode: false,
      /**
       * Customize the scroll behavior for hash links.
       * @type {typeof import('../src/types/router').RouterConfigSerializable['scrollBehaviorType']}
       * @default 'auto'
       */
      scrollBehaviorType: "auto"
    }
  }
});
var typescript = defineUntypedSchema({
  /**
   * Configuration for Nuxt's TypeScript integration.
   *
   */
  typescript: {
    /**
     * TypeScript comes with certain checks to give you more safety and analysis of your program.
     * Once you’ve converted your codebase to TypeScript, you can start enabling these checks for greater safety.
     * [Read More](https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#getting-stricter-checks)
     */
    strict: true,
    /**
     * Which builder types to include for your project.
     *
     * By default Nuxt infers this based on your `builder` option (defaulting to 'vite') but you can either turn off
     * builder environment types (with `false`) to handle this fully yourself, or opt for a 'shared' option.
     *
     * The 'shared' option is advised for module authors, who will want to support multiple possible builders.
     * @type {'vite' | 'webpack' | 'rspack' | 'shared' | false | undefined}
     */
    builder: {
      $resolve: (val) => val ?? null
    },
    /**
     * Modules to generate deep aliases for within `compilerOptions.paths`. This does not yet support subpaths.
     * It may be necessary when using Nuxt within a pnpm monorepo with `shamefully-hoist=false`.
     */
    hoist: {
      $resolve: (val) => {
        const defaults3 = [
          // Nitro auto-imported/augmented dependencies
          "nitropack/types",
          "nitropack/runtime",
          "nitropack",
          "defu",
          "h3",
          "consola",
          "ofetch",
          // Key nuxt dependencies
          "@unhead/vue",
          "@nuxt/devtools",
          "vue",
          "@vue/runtime-core",
          "@vue/compiler-sfc",
          "vue-router",
          "vue-router/auto-routes",
          "unplugin-vue-router/client",
          "@nuxt/schema",
          "nuxt"
        ];
        return val === false ? [] : Array.isArray(val) ? val.concat(defaults3) : defaults3;
      }
    },
    /**
     * Include parent workspace in the Nuxt project. Mostly useful for themes and module authors.
     */
    includeWorkspace: false,
    /**
     * Enable build-time type checking.
     *
     * If set to true, this will type check in development. You can restrict this to build-time type checking by setting it to `build`.
     * Requires to install `typescript` and `vue-tsc` as dev dependencies.
     * @see [Nuxt TypeScript docs](https://nuxt.com/docs/guide/concepts/typescript)
     * @type {boolean | 'build'}
     */
    typeCheck: false,
    /**
     * You can extend generated `.nuxt/tsconfig.json` using this option.
     * @type {0 extends 1 & VueCompilerOptions ? typeof import('pkg-types')['TSConfig'] : typeof import('pkg-types')['TSConfig'] & { vueCompilerOptions?: typeof import('@vue/language-core')['VueCompilerOptions']}}
     */
    tsConfig: {},
    /**
     * Generate a `*.vue` shim.
     *
     * We recommend instead letting the [official Vue extension](https://marketplace.visualstudio.com/items?itemName=Vue.volar)
     * generate accurate types for your components.
     *
     * Note that you may wish to set this to `true` if you are using other libraries, such as ESLint,
     * that are unable to understand the type of `.vue` files.
     */
    shim: false
  }
});
var vite = defineUntypedSchema({
  /**
   * Configuration that will be passed directly to Vite.
   *
   * @see [Vite configuration docs](https://vite.dev/config) for more information.
   * Please note that not all vite options are supported in Nuxt.
   * @type {typeof import('../src/types/config').ViteConfig & { $client?: typeof import('../src/types/config').ViteConfig, $server?: typeof import('../src/types/config').ViteConfig }}
   */
  vite: {
    root: {
      $resolve: async (val, get) => val ?? await get("srcDir")
    },
    mode: {
      $resolve: async (val, get) => val ?? (await get("dev") ? "development" : "production")
    },
    define: {
      $resolve: async (val, get) => {
        const [isDev, isDebug] = await Promise.all([get("dev"), get("debug")]);
        return {
          "__VUE_PROD_HYDRATION_MISMATCH_DETAILS__": isDebug,
          "process.dev": isDev,
          "import.meta.dev": isDev,
          "process.test": A,
          "import.meta.test": A,
          ...val
        };
      }
    },
    resolve: {
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
    },
    publicDir: {
      $resolve: (val) => {
        if (val) {
          consola.warn("Directly configuring the `vite.publicDir` option is not supported. Instead, set `dir.public`. You can read more in `https://nuxt.com/docs/api/nuxt-config#public`.");
        }
        return false;
      }
    },
    vue: {
      isProduction: {
        $resolve: async (val, get) => val ?? !await get("dev")
      },
      template: {
        compilerOptions: {
          $resolve: async (val, get) => val ?? (await get("vue")).compilerOptions
        },
        transformAssetUrls: {
          $resolve: async (val, get) => val ?? (await get("vue")).transformAssetUrls
        }
      },
      script: {
        hoistStatic: {
          $resolve: async (val, get) => {
            var _a7;
            return val ?? ((_a7 = (await get("vue")).compilerOptions) == null ? void 0 : _a7.hoistStatic);
          }
        }
      },
      features: {
        propsDestructure: {
          $resolve: async (val, get) => {
            var _a7;
            if (val !== void 0 && val !== null) {
              return val;
            }
            const vueOptions = await get("vue") || {};
            return Boolean(((_a7 = vueOptions.script) == null ? void 0 : _a7.propsDestructure) ?? vueOptions.propsDestructure);
          }
        }
      }
    },
    vueJsx: {
      $resolve: async (val, get) => {
        var _a7;
        return {
          isCustomElement: (_a7 = (await get("vue")).compilerOptions) == null ? void 0 : _a7.isCustomElement,
          ...val
        };
      }
    },
    optimizeDeps: {
      exclude: {
        $resolve: async (val, get) => [
          ...val || [],
          ...(await get("build.transpile")).filter((i2) => typeof i2 === "string"),
          "vue-demi"
        ]
      }
    },
    esbuild: {
      jsxFactory: "h",
      jsxFragment: "Fragment",
      tsconfigRaw: "{}"
    },
    clearScreen: true,
    build: {
      assetsDir: {
        $resolve: async (val, get) => val ?? withoutLeadingSlash((await get("app")).buildAssetsDir)
      },
      emptyOutDir: false
    },
    server: {
      fs: {
        allow: {
          $resolve: async (val, get) => {
            const [buildDir, srcDir, rootDir, workspaceDir, modulesDir] = await Promise.all([get("buildDir"), get("srcDir"), get("rootDir"), get("workspaceDir"), get("modulesDir")]);
            return [.../* @__PURE__ */ new Set([
              buildDir,
              srcDir,
              rootDir,
              workspaceDir,
              ...modulesDir,
              ...val ?? []
            ])];
          }
        }
      }
    },
    cacheDir: {
      $resolve: async (val, get) => val ?? resolve4(await get("rootDir"), "node_modules/.cache/vite")
    }
  }
});
var webpack = defineUntypedSchema({
  webpack: {
    /**
     * Nuxt uses `webpack-bundle-analyzer` to visualize your bundles and how to optimize them.
     *
     * Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).
     * @example
     * ```js
     * analyze: {
     *   analyzerMode: 'static'
     * }
     * ```
     * @type {boolean | { enabled?: boolean } & typeof import('webpack-bundle-analyzer').BundleAnalyzerPlugin.Options}
     */
    analyze: {
      $resolve: async (val, get) => {
        const value2 = typeof val === "boolean" ? { enabled: val } : val;
        return defu3(value2, await get("build.analyze"));
      }
    },
    /**
     * Enable the profiler in webpackbar.
     *
     * It is normally enabled by CLI argument `--profile`.
     * @see [webpackbar](https://github.com/unjs/webpackbar#profile).
     */
    profile: process.argv.includes("--profile"),
    /**
     * Enables Common CSS Extraction.
     *
     * Using [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) under the hood, your CSS will be extracted
     * into separate files, usually one per component. This allows caching your CSS and
     * JavaScript separately.
     * @example
     * ```js
     * export default {
     *   webpack: {
     *     extractCSS: true,
     *     // or
     *     extractCSS: {
     *       ignoreOrder: true
     *     }
     *   }
     * }
     * ```
     *
     * If you want to extract all your CSS to a single file, there is a workaround for this.
     * However, note that it is not recommended to extract everything into a single file.
     * Extracting into multiple CSS files is better for caching and preload isolation. It
     * can also improve page performance by downloading and resolving only those resources
     * that are needed.
     * @example
     * ```js
     * export default {
     *   webpack: {
     *     extractCSS: true,
     *     optimization: {
     *       splitChunks: {
     *         cacheGroups: {
     *           styles: {
     *             name: 'styles',
     *             test: /\.(css|vue)$/,
     *             chunks: 'all',
     *             enforce: true
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     * @type {boolean | typeof import('mini-css-extract-plugin').PluginOptions}
     */
    extractCSS: true,
    /**
     * Enables CSS source map support (defaults to `true` in development).
     */
    cssSourceMap: {
      $resolve: async (val, get) => val ?? await get("dev")
    },
    /**
     * The polyfill library to load to provide URL and URLSearchParams.
     *
     * Defaults to `'url'` ([see package](https://www.npmjs.com/package/url)).
     */
    serverURLPolyfill: "url",
    /**
     * Customize bundle filenames.
     *
     * To understand a bit more about the use of manifests, take a look at [webpack documentation](https://webpack.js.org/guides/code-splitting/).
     * @note Be careful when using non-hashed based filenames in production
     * as most browsers will cache the asset and not detect the changes on first load.
     *
     * This example changes fancy chunk names to numerical ids:
     * @example
     * ```js
     * filenames: {
     *   chunk: ({ isDev }) => (isDev ? '[name].js' : '[id].[contenthash].js')
     * }
     * ```
     * @type {
     *  Record<
     *    string,
     *    string |
     *    ((
     *      ctx: {
     *        nuxt: import('../src/types/nuxt').Nuxt,
     *        options: import('../src/types/nuxt').Nuxt['options'],
     *        name: string,
     *        isDev: boolean,
     *        isServer: boolean,
     *        isClient: boolean,
     *        alias: { [index: string]: string | false | string[] },
     *        transpile: RegExp[]
     *      }) => string)
     *  >
     * }
     */
    filenames: {
      app: ({ isDev }) => isDev ? "[name].js" : "[contenthash:7].js",
      chunk: ({ isDev }) => isDev ? "[name].js" : "[contenthash:7].js",
      css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
      img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
      font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
      video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
    },
    /**
     * Customize the options of Nuxt's integrated webpack loaders.
     */
    loaders: {
      $resolve: async (val, get) => {
        const loaders = val && typeof val === "object" ? val : {};
        const styleLoaders = [
          "css",
          "cssModules",
          "less",
          "sass",
          "scss",
          "stylus",
          "vueStyle"
        ];
        for (const name of styleLoaders) {
          const loader = loaders[name];
          if (loader && loader.sourceMap === void 0) {
            loader.sourceMap = Boolean(await get("build.cssSourceMap"));
          }
        }
        return loaders;
      },
      /**
       * @see [esbuild loader](https://github.com/esbuild-kit/esbuild-loader)
       * @type {Omit<typeof import('esbuild-loader')['LoaderOptions'], 'loader'>}
       */
      esbuild: {
        jsxFactory: "h",
        jsxFragment: "Fragment",
        tsconfigRaw: "{}"
      },
      /**
       * @see [`file-loader` Options](https://github.com/webpack-contrib/file-loader#options)
       * @type {Omit<typeof import('file-loader')['Options'], 'name'>}
       * @default
       * ```ts
       * { esModule: false }
       * ```
       */
      file: { esModule: false },
      /**
       * @see [`file-loader` Options](https://github.com/webpack-contrib/file-loader#options)
       * @type {Omit<typeof import('file-loader')['Options'], 'name'>}
       * @default
       * ```ts
       * { esModule: false, limit: 1000  }
       * ```
       */
      fontUrl: { esModule: false, limit: 1e3 },
      /**
       * @see [`file-loader` Options](https://github.com/webpack-contrib/file-loader#options)
       * @type {Omit<typeof import('file-loader')['Options'], 'name'>}
       * @default
       * ```ts
       * { esModule: false, limit: 1000  }
       * ```
       */
      imgUrl: { esModule: false, limit: 1e3 },
      /**
       * @see [`pug` options](https://pugjs.org/api/reference.html#options)
       * @type {typeof import('pug')['Options']}
       */
      pugPlain: {},
      /**
       * See [vue-loader](https://github.com/vuejs/vue-loader) for available options.
       * @type {Partial<typeof import('vue-loader')['VueLoaderOptions']>}
       */
      vue: {
        transformAssetUrls: {
          $resolve: async (val, get) => val ?? await get("vue.transformAssetUrls")
        },
        compilerOptions: {
          $resolve: async (val, get) => val ?? await get("vue.compilerOptions")
        },
        propsDestructure: {
          $resolve: async (val, get) => Boolean(val ?? await get("vue.propsDestructure"))
        }
      },
      css: {
        importLoaders: 0,
        url: {
          filter: (url, _resourcePath) => url[0] !== "/"
        },
        esModule: false
      },
      cssModules: {
        importLoaders: 0,
        url: {
          filter: (url, _resourcePath) => url[0] !== "/"
        },
        esModule: false,
        modules: {
          localIdentName: "[local]_[hash:base64:5]"
        }
      },
      /**
       * @see [`less-loader` Options](https://github.com/webpack-contrib/less-loader#options)
       */
      less: {},
      /**
       * @see [`sass-loader` Options](https://github.com/webpack-contrib/sass-loader#options)
       * @type {typeof import('sass-loader')['Options']}
       * @default
       * ```ts
       * {
       *   sassOptions: {
       *     indentedSyntax: true
       *   }
       * }
       * ```
       */
      sass: {
        sassOptions: {
          indentedSyntax: true
        }
      },
      /**
       * @see [`sass-loader` Options](https://github.com/webpack-contrib/sass-loader#options)
       * @type {typeof import('sass-loader')['Options']}
       */
      scss: {},
      /**
       * @see [`stylus-loader` Options](https://github.com/webpack-contrib/stylus-loader#options)
       */
      stylus: {},
      vueStyle: {}
    },
    /**
     * Add webpack plugins.
     * @example
     * ```js
     * import webpack from 'webpack'
     * import { version } from './package.json'
     * // ...
     * plugins: [
     *   new webpack.DefinePlugin({
     *     'process.VERSION': version
     *   })
     * ]
     * ```
     */
    plugins: [],
    /**
     * Hard-replaces `typeof process`, `typeof window` and `typeof document` to tree-shake bundle.
     */
    aggressiveCodeRemoval: false,
    /**
     * OptimizeCSSAssets plugin options.
     *
     * Defaults to true when `extractCSS` is enabled.
     * @see [css-minimizer-webpack-plugin documentation](https://github.com/webpack-contrib/css-minimizer-webpack-plugin).
     * @type {false | typeof import('css-minimizer-webpack-plugin').BasePluginOptions & typeof import('css-minimizer-webpack-plugin').DefinedDefaultMinimizerAndOptions<any>}
     */
    optimizeCSS: {
      $resolve: async (val, get) => val ?? (await get("build.extractCSS") ? {} : false)
    },
    /**
     * Configure [webpack optimization](https://webpack.js.org/configuration/optimization/).
     * @type {false | typeof import('webpack').Configuration['optimization']}
     */
    optimization: {
      runtimeChunk: "single",
      /** Set minimize to `false` to disable all minimizers. (It is disabled in development by default). */
      minimize: { $resolve: async (val, get) => val ?? !await get("dev") },
      /** You can set minimizer to a customized array of plugins. */
      minimizer: void 0,
      splitChunks: {
        chunks: "all",
        automaticNameDelimiter: "/",
        cacheGroups: {}
      }
    },
    /**
     * Customize PostCSS Loader.
     * same options as [`postcss-loader` options](https://github.com/webpack-contrib/postcss-loader#options)
     * @type {{ execute?: boolean, postcssOptions: typeof import('postcss').ProcessOptions, sourceMap?: boolean, implementation?: any }}
     */
    postcss: {
      postcssOptions: {
        config: {
          $resolve: async (val, get) => val ?? await get("postcss.config")
        },
        plugins: {
          $resolve: async (val, get) => val ?? await get("postcss.plugins")
        }
      }
    },
    /**
     * See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.
     * @type {typeof import('webpack-dev-middleware').Options<typeof import('http').IncomingMessage, typeof import('http').ServerResponse>}
     */
    devMiddleware: {
      stats: "none"
    },
    /**
     * See [webpack-hot-middleware](https://github.com/webpack-contrib/webpack-hot-middleware) for available options.
     * @type {typeof import('webpack-hot-middleware').MiddlewareOptions & { client?: typeof import('webpack-hot-middleware').ClientOptions }}
     */
    hotMiddleware: {},
    /**
     * Set to `false` to disable the overlay provided by [FriendlyErrorsWebpackPlugin](https://github.com/nuxt/friendly-errors-webpack-plugin).
     */
    friendlyErrors: true,
    /**
     * Filters to hide build warnings.
     * @type {Array<(warn: typeof import('webpack').WebpackError) => boolean>}
     */
    warningIgnoreFilters: [],
    /**
     * Configure [webpack experiments](https://webpack.js.org/configuration/experiments/)
     * @type {false | typeof import('webpack').Configuration['experiments']}
     */
    experiments: {}
  }
});
var index = {
  ...adhoc,
  ...app,
  ...build,
  ...common,
  ...dev,
  ...experimental,
  ...generate,
  ...internal,
  ...nitro,
  ...postcss,
  ...router,
  ...typescript,
  ...vite,
  ...webpack
};

// node_modules/@nuxt/kit/dist/index.mjs
var import_node_process3 = __toESM(require_node_process(), 1);
import { klona } from "klona";
var import_semver = __toESM(require_semver2(), 1);
var logger = consola2;
var nuxtCtx = getContext("nuxt");
function useNuxt() {
  const instance = nuxtCtx.tryUse();
  if (!instance) {
    throw new Error("Nuxt instance is unavailable!");
  }
  return instance;
}
function tryUseNuxt() {
  return nuxtCtx.tryUse();
}
var SEMANTIC_VERSION_RE = /-\d+\.[0-9a-f]+/;
function normalizeSemanticVersion(version) {
  return version.replace(SEMANTIC_VERSION_RE, "");
}
var builderMap = {
  "@nuxt/rspack-builder": "rspack",
  "@nuxt/vite-builder": "vite",
  "@nuxt/webpack-builder": "webpack"
};
async function checkNuxtCompatibility(constraints, nuxt = useNuxt()) {
  const issues = [];
  if (constraints.nuxt) {
    const nuxtVersion = getNuxtVersion(nuxt);
    if (!(0, import_satisfies.default)(normalizeSemanticVersion(nuxtVersion), constraints.nuxt, { includePrerelease: true })) {
      issues.push({
        name: "nuxt",
        message: `Nuxt version \`${constraints.nuxt}\` is required but currently using \`${nuxtVersion}\``
      });
    }
  }
  if (isNuxt2(nuxt)) {
    const bridgeRequirement = constraints.bridge;
    const hasBridge = !!nuxt.options.bridge;
    if (bridgeRequirement === true && !hasBridge) {
      issues.push({
        name: "bridge",
        message: "Nuxt bridge is required"
      });
    } else if (bridgeRequirement === false && hasBridge) {
      issues.push({
        name: "bridge",
        message: "Nuxt bridge is not supported"
      });
    }
  }
  if (constraints.builder && typeof nuxt.options.builder === "string") {
    const currentBuilder = builderMap[nuxt.options.builder] || nuxt.options.builder;
    if (currentBuilder in constraints.builder) {
      const constraint = constraints.builder[currentBuilder];
      if (constraint === false) {
        issues.push({
          name: "builder",
          message: `Not compatible with \`${nuxt.options.builder}\`.`
        });
      } else {
        const builderVersion = await readPackageJSON(nuxt.options.builder, { url: nuxt.options.modulesDir }).then((r2) => r2.version).catch(() => void 0);
        if (builderVersion && !(0, import_satisfies.default)(normalizeSemanticVersion(builderVersion), constraint, { includePrerelease: true })) {
          issues.push({
            name: "builder",
            message: `Not compatible with \`${builderVersion}\` of \`${currentBuilder}\`. This module requires \`${constraint}\`.`
          });
        }
      }
    }
  }
  await nuxt.callHook("kit:compatibility", constraints, issues);
  issues.toString = () => issues.map((issue) => ` - [${issue.name}] ${issue.message}`).join("\n");
  return issues;
}
async function assertNuxtCompatibility(constraints, nuxt = useNuxt()) {
  const issues = await checkNuxtCompatibility(constraints, nuxt);
  if (issues.length) {
    throw new Error("Nuxt compatibility issues found:\n" + issues.toString());
  }
  return true;
}
function isNuxtMajorVersion(majorVersion, nuxt = useNuxt()) {
  const version = getNuxtVersion(nuxt);
  return version[0] === majorVersion.toString() && version[1] === ".";
}
function isNuxt2(nuxt = useNuxt()) {
  return isNuxtMajorVersion(2, nuxt);
}
var NUXT_VERSION_RE = /^v/g;
function getNuxtVersion(nuxt = useNuxt()) {
  var _a7;
  const rawVersion = (nuxt == null ? void 0 : nuxt._version) || (nuxt == null ? void 0 : nuxt.version) || ((_a7 = nuxt == null ? void 0 : nuxt.constructor) == null ? void 0 : _a7.version);
  if (typeof rawVersion !== "string") {
    throw new TypeError("Cannot determine nuxt version! Is current instance passed?");
  }
  return rawVersion.replace(NUXT_VERSION_RE, "");
}
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
var Symbol2 = root.Symbol;
var objectProto$b = Object.prototype;
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
var nativeObjectToString$1 = objectProto$b.toString;
var symToStringTag$1 = Symbol2 ? Symbol2.toStringTag : void 0;
function getRawTag(value2) {
  var isOwn = hasOwnProperty$9.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
  try {
    value2[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag$1] = tag;
    } else {
      delete value2[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$a = Object.prototype;
var nativeObjectToString = objectProto$a.toString;
function objectToString(value2) {
  return nativeObjectToString.call(value2);
}
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
function baseGetTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
}
function isObjectLike(value2) {
  return value2 != null && typeof value2 == "object";
}
var symbolTag = "[object Symbol]";
function isSymbol(value2) {
  return typeof value2 == "symbol" || isObjectLike(value2) && baseGetTag(value2) == symbolTag;
}
function arrayMap(array, iteratee) {
  var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index2 < length) {
    result[index2] = iteratee(array[index2], index2, array);
  }
  return result;
}
var isArray = Array.isArray;
var INFINITY = 1 / 0;
var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray(value2)) {
    return arrayMap(value2, baseToString) + "";
  }
  if (isSymbol(value2)) {
    return symbolToString ? symbolToString.call(value2) : "";
  }
  var result = value2 + "";
  return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
}
function isObject2(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
function identity(value2) {
  return value2;
}
var asyncTag = "[object AsyncFunction]";
var funcTag$1 = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value2) {
  if (!isObject2(value2)) {
    return false;
  }
  var tag = baseGetTag(value2);
  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$2 = Function.prototype;
var funcToString$2 = funcProto$2.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto$1 = Function.prototype;
var objectProto$9 = Object.prototype;
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString$1.call(hasOwnProperty$8).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value2) {
  if (!isObject2(value2) || isMasked(value2)) {
    return false;
  }
  var pattern = isFunction(value2) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value2));
}
function getValue2(object, key) {
  return object == null ? void 0 : object[key];
}
function getNative(object, key) {
  var value2 = getValue2(object, key);
  return baseIsNative(value2) ? value2 : void 0;
}
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var HOT_COUNT = 800;
var HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
function constant(value2) {
  return function() {
    return value2;
  };
}
var defineProperty = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string),
    "writable": true
  });
};
var setToString = shortOut(baseSetToString);
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value2, length) {
  var type = typeof value2;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
}
function baseAssignValue(object, key, value2) {
  if (key == "__proto__" && defineProperty) {
    defineProperty(object, key, {
      "configurable": true,
      "enumerable": true,
      "value": value2,
      "writable": true
    });
  } else {
    object[key] = value2;
  }
}
function eq(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
var objectProto$8 = Object.prototype;
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
function assignValue(object, key, value2) {
  var objValue = object[key];
  if (!(hasOwnProperty$7.call(object, key) && eq(objValue, value2)) || value2 === void 0 && !(key in object)) {
    baseAssignValue(object, key, value2);
  }
}
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index2 = -1, length = props.length;
  while (++index2 < length) {
    var key = props[index2];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}
var nativeMax = Math.max;
function overRest(func, start, transform2) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array(length);
    while (++index2 < length) {
      array[index2] = args[start + index2];
    }
    index2 = -1;
    var otherArgs = Array(start + 1);
    while (++index2 < start) {
      otherArgs[index2] = args[index2];
    }
    otherArgs[start] = transform2(array);
    return apply(func, this, otherArgs);
  };
}
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + "");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value2) {
  return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
}
function isArrayLike(value2) {
  return value2 != null && isLength(value2.length) && !isFunction(value2);
}
function isIterateeCall(value2, index2, object) {
  if (!isObject2(object)) {
    return false;
  }
  var type = typeof index2;
  if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
    return eq(object[index2], value2);
  }
  return false;
}
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index2 < length) {
      var source = sources[index2];
      if (source) {
        assigner(object, source, index2, customizer);
      }
    }
    return object;
  });
}
var objectProto$7 = Object.prototype;
function isPrototype(value2) {
  var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$7;
  return value2 === proto;
}
function baseTimes(n2, iteratee) {
  var index2 = -1, result = Array(n2);
  while (++index2 < n2) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var argsTag$1 = "[object Arguments]";
function baseIsArguments(value2) {
  return isObjectLike(value2) && baseGetTag(value2) == argsTag$1;
}
var objectProto$6 = Object.prototype;
var hasOwnProperty$6 = objectProto$6.hasOwnProperty;
var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
var isArguments = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(value2) {
  return isObjectLike(value2) && hasOwnProperty$6.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
};
function stubFalse() {
  return false;
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var Buffer2 = moduleExports$1 ? root.Buffer : void 0;
var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse;
var argsTag = "[object Arguments]";
var arrayTag = "[object Array]";
var boolTag = "[object Boolean]";
var dateTag = "[object Date]";
var errorTag$1 = "[object Error]";
var funcTag = "[object Function]";
var mapTag = "[object Map]";
var numberTag = "[object Number]";
var objectTag$1 = "[object Object]";
var regexpTag = "[object RegExp]";
var setTag = "[object Set]";
var stringTag = "[object String]";
var weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]";
var dataViewTag = "[object DataView]";
var float32Tag = "[object Float32Array]";
var float64Tag = "[object Float64Array]";
var int8Tag = "[object Int8Array]";
var int16Tag = "[object Int16Array]";
var int32Tag = "[object Int32Array]";
var uint8Tag = "[object Uint8Array]";
var uint8ClampedTag = "[object Uint8ClampedArray]";
var uint16Tag = "[object Uint16Array]";
var uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag$1] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value2) {
  return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag(value2)];
}
function baseUnary(func) {
  return function(value2) {
    return func(value2);
  };
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal.process;
var nodeUtil = function() {
  try {
    var types = freeModule && freeModule.require && freeModule.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var objectProto$5 = Object.prototype;
var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
function arrayLikeKeys(value2, inherited) {
  var isArr = isArray(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType2 = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? baseTimes(value2.length, String) : [], length = result.length;
  for (var key in value2) {
    if ((inherited || hasOwnProperty$5.call(value2, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
function overArg(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var nativeKeys = overArg(Object.keys, Object);
var objectProto$4 = Object.prototype;
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$4.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$3 = Object.prototype;
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject2(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object), result = [];
  for (var key in object) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$3.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keysIn(source), object, customizer);
});
function toString(value2) {
  return value2 == null ? "" : baseToString(value2);
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
var objectTag = "[object Object]";
var funcProto = Function.prototype;
var objectProto$2 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject(value2) {
  if (!isObjectLike(value2) || baseGetTag(value2) != objectTag) {
    return false;
  }
  var proto = getPrototype(value2);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$2.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
var domExcTag = "[object DOMException]";
var errorTag = "[object Error]";
function isError(value2) {
  if (!isObjectLike(value2)) {
    return false;
  }
  var tag = baseGetTag(value2);
  return tag == errorTag || tag == domExcTag || typeof value2.message == "string" && typeof value2.name == "string" && !isPlainObject(value2);
}
var attempt = baseRest(function(func, args) {
  try {
    return apply(func, void 0, args);
  } catch (e) {
    return isError(e) ? e : new Error(e);
  }
});
function basePropertyOf(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var escapeHtmlChar = basePropertyOf(htmlEscapes);
var reUnescapedHtml = /[&<>"']/g;
var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
function escape2(string) {
  string = toString(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
}
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function customDefaultsAssignIn(objValue, srcValue, key, object) {
  if (objValue === void 0 || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
    return srcValue;
  }
  return objValue;
}
var stringEscapes = {
  "\\": "\\",
  "'": "'",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function escapeStringChar(chr) {
  return "\\" + stringEscapes[chr];
}
var reInterpolate = /<%=([\s\S]+?)%>/g;
var reEscape = /<%-([\s\S]+?)%>/g;
var reEvaluate = /<%([\s\S]+?)%>/g;
var templateSettings = {
  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "escape": reEscape,
  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "evaluate": reEvaluate,
  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "interpolate": reInterpolate,
  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  "variable": "",
  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  "imports": {
    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    "_": { "escape": escape2 }
  }
};
var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
var reEmptyStringLeading = /\b__p \+= '';/g;
var reEmptyStringMiddle = /\b(__p \+=) '' \+/g;
var reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
var reNoMatch = /($^)/;
var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
var objectProto = Object.prototype;
var hasOwnProperty2 = objectProto.hasOwnProperty;
function template2(string, options, guard) {
  var settings = templateSettings.imports._.templateSettings || templateSettings;
  string = toString(string);
  options = assignInWith({}, options, settings, customDefaultsAssignIn);
  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
  var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
  var reDelimiters = RegExp(
    (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
    "g"
  );
  var sourceURL = hasOwnProperty2.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue);
    source += string.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }
    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }
    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }
    index2 = offset + match.length;
    return match;
  });
  source += "';\n";
  var variable = hasOwnProperty2.call(options, "variable") && options.variable;
  if (!variable) {
    source = "with (obj) {\n" + source + "\n}\n";
  } else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  }
  source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
  source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
  var result = attempt(function() {
    return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
  });
  result.source = source;
  if (isError(result)) {
    throw result;
  }
  return result;
}
function toArray(value2) {
  return Array.isArray(value2) ? value2 : [value2];
}
var MODE_RE = /\.(server|client)(\.\w+)*$/;
async function compileTemplate(template$1, ctx) {
  const data = { ...ctx, options: template$1.options };
  if (template$1.src) {
    try {
      const srcContents = await import_node_fs7.promises.readFile(template$1.src, "utf-8");
      return template2(srcContents, {})(data);
    } catch (err) {
      logger.error("Error compiling template: ", template$1);
      throw err;
    }
  }
  if (template$1.getContents) {
    return template$1.getContents(data);
  }
  throw new Error("Invalid template: " + JSON.stringify(template$1));
}
var serialize = (data) => JSON.stringify(data, null, 2).replace(/"\{(.+)\}"(?=,?$)/gm, (r2) => JSON.parse(r2).replace(/^\{(.*)\}$/, "$1"));
var importSources = (sources, { lazy = false } = {}) => {
  return toArray(sources).map((src) => {
    const safeVariableName = genSafeVariableName(src);
    if (lazy) {
      return `const ${safeVariableName} = ${genDynamicImport(src, { comment: `webpackChunkName: ${JSON.stringify(src)}` })}`;
    }
    return genImport(src, safeVariableName);
  }).join("\n");
};
var importName = genSafeVariableName;
var templateUtils = { serialize, importName, importSources };
function defineNuxtModule(definition) {
  if (definition) {
    return _defineNuxtModule(definition);
  }
  return {
    with: (definition2) => _defineNuxtModule(definition2)
  };
}
function _defineNuxtModule(definition) {
  var _a7;
  if (typeof definition === "function") {
    return _defineNuxtModule({ setup: definition });
  }
  const module3 = defu4(definition, { meta: {} });
  (_a7 = module3.meta).configKey || (_a7.configKey = module3.meta.name);
  async function getOptions(inlineOptions, nuxt = useNuxt()) {
    const nuxtConfigOptionsKey = module3.meta.configKey || module3.meta.name;
    const nuxtConfigOptions = nuxtConfigOptionsKey && nuxtConfigOptionsKey in nuxt.options ? nuxt.options[nuxtConfigOptionsKey] : {};
    const optionsDefaults = module3.defaults instanceof Function ? await module3.defaults(nuxt) : module3.defaults ?? {};
    let options = defu4(inlineOptions, nuxtConfigOptions, optionsDefaults);
    if (module3.schema) {
      options = await applyDefaults(module3.schema, options);
    }
    return Promise.resolve(options);
  }
  async function normalizedModule(inlineOptions, nuxt) {
    var _a8;
    if (!nuxt) {
      nuxt = tryUseNuxt() || this.nuxt;
    }
    const uniqueKey = module3.meta.name || module3.meta.configKey;
    if (uniqueKey) {
      nuxt.options._requiredModules = nuxt.options._requiredModules || {};
      if (nuxt.options._requiredModules[uniqueKey]) {
        return false;
      }
      nuxt.options._requiredModules[uniqueKey] = true;
    }
    if (module3.meta.compatibility) {
      const issues = await checkNuxtCompatibility(module3.meta.compatibility, nuxt);
      if (issues.length) {
        logger.warn(`Module \`${module3.meta.name}\` is disabled due to incompatibility issues:
${issues.toString()}`);
        return;
      }
    }
    nuxt2Shims(nuxt);
    const _options = await getOptions(inlineOptions, nuxt);
    if (module3.hooks) {
      nuxt.hooks.addHooks(module3.hooks);
    }
    const start = import_node_perf_hooks.performance.now();
    const res = await ((_a8 = module3.setup) == null ? void 0 : _a8.call(null, _options, nuxt)) ?? {};
    const perf = import_node_perf_hooks.performance.now() - start;
    const setupTime = Math.round(perf * 100) / 100;
    if (setupTime > 5e3 && uniqueKey !== "@nuxt/telemetry") {
      logger.warn(`Slow module \`${uniqueKey || "<no name>"}\` took \`${setupTime}ms\` to setup.`);
    } else if (nuxt.options.debug) {
      logger.info(`Module \`${uniqueKey || "<no name>"}\` took \`${setupTime}ms\` to setup.`);
    }
    if (res === false) {
      return false;
    }
    return defu4(res, {
      timings: {
        setup: setupTime
      }
    });
  }
  normalizedModule.getMeta = () => Promise.resolve(module3.meta);
  normalizedModule.getOptions = getOptions;
  return normalizedModule;
}
var NUXT2_SHIMS_KEY = "__nuxt2_shims_key__";
function nuxt2Shims(nuxt) {
  if (!isNuxt2(nuxt) || nuxt[NUXT2_SHIMS_KEY]) {
    return;
  }
  nuxt[NUXT2_SHIMS_KEY] = true;
  nuxt.hooks = nuxt;
  if (!nuxtCtx.tryUse()) {
    nuxtCtx.set(nuxt);
    nuxt.hook("close", () => nuxtCtx.unset());
  }
  let virtualTemplates;
  nuxt.hook("builder:prepared", (_builder, buildOptions) => {
    virtualTemplates = buildOptions.templates.filter((t2) => t2.getContents);
    for (const template3 of virtualTemplates) {
      buildOptions.templates.splice(buildOptions.templates.indexOf(template3), 1);
    }
  });
  nuxt.hook("build:templates", async (templates) => {
    const context = {
      nuxt,
      utils: templateUtils,
      app: {
        dir: nuxt.options.srcDir,
        extensions: nuxt.options.extensions,
        plugins: nuxt.options.plugins,
        templates: [
          ...templates.templatesFiles,
          ...virtualTemplates
        ],
        templateVars: templates.templateVars
      }
    };
    for await (const template3 of virtualTemplates) {
      const contents = await compileTemplate({ ...template3, src: "" }, context);
      await import_node_fs7.promises.mkdir(dirname2(template3.dst), { recursive: true });
      await import_node_fs7.promises.writeFile(template3.dst, contents);
    }
  });
}
async function resolvePath2(path2, opts = {}) {
  const _path = path2;
  path2 = normalize(path2);
  if (isAbsolute(path2)) {
    if ((opts == null ? void 0 : opts.virtual) && existsInVFS(path2)) {
      return path2;
    }
    if ((0, import_node_fs7.existsSync)(path2) && !await isDirectory2(path2)) {
      return path2;
    }
  }
  const nuxt = tryUseNuxt();
  const cwd = opts.cwd || (nuxt ? nuxt.options.rootDir : process.cwd());
  const extensions = opts.extensions || (nuxt ? nuxt.options.extensions : [".ts", ".mjs", ".cjs", ".json"]);
  const modulesDir = nuxt ? nuxt.options.modulesDir : [];
  path2 = resolveAlias(path2);
  if (!isAbsolute(path2)) {
    path2 = resolve5(cwd, path2);
  }
  if ((opts == null ? void 0 : opts.virtual) && existsInVFS(path2, nuxt)) {
    return path2;
  }
  let _isDir = false;
  if ((0, import_node_fs7.existsSync)(path2)) {
    _isDir = await isDirectory2(path2);
    if (!_isDir) {
      return path2;
    }
  }
  for (const ext of extensions) {
    const pathWithExt = path2 + ext;
    if ((opts == null ? void 0 : opts.virtual) && existsInVFS(pathWithExt, nuxt)) {
      return pathWithExt;
    }
    if ((0, import_node_fs7.existsSync)(pathWithExt)) {
      return pathWithExt;
    }
    const pathWithIndex = join3(path2, "index" + ext);
    if ((opts == null ? void 0 : opts.virtual) && existsInVFS(pathWithIndex, nuxt)) {
      return pathWithIndex;
    }
    if (_isDir && (0, import_node_fs7.existsSync)(pathWithIndex)) {
      return pathWithIndex;
    }
  }
  const resolveModulePath = await resolvePath(_path, { url: [cwd, ...modulesDir] }).catch(() => null);
  if (resolveModulePath) {
    return resolveModulePath;
  }
  return opts.fallbackToOriginal ? _path : path2;
}
function resolveAlias(path2, alias) {
  var _a7;
  if (!alias) {
    alias = ((_a7 = tryUseNuxt()) == null ? void 0 : _a7.options.alias) || {};
  }
  return resolveAlias$1(path2, alias);
}
function createResolver(base) {
  if (!base) {
    throw new Error("`base` argument is missing for createResolver(base)!");
  }
  base = base.toString();
  if (base.startsWith("file://")) {
    base = dirname2((0, import_node_url2.fileURLToPath)(base));
  }
  return {
    resolve: (...path2) => resolve5(base, ...path2),
    resolvePath: (path2, opts) => resolvePath2(path2, { cwd: base, ...opts })
  };
}
async function isDirectory2(path2) {
  return (await import_node_fs7.promises.lstat(path2)).isDirectory();
}
function existsInVFS(path2, nuxt = tryUseNuxt()) {
  var _a7;
  if (!nuxt) {
    return false;
  }
  if (path2 in nuxt.vfs) {
    return true;
  }
  const templates = ((_a7 = nuxt.apps.default) == null ? void 0 : _a7.templates) ?? nuxt.options.build.templates;
  return templates.some((template3) => template3.dst === path2);
}
var layerSchemaKeys = ["future", "srcDir", "rootDir", "serverDir", "dir"];
var layerSchema = /* @__PURE__ */ Object.create(null);
for (const key of layerSchemaKeys) {
  if (key in index) {
    layerSchema[key] = index[key];
  }
}
function addImports(imports) {
  assertNuxtCompatibility({ bridge: true });
  useNuxt().hook("imports:extend", (_imports) => {
    _imports.push(...toArray(imports));
  });
}
function addImportsDir(dirs, opts = {}) {
  assertNuxtCompatibility({ bridge: true });
  useNuxt().hook("imports:dirs", (_dirs) => {
    for (const dir of toArray(dirs)) {
      _dirs[opts.prepend ? "unshift" : "push"](dir);
    }
  });
}
var extendWebpackCompatibleConfig = (builder) => (fn, options = {}) => {
  const nuxt = useNuxt();
  if (options.dev === false && nuxt.options.dev) {
    return;
  }
  if (options.build === false && nuxt.options.build) {
    return;
  }
  nuxt.hook(`${builder}:config`, (configs) => {
    if (options.server !== false) {
      const config = configs.find((i2) => i2.name === "server");
      if (config) {
        fn(config);
      }
    }
    if (options.client !== false) {
      const config = configs.find((i2) => i2.name === "client");
      if (config) {
        fn(config);
      }
    }
  });
};
var extendWebpackConfig = extendWebpackCompatibleConfig("webpack");
var extendRspackConfig = extendWebpackCompatibleConfig("rspack");
async function addComponentsDir(dir, opts = {}) {
  const nuxt = useNuxt();
  await assertNuxtCompatibility({ nuxt: ">=2.13" }, nuxt);
  nuxt.options.components = nuxt.options.components || [];
  dir.priority || (dir.priority = 0);
  nuxt.hook("components:dirs", (dirs) => {
    dirs[opts.prepend ? "unshift" : "push"](dir);
  });
}
function normalizePlugin(plugin) {
  if (typeof plugin === "string") {
    plugin = { src: plugin };
  } else {
    plugin = { ...plugin };
  }
  if (!plugin.src) {
    throw new Error("Invalid plugin. src option is required: " + JSON.stringify(plugin));
  }
  plugin.src = normalize(resolveAlias(plugin.src));
  if (plugin.ssr) {
    plugin.mode = "server";
  }
  if (!plugin.mode) {
    const [, mode = "all"] = plugin.src.match(MODE_RE) || [];
    plugin.mode = mode;
  }
  return plugin;
}
function addPlugin(_plugin, opts = {}) {
  const nuxt = useNuxt();
  const plugin = normalizePlugin(_plugin);
  nuxt.options.plugins = nuxt.options.plugins.filter((p2) => normalizePlugin(p2).src !== plugin.src);
  nuxt.options.plugins[opts.append ? "push" : "unshift"](plugin);
  return plugin;
}

// node_modules/@storyblok/nuxt/dist/module.mjs
var module2 = defineNuxtModule({
  meta: {
    name: "@storyblok/nuxt",
    configKey: "storyblok"
  },
  defaults: {
    accessToken: "",
    enableSudoMode: false,
    usePlugin: true,
    // legacy opt. for enableSudoMode
    bridge: true,
    devtools: false,
    componentsDir: "~/storyblok",
    apiOptions: {}
  },
  setup(options, nuxt) {
    const resolver = createResolver(import.meta.url);
    if (nuxt.options.vite.optimizeDeps) {
      nuxt.options.vite.optimizeDeps.include = nuxt.options.vite.optimizeDeps.include || [];
      nuxt.options.vite.optimizeDeps.include.push("@storyblok/vue");
      nuxt.options.vite.optimizeDeps.exclude = nuxt.options.vite.optimizeDeps.exclude || [];
      nuxt.options.vite.optimizeDeps.exclude.push("fsevents");
    }
    if (options.componentsDir) {
      addComponentsDir({ path: options.componentsDir, global: true, pathPrefix: false });
    }
    nuxt.options.build.transpile.push(resolver.resolve("./runtime"));
    nuxt.options.build.transpile.push("@storyblok/nuxt");
    nuxt.options.build.transpile.push("@storyblok/vue");
    nuxt.options.runtimeConfig.public.storyblok = options;
    const enablePluginCondition = options.usePlugin === true && options.enableSudoMode === false;
    if (enablePluginCondition) {
      addPlugin(resolver.resolve("./runtime/plugin"));
    }
    const names = [
      "useStoryblok",
      "useStoryblokApi",
      "useStoryblokBridge",
      "renderRichText",
      "RichTextSchema",
      "StoryblokRichText",
      "useStoryblokRichText",
      "MarkTypes",
      "BlockTypes",
      "LinkTypes",
      "AssetTypes"
    ];
    for (const name of names) {
      addImports({ name, as: name, from: "@storyblok/vue" });
    }
    nuxt.options.typescript.hoist.push("@storyblok/vue");
    addImportsDir(resolver.resolve("./runtime/composables"));
    if (options.devtools) {
      nuxt.hook("devtools:customTabs", (iframeTabs) => {
        iframeTabs.push({
          name: "storyblok",
          title: "Storyblok",
          icon: "i-logos-storyblok-icon",
          view: {
            type: "iframe",
            src: "https://app.storyblok.com/#!/me/spaces/"
          }
        });
      });
    }
  }
});
export {
  module2 as default
};
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=@storyblok_nuxt.js.map
