/**
 * name: @storyblok/vue
 * (c) 2024
 * description: SDK to integrate Storyblok into your project using Vue.
 * author: Storyblok
 */
import { defineComponent as K, ref as O, resolveDynamicComponent as M, inject as ie, openBlock as J, createBlock as Y, mergeProps as ae, h as W, createTextVNode as le, watch as ce, onMounted as he, defineAsyncComponent as ue } from "vue";
let D = !1;
const z = [], de = (s) => new Promise((e, t) => {
  if (typeof window > "u" || (window.storyblokRegisterEvent = (o) => {
    if (window.location === window.parent.location) {
      console.warn("You are not in Draft Mode or in the Visual Editor.");
      return;
    }
    D ? o() : z.push(o);
  }, document.getElementById("storyblok-javascript-bridge")))
    return;
  const r = document.createElement("script");
  r.async = !0, r.src = s, r.id = "storyblok-javascript-bridge", r.onerror = (o) => t(o), r.onload = (o) => {
    z.forEach((n) => n()), D = !0, e(o);
  }, document.getElementsByTagName("head")[0].appendChild(r);
});
var pe = Object.defineProperty, ge = (s, e, t) => e in s ? pe(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, p = (s, e, t) => ge(s, typeof e != "symbol" ? e + "" : e, t);
class me extends Error {
  constructor(e) {
    super(e), this.name = "AbortError";
  }
}
function fe(s, e, t) {
  if (!Number.isFinite(e))
    throw new TypeError("Expected `limit` to be a finite number");
  if (!Number.isFinite(t))
    throw new TypeError("Expected `interval` to be a finite number");
  const r = [];
  let o = [], n = 0, i = !1;
  const l = async () => {
    n++;
    const h = r.shift();
    if (h)
      try {
        const d = await s(...h.args);
        h.resolve(d);
      } catch (d) {
        h.reject(d);
      }
    const u = setTimeout(() => {
      n--, r.length > 0 && l(), o = o.filter((d) => d !== u);
    }, t);
    o.includes(u) || o.push(u);
  }, a = (...h) => i ? Promise.reject(
    new Error(
      "Throttled function is already aborted and not accepting new promises"
    )
  ) : new Promise((u, d) => {
    r.push({
      resolve: u,
      reject: d,
      args: h
    }), n < e && l();
  });
  return a.abort = () => {
    i = !0, o.forEach(clearTimeout), o = [], r.forEach(
      (h) => h.reject(() => new me("Throttle function aborted"))
    ), r.length = 0;
  }, a;
}
class L {
  constructor() {
    p(this, "isCDNUrl", (e = "") => e.includes("/cdn/")), p(this, "getOptionsPage", (e, t = 25, r = 1) => ({
      ...e,
      per_page: t,
      page: r
    })), p(this, "delay", (e) => new Promise((t) => setTimeout(t, e))), p(this, "arrayFrom", (e = 0, t) => Array.from({ length: e }, t)), p(this, "range", (e = 0, t = e) => {
      const r = Math.abs(t - e) || 0, o = e < t ? 1 : -1;
      return this.arrayFrom(r, (n, i) => i * o + e);
    }), p(this, "asyncMap", async (e, t) => Promise.all(e.map(t))), p(this, "flatMap", (e = [], t) => e.map(t).reduce((r, o) => [...r, ...o], [])), p(this, "escapeHTML", function(e) {
      const t = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      }, r = /[&<>"']/g, o = new RegExp(r.source);
      return e && o.test(e) ? e.replace(r, (n) => t[n]) : e;
    });
  }
  /**
   * @method stringify
   * @param  {object} params
   * @param  {string} prefix
   * @param  {boolean} isArray
   * @return {string} Stringified object
   */
  stringify(e, t, r) {
    const o = [];
    for (const n in e) {
      if (!Object.prototype.hasOwnProperty.call(e, n))
        continue;
      const i = e[n], l = r ? "" : encodeURIComponent(n);
      let a;
      typeof i == "object" ? a = this.stringify(
        i,
        t ? t + encodeURIComponent(`[${l}]`) : l,
        Array.isArray(i)
      ) : a = `${t ? t + encodeURIComponent(`[${l}]`) : l}=${encodeURIComponent(i)}`, o.push(a);
    }
    return o.join("&");
  }
  /**
   * @method getRegionURL
   * @param  {string} regionCode region code, could be eu, us, cn, ap or ca
   * @return {string} The base URL of the region
   */
  getRegionURL(e) {
    const t = "api.storyblok.com", r = "api-us.storyblok.com", o = "app.storyblokchina.cn", n = "api-ap.storyblok.com", i = "api-ca.storyblok.com";
    switch (e) {
      case "us":
        return r;
      case "cn":
        return o;
      case "ap":
        return n;
      case "ca":
        return i;
      default:
        return t;
    }
  }
}
const ye = function(s, e) {
  const t = {};
  for (const r in s) {
    const o = s[r];
    e.includes(r) && o !== null && (t[r] = o);
  }
  return t;
}, be = (s) => s === "email", ke = () => ({
  singleTag: "hr"
}), ve = () => ({
  tag: "blockquote"
}), $e = () => ({
  tag: "ul"
}), Te = (s) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: s.attrs
    }
  ]
}), we = () => ({
  singleTag: "br"
}), Re = (s) => ({
  tag: `h${s.attrs.level}`
}), _e = (s) => ({
  singleTag: [
    {
      tag: "img",
      attrs: ye(s.attrs, ["src", "alt", "title"])
    }
  ]
}), Se = () => ({
  tag: "li"
}), Ee = () => ({
  tag: "ol"
}), je = () => ({
  tag: "p"
}), Ie = (s) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        "data-type": "emoji",
        "data-name": s.attrs.name,
        emoji: s.attrs.emoji
      }
    }
  ]
}), xe = () => ({
  tag: "b"
}), Ae = () => ({
  tag: "s"
}), Ce = () => ({
  tag: "u"
}), Oe = () => ({
  tag: "strong"
}), Le = () => ({
  tag: "code"
}), Pe = () => ({
  tag: "i"
}), Ne = (s) => {
  if (!s.attrs)
    return {
      tag: ""
    };
  const e = new L().escapeHTML, t = { ...s.attrs }, { linktype: r = "url" } = s.attrs;
  if (delete t.linktype, t.href && (t.href = e(s.attrs.href || "")), be(r) && (t.href = `mailto:${t.href}`), t.anchor && (t.href = `${t.href}#${t.anchor}`, delete t.anchor), t.custom) {
    for (const o in t.custom)
      t[o] = t.custom[o];
    delete t.custom;
  }
  return {
    tag: [
      {
        tag: "a",
        attrs: t
      }
    ]
  };
}, Me = (s) => ({
  tag: [
    {
      tag: "span",
      attrs: s.attrs
    }
  ]
}), He = () => ({
  tag: "sub"
}), Ue = () => ({
  tag: "sup"
}), De = (s) => ({
  tag: [
    {
      tag: "span",
      attrs: s.attrs
    }
  ]
}), ze = (s) => {
  var e;
  return (e = s.attrs) != null && e.color ? {
    tag: [
      {
        tag: "span",
        attrs: {
          style: `background-color:${s.attrs.color};`
        }
      }
    ]
  } : {
    tag: ""
  };
}, Fe = (s) => {
  var e;
  return (e = s.attrs) != null && e.color ? {
    tag: [
      {
        tag: "span",
        attrs: {
          style: `color:${s.attrs.color}`
        }
      }
    ]
  } : {
    tag: ""
  };
}, Be = {
  nodes: {
    horizontal_rule: ke,
    blockquote: ve,
    bullet_list: $e,
    code_block: Te,
    hard_break: we,
    heading: Re,
    image: _e,
    list_item: Se,
    ordered_list: Ee,
    paragraph: je,
    emoji: Ie
  },
  marks: {
    bold: xe,
    strike: Ae,
    underline: Ce,
    strong: Oe,
    code: Le,
    italic: Pe,
    link: Ne,
    styled: Me,
    subscript: He,
    superscript: Ue,
    anchor: De,
    highlight: ze,
    textStyle: Fe
  }
}, qe = function(s) {
  const e = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  }, t = /[&<>"']/g, r = new RegExp(t.source);
  return s && r.test(s) ? s.replace(t, (o) => e[o]) : s;
};
let F = !1;
class Ve {
  constructor(e) {
    p(this, "marks"), p(this, "nodes"), e || (e = Be), this.marks = e.marks || [], this.nodes = e.nodes || [];
  }
  addNode(e, t) {
    this.nodes[e] = t;
  }
  addMark(e, t) {
    this.marks[e] = t;
  }
  render(e, t = { optimizeImages: !1 }, r = !0) {
    if (!F && r && (console.warn(
      "Warning ⚠️: The RichTextResolver class is deprecated and will be removed in the next major release. Please use the `@storyblok/richtext` package instead. https://github.com/storyblok/richtext/"
    ), F = !0), e && e.content && Array.isArray(e.content)) {
      let o = "";
      return e.content.forEach((n) => {
        o += this.renderNode(n);
      }), t.optimizeImages ? this.optimizeImages(o, t.optimizeImages) : o;
    }
    return console.warn(
      `The render method must receive an Object with a "content" field.
      The "content" field must be an array of nodes as the type ISbRichtext.
      ISbRichtext:
        content?: ISbRichtext[]
        marks?: ISbRichtext[]
        attrs?: any
        text?: string
        type: string
        
        Example:
        {
          content: [
            {
              content: [
                {
                  text: 'Hello World',
                  type: 'text'
                }
              ],
              type: 'paragraph'
            }
          ],
          type: 'doc'
        }`
    ), "";
  }
  optimizeImages(e, t) {
    let r = 0, o = 0, n = "", i = "";
    typeof t != "boolean" && (typeof t.width == "number" && t.width > 0 && (n += `width="${t.width}" `, r = t.width), typeof t.height == "number" && t.height > 0 && (n += `height="${t.height}" `, o = t.height), (t.loading === "lazy" || t.loading === "eager") && (n += `loading="${t.loading}" `), typeof t.class == "string" && t.class.length > 0 && (n += `class="${t.class}" `), t.filters && (typeof t.filters.blur == "number" && t.filters.blur >= 0 && t.filters.blur <= 100 && (i += `:blur(${t.filters.blur})`), typeof t.filters.brightness == "number" && t.filters.brightness >= -100 && t.filters.brightness <= 100 && (i += `:brightness(${t.filters.brightness})`), t.filters.fill && (t.filters.fill.match(/[0-9A-F]{6}/gi) || t.filters.fill === "transparent") && (i += `:fill(${t.filters.fill})`), t.filters.format && ["webp", "png", "jpeg"].includes(t.filters.format) && (i += `:format(${t.filters.format})`), typeof t.filters.grayscale == "boolean" && t.filters.grayscale && (i += ":grayscale()"), typeof t.filters.quality == "number" && t.filters.quality >= 0 && t.filters.quality <= 100 && (i += `:quality(${t.filters.quality})`), t.filters.rotate && [90, 180, 270].includes(t.filters.rotate) && (i += `:rotate(${t.filters.rotate})`), i.length > 0 && (i = `/filters${i}`))), n.length > 0 && (e = e.replace(/<img/g, `<img ${n.trim()}`));
    const l = r > 0 || o > 0 || i.length > 0 ? `${r}x${o}${i}` : "";
    return e = e.replace(
      /a.storyblok.com\/f\/(\d+)\/([^.]+)\.(gif|jpg|jpeg|png|tif|bmp)/g,
      `a.storyblok.com/f/$1/$2.$3/m/${l}`
    ), typeof t != "boolean" && (t.sizes || t.srcset) && (e = e.replace(/<img.*?src=["|'](.*?)["|']/g, (a) => {
      var h, u;
      const d = a.match(
        /a.storyblok.com\/f\/(\d+)\/([^.]+)\.(gif|jpg|jpeg|png|tif|bmp)/g
      );
      if (d && d.length > 0) {
        const f = {
          srcset: (h = t.srcset) == null ? void 0 : h.map((y) => {
            if (typeof y == "number")
              return `//${d}/m/${y}x0${i} ${y}w`;
            if (typeof y == "object" && y.length === 2) {
              let _ = 0, j = 0;
              return typeof y[0] == "number" && (_ = y[0]), typeof y[1] == "number" && (j = y[1]), `//${d}/m/${_}x${j}${i} ${_}w`;
            }
            return "";
          }).join(", "),
          sizes: (u = t.sizes) == null ? void 0 : u.map((y) => y).join(", ")
        };
        let b = "";
        return f.srcset && (b += `srcset="${f.srcset}" `), f.sizes && (b += `sizes="${f.sizes}" `), a.replace(/<img/g, `<img ${b.trim()}`);
      }
      return a;
    })), e;
  }
  renderNode(e) {
    const t = [];
    e.marks && e.marks.forEach((o) => {
      const n = this.getMatchingMark(o);
      n && n.tag !== "" && t.push(this.renderOpeningTag(n.tag));
    });
    const r = this.getMatchingNode(e);
    return r && r.tag && t.push(this.renderOpeningTag(r.tag)), e.content ? e.content.forEach((o) => {
      t.push(this.renderNode(o));
    }) : e.text ? t.push(qe(e.text)) : r && r.singleTag ? t.push(this.renderTag(r.singleTag, " /")) : r && r.html ? t.push(r.html) : e.type === "emoji" && t.push(this.renderEmoji(e)), r && r.tag && t.push(this.renderClosingTag(r.tag)), e.marks && e.marks.slice(0).reverse().forEach((o) => {
      const n = this.getMatchingMark(o);
      n && n.tag !== "" && t.push(this.renderClosingTag(n.tag));
    }), t.join("");
  }
  renderTag(e, t) {
    return e.constructor === String ? `<${e}${t}>` : e.map((r) => {
      if (r.constructor === String)
        return `<${r}${t}>`;
      {
        let o = `<${r.tag}`;
        if (r.attrs) {
          for (const n in r.attrs)
            if (Object.prototype.hasOwnProperty.call(r.attrs, n)) {
              const i = r.attrs[n];
              i !== null && (o += ` ${n}="${i}"`);
            }
        }
        return `${o}${t}>`;
      }
    }).join("");
  }
  renderOpeningTag(e) {
    return this.renderTag(e, "");
  }
  renderClosingTag(e) {
    return e.constructor === String ? `</${e}>` : e.slice(0).reverse().map((t) => t.constructor === String ? `</${t}>` : `</${t.tag}>`).join("");
  }
  getMatchingNode(e) {
    const t = this.nodes[e.type];
    if (typeof t == "function")
      return t(e);
  }
  getMatchingMark(e) {
    const t = this.marks[e.type];
    if (typeof t == "function")
      return t(e);
  }
  renderEmoji(e) {
    if (e.attrs.emoji)
      return e.attrs.emoji;
    const t = [
      {
        tag: "img",
        attrs: {
          src: e.attrs.fallbackImage,
          draggable: "false",
          loading: "lazy",
          align: "absmiddle"
        }
      }
    ];
    return this.renderTag(t, " /");
  }
}
const P = Ve;
class Ge {
  constructor(e) {
    p(this, "baseURL"), p(this, "timeout"), p(this, "headers"), p(this, "responseInterceptor"), p(this, "fetch"), p(this, "ejectInterceptor"), p(this, "url"), p(this, "parameters"), p(this, "fetchOptions"), this.baseURL = e.baseURL, this.headers = e.headers || new Headers(), this.timeout = e != null && e.timeout ? e.timeout * 1e3 : 0, this.responseInterceptor = e.responseInterceptor, this.fetch = (...t) => e.fetch ? e.fetch(...t) : fetch(...t), this.ejectInterceptor = !1, this.url = "", this.parameters = {}, this.fetchOptions = {};
  }
  /**
   *
   * @param url string
   * @param params ISbStoriesParams
   * @returns Promise<ISbResponse | Error>
   */
  get(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("get");
  }
  post(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("post");
  }
  put(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("put");
  }
  delete(e, t) {
    return this.url = e, this.parameters = t ?? {}, this._methodHandler("delete");
  }
  async _responseHandler(e) {
    const t = [], r = {
      data: {},
      headers: {},
      status: 0,
      statusText: ""
    };
    e.status !== 204 && await e.json().then((o) => {
      r.data = o;
    });
    for (const o of e.headers.entries())
      t[o[0]] = o[1];
    return r.headers = { ...t }, r.status = e.status, r.statusText = e.statusText, r;
  }
  async _methodHandler(e) {
    let t = `${this.baseURL}${this.url}`, r = null;
    if (e === "get") {
      const a = new L();
      t = `${this.baseURL}${this.url}?${a.stringify(
        this.parameters
      )}`;
    } else
      r = JSON.stringify(this.parameters);
    const o = new URL(t), n = new AbortController(), { signal: i } = n;
    let l;
    this.timeout && (l = setTimeout(() => n.abort(), this.timeout));
    try {
      const a = await this.fetch(`${o}`, {
        method: e,
        headers: this.headers,
        body: r,
        signal: i,
        ...this.fetchOptions
      });
      this.timeout && clearTimeout(l);
      const h = await this._responseHandler(
        a
      );
      return this.responseInterceptor && !this.ejectInterceptor ? this._statusHandler(this.responseInterceptor(h)) : this._statusHandler(h);
    } catch (a) {
      return {
        message: a
      };
    }
  }
  setFetchOptions(e = {}) {
    Object.keys(e).length > 0 && "method" in e && delete e.method, this.fetchOptions = { ...e };
  }
  eject() {
    this.ejectInterceptor = !0;
  }
  _statusHandler(e) {
    const t = /20[0-6]/g;
    return new Promise((r, o) => {
      if (t.test(`${e.status}`))
        return r(e);
      const n = {
        message: e.statusText,
        status: e.status,
        response: Array.isArray(e.data) ? e.data[0] : e.data.error || e.data.slug
      };
      o(n);
    });
  }
}
const Ke = Ge, B = "SB-Agent", H = {
  defaultAgentName: "SB-JS-CLIENT",
  defaultAgentVersion: "SB-Agent-Version",
  packageVersion: "6.0.0"
};
let C = {};
const E = {};
class Je {
  /**
   *
   * @param config ISbConfig interface
   * @param pEndpoint string, optional
   */
  constructor(e, t) {
    p(this, "client"), p(this, "maxRetries"), p(this, "retriesDelay"), p(this, "throttle"), p(this, "accessToken"), p(this, "cache"), p(this, "helpers"), p(this, "resolveCounter"), p(this, "relations"), p(this, "links"), p(this, "richTextResolver"), p(this, "resolveNestedRelations"), p(this, "stringifiedStoriesCache");
    let r = e.endpoint || t;
    if (!r) {
      const i = new L().getRegionURL, l = e.https === !1 ? "http" : "https";
      e.oauthToken ? r = `${l}://${i(e.region)}/v1` : r = `${l}://${i(e.region)}/v2`;
    }
    const o = new Headers();
    o.set("Content-Type", "application/json"), o.set("Accept", "application/json"), e.headers && (e.headers.constructor.name === "Headers" ? e.headers.entries().toArray() : Object.entries(e.headers)).forEach(([i, l]) => {
      o.set(i, l);
    }), o.has(B) || (o.set(B, H.defaultAgentName), o.set(
      H.defaultAgentVersion,
      H.packageVersion
    ));
    let n = 5;
    e.oauthToken && (o.set("Authorization", e.oauthToken), n = 3), e.rateLimit && (n = e.rateLimit), e.richTextSchema ? this.richTextResolver = new P(e.richTextSchema) : this.richTextResolver = new P(), e.componentResolver && this.setComponentResolver(e.componentResolver), this.maxRetries = e.maxRetries || 10, this.retriesDelay = 300, this.throttle = fe(
      this.throttledRequest.bind(this),
      n,
      1e3
    ), this.accessToken = e.accessToken || "", this.relations = {}, this.links = {}, this.cache = e.cache || { clear: "manual" }, this.helpers = new L(), this.resolveCounter = 0, this.resolveNestedRelations = e.resolveNestedRelations || !0, this.stringifiedStoriesCache = {}, this.client = new Ke({
      baseURL: r,
      timeout: e.timeout || 0,
      headers: o,
      responseInterceptor: e.responseInterceptor,
      fetch: e.fetch
    });
  }
  setComponentResolver(e) {
    this.richTextResolver.addNode("blok", (t) => {
      let r = "";
      return t.attrs.body && t.attrs.body.forEach((o) => {
        r += e(o.component, o);
      }), {
        html: r
      };
    });
  }
  parseParams(e) {
    return e.token || (e.token = this.getToken()), e.cv || (e.cv = E[e.token]), Array.isArray(e.resolve_relations) && (e.resolve_relations = e.resolve_relations.join(",")), typeof e.resolve_relations < "u" && (e.resolve_level = 2), e;
  }
  factoryParamOptions(e, t) {
    return this.helpers.isCDNUrl(e) ? this.parseParams(t) : t;
  }
  makeRequest(e, t, r, o, n) {
    const i = this.factoryParamOptions(
      e,
      this.helpers.getOptionsPage(t, r, o)
    );
    return this.cacheResponse(e, i, void 0, n);
  }
  get(e, t, r) {
    t || (t = {});
    const o = `/${e}`, n = this.factoryParamOptions(o, t);
    return this.cacheResponse(o, n, void 0, r);
  }
  async getAll(e, t, r, o) {
    const n = (t == null ? void 0 : t.per_page) || 25, i = `/${e}`.replace(/\/$/, ""), l = r ?? i.substring(i.lastIndexOf("/") + 1), a = 1, h = await this.makeRequest(
      i,
      t,
      n,
      a,
      o
    ), u = h.total ? Math.ceil(h.total / n) : 1, d = await this.helpers.asyncMap(
      this.helpers.range(a, u),
      (f) => this.makeRequest(i, t, n, f + 1, o)
    );
    return this.helpers.flatMap([h, ...d], (f) => Object.values(f.data[l]));
  }
  post(e, t, r) {
    const o = `/${e}`;
    return Promise.resolve(
      this.throttle("post", o, t, r)
    );
  }
  put(e, t, r) {
    const o = `/${e}`;
    return Promise.resolve(
      this.throttle("put", o, t, r)
    );
  }
  delete(e, t, r) {
    t || (t = {});
    const o = `/${e}`;
    return Promise.resolve(
      this.throttle("delete", o, t, r)
    );
  }
  getStories(e, t) {
    return this._addResolveLevel(e), this.get("cdn/stories", e, t);
  }
  getStory(e, t, r) {
    return this._addResolveLevel(t), this.get(`cdn/stories/${e}`, t, r);
  }
  getToken() {
    return this.accessToken;
  }
  ejectInterceptor() {
    this.client.eject();
  }
  _addResolveLevel(e) {
    typeof e.resolve_relations < "u" && (e.resolve_level = 2);
  }
  _cleanCopy(e) {
    return JSON.parse(JSON.stringify(e));
  }
  _insertLinks(e, t, r) {
    const o = e[t];
    o && o.fieldtype === "multilink" && o.linktype === "story" && typeof o.id == "string" && this.links[r][o.id] ? o.story = this._cleanCopy(this.links[r][o.id]) : o && o.linktype === "story" && typeof o.uuid == "string" && this.links[r][o.uuid] && (o.story = this._cleanCopy(this.links[r][o.uuid]));
  }
  /**
   *
   * @param resolveId A counter number as a string
   * @param uuid The uuid of the story
   * @returns string | object
   */
  getStoryReference(e, t) {
    return this.relations[e][t] ? JSON.parse(this.stringifiedStoriesCache[t] || JSON.stringify(this.relations[e][t])) : t;
  }
  /**
   * Resolves a field's value by replacing UUIDs with their corresponding story references
   * @param jtree - The JSON tree object containing the field to resolve
   * @param treeItem - The key of the field to resolve
   * @param resolveId - The unique identifier for the current resolution context
   *
   * This method handles both single string UUIDs and arrays of UUIDs:
   * - For single strings: directly replaces the UUID with the story reference
   * - For arrays: maps through each UUID and replaces with corresponding story references
   */
  _resolveField(e, t, r) {
    const o = e[t];
    typeof o == "string" ? e[t] = this.getStoryReference(r, o) : Array.isArray(o) && (e[t] = o.map(
      (n) => this.getStoryReference(r, n)
    ).filter(Boolean));
  }
  /**
   * Inserts relations into the JSON tree by resolving references
   * @param jtree - The JSON tree object to process
   * @param treeItem - The current field being processed
   * @param fields - The relation patterns to resolve (string or array of strings)
   * @param resolveId - The unique identifier for the current resolution context
   *
   * This method handles two types of relation patterns:
   * 1. Nested relations: matches fields that end with the current field name
   *    Example: If treeItem is "event_type", it matches patterns like "*.event_type"
   *
   * 2. Direct component relations: matches exact component.field patterns
   *    Example: "event.event_type" for component "event" and field "event_type"
   *
   * The method supports both string and array formats for the fields parameter,
   * allowing flexible specification of relation patterns.
   */
  _insertRelations(e, t, r, o) {
    if (Array.isArray(r) ? r.find((i) => i.endsWith(`.${t}`)) : r.endsWith(`.${t}`)) {
      this._resolveField(e, t, o);
      return;
    }
    const n = e.component ? `${e.component}.${t}` : t;
    (Array.isArray(r) ? r.includes(n) : r === n) && this._resolveField(e, t, o);
  }
  /**
   * Recursively traverses and resolves relations in the story content tree
   * @param story - The story object containing the content to process
   * @param fields - The relation patterns to resolve
   * @param resolveId - The unique identifier for the current resolution context
   */
  iterateTree(e, t, r) {
    const o = (n, i = "") => {
      if (!(!n || n._stopResolving)) {
        if (Array.isArray(n))
          n.forEach((l, a) => o(l, `${i}[${a}]`));
        else if (typeof n == "object")
          for (const l in n) {
            const a = i ? `${i}.${l}` : l;
            (n.component && n._uid || n.type === "link") && (this._insertRelations(n, l, t, r), this._insertLinks(n, l, r)), o(n[l], a);
          }
      }
    };
    o(e.content);
  }
  async resolveLinks(e, t, r) {
    let o = [];
    if (e.link_uuids) {
      const n = e.link_uuids.length, i = [], l = 50;
      for (let a = 0; a < n; a += l) {
        const h = Math.min(n, a + l);
        i.push(e.link_uuids.slice(a, h));
      }
      for (let a = 0; a < i.length; a++)
        (await this.getStories({
          per_page: l,
          language: t.language,
          version: t.version,
          by_uuids: i[a].join(",")
        })).data.stories.forEach(
          (h) => {
            o.push(h);
          }
        );
    } else
      o = e.links;
    o.forEach((n) => {
      this.links[r][n.uuid] = {
        ...n,
        _stopResolving: !0
      };
    });
  }
  async resolveRelations(e, t, r) {
    let o = [];
    if (e.rel_uuids) {
      const n = e.rel_uuids.length, i = [], l = 50;
      for (let a = 0; a < n; a += l) {
        const h = Math.min(n, a + l);
        i.push(e.rel_uuids.slice(a, h));
      }
      for (let a = 0; a < i.length; a++)
        (await this.getStories({
          per_page: l,
          language: t.language,
          version: t.version,
          by_uuids: i[a].join(","),
          excluding_fields: t.excluding_fields
        })).data.stories.forEach((h) => {
          o.push(h);
        });
    } else
      o = e.rels;
    o && o.length > 0 && o.forEach((n) => {
      this.relations[r][n.uuid] = {
        ...n,
        _stopResolving: !0
      };
    });
  }
  /**
   *
   * @param responseData
   * @param params
   * @param resolveId
   * @description Resolves the relations and links of the stories
   * @returns Promise<void>
   *
   */
  async resolveStories(e, t, r) {
    var o, n;
    let i = [];
    if (this.links[r] = {}, this.relations[r] = {}, typeof t.resolve_relations < "u" && t.resolve_relations.length > 0 && (typeof t.resolve_relations == "string" && (i = t.resolve_relations.split(",")), await this.resolveRelations(e, t, r)), t.resolve_links && ["1", "story", "url", "link"].includes(t.resolve_links) && ((o = e.links) != null && o.length || (n = e.link_uuids) != null && n.length) && await this.resolveLinks(e, t, r), this.resolveNestedRelations)
      for (const l in this.relations[r])
        this.iterateTree(
          this.relations[r][l],
          i,
          r
        );
    e.story ? this.iterateTree(e.story, i, r) : e.stories.forEach((l) => {
      this.iterateTree(l, i, r);
    }), this.stringifiedStoriesCache = {}, delete this.links[r], delete this.relations[r];
  }
  async cacheResponse(e, t, r, o) {
    const n = this.helpers.stringify({ url: e, params: t }), i = this.cacheProvider();
    if (this.cache.clear === "auto" && t.version === "draft" && await this.flushCache(), t.version === "published" && e !== "/cdn/spaces/me") {
      const l = await i.get(n);
      if (l)
        return Promise.resolve(l);
    }
    return new Promise(async (l, a) => {
      var h;
      try {
        const u = await this.throttle(
          "get",
          e,
          t,
          o
        );
        if (u.status !== 200)
          return a(u);
        let d = { data: u.data, headers: u.headers };
        if ((h = u.headers) != null && h["per-page"] && (d = Object.assign({}, d, {
          perPage: u.headers["per-page"] ? Number.parseInt(u.headers["per-page"]) : 0,
          total: u.headers["per-page"] ? Number.parseInt(u.headers.total) : 0
        })), d.data.story || d.data.stories) {
          const f = this.resolveCounter = ++this.resolveCounter % 1e3;
          await this.resolveStories(d.data, t, `${f}`);
        }
        return t.version === "published" && e !== "/cdn/spaces/me" && await i.set(n, d), d.data.cv && t.token && E[t.token] !== d.data.cv && (await this.flushCache(), E[t.token] = d.data.cv), l(d);
      } catch (u) {
        if (u.response && u.status === 429 && (r = typeof r > "u" ? 0 : r + 1, r < this.maxRetries))
          return console.log(
            `Hit rate limit. Retrying in ${this.retriesDelay / 1e3} seconds.`
          ), await this.helpers.delay(this.retriesDelay), this.cacheResponse(e, t, r).then(l).catch(a);
        a(u);
      }
    });
  }
  throttledRequest(e, t, r, o) {
    return this.client.setFetchOptions(o), this.client[e](t, r);
  }
  cacheVersions() {
    return E;
  }
  cacheVersion() {
    return E[this.accessToken];
  }
  setCacheVersion(e) {
    this.accessToken && (E[this.accessToken] = e);
  }
  clearCacheVersion() {
    this.accessToken && (E[this.accessToken] = 0);
  }
  cacheProvider() {
    switch (this.cache.type) {
      case "memory":
        return {
          get(e) {
            return Promise.resolve(C[e]);
          },
          getAll() {
            return Promise.resolve(C);
          },
          set(e, t) {
            return C[e] = t, Promise.resolve(void 0);
          },
          flush() {
            return C = {}, Promise.resolve(void 0);
          }
        };
      case "custom":
        if (this.cache.custom)
          return this.cache.custom;
      default:
        return {
          get() {
            return Promise.resolve();
          },
          getAll() {
            return Promise.resolve(void 0);
          },
          set() {
            return Promise.resolve(void 0);
          },
          flush() {
            return Promise.resolve(void 0);
          }
        };
    }
  }
  async flushCache() {
    return await this.cacheProvider().flush(), this.clearCacheVersion(), this;
  }
}
const ht = (s = {}) => {
  const { apiOptions: e } = s;
  if (!e || !e.accessToken) {
    console.error(
      "You need to provide an access token to interact with Storyblok API. Read https://www.storyblok.com/docs/api/content-delivery#topics/authentication"
    );
    return;
  }
  return { storyblokApi: new Je(e) };
}, Ye = (s) => {
  if (typeof s != "object" || typeof s._editable > "u")
    return {};
  try {
    const e = JSON.parse(
      s._editable.replace(/^<!--#storyblok#/, "").replace(/-->$/, "")
    );
    return e ? {
      "data-blok-c": JSON.stringify(e),
      "data-blok-uid": `${e.id}-${e.uid}`
    } : {};
  } catch {
    return {};
  }
};
function We(s, e) {
  if (!e)
    return { src: s, attrs: {} };
  let t = 0, r = 0;
  const o = {}, n = [];
  function i(a, h, u, d, f) {
    typeof a != "number" || a <= h || a >= u ? console.warn(`[StoryblokRichText] - ${d.charAt(0).toUpperCase() + d.slice(1)} value must be a number between ${h} and ${u} (inclusive)`) : f.push(`${d}(${a})`);
  }
  if (typeof e == "object") {
    if (typeof e.width == "number" && e.width > 0 ? (o.width = e.width, t = e.width) : console.warn("[StoryblokRichText] - Width value must be a number greater than 0"), e.height && typeof e.height == "number" && e.height > 0 ? (o.height = e.height, r = e.height) : console.warn("[StoryblokRichText] - Height value must be a number greater than 0"), e.loading && ["lazy", "eager"].includes(e.loading) && (o.loading = e.loading), e.class && (o.class = e.class), e.filters) {
      const { filters: a } = e || {}, { blur: h, brightness: u, fill: d, format: f, grayscale: b, quality: y, rotate: _ } = a || {};
      h && i(h, 0, 100, "blur", n), y && i(y, 0, 100, "quality", n), u && i(u, 0, 100, "brightness", n), d && n.push(`fill(${d})`), b && n.push("grayscale()"), _ && [0, 90, 180, 270].includes(e.filters.rotate || 0) && n.push(`rotate(${_})`), f && ["webp", "png", "jpeg"].includes(f) && n.push(`format(${f})`);
    }
    e.srcset && (o.srcset = e.srcset.map((a) => {
      if (typeof a == "number")
        return `${s}/m/${a}x0/${n.length > 0 ? `filters:${n.join(":")}` : ""} ${a}w`;
      if (Array.isArray(a) && a.length === 2) {
        const [h, u] = a;
        return `${s}/m/${h}x${u}/${n.length > 0 ? `filters:${n.join(":")}` : ""} ${h}w`;
      } else {
        console.warn("[StoryblokRichText] - srcset entry must be a number or a tuple of two numbers");
        return;
      }
    }).join(", ")), e.sizes && (o.sizes = e.sizes.join(", "));
  }
  let l = `${s}/m/`;
  return t > 0 && r > 0 && (l = `${l}${t}x${r}/`), n.length > 0 && (l = `${l}filters:${n.join(":")}`), {
    src: l,
    attrs: o
  };
}
var v = /* @__PURE__ */ ((s) => (s.DOCUMENT = "doc", s.HEADING = "heading", s.PARAGRAPH = "paragraph", s.QUOTE = "blockquote", s.OL_LIST = "ordered_list", s.UL_LIST = "bullet_list", s.LIST_ITEM = "list_item", s.CODE_BLOCK = "code_block", s.HR = "horizontal_rule", s.BR = "hard_break", s.IMAGE = "image", s.EMOJI = "emoji", s.COMPONENT = "blok", s))(v || {}), T = /* @__PURE__ */ ((s) => (s.BOLD = "bold", s.STRONG = "strong", s.STRIKE = "strike", s.UNDERLINE = "underline", s.ITALIC = "italic", s.CODE = "code", s.LINK = "link", s.ANCHOR = "anchor", s.STYLED = "styled", s.SUPERSCRIPT = "superscript", s.SUBSCRIPT = "subscript", s.TEXT_STYLE = "textStyle", s.HIGHLIGHT = "highlight", s))(T || {}), X = /* @__PURE__ */ ((s) => (s.TEXT = "text", s))(X || {}), I = /* @__PURE__ */ ((s) => (s.URL = "url", s.STORY = "story", s.ASSET = "asset", s.EMAIL = "email", s))(I || {});
const Xe = [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
], Qe = (s = {}) => Object.keys(s).map((e) => `${e}="${s[e]}"`).join(" "), Ze = (s = {}) => Object.keys(s).map((e) => `${e}: ${s[e]}`).join("; ");
function et(s) {
  return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
const q = (s) => Object.fromEntries(Object.entries(s).filter(([e, t]) => t !== void 0));
function V(s, e = {}, t) {
  const r = Qe(e), o = r ? `${s} ${r}` : s, n = Array.isArray(t) ? t.join("") : t || "";
  if (s) {
    if (Xe.includes(s))
      return `<${o}>`;
  } else return n;
  return `<${o}>${n}</${s}>`;
}
function tt(s = {}) {
  let e = 0;
  const {
    renderFn: t = V,
    textFn: r = et,
    resolvers: o = {},
    optimizeImages: n = !1,
    keyedResolvers: i = !1
  } = s, l = t !== V, a = (c) => (g) => {
    const m = g.attrs || {};
    return i && (m.key = `${c}-${e}`), t(c, m, g.children || null);
  }, h = (c) => {
    const { src: g, alt: m, title: k, srcset: R, sizes: $ } = c.attrs || {};
    let w = g, S = {};
    if (n) {
      const { src: oe, attrs: ne } = We(g, n);
      w = oe, S = ne;
    }
    i && (S = {
      ...S,
      key: `img-${e}`
    });
    const se = {
      src: w,
      alt: m,
      title: k,
      srcset: R,
      sizes: $,
      ...S
    };
    return t("img", q(se));
  }, u = (c) => {
    const { level: g, ...m } = c.attrs || {}, k = {
      ...m
    };
    return i && (k.key = `h${g}-${e}`), t(`h${g}`, k, c.children);
  }, d = (c) => {
    var g, m, k, R;
    const $ = t("img", {
      src: (g = c.attrs) == null ? void 0 : g.fallbackImage,
      alt: (m = c.attrs) == null ? void 0 : m.alt,
      style: "width: 1.25em; height: 1.25em; vertical-align: text-top",
      draggable: "false",
      loading: "lazy"
    }), w = {
      "data-type": "emoji",
      "data-name": (k = c.attrs) == null ? void 0 : k.name,
      "data-emoji": (R = c.attrs) == null ? void 0 : R.emoji
    };
    return i && (w.key = `emoji-${e}`), t("span", w, $);
  }, f = (c) => t("pre", {
    ...c.attrs,
    key: `code-${e}`
  }, t("code", { key: `code-${e}` }, c.children || "")), b = (c, g = !1) => ({ text: m, attrs: k }) => {
    const { class: R, id: $, ...w } = k || {}, S = g ? {
      class: R,
      id: $,
      style: Ze(w) || void 0
    } : k || {};
    return i && (S.key = `${c}-${e}`), t(c, q(S), m);
  }, y = (c) => N(c), _ = (c) => {
    const { marks: g, ...m } = c;
    return "text" in c ? g ? g.reduce(
      (k, R) => y({ ...R, text: k }),
      // Fix: Ensure render function returns a string
      y({ ...m, children: m.children })
      // Fix: Cast children to string
    ) : r(m.text) : "";
  }, j = (c) => {
    const { linktype: g, href: m, anchor: k, ...R } = c.attrs || {};
    let $ = "";
    switch (g) {
      case I.ASSET:
      case I.URL:
        $ = m;
        break;
      case I.EMAIL:
        $ = `mailto:${m}`;
        break;
      case I.STORY:
        $ = m, k && ($ = `${$}#${k}`);
        break;
      default:
        $ = m;
        break;
    }
    const w = { ...R };
    return $ && (w.href = $), i && (w.key = `a-${e}`), t("a", w, c.text);
  }, te = (c) => {
    var g, m;
    return console.warn("[StoryblokRichtText] - BLOK resolver is not available for vanilla usage"), t("span", {
      blok: (g = c == null ? void 0 : c.attrs) == null ? void 0 : g.body[0],
      id: (m = c.attrs) == null ? void 0 : m.id,
      key: `component-${e}`,
      style: "display: none"
    });
  }, re = new Map([
    [v.DOCUMENT, a("")],
    [v.HEADING, u],
    [v.PARAGRAPH, a("p")],
    [v.UL_LIST, a("ul")],
    [v.OL_LIST, a("ol")],
    [v.LIST_ITEM, a("li")],
    [v.IMAGE, h],
    [v.EMOJI, d],
    [v.CODE_BLOCK, f],
    [v.HR, a("hr")],
    [v.BR, a("br")],
    [v.QUOTE, a("blockquote")],
    [v.COMPONENT, te],
    [X.TEXT, _],
    [T.LINK, j],
    [T.ANCHOR, j],
    [T.STYLED, b("span", !0)],
    [T.BOLD, b("strong")],
    [T.TEXT_STYLE, b("span", !0)],
    [T.ITALIC, b("em")],
    [T.UNDERLINE, b("u")],
    [T.STRIKE, b("s")],
    [T.CODE, b("code")],
    [T.SUPERSCRIPT, b("sup")],
    [T.SUBSCRIPT, b("sub")],
    [T.HIGHLIGHT, b("mark")],
    ...Object.entries(o).map(([c, g]) => [c, g])
  ]);
  function A(c) {
    e += 1;
    const g = re.get(c.type);
    if (!g)
      return console.error("<Storyblok>", `No resolver found for node type ${c.type}`), "";
    if (c.type === "text")
      return g(c);
    const m = c.content ? c.content.map(N) : void 0;
    return g({
      ...c,
      children: m
      // Fix: Update the type of 'children' to Node[]
    });
  }
  function N(c) {
    return c.type === "doc" ? l ? c.content.map(A) : c.content.map(A).join("") : Array.isArray(c) ? c.map(A) : A(c);
  }
  return {
    render: N
  };
}
let U, G = "https://app.storyblok.com/f/storyblok-v2-latest.js";
const rt = (s, e, t = {}) => {
  var r;
  const o = !(typeof window > "u") && typeof window.storyblokRegisterEvent < "u", n = new URL((r = window.location) == null ? void 0 : r.href).searchParams.get(
    "_storyblok"
  ), i = n !== null && +n === s;
  if (!(!o || !i)) {
    if (!s) {
      console.warn("Story ID is not defined. Please provide a valid ID.");
      return;
    }
    window.storyblokRegisterEvent(() => {
      new window.StoryblokBridge(t).on(["input", "published", "change"], (l) => {
        var a;
        l && (l.action === "input" && ((a = l.story) == null ? void 0 : a.id) === s ? e(l.story) : (l.action === "change" || l.action === "published") && l.storyId === s && window.location.reload());
      });
    });
  }
}, Q = (s, e) => {
  s.addNode("blok", (t) => {
    let r = "";
    return t.attrs.body.forEach((o) => {
      r += e(o.component, o);
    }), {
      html: r
    };
  });
}, st = (s = {}) => {
  var e, t;
  const {
    bridge: r,
    accessToken: o,
    use: n = [],
    apiOptions: i = {},
    richText: l = {},
    bridgeUrl: a
  } = s;
  i.accessToken = i.accessToken || o;
  const h = { bridge: r, apiOptions: i };
  let u = {};
  n.forEach((f) => {
    u = { ...u, ...f(h) };
  }), a && (G = a);
  const d = !(typeof window > "u") && ((t = (e = window.location) == null ? void 0 : e.search) == null ? void 0 : t.includes("_storyblok_tk"));
  return r !== !1 && d && de(G), U = new P(l.schema), l.resolver && Q(U, l.resolver), u;
}, ot = (s) => {
  var e;
  return !s || !((e = s == null ? void 0 : s.content) != null && e.some((t) => t.content || t.type === "blok" || t.type === "horizontal_rule"));
}, ut = (s, e, t) => {
  let r = t || U;
  if (!r) {
    console.error(
      "Please initialize the Storyblok SDK before calling the renderRichText function"
    );
    return;
  }
  return ot(s) ? "" : (e && (r = new P(e.schema), e.resolver && Q(r, e.resolver)), r.render(s, {}, !1));
}, Z = /* @__PURE__ */ K({
  __name: "StoryblokComponent",
  props: {
    blok: {}
  },
  setup(s, { expose: e }) {
    const t = s, r = O();
    e({
      value: r
    });
    const o = typeof M(t.blok.component) != "string", n = ie("VueSDKOptions"), i = O(t.blok.component);
    return !o && n && (n.enableFallbackComponent ? (i.value = n.customFallbackComponent ?? "FallbackComponent", typeof M(i.value) == "string" && console.error(
      `Is the Fallback component "${i.value}" registered properly?`
    )) : console.error(
      `Component could not be found for blok "${t.blok.component}"! Is it defined in main.ts as "app.component("${t.blok.component}", ${t.blok.component});"?`
    )), (l, a) => (J(), Y(M(i.value), ae({
      ref_key: "blokRef",
      ref: r
    }, { ...l.$props, ...l.$attrs }), null, 16));
  }
}), nt = (s) => {
  var e, t;
  return W(
    Z,
    {
      blok: (e = s == null ? void 0 : s.attrs) == null ? void 0 : e.body[0],
      id: (t = s.attrs) == null ? void 0 : t.id
    },
    s.children
  );
};
function it(s) {
  const e = {
    renderFn: W,
    textFn: le,
    keyedResolvers: !0,
    resolvers: {
      [v.COMPONENT]: nt,
      ...s.resolvers
    }
  };
  return tt(e);
}
const at = /* @__PURE__ */ K({
  __name: "StoryblokRichText",
  props: {
    doc: {},
    resolvers: {}
  },
  setup(s) {
    const e = s, t = O(), r = () => t.value;
    return ce(
      [e.doc, e.resolvers],
      ([o, n]) => {
        const { render: i } = it({
          resolvers: n ?? {}
        });
        t.value = i(o);
      },
      {
        immediate: !0
      }
    ), (o, n) => (J(), Y(r));
  }
}), lt = {
  beforeMount(s, e) {
    if (e.value) {
      const t = Ye(e.value);
      Object.keys(t).length > 0 && (s.setAttribute("data-blok-c", t["data-blok-c"]), s.setAttribute("data-blok-uid", t["data-blok-uid"]), s.classList.add("storyblok__outline"));
    }
  }
}, ee = (s) => {
  console.error(`You can't use ${s} if you're not loading apiPlugin. Please provide it on StoryblokVue initialization.
    `);
};
let x = null;
const dt = () => (x || ee("useStoryblokApi"), x), pt = async (s, e = {}, t = {}) => {
  const r = O(null);
  if (t.resolveRelations = t.resolveRelations ?? e.resolve_relations, t.resolveLinks = t.resolveLinks ?? e.resolve_links, he(() => {
    r.value && r.value.id && rt(
      r.value.id,
      (o) => r.value = o,
      t
    );
  }), x) {
    const { data: o } = await x.get(
      `cdn/stories/${s}`,
      e
    );
    r.value = o.story;
  } else
    ee("useStoryblok");
  return r;
}, gt = {
  install(s, e = {}) {
    s.directive("editable", lt), s.component("StoryblokComponent", Z), s.component("StoryblokRichText", at), e.enableFallbackComponent && !e.customFallbackComponent && s.component(
      "FallbackComponent",
      ue(() => import("./FallbackComponent-U_HRL08c.js"))
    );
    const { storyblokApi: t } = st(e);
    x = t || null, s.provide("VueSDKOptions", e);
  }
};
export {
  v as BlockTypes,
  T as MarkTypes,
  P as RichTextResolver,
  Be as RichTextSchema,
  Z as StoryblokComponent,
  at as StoryblokRichText,
  gt as StoryblokVue,
  X as TextTypes,
  ht as apiPlugin,
  ut as renderRichText,
  tt as richTextResolver,
  pt as useStoryblok,
  dt as useStoryblokApi,
  rt as useStoryblokBridge,
  it as useStoryblokRichText
};
